
STM32_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008468  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  080085f8  080085f8  000185f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008808  08008808  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08008808  08008808  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008808  08008808  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008808  08008808  00018808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800880c  0800880c  0001880c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00001548  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001558  20001558  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001abe1  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000371c  00000000  00000000  0003ac21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  0003e340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012e0  00000000  00000000  0003f798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020b68  00000000  00000000  00040a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018a90  00000000  00000000  000615e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c90d0  00000000  00000000  0007a070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00143140  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005664  00000000  00000000  00143194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080085e0 	.word	0x080085e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080085e0 	.word	0x080085e0

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <vApplicationGetIdleTaskMemory+0x30>)
 8000a22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	2000002c 	.word	0x2000002c
 8000a3c:	20000080 	.word	0x20000080

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b5b0      	push	{r4, r5, r7, lr}
 8000a42:	b0c0      	sub	sp, #256	; 0x100
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a46:	f000 ffa1 	bl	800198c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4a:	f000 f957 	bl	8000cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4e:	f000 fa85 	bl	8000f5c <MX_GPIO_Init>
  MX_I2C1_SMBUS_Init();
 8000a52:	f000 fa27 	bl	8000ea4 <MX_I2C1_SMBUS_Init>
  MX_ADC1_Init();
 8000a56:	f000 f9b5 	bl	8000dc4 <MX_ADC1_Init>
  MX_USB_PCD_Init();
 8000a5a:	f000 fa5d 	bl	8000f18 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  //preconfigure the ADC to change channels
	sConfig2.Rank = ADC_REGULAR_RANK_1;
 8000a5e:	4b89      	ldr	r3, [pc, #548]	; (8000c84 <main+0x244>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	605a      	str	r2, [r3, #4]
	sConfig2.SingleDiff = ADC_SINGLE_ENDED;
 8000a64:	4b87      	ldr	r3, [pc, #540]	; (8000c84 <main+0x244>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
	sConfig2.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000a6a:	4b86      	ldr	r3, [pc, #536]	; (8000c84 <main+0x244>)
 8000a6c:	2205      	movs	r2, #5
 8000a6e:	609a      	str	r2, [r3, #8]
	sConfig2.OffsetNumber = ADC_OFFSET_NONE;
 8000a70:	4b84      	ldr	r3, [pc, #528]	; (8000c84 <main+0x244>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
	sConfig2.Offset = 0;
 8000a76:	4b83      	ldr	r3, [pc, #524]	; (8000c84 <main+0x244>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  // PCB data initialization
  PCB pcb;
  pcb.PCBUniqueID=PCBuniqueID;
 8000a7c:	2328      	movs	r3, #40	; 0x28
 8000a7e:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
  pcb.NumberOfSensors=Numberofsensors;
 8000a82:	2302      	movs	r3, #2
 8000a84:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
  strcpy(pcb.ManufacturingDate,Manufacturingdate);
 8000a88:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000a8c:	3303      	adds	r3, #3
 8000a8e:	497e      	ldr	r1, [pc, #504]	; (8000c88 <main+0x248>)
 8000a90:	461a      	mov	r2, r3
 8000a92:	460b      	mov	r3, r1
 8000a94:	cb03      	ldmia	r3!, {r0, r1}
 8000a96:	6010      	str	r0, [r2, #0]
 8000a98:	6051      	str	r1, [r2, #4]
 8000a9a:	8819      	ldrh	r1, [r3, #0]
 8000a9c:	789b      	ldrb	r3, [r3, #2]
 8000a9e:	8111      	strh	r1, [r2, #8]
 8000aa0:	7293      	strb	r3, [r2, #10]
  pcb.PCBCapabilities=temperature_degC*8 + temperaturePCB_degC*4 + humidity_percent*2 + absolutePressure_kPa;
 8000aa2:	230f      	movs	r3, #15
 8000aa4:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MutexADC1 */
  osMutexDef(MutexADC1);
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000aae:	2300      	movs	r3, #0
 8000ab0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MutexADC1Handle = osMutexCreate(osMutex(MutexADC1));
 8000ab4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f005 f9d8 	bl	8005e6e <osMutexCreate>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	4a72      	ldr	r2, [pc, #456]	; (8000c8c <main+0x24c>)
 8000ac2:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of SemI2C */
  osSemaphoreDef(SemI2C);
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000aca:	2300      	movs	r3, #0
 8000acc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  SemI2CHandle = osSemaphoreCreate(osSemaphore(SemI2C), 1);
 8000ad0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f005 fa66 	bl	8005fa8 <osSemaphoreCreate>
 8000adc:	4603      	mov	r3, r0
 8000ade:	4a6c      	ldr	r2, [pc, #432]	; (8000c90 <main+0x250>)
 8000ae0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01_I2C */
  osThreadDef(Task01_I2C, StartTask01_I2C, osPriorityRealtime, 0, 128);
 8000ae2:	4b6c      	ldr	r3, [pc, #432]	; (8000c94 <main+0x254>)
 8000ae4:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8000ae8:	461d      	mov	r5, r3
 8000aea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000af2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01_I2CHandle = osThreadCreate(osThread(Task01_I2C), NULL);
 8000af6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f005 f956 	bl	8005dae <osThreadCreate>
 8000b02:	4603      	mov	r3, r0
 8000b04:	4a64      	ldr	r2, [pc, #400]	; (8000c98 <main+0x258>)
 8000b06:	6013      	str	r3, [r2, #0]

  /* definition and creation of IDLE */
  osThreadDef(IDLE, StartTaskIDLE, osPriorityIdle, 0, 128);
 8000b08:	4b64      	ldr	r3, [pc, #400]	; (8000c9c <main+0x25c>)
 8000b0a:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000b0e:	461d      	mov	r5, r3
 8000b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IDLEHandle = osThreadCreate(osThread(IDLE), (void*) "hola");
 8000b1c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000b20:	495f      	ldr	r1, [pc, #380]	; (8000ca0 <main+0x260>)
 8000b22:	4618      	mov	r0, r3
 8000b24:	f005 f943 	bl	8005dae <osThreadCreate>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	4a5e      	ldr	r2, [pc, #376]	; (8000ca4 <main+0x264>)
 8000b2c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  /* definition and creation of Task02 */
  if(temperature_degC){
	osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 128);
 8000b2e:	4b5e      	ldr	r3, [pc, #376]	; (8000ca8 <main+0x268>)
 8000b30:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000b34:	461d      	mov	r5, r3
 8000b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task02Handle = osThreadCreate(osThread(Task02), NULL);
 8000b42:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f005 f930 	bl	8005dae <osThreadCreate>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4a56      	ldr	r2, [pc, #344]	; (8000cac <main+0x26c>)
 8000b52:	6013      	str	r3, [r2, #0]
  }
  /* definition and creation of Task03 */
  if(temperaturePCB_degC){
	osThreadDef(Task03, StartTask03, osPriorityNormal, 0, 128);
 8000b54:	4b56      	ldr	r3, [pc, #344]	; (8000cb0 <main+0x270>)
 8000b56:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000b5a:	461d      	mov	r5, r3
 8000b5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task03Handle = osThreadCreate(osThread(Task03), NULL);
 8000b68:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f005 f91d 	bl	8005dae <osThreadCreate>
 8000b74:	4603      	mov	r3, r0
 8000b76:	4a4f      	ldr	r2, [pc, #316]	; (8000cb4 <main+0x274>)
 8000b78:	6013      	str	r3, [r2, #0]
  }
  /* definition and creation of Task04 */
  if(humidity_percent){
	osThreadDef(Task04, StartTask04, osPriorityNormal, 0, 128);
 8000b7a:	4b4f      	ldr	r3, [pc, #316]	; (8000cb8 <main+0x278>)
 8000b7c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000b80:	461d      	mov	r5, r3
 8000b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task04Handle = osThreadCreate(osThread(Task04), NULL);
 8000b8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b92:	2100      	movs	r1, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f005 f90a 	bl	8005dae <osThreadCreate>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	4a47      	ldr	r2, [pc, #284]	; (8000cbc <main+0x27c>)
 8000b9e:	6013      	str	r3, [r2, #0]
  }
  /* definition and creation of Task05 */
  if(absolutePressure_kPa){
	osThreadDef(Task05, StartTask05, osPriorityNormal, 0, 128);
 8000ba0:	4b47      	ldr	r3, [pc, #284]	; (8000cc0 <main+0x280>)
 8000ba2:	f107 041c 	add.w	r4, r7, #28
 8000ba6:	461d      	mov	r5, r3
 8000ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task05Handle = osThreadCreate(osThread(Task05), NULL);
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f005 f8f7 	bl	8005dae <osThreadCreate>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4a40      	ldr	r2, [pc, #256]	; (8000cc4 <main+0x284>)
 8000bc4:	6013      	str	r3, [r2, #0]
  }
  /* definition and creation of TaskN01 */
  //Sensor initialization
  	strcpy(MatrizSensor[0].Sensor_name,Sensor01_name);
 8000bc6:	4b40      	ldr	r3, [pc, #256]	; (8000cc8 <main+0x288>)
 8000bc8:	4a40      	ldr	r2, [pc, #256]	; (8000ccc <main+0x28c>)
 8000bca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bce:	6018      	str	r0, [r3, #0]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	7019      	strb	r1, [r3, #0]
  	strcpy(MatrizSensor[0].Sensor_type,Sensor01_type);
 8000bd4:	4b3e      	ldr	r3, [pc, #248]	; (8000cd0 <main+0x290>)
 8000bd6:	4a3f      	ldr	r2, [pc, #252]	; (8000cd4 <main+0x294>)
 8000bd8:	6810      	ldr	r0, [r2, #0]
 8000bda:	6018      	str	r0, [r3, #0]
 8000bdc:	7912      	ldrb	r2, [r2, #4]
 8000bde:	711a      	strb	r2, [r3, #4]
  	strcpy(MatrizSensor[0].Main_gas,Sensor01_Main_gas);
 8000be0:	4b3d      	ldr	r3, [pc, #244]	; (8000cd8 <main+0x298>)
 8000be2:	4a3e      	ldr	r2, [pc, #248]	; (8000cdc <main+0x29c>)
 8000be4:	6810      	ldr	r0, [r2, #0]
 8000be6:	6018      	str	r0, [r3, #0]
 8000be8:	8891      	ldrh	r1, [r2, #4]
 8000bea:	7992      	ldrb	r2, [r2, #6]
 8000bec:	8099      	strh	r1, [r3, #4]
 8000bee:	719a      	strb	r2, [r3, #6]
  	MatrizSensor[0].Response_time=Sensor01_Response_time;
 8000bf0:	4b35      	ldr	r3, [pc, #212]	; (8000cc8 <main+0x288>)
 8000bf2:	220a      	movs	r2, #10
 8000bf4:	85da      	strh	r2, [r3, #46]	; 0x2e
  	MatrizSensor[0].channel=Sensor01_ADC_Channel;
 8000bf6:	4b34      	ldr	r3, [pc, #208]	; (8000cc8 <main+0x288>)
 8000bf8:	2206      	movs	r2, #6
 8000bfa:	635a      	str	r2, [r3, #52]	; 0x34
	osThreadDef(TaskN01, StartTaskN, osPriorityNormal, 0, 128);
 8000bfc:	4b38      	ldr	r3, [pc, #224]	; (8000ce0 <main+0x2a0>)
 8000bfe:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000c02:	461d      	mov	r5, r3
 8000c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskN01Handle = osThreadCreate(osThread(TaskN01), (void*) 0);
 8000c10:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f005 f8c9 	bl	8005dae <osThreadCreate>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	4a31      	ldr	r2, [pc, #196]	; (8000ce4 <main+0x2a4>)
 8000c20:	6013      	str	r3, [r2, #0]
  /* definition and creation of TaskN02 */
  if(Numberofsensors>1){
	//Sensor initialization
	strcpy(MatrizSensor[1].Sensor_name,Sensor02_name);
 8000c22:	4b31      	ldr	r3, [pc, #196]	; (8000ce8 <main+0x2a8>)
 8000c24:	4a29      	ldr	r2, [pc, #164]	; (8000ccc <main+0x28c>)
 8000c26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c2a:	6018      	str	r0, [r3, #0]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	7019      	strb	r1, [r3, #0]
	strcpy(MatrizSensor[1].Sensor_type,Sensor02_type);
 8000c30:	4b2e      	ldr	r3, [pc, #184]	; (8000cec <main+0x2ac>)
 8000c32:	4a28      	ldr	r2, [pc, #160]	; (8000cd4 <main+0x294>)
 8000c34:	6810      	ldr	r0, [r2, #0]
 8000c36:	6018      	str	r0, [r3, #0]
 8000c38:	7912      	ldrb	r2, [r2, #4]
 8000c3a:	711a      	strb	r2, [r3, #4]
	strcpy(MatrizSensor[1].Main_gas,Sensor02_Main_gas);
 8000c3c:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <main+0x2b0>)
 8000c3e:	4a27      	ldr	r2, [pc, #156]	; (8000cdc <main+0x29c>)
 8000c40:	6810      	ldr	r0, [r2, #0]
 8000c42:	6018      	str	r0, [r3, #0]
 8000c44:	8891      	ldrh	r1, [r2, #4]
 8000c46:	7992      	ldrb	r2, [r2, #6]
 8000c48:	8099      	strh	r1, [r3, #4]
 8000c4a:	719a      	strb	r2, [r3, #6]
	MatrizSensor[1].Response_time=Sensor02_Response_time;
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <main+0x288>)
 8000c4e:	220a      	movs	r2, #10
 8000c50:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	MatrizSensor[1].channel=Sensor02_ADC_Channel;
 8000c54:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <main+0x288>)
 8000c56:	2206      	movs	r2, #6
 8000c58:	66da      	str	r2, [r3, #108]	; 0x6c
	osThreadDef(TaskN02, StartTaskN, osPriorityNormal, 0, 128);
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	4a25      	ldr	r2, [pc, #148]	; (8000cf4 <main+0x2b4>)
 8000c5e:	461c      	mov	r4, r3
 8000c60:	4615      	mov	r5, r2
 8000c62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskN02Handle = osThreadCreate(osThread(TaskN02), (void*) 1);
 8000c6e:	463b      	mov	r3, r7
 8000c70:	2101      	movs	r1, #1
 8000c72:	4618      	mov	r0, r3
 8000c74:	f005 f89b 	bl	8005dae <osThreadCreate>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	4a1f      	ldr	r2, [pc, #124]	; (8000cf8 <main+0x2b8>)
 8000c7c:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c7e:	f005 f88f 	bl	8005da0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <main+0x242>
 8000c84:	20000280 	.word	0x20000280
 8000c88:	0800863c 	.word	0x0800863c
 8000c8c:	20000fe8 	.word	0x20000fe8
 8000c90:	20001034 	.word	0x20001034
 8000c94:	08008668 	.word	0x08008668
 8000c98:	200010d0 	.word	0x200010d0
 8000c9c:	08008684 	.word	0x08008684
 8000ca0:	08008648 	.word	0x08008648
 8000ca4:	200010c8 	.word	0x200010c8
 8000ca8:	080086a0 	.word	0x080086a0
 8000cac:	20000fe4 	.word	0x20000fe4
 8000cb0:	080086bc 	.word	0x080086bc
 8000cb4:	20001144 	.word	0x20001144
 8000cb8:	080086d8 	.word	0x080086d8
 8000cbc:	20001038 	.word	0x20001038
 8000cc0:	080086f4 	.word	0x080086f4
 8000cc4:	2000119c 	.word	0x2000119c
 8000cc8:	200010d4 	.word	0x200010d4
 8000ccc:	08008650 	.word	0x08008650
 8000cd0:	200010df 	.word	0x200010df
 8000cd4:	08008658 	.word	0x08008658
 8000cd8:	200010ed 	.word	0x200010ed
 8000cdc:	08008660 	.word	0x08008660
 8000ce0:	08008710 	.word	0x08008710
 8000ce4:	2000102c 	.word	0x2000102c
 8000ce8:	2000110c 	.word	0x2000110c
 8000cec:	20001117 	.word	0x20001117
 8000cf0:	20001125 	.word	0x20001125
 8000cf4:	0800872c 	.word	0x0800872c
 8000cf8:	2000103c 	.word	0x2000103c

08000cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b09e      	sub	sp, #120	; 0x78
 8000d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d06:	2228      	movs	r2, #40	; 0x28
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f007 fc60 	bl	80085d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d20:	463b      	mov	r3, r7
 8000d22:	223c      	movs	r2, #60	; 0x3c
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f007 fc52 	bl	80085d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d30:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d34:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d3e:	2310      	movs	r3, #16
 8000d40:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d42:	2302      	movs	r3, #2
 8000d44:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d4a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000d4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d50:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d56:	4618      	mov	r0, r3
 8000d58:	f002 fb3a 	bl	80033d0 <HAL_RCC_OscConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000d62:	f000 fc27 	bl	80015b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d66:	230f      	movs	r3, #15
 8000d68:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d80:	2101      	movs	r1, #1
 8000d82:	4618      	mov	r0, r3
 8000d84:	f003 fa2c 	bl	80041e0 <HAL_RCC_ClockConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d8e:	f000 fc11 	bl	80015b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <SystemClock_Config+0xc4>)
 8000d94:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000d96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000da0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000da4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da6:	463b      	mov	r3, r7
 8000da8:	4618      	mov	r0, r3
 8000daa:	f003 fc5f 	bl	800466c <HAL_RCCEx_PeriphCLKConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000db4:	f000 fbfe 	bl	80015b4 <Error_Handler>
  }
}
 8000db8:	bf00      	nop
 8000dba:	3778      	adds	r7, #120	; 0x78
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	000200a0 	.word	0x000200a0

08000dc4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
 8000de4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000de6:	4b2e      	ldr	r3, [pc, #184]	; (8000ea0 <MX_ADC1_Init+0xdc>)
 8000de8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dee:	4b2c      	ldr	r3, [pc, #176]	; (8000ea0 <MX_ADC1_Init+0xdc>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000df4:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <MX_ADC1_Init+0xdc>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dfa:	4b29      	ldr	r3, [pc, #164]	; (8000ea0 <MX_ADC1_Init+0xdc>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e00:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <MX_ADC1_Init+0xdc>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e06:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <MX_ADC1_Init+0xdc>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e0e:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <MX_ADC1_Init+0xdc>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e14:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <MX_ADC1_Init+0xdc>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e1a:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <MX_ADC1_Init+0xdc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e20:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <MX_ADC1_Init+0xdc>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e26:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <MX_ADC1_Init+0xdc>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <MX_ADC1_Init+0xdc>)
 8000e30:	2204      	movs	r2, #4
 8000e32:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e34:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <MX_ADC1_Init+0xdc>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e3a:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <MX_ADC1_Init+0xdc>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e40:	4817      	ldr	r0, [pc, #92]	; (8000ea0 <MX_ADC1_Init+0xdc>)
 8000e42:	f000 fdd9 	bl	80019f8 <HAL_ADC_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000e4c:	f000 fbb2 	bl	80015b4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4811      	ldr	r0, [pc, #68]	; (8000ea0 <MX_ADC1_Init+0xdc>)
 8000e5c:	f001 fcf4 	bl	8002848 <HAL_ADCEx_MultiModeConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000e66:	f000 fba5 	bl	80015b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000e76:	2305      	movs	r3, #5
 8000e78:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	4619      	mov	r1, r3
 8000e86:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <MX_ADC1_Init+0xdc>)
 8000e88:	f001 f9f2 	bl	8002270 <HAL_ADC_ConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000e92:	f000 fb8f 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	3728      	adds	r7, #40	; 0x28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20001078 	.word	0x20001078

08000ea4 <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <MX_I2C1_SMBUS_Init+0x68>)
 8000eaa:	4a19      	ldr	r2, [pc, #100]	; (8000f10 <MX_I2C1_SMBUS_Init+0x6c>)
 8000eac:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x2000090E;
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <MX_I2C1_SMBUS_Init+0x68>)
 8000eb0:	4a18      	ldr	r2, [pc, #96]	; (8000f14 <MX_I2C1_SMBUS_Init+0x70>)
 8000eb2:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000eb4:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <MX_I2C1_SMBUS_Init+0x68>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <MX_I2C1_SMBUS_Init+0x68>)
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <MX_I2C1_SMBUS_Init+0x68>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_I2C1_SMBUS_Init+0x68>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_I2C1_SMBUS_Init+0x68>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_I2C1_SMBUS_Init+0x68>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_I2C1_SMBUS_Init+0x68>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <MX_I2C1_SMBUS_Init+0x68>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_I2C1_SMBUS_Init+0x68>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <MX_I2C1_SMBUS_Init+0x68>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x00008061;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_I2C1_SMBUS_Init+0x68>)
 8000ef2:	f248 0261 	movw	r2, #32865	; 0x8061
 8000ef6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8000ef8:	4804      	ldr	r0, [pc, #16]	; (8000f0c <MX_I2C1_SMBUS_Init+0x68>)
 8000efa:	f003 fd67 	bl	80049cc <HAL_SMBUS_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000f04:	f000 fb56 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	2000114c 	.word	0x2000114c
 8000f10:	40005400 	.word	0x40005400
 8000f14:	2000090e 	.word	0x2000090e

08000f18 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <MX_USB_PCD_Init+0x3c>)
 8000f1e:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <MX_USB_PCD_Init+0x40>)
 8000f20:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MX_USB_PCD_Init+0x3c>)
 8000f24:	2208      	movs	r2, #8
 8000f26:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <MX_USB_PCD_Init+0x3c>)
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_USB_PCD_Init+0x3c>)
 8000f30:	2202      	movs	r2, #2
 8000f32:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <MX_USB_PCD_Init+0x3c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_USB_PCD_Init+0x3c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000f40:	4804      	ldr	r0, [pc, #16]	; (8000f54 <MX_USB_PCD_Init+0x3c>)
 8000f42:	f002 f967 	bl	8003214 <HAL_PCD_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000f4c:	f000 fb32 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20001218 	.word	0x20001218
 8000f58:	40005c00 	.word	0x40005c00

08000f5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f72:	4b40      	ldr	r3, [pc, #256]	; (8001074 <MX_GPIO_Init+0x118>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	4a3f      	ldr	r2, [pc, #252]	; (8001074 <MX_GPIO_Init+0x118>)
 8000f78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f7c:	6153      	str	r3, [r2, #20]
 8000f7e:	4b3d      	ldr	r3, [pc, #244]	; (8001074 <MX_GPIO_Init+0x118>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8a:	4b3a      	ldr	r3, [pc, #232]	; (8001074 <MX_GPIO_Init+0x118>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	4a39      	ldr	r2, [pc, #228]	; (8001074 <MX_GPIO_Init+0x118>)
 8000f90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f94:	6153      	str	r3, [r2, #20]
 8000f96:	4b37      	ldr	r3, [pc, #220]	; (8001074 <MX_GPIO_Init+0x118>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fa2:	4b34      	ldr	r3, [pc, #208]	; (8001074 <MX_GPIO_Init+0x118>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	4a33      	ldr	r2, [pc, #204]	; (8001074 <MX_GPIO_Init+0x118>)
 8000fa8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fac:	6153      	str	r3, [r2, #20]
 8000fae:	4b31      	ldr	r3, [pc, #196]	; (8001074 <MX_GPIO_Init+0x118>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b2e      	ldr	r3, [pc, #184]	; (8001074 <MX_GPIO_Init+0x118>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	4a2d      	ldr	r2, [pc, #180]	; (8001074 <MX_GPIO_Init+0x118>)
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc4:	6153      	str	r3, [r2, #20]
 8000fc6:	4b2b      	ldr	r3, [pc, #172]	; (8001074 <MX_GPIO_Init+0x118>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	4b28      	ldr	r3, [pc, #160]	; (8001074 <MX_GPIO_Init+0x118>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	4a27      	ldr	r2, [pc, #156]	; (8001074 <MX_GPIO_Init+0x118>)
 8000fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fdc:	6153      	str	r3, [r2, #20]
 8000fde:	4b25      	ldr	r3, [pc, #148]	; (8001074 <MX_GPIO_Init+0x118>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000fea:	2200      	movs	r2, #0
 8000fec:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000ff0:	4821      	ldr	r0, [pc, #132]	; (8001078 <MX_GPIO_Init+0x11c>)
 8000ff2:	f002 f8f7 	bl	80031e4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000ff6:	2337      	movs	r3, #55	; 0x37
 8000ff8:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ffa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	481b      	ldr	r0, [pc, #108]	; (8001078 <MX_GPIO_Init+0x11c>)
 800100c:	f001 ff70 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001010:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001014:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	4813      	ldr	r0, [pc, #76]	; (8001078 <MX_GPIO_Init+0x11c>)
 800102a:	f001 ff61 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800102e:	2301      	movs	r3, #1
 8001030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001044:	f001 ff54 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001048:	23e0      	movs	r3, #224	; 0xe0
 800104a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001058:	2305      	movs	r3, #5
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001066:	f001 ff43 	bl	8002ef0 <HAL_GPIO_Init>

}
 800106a:	bf00      	nop
 800106c:	3728      	adds	r7, #40	; 0x28
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000
 8001078:	48001000 	.word	0x48001000
 800107c:	00000000 	.word	0x00000000

08001080 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  //Sensor initialization
	strcpy(ExternalTemperatureSensor.Sensor_name,"SHT31-ARP-B");
 8001088:	4b31      	ldr	r3, [pc, #196]	; (8001150 <StartTask02+0xd0>)
 800108a:	4a32      	ldr	r2, [pc, #200]	; (8001154 <StartTask02+0xd4>)
 800108c:	ca07      	ldmia	r2, {r0, r1, r2}
 800108e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcpy(ExternalTemperatureSensor.Sensor_type,"Temperature");
 8001092:	4a31      	ldr	r2, [pc, #196]	; (8001158 <StartTask02+0xd8>)
 8001094:	4b31      	ldr	r3, [pc, #196]	; (800115c <StartTask02+0xdc>)
 8001096:	4614      	mov	r4, r2
 8001098:	cb07      	ldmia	r3!, {r0, r1, r2}
 800109a:	6020      	str	r0, [r4, #0]
 800109c:	6061      	str	r1, [r4, #4]
 800109e:	60a2      	str	r2, [r4, #8]
	strcpy(ExternalTemperatureSensor.Main_gas,"....");
 80010a0:	4b2f      	ldr	r3, [pc, #188]	; (8001160 <StartTask02+0xe0>)
 80010a2:	4a30      	ldr	r2, [pc, #192]	; (8001164 <StartTask02+0xe4>)
 80010a4:	6810      	ldr	r0, [r2, #0]
 80010a6:	6018      	str	r0, [r3, #0]
 80010a8:	7912      	ldrb	r2, [r2, #4]
 80010aa:	711a      	strb	r2, [r3, #4]
	ExternalTemperatureSensor.Response_time=20;
 80010ac:	4b28      	ldr	r3, [pc, #160]	; (8001150 <StartTask02+0xd0>)
 80010ae:	2214      	movs	r2, #20
 80010b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  /* Infinite loop */
  for(;;)
  {
	/*use of the ADC with mutex, this so that only one task can use the ADC at a time*/
	osMutexWait(MutexADC1Handle, 100);
 80010b2:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <StartTask02+0xe8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2164      	movs	r1, #100	; 0x64
 80010b8:	4618      	mov	r0, r3
 80010ba:	f004 fef1 	bl	8005ea0 <osMutexWait>
	sConfig2.Channel=ADC_CHANNEL_2;
 80010be:	4b2b      	ldr	r3, [pc, #172]	; (800116c <StartTask02+0xec>)
 80010c0:	2202      	movs	r2, #2
 80010c2:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig2) != HAL_OK){Error_Handler();}
 80010c4:	4929      	ldr	r1, [pc, #164]	; (800116c <StartTask02+0xec>)
 80010c6:	482a      	ldr	r0, [pc, #168]	; (8001170 <StartTask02+0xf0>)
 80010c8:	f001 f8d2 	bl	8002270 <HAL_ADC_ConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <StartTask02+0x56>
 80010d2:	f000 fa6f 	bl	80015b4 <Error_Handler>
	// Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 80010d6:	4826      	ldr	r0, [pc, #152]	; (8001170 <StartTask02+0xf0>)
 80010d8:	f000 fe6e 	bl	8001db8 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc1, 1);
 80010dc:	2101      	movs	r1, #1
 80010de:	4824      	ldr	r0, [pc, #144]	; (8001170 <StartTask02+0xf0>)
 80010e0:	f000 ffb6 	bl	8002050 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result
	uint32_t Vadc=HAL_ADC_GetValue(&hadc1);
 80010e4:	4822      	ldr	r0, [pc, #136]	; (8001170 <StartTask02+0xf0>)
 80010e6:	f001 f8b5 	bl	8002254 <HAL_ADC_GetValue>
 80010ea:	60f8      	str	r0, [r7, #12]
	// stop The ADC
	HAL_ADC_Stop(&hadc1);
 80010ec:	4820      	ldr	r0, [pc, #128]	; (8001170 <StartTask02+0xf0>)
 80010ee:	f000 ff79 	bl	8001fe4 <HAL_ADC_Stop>
	osMutexRelease(MutexADC1Handle);
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <StartTask02+0xe8>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f004 ff20 	bl	8005f3c <osMutexRelease>
	//The temperature formula is T=-66.875 + 218.75*Vt/Vd
	//where Vd=3.3, Vt=adc*3.3/2^12
	//The temperature formula is T=-66.875 + 218.75*Vadc/4096
	ExternalTemperatureSensor.Data=-66.875+(53.40576172e-3*Vadc);
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f7ff f9a9 	bl	8000454 <__aeabi_ui2d>
 8001102:	a30f      	add	r3, pc, #60	; (adr r3, 8001140 <StartTask02+0xc0>)
 8001104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001108:	f7ff fa1e 	bl	8000548 <__aeabi_dmul>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	a30c      	add	r3, pc, #48	; (adr r3, 8001148 <StartTask02+0xc8>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	f7ff f85d 	bl	80001d8 <__aeabi_dsub>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f7ff fc21 	bl	800096c <__aeabi_d2f>
 800112a:	4603      	mov	r3, r0
 800112c:	4a08      	ldr	r2, [pc, #32]	; (8001150 <StartTask02+0xd0>)
 800112e:	6313      	str	r3, [r2, #48]	; 0x30
    osDelay(ExternalTemperatureSensor.Response_time);
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <StartTask02+0xd0>)
 8001132:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001136:	4618      	mov	r0, r3
 8001138:	f004 fe85 	bl	8005e46 <osDelay>
  {
 800113c:	e7b9      	b.n	80010b2 <StartTask02+0x32>
 800113e:	bf00      	nop
 8001140:	0002bfb0 	.word	0x0002bfb0
 8001144:	3fab5800 	.word	0x3fab5800
 8001148:	00000000 	.word	0x00000000
 800114c:	4050b800 	.word	0x4050b800
 8001150:	200011e0 	.word	0x200011e0
 8001154:	08008748 	.word	0x08008748
 8001158:	200011eb 	.word	0x200011eb
 800115c:	08008754 	.word	0x08008754
 8001160:	200011f9 	.word	0x200011f9
 8001164:	08008760 	.word	0x08008760
 8001168:	20000fe8 	.word	0x20000fe8
 800116c:	20000280 	.word	0x20000280
 8001170:	20001078 	.word	0x20001078
 8001174:	00000000 	.word	0x00000000

08001178 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  //Sensor initialization
	strcpy(InternalTemperatureSensor.Sensor_name,"Internal");
 8001180:	4b3f      	ldr	r3, [pc, #252]	; (8001280 <StartTask03+0x108>)
 8001182:	4a40      	ldr	r2, [pc, #256]	; (8001284 <StartTask03+0x10c>)
 8001184:	ca07      	ldmia	r2, {r0, r1, r2}
 8001186:	c303      	stmia	r3!, {r0, r1}
 8001188:	701a      	strb	r2, [r3, #0]
	strcpy(InternalTemperatureSensor.Sensor_type,"Micro-controller temperature ");
 800118a:	4a3f      	ldr	r2, [pc, #252]	; (8001288 <StartTask03+0x110>)
 800118c:	4b3f      	ldr	r3, [pc, #252]	; (800128c <StartTask03+0x114>)
 800118e:	4615      	mov	r5, r2
 8001190:	461c      	mov	r4, r3
 8001192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001194:	6028      	str	r0, [r5, #0]
 8001196:	6069      	str	r1, [r5, #4]
 8001198:	60aa      	str	r2, [r5, #8]
 800119a:	60eb      	str	r3, [r5, #12]
 800119c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800119e:	6128      	str	r0, [r5, #16]
 80011a0:	6169      	str	r1, [r5, #20]
 80011a2:	61aa      	str	r2, [r5, #24]
 80011a4:	8823      	ldrh	r3, [r4, #0]
 80011a6:	83ab      	strh	r3, [r5, #28]
	strcpy(InternalTemperatureSensor.Main_gas,"....");
 80011a8:	4b39      	ldr	r3, [pc, #228]	; (8001290 <StartTask03+0x118>)
 80011aa:	4a3a      	ldr	r2, [pc, #232]	; (8001294 <StartTask03+0x11c>)
 80011ac:	6810      	ldr	r0, [r2, #0]
 80011ae:	6018      	str	r0, [r3, #0]
 80011b0:	7912      	ldrb	r2, [r2, #4]
 80011b2:	711a      	strb	r2, [r3, #4]
	InternalTemperatureSensor.Response_time=10;
 80011b4:	4b32      	ldr	r3, [pc, #200]	; (8001280 <StartTask03+0x108>)
 80011b6:	220a      	movs	r2, #10
 80011b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  /* Infinite loop */
  for(;;)
  {
    /*use of the ADC with mutex, this so that only one task can use the ADC at a time*/
	osMutexWait(MutexADC1Handle, 100);
 80011ba:	4b37      	ldr	r3, [pc, #220]	; (8001298 <StartTask03+0x120>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2164      	movs	r1, #100	; 0x64
 80011c0:	4618      	mov	r0, r3
 80011c2:	f004 fe6d 	bl	8005ea0 <osMutexWait>
	sConfig2.Channel=ADC_CHANNEL_TEMPSENSOR;
 80011c6:	4b35      	ldr	r3, [pc, #212]	; (800129c <StartTask03+0x124>)
 80011c8:	2210      	movs	r2, #16
 80011ca:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig2) != HAL_OK){Error_Handler();}
 80011cc:	4933      	ldr	r1, [pc, #204]	; (800129c <StartTask03+0x124>)
 80011ce:	4834      	ldr	r0, [pc, #208]	; (80012a0 <StartTask03+0x128>)
 80011d0:	f001 f84e 	bl	8002270 <HAL_ADC_ConfigChannel>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <StartTask03+0x66>
 80011da:	f000 f9eb 	bl	80015b4 <Error_Handler>
	// Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 80011de:	4830      	ldr	r0, [pc, #192]	; (80012a0 <StartTask03+0x128>)
 80011e0:	f000 fdea 	bl	8001db8 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc1, 1);
 80011e4:	2101      	movs	r1, #1
 80011e6:	482e      	ldr	r0, [pc, #184]	; (80012a0 <StartTask03+0x128>)
 80011e8:	f000 ff32 	bl	8002050 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result
	uint32_t Vadc=HAL_ADC_GetValue(&hadc1);
 80011ec:	482c      	ldr	r0, [pc, #176]	; (80012a0 <StartTask03+0x128>)
 80011ee:	f001 f831 	bl	8002254 <HAL_ADC_GetValue>
 80011f2:	60f8      	str	r0, [r7, #12]
	// stop The ADC
	HAL_ADC_Stop(&hadc1);
 80011f4:	482a      	ldr	r0, [pc, #168]	; (80012a0 <StartTask03+0x128>)
 80011f6:	f000 fef5 	bl	8001fe4 <HAL_ADC_Stop>
	osMutexRelease(MutexADC1Handle);
 80011fa:	4b27      	ldr	r3, [pc, #156]	; (8001298 <StartTask03+0x120>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f004 fe9c 	bl	8005f3c <osMutexRelease>
	//The formula is Temperature (in °C) = {(V25 – Vadc) / Avg_Slope} + 25
	//where V25=1.43, Avg_Slope=4.3, Vadc=adc*3.3/4096
	InternalTemperatureSensor.Data=((1.43 - (805.6640625e-6 * Vadc)) / 4.3) + 25;
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f7ff f925 	bl	8000454 <__aeabi_ui2d>
 800120a:	a317      	add	r3, pc, #92	; (adr r3, 8001268 <StartTask03+0xf0>)
 800120c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001210:	f7ff f99a 	bl	8000548 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	a115      	add	r1, pc, #84	; (adr r1, 8001270 <StartTask03+0xf8>)
 800121a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800121e:	f7fe ffdb 	bl	80001d8 <__aeabi_dsub>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	a313      	add	r3, pc, #76	; (adr r3, 8001278 <StartTask03+0x100>)
 800122c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001230:	f7ff fab4 	bl	800079c <__aeabi_ddiv>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4610      	mov	r0, r2
 800123a:	4619      	mov	r1, r3
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <StartTask03+0x12c>)
 8001242:	f7fe ffcb 	bl	80001dc <__adddf3>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff fb8d 	bl	800096c <__aeabi_d2f>
 8001252:	4603      	mov	r3, r0
 8001254:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <StartTask03+0x108>)
 8001256:	6313      	str	r3, [r2, #48]	; 0x30
    osDelay(InternalTemperatureSensor.Response_time);
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <StartTask03+0x108>)
 800125a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800125e:	4618      	mov	r0, r3
 8001260:	f004 fdf1 	bl	8005e46 <osDelay>
  {
 8001264:	e7a9      	b.n	80011ba <StartTask03+0x42>
 8001266:	bf00      	nop
 8001268:	66666666 	.word	0x66666666
 800126c:	3f4a6666 	.word	0x3f4a6666
 8001270:	ae147ae1 	.word	0xae147ae1
 8001274:	3ff6e147 	.word	0x3ff6e147
 8001278:	33333333 	.word	0x33333333
 800127c:	40113333 	.word	0x40113333
 8001280:	200011a0 	.word	0x200011a0
 8001284:	08008768 	.word	0x08008768
 8001288:	200011ab 	.word	0x200011ab
 800128c:	08008774 	.word	0x08008774
 8001290:	200011b9 	.word	0x200011b9
 8001294:	08008760 	.word	0x08008760
 8001298:	20000fe8 	.word	0x20000fe8
 800129c:	20000280 	.word	0x20000280
 80012a0:	20001078 	.word	0x20001078
 80012a4:	40390000 	.word	0x40390000

080012a8 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  //Sensor initialization
	strcpy(HumiditySensor.Sensor_name,"SHT31-ARP-B");
 80012b0:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <StartTask04+0xc8>)
 80012b2:	4a30      	ldr	r2, [pc, #192]	; (8001374 <StartTask04+0xcc>)
 80012b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80012b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcpy(HumiditySensor.Sensor_type,"Humidity:");
 80012ba:	4a2f      	ldr	r2, [pc, #188]	; (8001378 <StartTask04+0xd0>)
 80012bc:	4b2f      	ldr	r3, [pc, #188]	; (800137c <StartTask04+0xd4>)
 80012be:	cb03      	ldmia	r3!, {r0, r1}
 80012c0:	6010      	str	r0, [r2, #0]
 80012c2:	6051      	str	r1, [r2, #4]
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	8113      	strh	r3, [r2, #8]
	strcpy(HumiditySensor.Main_gas,"....");
 80012c8:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <StartTask04+0xd8>)
 80012ca:	4a2e      	ldr	r2, [pc, #184]	; (8001384 <StartTask04+0xdc>)
 80012cc:	6810      	ldr	r0, [r2, #0]
 80012ce:	6018      	str	r0, [r3, #0]
 80012d0:	7912      	ldrb	r2, [r2, #4]
 80012d2:	711a      	strb	r2, [r3, #4]
	HumiditySensor.Response_time=200;
 80012d4:	4b26      	ldr	r3, [pc, #152]	; (8001370 <StartTask04+0xc8>)
 80012d6:	22c8      	movs	r2, #200	; 0xc8
 80012d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  /* Infinite loop */
  for(;;)
  {
    /*use of the ADC with mutex, this so that only one task can use the ADC at a time*/
	osMutexWait(MutexADC1Handle, 100);
 80012da:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <StartTask04+0xe0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2164      	movs	r1, #100	; 0x64
 80012e0:	4618      	mov	r0, r3
 80012e2:	f004 fddd 	bl	8005ea0 <osMutexWait>
	sConfig2.Channel=ADC_CHANNEL_3;
 80012e6:	4b29      	ldr	r3, [pc, #164]	; (800138c <StartTask04+0xe4>)
 80012e8:	2203      	movs	r2, #3
 80012ea:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig2) != HAL_OK){Error_Handler();}
 80012ec:	4927      	ldr	r1, [pc, #156]	; (800138c <StartTask04+0xe4>)
 80012ee:	4828      	ldr	r0, [pc, #160]	; (8001390 <StartTask04+0xe8>)
 80012f0:	f000 ffbe 	bl	8002270 <HAL_ADC_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <StartTask04+0x56>
 80012fa:	f000 f95b 	bl	80015b4 <Error_Handler>
	// Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 80012fe:	4824      	ldr	r0, [pc, #144]	; (8001390 <StartTask04+0xe8>)
 8001300:	f000 fd5a 	bl	8001db8 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc1, 1);
 8001304:	2101      	movs	r1, #1
 8001306:	4822      	ldr	r0, [pc, #136]	; (8001390 <StartTask04+0xe8>)
 8001308:	f000 fea2 	bl	8002050 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result
	uint32_t Vadc=HAL_ADC_GetValue(&hadc1);
 800130c:	4820      	ldr	r0, [pc, #128]	; (8001390 <StartTask04+0xe8>)
 800130e:	f000 ffa1 	bl	8002254 <HAL_ADC_GetValue>
 8001312:	60f8      	str	r0, [r7, #12]
	// stop The ADC
	HAL_ADC_Stop(&hadc1);
 8001314:	481e      	ldr	r0, [pc, #120]	; (8001390 <StartTask04+0xe8>)
 8001316:	f000 fe65 	bl	8001fe4 <HAL_ADC_Stop>
	osMutexRelease(MutexADC1Handle);
 800131a:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <StartTask04+0xe0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f004 fe0c 	bl	8005f3c <osMutexRelease>
	//The temperature formula is Rh=-12.5 + 125*Vt/Vd
	//where Vd=3.3, Vt=adc*3.3/2^12
	//The temperature formula is Rh=-12.5 + 125*Vadc/4096
    HumiditySensor.Data=-12.5 + (30.51757813e-3*Vadc);
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f7ff f895 	bl	8000454 <__aeabi_ui2d>
 800132a:	a30f      	add	r3, pc, #60	; (adr r3, 8001368 <StartTask04+0xc0>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f90a 	bl	8000548 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4610      	mov	r0, r2
 800133a:	4619      	mov	r1, r3
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <StartTask04+0xec>)
 8001342:	f7fe ff49 	bl	80001d8 <__aeabi_dsub>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4610      	mov	r0, r2
 800134c:	4619      	mov	r1, r3
 800134e:	f7ff fb0d 	bl	800096c <__aeabi_d2f>
 8001352:	4603      	mov	r3, r0
 8001354:	4a06      	ldr	r2, [pc, #24]	; (8001370 <StartTask04+0xc8>)
 8001356:	6313      	str	r3, [r2, #48]	; 0x30
    osDelay(HumiditySensor.Response_time);
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <StartTask04+0xc8>)
 800135a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800135e:	4618      	mov	r0, r3
 8001360:	f004 fd71 	bl	8005e46 <osDelay>
  {
 8001364:	e7b9      	b.n	80012da <StartTask04+0x32>
 8001366:	bf00      	nop
 8001368:	0015fd80 	.word	0x0015fd80
 800136c:	3f9f4000 	.word	0x3f9f4000
 8001370:	20001040 	.word	0x20001040
 8001374:	08008748 	.word	0x08008748
 8001378:	2000104b 	.word	0x2000104b
 800137c:	08008794 	.word	0x08008794
 8001380:	20001059 	.word	0x20001059
 8001384:	08008760 	.word	0x08008760
 8001388:	20000fe8 	.word	0x20000fe8
 800138c:	20000280 	.word	0x20000280
 8001390:	20001078 	.word	0x20001078
 8001394:	40290000 	.word	0x40290000

08001398 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  //Sensor initialization
	strcpy(PressureSensor.Sensor_name,"KP229-E2701-XTMA1");
 80013a0:	4a35      	ldr	r2, [pc, #212]	; (8001478 <StartTask05+0xe0>)
 80013a2:	4b36      	ldr	r3, [pc, #216]	; (800147c <StartTask05+0xe4>)
 80013a4:	4614      	mov	r4, r2
 80013a6:	461d      	mov	r5, r3
 80013a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ac:	682b      	ldr	r3, [r5, #0]
 80013ae:	8023      	strh	r3, [r4, #0]
	strcpy(PressureSensor.Sensor_type,"Absolute pressure");
 80013b0:	4a33      	ldr	r2, [pc, #204]	; (8001480 <StartTask05+0xe8>)
 80013b2:	4b34      	ldr	r3, [pc, #208]	; (8001484 <StartTask05+0xec>)
 80013b4:	4615      	mov	r5, r2
 80013b6:	461c      	mov	r4, r3
 80013b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ba:	6028      	str	r0, [r5, #0]
 80013bc:	6069      	str	r1, [r5, #4]
 80013be:	60aa      	str	r2, [r5, #8]
 80013c0:	60eb      	str	r3, [r5, #12]
 80013c2:	8823      	ldrh	r3, [r4, #0]
 80013c4:	822b      	strh	r3, [r5, #16]
	strcpy(PressureSensor.Main_gas,"....");
 80013c6:	4b30      	ldr	r3, [pc, #192]	; (8001488 <StartTask05+0xf0>)
 80013c8:	4a30      	ldr	r2, [pc, #192]	; (800148c <StartTask05+0xf4>)
 80013ca:	6810      	ldr	r0, [r2, #0]
 80013cc:	6018      	str	r0, [r3, #0]
 80013ce:	7912      	ldrb	r2, [r2, #4]
 80013d0:	711a      	strb	r2, [r3, #4]
	PressureSensor.Response_time=1;
 80013d2:	4b29      	ldr	r3, [pc, #164]	; (8001478 <StartTask05+0xe0>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  /* Infinite loop */
  for(;;)
  {
    /*use of the ADC with mutex, this so that only one task can use the ADC at a time*/
	osMutexWait(MutexADC1Handle, 100);
 80013d8:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <StartTask05+0xf8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2164      	movs	r1, #100	; 0x64
 80013de:	4618      	mov	r0, r3
 80013e0:	f004 fd5e 	bl	8005ea0 <osMutexWait>
	sConfig2.Channel=ADC_CHANNEL_4;
 80013e4:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <StartTask05+0xfc>)
 80013e6:	2204      	movs	r2, #4
 80013e8:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig2) != HAL_OK){Error_Handler();}
 80013ea:	492a      	ldr	r1, [pc, #168]	; (8001494 <StartTask05+0xfc>)
 80013ec:	482a      	ldr	r0, [pc, #168]	; (8001498 <StartTask05+0x100>)
 80013ee:	f000 ff3f 	bl	8002270 <HAL_ADC_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <StartTask05+0x64>
 80013f8:	f000 f8dc 	bl	80015b4 <Error_Handler>
	// Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 80013fc:	4826      	ldr	r0, [pc, #152]	; (8001498 <StartTask05+0x100>)
 80013fe:	f000 fcdb 	bl	8001db8 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc1, 1);
 8001402:	2101      	movs	r1, #1
 8001404:	4824      	ldr	r0, [pc, #144]	; (8001498 <StartTask05+0x100>)
 8001406:	f000 fe23 	bl	8002050 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result
	uint32_t Vadc=HAL_ADC_GetValue(&hadc1);
 800140a:	4823      	ldr	r0, [pc, #140]	; (8001498 <StartTask05+0x100>)
 800140c:	f000 ff22 	bl	8002254 <HAL_ADC_GetValue>
 8001410:	60f8      	str	r0, [r7, #12]
	// stop The ADC
	HAL_ADC_Stop(&hadc1);
 8001412:	4821      	ldr	r0, [pc, #132]	; (8001498 <StartTask05+0x100>)
 8001414:	f000 fde6 	bl	8001fe4 <HAL_ADC_Stop>
	osMutexRelease(MutexADC1Handle);
 8001418:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <StartTask05+0xf8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f004 fd8d 	bl	8005f3c <osMutexRelease>
	//The temperature formula is P=(Vp/Vdd-b)/a
	//where Vp=adc*3.3/2^12, Vdd=3.3, b=0.05069, a=0.00293.
	//The temperature formula is P=-b/a+adc/a/4096=-17.3003413+83.32444539e-3*adc
	PressureSensor.Data=-17.3003413 + (83.32444539e-3*Vadc);
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f7ff f816 	bl	8000454 <__aeabi_ui2d>
 8001428:	a30f      	add	r3, pc, #60	; (adr r3, 8001468 <StartTask05+0xd0>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	f7ff f88b 	bl	8000548 <__aeabi_dmul>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	a30d      	add	r3, pc, #52	; (adr r3, 8001470 <StartTask05+0xd8>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	f7fe feca 	bl	80001d8 <__aeabi_dsub>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4610      	mov	r0, r2
 800144a:	4619      	mov	r1, r3
 800144c:	f7ff fa8e 	bl	800096c <__aeabi_d2f>
 8001450:	4603      	mov	r3, r0
 8001452:	4a09      	ldr	r2, [pc, #36]	; (8001478 <StartTask05+0xe0>)
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
    osDelay(PressureSensor.Response_time);
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <StartTask05+0xe0>)
 8001458:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800145c:	4618      	mov	r0, r3
 800145e:	f004 fcf2 	bl	8005e46 <osDelay>
  {
 8001462:	e7b9      	b.n	80013d8 <StartTask05+0x40>
 8001464:	f3af 8000 	nop.w
 8001468:	37e84a94 	.word	0x37e84a94
 800146c:	3fb554c0 	.word	0x3fb554c0
 8001470:	2add235c 	.word	0x2add235c
 8001474:	40314ce3 	.word	0x40314ce3
 8001478:	20000ff4 	.word	0x20000ff4
 800147c:	080087a0 	.word	0x080087a0
 8001480:	20000fff 	.word	0x20000fff
 8001484:	080087b4 	.word	0x080087b4
 8001488:	2000100d 	.word	0x2000100d
 800148c:	08008760 	.word	0x08008760
 8001490:	20000fe8 	.word	0x20000fe8
 8001494:	20000280 	.word	0x20000280
 8001498:	20001078 	.word	0x20001078
 800149c:	00000000 	.word	0x00000000

080014a0 <StartTaskN>:
*
* @retval None
*/
/* USER CODE END Header_StartTaskN */
void StartTaskN(void const * argument)
{
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
    /*use of the ADC with mutex, this so that only one task can use the ADC at a time*/
	osMutexWait(MutexADC1Handle, 100);
 80014a8:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <StartTaskN+0xc0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2164      	movs	r1, #100	; 0x64
 80014ae:	4618      	mov	r0, r3
 80014b0:	f004 fcf6 	bl	8005ea0 <osMutexWait>
	sConfig2.Channel=MatrizSensor[(int)argument].channel;
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	492b      	ldr	r1, [pc, #172]	; (8001564 <StartTaskN+0xc4>)
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	1a9b      	subs	r3, r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	440b      	add	r3, r1
 80014c2:	3334      	adds	r3, #52	; 0x34
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a28      	ldr	r2, [pc, #160]	; (8001568 <StartTaskN+0xc8>)
 80014c8:	6013      	str	r3, [r2, #0]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig2) != HAL_OK){Error_Handler();}
 80014ca:	4927      	ldr	r1, [pc, #156]	; (8001568 <StartTaskN+0xc8>)
 80014cc:	4827      	ldr	r0, [pc, #156]	; (800156c <StartTaskN+0xcc>)
 80014ce:	f000 fecf 	bl	8002270 <HAL_ADC_ConfigChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <StartTaskN+0x3c>
 80014d8:	f000 f86c 	bl	80015b4 <Error_Handler>
	// Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 80014dc:	4823      	ldr	r0, [pc, #140]	; (800156c <StartTaskN+0xcc>)
 80014de:	f000 fc6b 	bl	8001db8 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc1, 1);
 80014e2:	2101      	movs	r1, #1
 80014e4:	4821      	ldr	r0, [pc, #132]	; (800156c <StartTaskN+0xcc>)
 80014e6:	f000 fdb3 	bl	8002050 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result
	uint32_t Vadc=HAL_ADC_GetValue(&hadc1);
 80014ea:	4820      	ldr	r0, [pc, #128]	; (800156c <StartTaskN+0xcc>)
 80014ec:	f000 feb2 	bl	8002254 <HAL_ADC_GetValue>
 80014f0:	60f8      	str	r0, [r7, #12]
	// stop The ADC
	HAL_ADC_Stop(&hadc1);
 80014f2:	481e      	ldr	r0, [pc, #120]	; (800156c <StartTaskN+0xcc>)
 80014f4:	f000 fd76 	bl	8001fe4 <HAL_ADC_Stop>
	osMutexRelease(MutexADC1Handle);
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <StartTaskN+0xc0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f004 fd1d 	bl	8005f3c <osMutexRelease>
	//The voltage value in miliVolts is Vadc=adc*3300/4096
	MatrizSensor[(int)argument].Data=805.6640625e-3*Vadc;
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f7fe ffa6 	bl	8000454 <__aeabi_ui2d>
 8001508:	a313      	add	r3, pc, #76	; (adr r3, 8001558 <StartTaskN+0xb8>)
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	f7ff f81b 	bl	8000548 <__aeabi_dmul>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	687c      	ldr	r4, [r7, #4]
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	f7ff fa26 	bl	800096c <__aeabi_d2f>
 8001520:	4602      	mov	r2, r0
 8001522:	4910      	ldr	r1, [pc, #64]	; (8001564 <StartTaskN+0xc4>)
 8001524:	4623      	mov	r3, r4
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	1b1b      	subs	r3, r3, r4
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	440b      	add	r3, r1
 800152e:	3330      	adds	r3, #48	; 0x30
 8001530:	601a      	str	r2, [r3, #0]
    osDelay(MatrizSensor[(int)argument].Response_time*1000);
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	490b      	ldr	r1, [pc, #44]	; (8001564 <StartTaskN+0xc4>)
 8001536:	4613      	mov	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	1a9b      	subs	r3, r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	440b      	add	r3, r1
 8001540:	332e      	adds	r3, #46	; 0x2e
 8001542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001546:	461a      	mov	r2, r3
 8001548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154c:	fb03 f302 	mul.w	r3, r3, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f004 fc78 	bl	8005e46 <osDelay>
  {
 8001556:	e7a7      	b.n	80014a8 <StartTaskN+0x8>
 8001558:	00000000 	.word	0x00000000
 800155c:	3fe9c800 	.word	0x3fe9c800
 8001560:	20000fe8 	.word	0x20000fe8
 8001564:	200010d4 	.word	0x200010d4
 8001568:	20000280 	.word	0x20000280
 800156c:	20001078 	.word	0x20001078

08001570 <StartTask01_I2C>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01_I2C */
void StartTask01_I2C(void const * argument)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001578:	2001      	movs	r0, #1
 800157a:	f004 fc64 	bl	8005e46 <osDelay>
 800157e:	e7fb      	b.n	8001578 <StartTask01_I2C+0x8>

08001580 <StartTaskIDLE>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskIDLE */
void StartTaskIDLE(void const * argument)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskIDLE */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001588:	2001      	movs	r0, #1
 800158a:	f004 fc5c 	bl	8005e46 <osDelay>
 800158e:	e7fb      	b.n	8001588 <StartTaskIDLE+0x8>

08001590 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d101      	bne.n	80015a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015a2:	f000 fa09 	bl	80019b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40001000 	.word	0x40001000

080015b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b8:	b672      	cpsid	i
}
 80015ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015bc:	e7fe      	b.n	80015bc <Error_Handler+0x8>
	...

080015c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_MspInit+0x4c>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	4a10      	ldr	r2, [pc, #64]	; (800160c <HAL_MspInit+0x4c>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6193      	str	r3, [r2, #24]
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_MspInit+0x4c>)
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_MspInit+0x4c>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <HAL_MspInit+0x4c>)
 80015e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e8:	61d3      	str	r3, [r2, #28]
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_MspInit+0x4c>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	210f      	movs	r1, #15
 80015fa:	f06f 0001 	mvn.w	r0, #1
 80015fe:	f001 fc4d 	bl	8002e9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000

08001610 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08c      	sub	sp, #48	; 0x30
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001630:	d154      	bne.n	80016dc <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001632:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <HAL_ADC_MspInit+0xd4>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	4a2b      	ldr	r2, [pc, #172]	; (80016e4 <HAL_ADC_MspInit+0xd4>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163c:	6153      	str	r3, [r2, #20]
 800163e:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <HAL_ADC_MspInit+0xd4>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	61bb      	str	r3, [r7, #24]
 8001648:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800164a:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <HAL_ADC_MspInit+0xd4>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	4a25      	ldr	r2, [pc, #148]	; (80016e4 <HAL_ADC_MspInit+0xd4>)
 8001650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001654:	6153      	str	r3, [r2, #20]
 8001656:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <HAL_ADC_MspInit+0xd4>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <HAL_ADC_MspInit+0xd4>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	4a1f      	ldr	r2, [pc, #124]	; (80016e4 <HAL_ADC_MspInit+0xd4>)
 8001668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166c:	6153      	str	r3, [r2, #20]
 800166e:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <HAL_ADC_MspInit+0xd4>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800167a:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <HAL_ADC_MspInit+0xd4>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <HAL_ADC_MspInit+0xd4>)
 8001680:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001684:	6153      	str	r3, [r2, #20]
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_ADC_MspInit+0xd4>)
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001692:	230f      	movs	r3, #15
 8001694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001696:	2303      	movs	r3, #3
 8001698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169e:	f107 031c 	add.w	r3, r7, #28
 80016a2:	4619      	mov	r1, r3
 80016a4:	4810      	ldr	r0, [pc, #64]	; (80016e8 <HAL_ADC_MspInit+0xd8>)
 80016a6:	f001 fc23 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80016aa:	230e      	movs	r3, #14
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ae:	2303      	movs	r3, #3
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c0:	f001 fc16 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016c4:	2310      	movs	r3, #16
 80016c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c8:	2303      	movs	r3, #3
 80016ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	4619      	mov	r1, r3
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <HAL_ADC_MspInit+0xdc>)
 80016d8:	f001 fc0a 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016dc:	bf00      	nop
 80016de:	3730      	adds	r7, #48	; 0x30
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021000 	.word	0x40021000
 80016e8:	48000800 	.word	0x48000800
 80016ec:	48001400 	.word	0x48001400

080016f0 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(hsmbus->Instance==I2C1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a1b      	ldr	r2, [pc, #108]	; (800177c <HAL_SMBUS_MspInit+0x8c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d12f      	bne.n	8001772 <HAL_SMBUS_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <HAL_SMBUS_MspInit+0x90>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	4a1a      	ldr	r2, [pc, #104]	; (8001780 <HAL_SMBUS_MspInit+0x90>)
 8001718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800171c:	6153      	str	r3, [r2, #20]
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <HAL_SMBUS_MspInit+0x90>)
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800172a:	23c0      	movs	r3, #192	; 0xc0
 800172c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800172e:	2312      	movs	r3, #18
 8001730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001732:	2301      	movs	r3, #1
 8001734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001736:	2303      	movs	r3, #3
 8001738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800173a:	2304      	movs	r3, #4
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	480f      	ldr	r0, [pc, #60]	; (8001784 <HAL_SMBUS_MspInit+0x94>)
 8001746:	f001 fbd3 	bl	8002ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <HAL_SMBUS_MspInit+0x90>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	4a0c      	ldr	r2, [pc, #48]	; (8001780 <HAL_SMBUS_MspInit+0x90>)
 8001750:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001754:	61d3      	str	r3, [r2, #28]
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_SMBUS_MspInit+0x90>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2105      	movs	r1, #5
 8001766:	201f      	movs	r0, #31
 8001768:	f001 fb98 	bl	8002e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800176c:	201f      	movs	r0, #31
 800176e:	f001 fbb1 	bl	8002ed4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001772:	bf00      	nop
 8001774:	3728      	adds	r7, #40	; 0x28
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40005400 	.word	0x40005400
 8001780:	40021000 	.word	0x40021000
 8001784:	48000400 	.word	0x48000400

08001788 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a18      	ldr	r2, [pc, #96]	; (8001808 <HAL_PCD_MspInit+0x80>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d129      	bne.n	80017fe <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	4b18      	ldr	r3, [pc, #96]	; (800180c <HAL_PCD_MspInit+0x84>)
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	4a17      	ldr	r2, [pc, #92]	; (800180c <HAL_PCD_MspInit+0x84>)
 80017b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b4:	6153      	str	r3, [r2, #20]
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_PCD_MspInit+0x84>)
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80017c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80017d4:	230e      	movs	r3, #14
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e2:	f001 fb85 	bl	8002ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_PCD_MspInit+0x84>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	4a08      	ldr	r2, [pc, #32]	; (800180c <HAL_PCD_MspInit+0x84>)
 80017ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017f0:	61d3      	str	r3, [r2, #28]
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_PCD_MspInit+0x84>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80017fe:	bf00      	nop
 8001800:	3728      	adds	r7, #40	; 0x28
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40005c00 	.word	0x40005c00
 800180c:	40021000 	.word	0x40021000

08001810 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08c      	sub	sp, #48	; 0x30
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001820:	2200      	movs	r2, #0
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	2036      	movs	r0, #54	; 0x36
 8001826:	f001 fb39 	bl	8002e9c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800182a:	2036      	movs	r0, #54	; 0x36
 800182c:	f001 fb52 	bl	8002ed4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <HAL_InitTick+0xa0>)
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	4a1e      	ldr	r2, [pc, #120]	; (80018b0 <HAL_InitTick+0xa0>)
 8001836:	f043 0310 	orr.w	r3, r3, #16
 800183a:	61d3      	str	r3, [r2, #28]
 800183c:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <HAL_InitTick+0xa0>)
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	f003 0310 	and.w	r3, r3, #16
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001848:	f107 0210 	add.w	r2, r7, #16
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4611      	mov	r1, r2
 8001852:	4618      	mov	r0, r3
 8001854:	f002 fed8 	bl	8004608 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001858:	f002 feb4 	bl	80045c4 <HAL_RCC_GetPCLK1Freq>
 800185c:	4603      	mov	r3, r0
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001864:	4a13      	ldr	r2, [pc, #76]	; (80018b4 <HAL_InitTick+0xa4>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	0c9b      	lsrs	r3, r3, #18
 800186c:	3b01      	subs	r3, #1
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <HAL_InitTick+0xa8>)
 8001872:	4a12      	ldr	r2, [pc, #72]	; (80018bc <HAL_InitTick+0xac>)
 8001874:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <HAL_InitTick+0xa8>)
 8001878:	f240 32e7 	movw	r2, #999	; 0x3e7
 800187c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800187e:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <HAL_InitTick+0xa8>)
 8001880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001882:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_InitTick+0xa8>)
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_InitTick+0xa8>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001890:	4809      	ldr	r0, [pc, #36]	; (80018b8 <HAL_InitTick+0xa8>)
 8001892:	f003 ff5d 	bl	8005750 <HAL_TIM_Base_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d104      	bne.n	80018a6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800189c:	4806      	ldr	r0, [pc, #24]	; (80018b8 <HAL_InitTick+0xa8>)
 800189e:	f003 ffb9 	bl	8005814 <HAL_TIM_Base_Start_IT>
 80018a2:	4603      	mov	r3, r0
 80018a4:	e000      	b.n	80018a8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3730      	adds	r7, #48	; 0x30
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40021000 	.word	0x40021000
 80018b4:	431bde83 	.word	0x431bde83
 80018b8:	20001508 	.word	0x20001508
 80018bc:	40001000 	.word	0x40001000

080018c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <NMI_Handler+0x4>

080018c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <HardFault_Handler+0x4>

080018cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <MemManage_Handler+0x4>

080018d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d6:	e7fe      	b.n	80018d6 <BusFault_Handler+0x4>

080018d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <UsageFault_Handler+0x4>

080018de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_SMBUS_EV_IRQHandler(&hsmbus1);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <I2C1_EV_IRQHandler+0x10>)
 80018f2:	f003 f923 	bl	8004b3c <HAL_SMBUS_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000114c 	.word	0x2000114c

08001900 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <TIM6_DAC_IRQHandler+0x10>)
 8001906:	f003 ffef 	bl	80058e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20001508 	.word	0x20001508

08001914 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <SystemInit+0x20>)
 800191a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800191e:	4a05      	ldr	r2, [pc, #20]	; (8001934 <SystemInit+0x20>)
 8001920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001970 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800193c:	480d      	ldr	r0, [pc, #52]	; (8001974 <LoopForever+0x6>)
  ldr r1, =_edata
 800193e:	490e      	ldr	r1, [pc, #56]	; (8001978 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001940:	4a0e      	ldr	r2, [pc, #56]	; (800197c <LoopForever+0xe>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001944:	e002      	b.n	800194c <LoopCopyDataInit>

08001946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194a:	3304      	adds	r3, #4

0800194c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800194c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001950:	d3f9      	bcc.n	8001946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001952:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001954:	4c0b      	ldr	r4, [pc, #44]	; (8001984 <LoopForever+0x16>)
  movs r3, #0
 8001956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001958:	e001      	b.n	800195e <LoopFillZerobss>

0800195a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800195c:	3204      	adds	r2, #4

0800195e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001960:	d3fb      	bcc.n	800195a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001962:	f7ff ffd7 	bl	8001914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001966:	f006 fe01 	bl	800856c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800196a:	f7ff f869 	bl	8000a40 <main>

0800196e <LoopForever>:

LoopForever:
    b LoopForever
 800196e:	e7fe      	b.n	800196e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001970:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001978:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800197c:	08008810 	.word	0x08008810
  ldr r2, =_sbss
 8001980:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001984:	20001558 	.word	0x20001558

08001988 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001988:	e7fe      	b.n	8001988 <ADC1_2_IRQHandler>
	...

0800198c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_Init+0x28>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <HAL_Init+0x28>)
 8001996:	f043 0310 	orr.w	r3, r3, #16
 800199a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199c:	2003      	movs	r0, #3
 800199e:	f001 fa72 	bl	8002e86 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a2:	200f      	movs	r0, #15
 80019a4:	f7ff ff34 	bl	8001810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a8:	f7ff fe0a 	bl	80015c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40022000 	.word	0x40022000

080019b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_IncTick+0x20>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_IncTick+0x24>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	4a04      	ldr	r2, [pc, #16]	; (80019dc <HAL_IncTick+0x24>)
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20001554 	.word	0x20001554

080019e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_GetTick+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20001554 	.word	0x20001554

080019f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b09a      	sub	sp, #104	; 0x68
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e1c9      	b.n	8001dac <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f003 0310 	and.w	r3, r3, #16
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d176      	bne.n	8001b18 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d152      	bne.n	8001ad8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff fddf 	bl	8001610 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d13b      	bne.n	8001ad8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f001 f847 	bl	8002af4 <ADC_Disable>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	f003 0310 	and.w	r3, r3, #16
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d12f      	bne.n	8001ad8 <HAL_ADC_Init+0xe0>
 8001a78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d12b      	bne.n	8001ad8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a88:	f023 0302 	bic.w	r3, r3, #2
 8001a8c:	f043 0202 	orr.w	r2, r3, #2
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001aa2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ab2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ab4:	4b86      	ldr	r3, [pc, #536]	; (8001cd0 <HAL_ADC_Init+0x2d8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a86      	ldr	r2, [pc, #536]	; (8001cd4 <HAL_ADC_Init+0x2dc>)
 8001aba:	fba2 2303 	umull	r2, r3, r2, r3
 8001abe:	0c9a      	lsrs	r2, r3, #18
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001aca:	e002      	b.n	8001ad2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1f9      	bne.n	8001acc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d007      	beq.n	8001af6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001af4:	d110      	bne.n	8001b18 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f023 0312 	bic.w	r3, r3, #18
 8001afe:	f043 0210 	orr.w	r2, r3, #16
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	f043 0201 	orr.w	r2, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	f003 0310 	and.w	r3, r3, #16
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f040 8136 	bne.w	8001d92 <HAL_ADC_Init+0x39a>
 8001b26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f040 8131 	bne.w	8001d92 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f040 8129 	bne.w	8001d92 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b48:	f043 0202 	orr.w	r2, r3, #2
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b58:	d004      	beq.n	8001b64 <HAL_ADC_Init+0x16c>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a5e      	ldr	r2, [pc, #376]	; (8001cd8 <HAL_ADC_Init+0x2e0>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d101      	bne.n	8001b68 <HAL_ADC_Init+0x170>
 8001b64:	4b5d      	ldr	r3, [pc, #372]	; (8001cdc <HAL_ADC_Init+0x2e4>)
 8001b66:	e000      	b.n	8001b6a <HAL_ADC_Init+0x172>
 8001b68:	4b5d      	ldr	r3, [pc, #372]	; (8001ce0 <HAL_ADC_Init+0x2e8>)
 8001b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b74:	d102      	bne.n	8001b7c <HAL_ADC_Init+0x184>
 8001b76:	4b58      	ldr	r3, [pc, #352]	; (8001cd8 <HAL_ADC_Init+0x2e0>)
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	e01a      	b.n	8001bb2 <HAL_ADC_Init+0x1ba>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a55      	ldr	r2, [pc, #340]	; (8001cd8 <HAL_ADC_Init+0x2e0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d103      	bne.n	8001b8e <HAL_ADC_Init+0x196>
 8001b86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	e011      	b.n	8001bb2 <HAL_ADC_Init+0x1ba>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a54      	ldr	r2, [pc, #336]	; (8001ce4 <HAL_ADC_Init+0x2ec>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d102      	bne.n	8001b9e <HAL_ADC_Init+0x1a6>
 8001b98:	4b53      	ldr	r3, [pc, #332]	; (8001ce8 <HAL_ADC_Init+0x2f0>)
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	e009      	b.n	8001bb2 <HAL_ADC_Init+0x1ba>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a51      	ldr	r2, [pc, #324]	; (8001ce8 <HAL_ADC_Init+0x2f0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d102      	bne.n	8001bae <HAL_ADC_Init+0x1b6>
 8001ba8:	4b4e      	ldr	r3, [pc, #312]	; (8001ce4 <HAL_ADC_Init+0x2ec>)
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	e001      	b.n	8001bb2 <HAL_ADC_Init+0x1ba>
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d108      	bne.n	8001bd2 <HAL_ADC_Init+0x1da>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_ADC_Init+0x1da>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_ADC_Init+0x1dc>
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d11c      	bne.n	8001c12 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bd8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d010      	beq.n	8001c00 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d107      	bne.n	8001bfa <HAL_ADC_Init+0x202>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d101      	bne.n	8001bfa <HAL_ADC_Init+0x202>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <HAL_ADC_Init+0x204>
 8001bfa:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d108      	bne.n	8001c12 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c10:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	7e5b      	ldrb	r3, [r3, #25]
 8001c16:	035b      	lsls	r3, r3, #13
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c1c:	2a01      	cmp	r2, #1
 8001c1e:	d002      	beq.n	8001c26 <HAL_ADC_Init+0x22e>
 8001c20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c24:	e000      	b.n	8001c28 <HAL_ADC_Init+0x230>
 8001c26:	2200      	movs	r2, #0
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d11b      	bne.n	8001c7e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	7e5b      	ldrb	r3, [r3, #25]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d109      	bne.n	8001c62 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	3b01      	subs	r3, #1
 8001c54:	045a      	lsls	r2, r3, #17
 8001c56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5e:	663b      	str	r3, [r7, #96]	; 0x60
 8001c60:	e00d      	b.n	8001c7e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001c6a:	f043 0220 	orr.w	r2, r3, #32
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	f043 0201 	orr.w	r2, r3, #1
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d03a      	beq.n	8001cfc <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a16      	ldr	r2, [pc, #88]	; (8001ce4 <HAL_ADC_Init+0x2ec>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d004      	beq.n	8001c9a <HAL_ADC_Init+0x2a2>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <HAL_ADC_Init+0x2f0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d128      	bne.n	8001cec <HAL_ADC_Init+0x2f4>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001ca2:	d012      	beq.n	8001cca <HAL_ADC_Init+0x2d2>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cac:	d00a      	beq.n	8001cc4 <HAL_ADC_Init+0x2cc>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001cb6:	d002      	beq.n	8001cbe <HAL_ADC_Init+0x2c6>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbc:	e018      	b.n	8001cf0 <HAL_ADC_Init+0x2f8>
 8001cbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc2:	e015      	b.n	8001cf0 <HAL_ADC_Init+0x2f8>
 8001cc4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001cc8:	e012      	b.n	8001cf0 <HAL_ADC_Init+0x2f8>
 8001cca:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001cce:	e00f      	b.n	8001cf0 <HAL_ADC_Init+0x2f8>
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	431bde83 	.word	0x431bde83
 8001cd8:	50000100 	.word	0x50000100
 8001cdc:	50000300 	.word	0x50000300
 8001ce0:	50000700 	.word	0x50000700
 8001ce4:	50000400 	.word	0x50000400
 8001ce8:	50000500 	.word	0x50000500
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d114      	bne.n	8001d34 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d18:	f023 0302 	bic.w	r3, r3, #2
 8001d1c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	7e1b      	ldrb	r3, [r3, #24]
 8001d22:	039a      	lsls	r2, r3, #14
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d30:	4313      	orrs	r3, r2
 8001d32:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <HAL_ADC_Init+0x3bc>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001d44:	430b      	orrs	r3, r1
 8001d46:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d10c      	bne.n	8001d6a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f023 010f 	bic.w	r1, r3, #15
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	1e5a      	subs	r2, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	631a      	str	r2, [r3, #48]	; 0x30
 8001d68:	e007      	b.n	8001d7a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 020f 	bic.w	r2, r2, #15
 8001d78:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f023 0303 	bic.w	r3, r3, #3
 8001d88:	f043 0201 	orr.w	r2, r3, #1
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	641a      	str	r2, [r3, #64]	; 0x40
 8001d90:	e00a      	b.n	8001da8 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f023 0312 	bic.w	r3, r3, #18
 8001d9a:	f043 0210 	orr.w	r2, r3, #16
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001da2:	2301      	movs	r3, #1
 8001da4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001da8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3768      	adds	r7, #104	; 0x68
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	fff0c007 	.word	0xfff0c007

08001db8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f040 80f9 	bne.w	8001fc6 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_Start+0x2a>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e0f4      	b.n	8001fcc <HAL_ADC_Start+0x214>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fe1e 	bl	8002a2c <ADC_Enable>
 8001df0:	4603      	mov	r3, r0
 8001df2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f040 80e0 	bne.w	8001fbc <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e04:	f023 0301 	bic.w	r3, r3, #1
 8001e08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e18:	d004      	beq.n	8001e24 <HAL_ADC_Start+0x6c>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a6d      	ldr	r2, [pc, #436]	; (8001fd4 <HAL_ADC_Start+0x21c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d106      	bne.n	8001e32 <HAL_ADC_Start+0x7a>
 8001e24:	4b6c      	ldr	r3, [pc, #432]	; (8001fd8 <HAL_ADC_Start+0x220>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 031f 	and.w	r3, r3, #31
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d010      	beq.n	8001e52 <HAL_ADC_Start+0x9a>
 8001e30:	e005      	b.n	8001e3e <HAL_ADC_Start+0x86>
 8001e32:	4b6a      	ldr	r3, [pc, #424]	; (8001fdc <HAL_ADC_Start+0x224>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 031f 	and.w	r3, r3, #31
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d009      	beq.n	8001e52 <HAL_ADC_Start+0x9a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e46:	d004      	beq.n	8001e52 <HAL_ADC_Start+0x9a>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a64      	ldr	r2, [pc, #400]	; (8001fe0 <HAL_ADC_Start+0x228>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d115      	bne.n	8001e7e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d036      	beq.n	8001eda <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001e7c:	e02d      	b.n	8001eda <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e92:	d004      	beq.n	8001e9e <HAL_ADC_Start+0xe6>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a4e      	ldr	r2, [pc, #312]	; (8001fd4 <HAL_ADC_Start+0x21c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d10a      	bne.n	8001eb4 <HAL_ADC_Start+0xfc>
 8001e9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf14      	ite	ne
 8001eac:	2301      	movne	r3, #1
 8001eae:	2300      	moveq	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	e008      	b.n	8001ec6 <HAL_ADC_Start+0x10e>
 8001eb4:	4b4a      	ldr	r3, [pc, #296]	; (8001fe0 <HAL_ADC_Start+0x228>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf14      	ite	ne
 8001ec0:	2301      	movne	r3, #1
 8001ec2:	2300      	moveq	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d007      	beq.n	8001eda <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ed2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ee6:	d106      	bne.n	8001ef6 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eec:	f023 0206 	bic.w	r2, r3, #6
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ef4:	e002      	b.n	8001efc <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	221c      	movs	r2, #28
 8001f0a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f14:	d004      	beq.n	8001f20 <HAL_ADC_Start+0x168>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a2e      	ldr	r2, [pc, #184]	; (8001fd4 <HAL_ADC_Start+0x21c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d106      	bne.n	8001f2e <HAL_ADC_Start+0x176>
 8001f20:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <HAL_ADC_Start+0x220>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d03e      	beq.n	8001faa <HAL_ADC_Start+0x1f2>
 8001f2c:	e005      	b.n	8001f3a <HAL_ADC_Start+0x182>
 8001f2e:	4b2b      	ldr	r3, [pc, #172]	; (8001fdc <HAL_ADC_Start+0x224>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d037      	beq.n	8001faa <HAL_ADC_Start+0x1f2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f42:	d004      	beq.n	8001f4e <HAL_ADC_Start+0x196>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a22      	ldr	r2, [pc, #136]	; (8001fd4 <HAL_ADC_Start+0x21c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d106      	bne.n	8001f5c <HAL_ADC_Start+0x1a4>
 8001f4e:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <HAL_ADC_Start+0x220>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	2b05      	cmp	r3, #5
 8001f58:	d027      	beq.n	8001faa <HAL_ADC_Start+0x1f2>
 8001f5a:	e005      	b.n	8001f68 <HAL_ADC_Start+0x1b0>
 8001f5c:	4b1f      	ldr	r3, [pc, #124]	; (8001fdc <HAL_ADC_Start+0x224>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	d020      	beq.n	8001faa <HAL_ADC_Start+0x1f2>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f70:	d004      	beq.n	8001f7c <HAL_ADC_Start+0x1c4>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a17      	ldr	r2, [pc, #92]	; (8001fd4 <HAL_ADC_Start+0x21c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d106      	bne.n	8001f8a <HAL_ADC_Start+0x1d2>
 8001f7c:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <HAL_ADC_Start+0x220>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 031f 	and.w	r3, r3, #31
 8001f84:	2b09      	cmp	r3, #9
 8001f86:	d010      	beq.n	8001faa <HAL_ADC_Start+0x1f2>
 8001f88:	e005      	b.n	8001f96 <HAL_ADC_Start+0x1de>
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <HAL_ADC_Start+0x224>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 031f 	and.w	r3, r3, #31
 8001f92:	2b09      	cmp	r3, #9
 8001f94:	d009      	beq.n	8001faa <HAL_ADC_Start+0x1f2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f9e:	d004      	beq.n	8001faa <HAL_ADC_Start+0x1f2>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0e      	ldr	r2, [pc, #56]	; (8001fe0 <HAL_ADC_Start+0x228>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d10f      	bne.n	8001fca <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0204 	orr.w	r2, r2, #4
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	e006      	b.n	8001fca <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001fc4:	e001      	b.n	8001fca <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	50000100 	.word	0x50000100
 8001fd8:	50000300 	.word	0x50000300
 8001fdc:	50000700 	.word	0x50000700
 8001fe0:	50000400 	.word	0x50000400

08001fe4 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADC_Stop+0x1a>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e023      	b.n	8002046 <HAL_ADC_Stop+0x62>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002006:	216c      	movs	r1, #108	; 0x6c
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 fdd9 	bl	8002bc0 <ADC_ConversionStop>
 800200e:	4603      	mov	r3, r0
 8002010:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d111      	bne.n	800203c <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 fd6b 	bl	8002af4 <ADC_Disable>
 800201e:	4603      	mov	r3, r0
 8002020:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d109      	bne.n	800203c <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002030:	f023 0301 	bic.w	r3, r3, #1
 8002034:	f043 0201 	orr.w	r2, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002044:	7bfb      	ldrb	r3, [r7, #15]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	2b08      	cmp	r3, #8
 8002064:	d102      	bne.n	800206c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002066:	2308      	movs	r3, #8
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	e03a      	b.n	80020e2 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002074:	d004      	beq.n	8002080 <HAL_ADC_PollForConversion+0x30>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a72      	ldr	r2, [pc, #456]	; (8002244 <HAL_ADC_PollForConversion+0x1f4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d101      	bne.n	8002084 <HAL_ADC_PollForConversion+0x34>
 8002080:	4b71      	ldr	r3, [pc, #452]	; (8002248 <HAL_ADC_PollForConversion+0x1f8>)
 8002082:	e000      	b.n	8002086 <HAL_ADC_PollForConversion+0x36>
 8002084:	4b71      	ldr	r3, [pc, #452]	; (800224c <HAL_ADC_PollForConversion+0x1fc>)
 8002086:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	2b00      	cmp	r3, #0
 8002092:	d112      	bne.n	80020ba <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d11d      	bne.n	80020de <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f043 0220 	orr.w	r2, r3, #32
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e0bf      	b.n	800223a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00b      	beq.n	80020de <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f043 0220 	orr.w	r2, r3, #32
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e0ad      	b.n	800223a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80020de:	230c      	movs	r3, #12
 80020e0:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020ea:	d004      	beq.n	80020f6 <HAL_ADC_PollForConversion+0xa6>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a54      	ldr	r2, [pc, #336]	; (8002244 <HAL_ADC_PollForConversion+0x1f4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d106      	bne.n	8002104 <HAL_ADC_PollForConversion+0xb4>
 80020f6:	4b54      	ldr	r3, [pc, #336]	; (8002248 <HAL_ADC_PollForConversion+0x1f8>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d010      	beq.n	8002124 <HAL_ADC_PollForConversion+0xd4>
 8002102:	e005      	b.n	8002110 <HAL_ADC_PollForConversion+0xc0>
 8002104:	4b51      	ldr	r3, [pc, #324]	; (800224c <HAL_ADC_PollForConversion+0x1fc>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	2b00      	cmp	r3, #0
 800210e:	d009      	beq.n	8002124 <HAL_ADC_PollForConversion+0xd4>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002118:	d004      	beq.n	8002124 <HAL_ADC_PollForConversion+0xd4>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a4c      	ldr	r2, [pc, #304]	; (8002250 <HAL_ADC_PollForConversion+0x200>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d104      	bne.n	800212e <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	e00f      	b.n	800214e <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002136:	d004      	beq.n	8002142 <HAL_ADC_PollForConversion+0xf2>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a41      	ldr	r2, [pc, #260]	; (8002244 <HAL_ADC_PollForConversion+0x1f4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d102      	bne.n	8002148 <HAL_ADC_PollForConversion+0xf8>
 8002142:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002146:	e000      	b.n	800214a <HAL_ADC_PollForConversion+0xfa>
 8002148:	4b41      	ldr	r3, [pc, #260]	; (8002250 <HAL_ADC_PollForConversion+0x200>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800214e:	f7ff fc47 	bl	80019e0 <HAL_GetTick>
 8002152:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002154:	e021      	b.n	800219a <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215c:	d01d      	beq.n	800219a <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d007      	beq.n	8002174 <HAL_ADC_PollForConversion+0x124>
 8002164:	f7ff fc3c 	bl	80019e0 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d212      	bcs.n	800219a <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	4013      	ands	r3, r2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10b      	bne.n	800219a <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f043 0204 	orr.w	r2, r3, #4
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e04f      	b.n	800223a <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0d6      	beq.n	8002156 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d131      	bne.n	8002226 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d12c      	bne.n	8002226 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d125      	bne.n	8002226 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d112      	bne.n	800220e <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d112      	bne.n	8002226 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	f043 0201 	orr.w	r2, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	641a      	str	r2, [r3, #64]	; 0x40
 800220c:	e00b      	b.n	8002226 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f043 0220 	orr.w	r2, r3, #32
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	f043 0201 	orr.w	r2, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d103      	bne.n	8002238 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	50000100 	.word	0x50000100
 8002248:	50000300 	.word	0x50000300
 800224c:	50000700 	.word	0x50000700
 8002250:	50000400 	.word	0x50000400

08002254 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002270:	b480      	push	{r7}
 8002272:	b09b      	sub	sp, #108	; 0x6c
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800228a:	2b01      	cmp	r3, #1
 800228c:	d101      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x22>
 800228e:	2302      	movs	r3, #2
 8002290:	e2cb      	b.n	800282a <HAL_ADC_ConfigChannel+0x5ba>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f040 82af 	bne.w	8002808 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d81c      	bhi.n	80022ec <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	4413      	add	r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	461a      	mov	r2, r3
 80022c6:	231f      	movs	r3, #31
 80022c8:	4093      	lsls	r3, r2
 80022ca:	43db      	mvns	r3, r3
 80022cc:	4019      	ands	r1, r3
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fa00 f203 	lsl.w	r2, r0, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	631a      	str	r2, [r3, #48]	; 0x30
 80022ea:	e063      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b09      	cmp	r3, #9
 80022f2:	d81e      	bhi.n	8002332 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	4413      	add	r3, r2
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	3b1e      	subs	r3, #30
 8002308:	221f      	movs	r2, #31
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	4019      	ands	r1, r3
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	6818      	ldr	r0, [r3, #0]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	4413      	add	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	3b1e      	subs	r3, #30
 8002324:	fa00 f203 	lsl.w	r2, r0, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	635a      	str	r2, [r3, #52]	; 0x34
 8002330:	e040      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b0e      	cmp	r3, #14
 8002338:	d81e      	bhi.n	8002378 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4413      	add	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	3b3c      	subs	r3, #60	; 0x3c
 800234e:	221f      	movs	r2, #31
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	4019      	ands	r1, r3
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	3b3c      	subs	r3, #60	; 0x3c
 800236a:	fa00 f203 	lsl.w	r2, r0, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	639a      	str	r2, [r3, #56]	; 0x38
 8002376:	e01d      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4413      	add	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	3b5a      	subs	r3, #90	; 0x5a
 800238c:	221f      	movs	r2, #31
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	4019      	ands	r1, r3
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6818      	ldr	r0, [r3, #0]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	3b5a      	subs	r3, #90	; 0x5a
 80023a8:	fa00 f203 	lsl.w	r2, r0, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f040 80e5 	bne.w	800258e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b09      	cmp	r3, #9
 80023ca:	d91c      	bls.n	8002406 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6999      	ldr	r1, [r3, #24]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4613      	mov	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	4413      	add	r3, r2
 80023dc:	3b1e      	subs	r3, #30
 80023de:	2207      	movs	r2, #7
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	4019      	ands	r1, r3
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	6898      	ldr	r0, [r3, #8]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	3b1e      	subs	r3, #30
 80023f8:	fa00 f203 	lsl.w	r2, r0, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	619a      	str	r2, [r3, #24]
 8002404:	e019      	b.n	800243a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6959      	ldr	r1, [r3, #20]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4613      	mov	r3, r2
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4413      	add	r3, r2
 8002416:	2207      	movs	r2, #7
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	4019      	ands	r1, r3
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6898      	ldr	r0, [r3, #8]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4613      	mov	r3, r2
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4413      	add	r3, r2
 800242e:	fa00 f203 	lsl.w	r2, r0, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	695a      	ldr	r2, [r3, #20]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	08db      	lsrs	r3, r3, #3
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	3b01      	subs	r3, #1
 8002458:	2b03      	cmp	r3, #3
 800245a:	d84f      	bhi.n	80024fc <HAL_ADC_ConfigChannel+0x28c>
 800245c:	a201      	add	r2, pc, #4	; (adr r2, 8002464 <HAL_ADC_ConfigChannel+0x1f4>)
 800245e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002462:	bf00      	nop
 8002464:	08002475 	.word	0x08002475
 8002468:	08002497 	.word	0x08002497
 800246c:	080024b9 	.word	0x080024b9
 8002470:	080024db 	.word	0x080024db
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800247a:	4b9f      	ldr	r3, [pc, #636]	; (80026f8 <HAL_ADC_ConfigChannel+0x488>)
 800247c:	4013      	ands	r3, r2
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	0691      	lsls	r1, r2, #26
 8002484:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002486:	430a      	orrs	r2, r1
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002492:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002494:	e07e      	b.n	8002594 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800249c:	4b96      	ldr	r3, [pc, #600]	; (80026f8 <HAL_ADC_ConfigChannel+0x488>)
 800249e:	4013      	ands	r3, r2
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	0691      	lsls	r1, r2, #26
 80024a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024a8:	430a      	orrs	r2, r1
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024b4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80024b6:	e06d      	b.n	8002594 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80024be:	4b8e      	ldr	r3, [pc, #568]	; (80026f8 <HAL_ADC_ConfigChannel+0x488>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	0691      	lsls	r1, r2, #26
 80024c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024ca:	430a      	orrs	r2, r1
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024d6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80024d8:	e05c      	b.n	8002594 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024e0:	4b85      	ldr	r3, [pc, #532]	; (80026f8 <HAL_ADC_ConfigChannel+0x488>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	0691      	lsls	r1, r2, #26
 80024ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024ec:	430a      	orrs	r2, r1
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024f8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80024fa:	e04b      	b.n	8002594 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002502:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	069b      	lsls	r3, r3, #26
 800250c:	429a      	cmp	r2, r3
 800250e:	d107      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800251e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002526:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	069b      	lsls	r3, r3, #26
 8002530:	429a      	cmp	r2, r3
 8002532:	d107      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002542:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800254a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	069b      	lsls	r3, r3, #26
 8002554:	429a      	cmp	r2, r3
 8002556:	d107      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002566:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800256e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	069b      	lsls	r3, r3, #26
 8002578:	429a      	cmp	r2, r3
 800257a:	d10a      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800258a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800258c:	e001      	b.n	8002592 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800258e:	bf00      	nop
 8002590:	e000      	b.n	8002594 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002592:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d108      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x344>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x344>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x346>
 80025b4:	2300      	movs	r3, #0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f040 8131 	bne.w	800281e <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d00f      	beq.n	80025e4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2201      	movs	r2, #1
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43da      	mvns	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	400a      	ands	r2, r1
 80025de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80025e2:	e049      	b.n	8002678 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2201      	movs	r2, #1
 80025f2:	409a      	lsls	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b09      	cmp	r3, #9
 8002604:	d91c      	bls.n	8002640 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6999      	ldr	r1, [r3, #24]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4613      	mov	r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4413      	add	r3, r2
 8002616:	3b1b      	subs	r3, #27
 8002618:	2207      	movs	r2, #7
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	4019      	ands	r1, r3
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	6898      	ldr	r0, [r3, #8]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	4613      	mov	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4413      	add	r3, r2
 8002630:	3b1b      	subs	r3, #27
 8002632:	fa00 f203 	lsl.w	r2, r0, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	619a      	str	r2, [r3, #24]
 800263e:	e01b      	b.n	8002678 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6959      	ldr	r1, [r3, #20]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	2207      	movs	r2, #7
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	4019      	ands	r1, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	6898      	ldr	r0, [r3, #8]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	4613      	mov	r3, r2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	4413      	add	r3, r2
 800266c:	fa00 f203 	lsl.w	r2, r0, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002680:	d004      	beq.n	800268c <HAL_ADC_ConfigChannel+0x41c>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a1d      	ldr	r2, [pc, #116]	; (80026fc <HAL_ADC_ConfigChannel+0x48c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d101      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x420>
 800268c:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <HAL_ADC_ConfigChannel+0x490>)
 800268e:	e000      	b.n	8002692 <HAL_ADC_ConfigChannel+0x422>
 8002690:	4b1c      	ldr	r3, [pc, #112]	; (8002704 <HAL_ADC_ConfigChannel+0x494>)
 8002692:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b10      	cmp	r3, #16
 800269a:	d105      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800269c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d015      	beq.n	80026d4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80026ac:	2b11      	cmp	r3, #17
 80026ae:	d105      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80026b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00b      	beq.n	80026d4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80026c0:	2b12      	cmp	r3, #18
 80026c2:	f040 80ac 	bne.w	800281e <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80026c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f040 80a5 	bne.w	800281e <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026dc:	d102      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x474>
 80026de:	4b07      	ldr	r3, [pc, #28]	; (80026fc <HAL_ADC_ConfigChannel+0x48c>)
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	e023      	b.n	800272c <HAL_ADC_ConfigChannel+0x4bc>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a04      	ldr	r2, [pc, #16]	; (80026fc <HAL_ADC_ConfigChannel+0x48c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d10c      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x498>
 80026ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	e01a      	b.n	800272c <HAL_ADC_ConfigChannel+0x4bc>
 80026f6:	bf00      	nop
 80026f8:	83fff000 	.word	0x83fff000
 80026fc:	50000100 	.word	0x50000100
 8002700:	50000300 	.word	0x50000300
 8002704:	50000700 	.word	0x50000700
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a4a      	ldr	r2, [pc, #296]	; (8002838 <HAL_ADC_ConfigChannel+0x5c8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d102      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x4a8>
 8002712:	4b4a      	ldr	r3, [pc, #296]	; (800283c <HAL_ADC_ConfigChannel+0x5cc>)
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	e009      	b.n	800272c <HAL_ADC_ConfigChannel+0x4bc>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a47      	ldr	r2, [pc, #284]	; (800283c <HAL_ADC_ConfigChannel+0x5cc>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d102      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x4b8>
 8002722:	4b45      	ldr	r3, [pc, #276]	; (8002838 <HAL_ADC_ConfigChannel+0x5c8>)
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	e001      	b.n	800272c <HAL_ADC_ConfigChannel+0x4bc>
 8002728:	2300      	movs	r3, #0
 800272a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	2b01      	cmp	r3, #1
 8002738:	d108      	bne.n	800274c <HAL_ADC_ConfigChannel+0x4dc>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_ADC_ConfigChannel+0x4dc>
 8002748:	2301      	movs	r3, #1
 800274a:	e000      	b.n	800274e <HAL_ADC_ConfigChannel+0x4de>
 800274c:	2300      	movs	r3, #0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d150      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002752:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002754:	2b00      	cmp	r3, #0
 8002756:	d010      	beq.n	800277a <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	2b01      	cmp	r3, #1
 8002762:	d107      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x504>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x504>
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <HAL_ADC_ConfigChannel+0x506>
 8002774:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002776:	2b00      	cmp	r3, #0
 8002778:	d13c      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b10      	cmp	r3, #16
 8002780:	d11d      	bne.n	80027be <HAL_ADC_ConfigChannel+0x54e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800278a:	d118      	bne.n	80027be <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800278c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002796:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002798:	4b29      	ldr	r3, [pc, #164]	; (8002840 <HAL_ADC_ConfigChannel+0x5d0>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a29      	ldr	r2, [pc, #164]	; (8002844 <HAL_ADC_ConfigChannel+0x5d4>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	0c9a      	lsrs	r2, r3, #18
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027ae:	e002      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f9      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027bc:	e02e      	b.n	800281c <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2b11      	cmp	r3, #17
 80027c4:	d10b      	bne.n	80027de <HAL_ADC_ConfigChannel+0x56e>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027ce:	d106      	bne.n	80027de <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80027d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80027d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027da:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027dc:	e01e      	b.n	800281c <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b12      	cmp	r3, #18
 80027e4:	d11a      	bne.n	800281c <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80027e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027f0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027f2:	e013      	b.n	800281c <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	f043 0220 	orr.w	r2, r3, #32
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002806:	e00a      	b.n	800281e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	f043 0220 	orr.w	r2, r3, #32
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800281a:	e000      	b.n	800281e <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800281c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002826:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800282a:	4618      	mov	r0, r3
 800282c:	376c      	adds	r7, #108	; 0x6c
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	50000400 	.word	0x50000400
 800283c:	50000500 	.word	0x50000500
 8002840:	20000000 	.word	0x20000000
 8002844:	431bde83 	.word	0x431bde83

08002848 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002848:	b480      	push	{r7}
 800284a:	b099      	sub	sp, #100	; 0x64
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002860:	d102      	bne.n	8002868 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002862:	4b6d      	ldr	r3, [pc, #436]	; (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	e01a      	b.n	800289e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a6a      	ldr	r2, [pc, #424]	; (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d103      	bne.n	800287a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002872:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	e011      	b.n	800289e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a67      	ldr	r2, [pc, #412]	; (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d102      	bne.n	800288a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002884:	4b66      	ldr	r3, [pc, #408]	; (8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	e009      	b.n	800289e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a64      	ldr	r2, [pc, #400]	; (8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d102      	bne.n	800289a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002894:	4b61      	ldr	r3, [pc, #388]	; (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	e001      	b.n	800289e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0b0      	b.n	8002a0a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e0a9      	b.n	8002a0a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f040 808d 	bne.w	80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f040 8086 	bne.w	80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028e4:	d004      	beq.n	80028f0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a4b      	ldr	r2, [pc, #300]	; (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d101      	bne.n	80028f4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80028f0:	4b4c      	ldr	r3, [pc, #304]	; (8002a24 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80028f2:	e000      	b.n	80028f6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80028f4:	4b4c      	ldr	r3, [pc, #304]	; (8002a28 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80028f6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d040      	beq.n	8002982 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002900:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002912:	035b      	lsls	r3, r3, #13
 8002914:	430b      	orrs	r3, r1
 8002916:	431a      	orrs	r2, r3
 8002918:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800291a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	2b01      	cmp	r3, #1
 8002928:	d108      	bne.n	800293c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800293c:	2300      	movs	r3, #0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d15c      	bne.n	80029fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	2b01      	cmp	r3, #1
 800294c:	d107      	bne.n	800295e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b01      	cmp	r3, #1
 8002958:	d101      	bne.n	800295e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800295e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002960:	2b00      	cmp	r3, #0
 8002962:	d14b      	bne.n	80029fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002964:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800296c:	f023 030f 	bic.w	r3, r3, #15
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	6811      	ldr	r1, [r2, #0]
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	6892      	ldr	r2, [r2, #8]
 8002978:	430a      	orrs	r2, r1
 800297a:	431a      	orrs	r2, r3
 800297c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800297e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002980:	e03c      	b.n	80029fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800298a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800298c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d108      	bne.n	80029ae <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d101      	bne.n	80029ae <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80029ae:	2300      	movs	r3, #0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d123      	bne.n	80029fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d107      	bne.n	80029d0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80029cc:	2301      	movs	r3, #1
 80029ce:	e000      	b.n	80029d2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80029d0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d112      	bne.n	80029fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80029d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029de:	f023 030f 	bic.w	r3, r3, #15
 80029e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029e4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80029e6:	e009      	b.n	80029fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	f043 0220 	orr.w	r2, r3, #32
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80029fa:	e000      	b.n	80029fe <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80029fc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002a06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3764      	adds	r7, #100	; 0x64
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	50000100 	.word	0x50000100
 8002a1c:	50000400 	.word	0x50000400
 8002a20:	50000500 	.word	0x50000500
 8002a24:	50000300 	.word	0x50000300
 8002a28:	50000700 	.word	0x50000700

08002a2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d108      	bne.n	8002a58 <ADC_Enable+0x2c>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <ADC_Enable+0x2c>
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <ADC_Enable+0x2e>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d143      	bne.n	8002ae6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <ADC_Enable+0xc4>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00d      	beq.n	8002a88 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	f043 0210 	orr.w	r2, r3, #16
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7c:	f043 0201 	orr.w	r2, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e02f      	b.n	8002ae8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0201 	orr.w	r2, r2, #1
 8002a96:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002a98:	f7fe ffa2 	bl	80019e0 <HAL_GetTick>
 8002a9c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a9e:	e01b      	b.n	8002ad8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002aa0:	f7fe ff9e 	bl	80019e0 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d914      	bls.n	8002ad8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d00d      	beq.n	8002ad8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	f043 0210 	orr.w	r2, r3, #16
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002acc:	f043 0201 	orr.w	r2, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e007      	b.n	8002ae8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d1dc      	bne.n	8002aa0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	8000003f 	.word	0x8000003f

08002af4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d108      	bne.n	8002b20 <ADC_Disable+0x2c>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <ADC_Disable+0x2c>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <ADC_Disable+0x2e>
 8002b20:	2300      	movs	r3, #0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d047      	beq.n	8002bb6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 030d 	and.w	r3, r3, #13
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d10f      	bne.n	8002b54 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0202 	orr.w	r2, r2, #2
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2203      	movs	r2, #3
 8002b4a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002b4c:	f7fe ff48 	bl	80019e0 <HAL_GetTick>
 8002b50:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002b52:	e029      	b.n	8002ba8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	f043 0210 	orr.w	r2, r3, #16
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b64:	f043 0201 	orr.w	r2, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e023      	b.n	8002bb8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b70:	f7fe ff36 	bl	80019e0 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d914      	bls.n	8002ba8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d10d      	bne.n	8002ba8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f043 0210 	orr.w	r2, r3, #16
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9c:	f043 0201 	orr.w	r2, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e007      	b.n	8002bb8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d0dc      	beq.n	8002b70 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 809b 	beq.w	8002d1c <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bf4:	d12a      	bne.n	8002c4c <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d126      	bne.n	8002c4c <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d122      	bne.n	8002c4c <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002c06:	230c      	movs	r3, #12
 8002c08:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002c0a:	e014      	b.n	8002c36 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4a46      	ldr	r2, [pc, #280]	; (8002d28 <ADC_ConversionStop+0x168>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d90d      	bls.n	8002c30 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	f043 0210 	orr.w	r2, r3, #16
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	f043 0201 	orr.w	r2, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e076      	b.n	8002d1e <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	3301      	adds	r3, #1
 8002c34:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c40:	2b40      	cmp	r3, #64	; 0x40
 8002c42:	d1e3      	bne.n	8002c0c <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2240      	movs	r2, #64	; 0x40
 8002c4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	2b60      	cmp	r3, #96	; 0x60
 8002c50:	d015      	beq.n	8002c7e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d10e      	bne.n	8002c7e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d107      	bne.n	8002c7e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0210 	orr.w	r2, r2, #16
 8002c7c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b0c      	cmp	r3, #12
 8002c82:	d015      	beq.n	8002cb0 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d10e      	bne.n	8002cb0 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d107      	bne.n	8002cb0 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0220 	orr.w	r2, r2, #32
 8002cae:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2b60      	cmp	r3, #96	; 0x60
 8002cb4:	d005      	beq.n	8002cc2 <ADC_ConversionStop+0x102>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b6c      	cmp	r3, #108	; 0x6c
 8002cba:	d105      	bne.n	8002cc8 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002cbc:	230c      	movs	r3, #12
 8002cbe:	617b      	str	r3, [r7, #20]
        break;
 8002cc0:	e005      	b.n	8002cce <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	617b      	str	r3, [r7, #20]
        break;
 8002cc6:	e002      	b.n	8002cce <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002cc8:	2304      	movs	r3, #4
 8002cca:	617b      	str	r3, [r7, #20]
        break;
 8002ccc:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002cce:	f7fe fe87 	bl	80019e0 <HAL_GetTick>
 8002cd2:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002cd4:	e01b      	b.n	8002d0e <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002cd6:	f7fe fe83 	bl	80019e0 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b0b      	cmp	r3, #11
 8002ce2:	d914      	bls.n	8002d0e <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00d      	beq.n	8002d0e <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f043 0210 	orr.w	r2, r3, #16
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	f043 0201 	orr.w	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e007      	b.n	8002d1e <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1dc      	bne.n	8002cd6 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	000993ff 	.word	0x000993ff

08002d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <__NVIC_SetPriorityGrouping+0x44>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d48:	4013      	ands	r3, r2
 8002d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d5e:	4a04      	ldr	r2, [pc, #16]	; (8002d70 <__NVIC_SetPriorityGrouping+0x44>)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	60d3      	str	r3, [r2, #12]
}
 8002d64:	bf00      	nop
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d78:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <__NVIC_GetPriorityGrouping+0x18>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	0a1b      	lsrs	r3, r3, #8
 8002d7e:	f003 0307 	and.w	r3, r3, #7
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	db0b      	blt.n	8002dba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	f003 021f 	and.w	r2, r3, #31
 8002da8:	4907      	ldr	r1, [pc, #28]	; (8002dc8 <__NVIC_EnableIRQ+0x38>)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	2001      	movs	r0, #1
 8002db2:	fa00 f202 	lsl.w	r2, r0, r2
 8002db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	e000e100 	.word	0xe000e100

08002dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	6039      	str	r1, [r7, #0]
 8002dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	db0a      	blt.n	8002df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	490c      	ldr	r1, [pc, #48]	; (8002e18 <__NVIC_SetPriority+0x4c>)
 8002de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dea:	0112      	lsls	r2, r2, #4
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	440b      	add	r3, r1
 8002df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002df4:	e00a      	b.n	8002e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	4908      	ldr	r1, [pc, #32]	; (8002e1c <__NVIC_SetPriority+0x50>)
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	3b04      	subs	r3, #4
 8002e04:	0112      	lsls	r2, r2, #4
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	440b      	add	r3, r1
 8002e0a:	761a      	strb	r2, [r3, #24]
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	e000e100 	.word	0xe000e100
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b089      	sub	sp, #36	; 0x24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f1c3 0307 	rsb	r3, r3, #7
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	bf28      	it	cs
 8002e3e:	2304      	movcs	r3, #4
 8002e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3304      	adds	r3, #4
 8002e46:	2b06      	cmp	r3, #6
 8002e48:	d902      	bls.n	8002e50 <NVIC_EncodePriority+0x30>
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3b03      	subs	r3, #3
 8002e4e:	e000      	b.n	8002e52 <NVIC_EncodePriority+0x32>
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e54:	f04f 32ff 	mov.w	r2, #4294967295
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	401a      	ands	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e68:	f04f 31ff 	mov.w	r1, #4294967295
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e72:	43d9      	mvns	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e78:	4313      	orrs	r3, r2
         );
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3724      	adds	r7, #36	; 0x24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff ff4c 	bl	8002d2c <__NVIC_SetPriorityGrouping>
}
 8002e94:	bf00      	nop
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eae:	f7ff ff61 	bl	8002d74 <__NVIC_GetPriorityGrouping>
 8002eb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	68b9      	ldr	r1, [r7, #8]
 8002eb8:	6978      	ldr	r0, [r7, #20]
 8002eba:	f7ff ffb1 	bl	8002e20 <NVIC_EncodePriority>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff ff80 	bl	8002dcc <__NVIC_SetPriority>
}
 8002ecc:	bf00      	nop
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff ff54 	bl	8002d90 <__NVIC_EnableIRQ>
}
 8002ee8:	bf00      	nop
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002efe:	e154      	b.n	80031aa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	2101      	movs	r1, #1
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8146 	beq.w	80031a4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d005      	beq.n	8002f30 <HAL_GPIO_Init+0x40>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d130      	bne.n	8002f92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4013      	ands	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f66:	2201      	movs	r2, #1
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4013      	ands	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	091b      	lsrs	r3, r3, #4
 8002f7c:	f003 0201 	and.w	r2, r3, #1
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d017      	beq.n	8002fce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	2203      	movs	r2, #3
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d123      	bne.n	8003022 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	08da      	lsrs	r2, r3, #3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3208      	adds	r2, #8
 8002fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	220f      	movs	r2, #15
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	691a      	ldr	r2, [r3, #16]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	08da      	lsrs	r2, r3, #3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3208      	adds	r2, #8
 800301c:	6939      	ldr	r1, [r7, #16]
 800301e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	2203      	movs	r2, #3
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4013      	ands	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 0203 	and.w	r2, r3, #3
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 80a0 	beq.w	80031a4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003064:	4b58      	ldr	r3, [pc, #352]	; (80031c8 <HAL_GPIO_Init+0x2d8>)
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	4a57      	ldr	r2, [pc, #348]	; (80031c8 <HAL_GPIO_Init+0x2d8>)
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	6193      	str	r3, [r2, #24]
 8003070:	4b55      	ldr	r3, [pc, #340]	; (80031c8 <HAL_GPIO_Init+0x2d8>)
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800307c:	4a53      	ldr	r2, [pc, #332]	; (80031cc <HAL_GPIO_Init+0x2dc>)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	089b      	lsrs	r3, r3, #2
 8003082:	3302      	adds	r3, #2
 8003084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003088:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	220f      	movs	r2, #15
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4013      	ands	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030a6:	d019      	beq.n	80030dc <HAL_GPIO_Init+0x1ec>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a49      	ldr	r2, [pc, #292]	; (80031d0 <HAL_GPIO_Init+0x2e0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d013      	beq.n	80030d8 <HAL_GPIO_Init+0x1e8>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a48      	ldr	r2, [pc, #288]	; (80031d4 <HAL_GPIO_Init+0x2e4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00d      	beq.n	80030d4 <HAL_GPIO_Init+0x1e4>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a47      	ldr	r2, [pc, #284]	; (80031d8 <HAL_GPIO_Init+0x2e8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d007      	beq.n	80030d0 <HAL_GPIO_Init+0x1e0>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a46      	ldr	r2, [pc, #280]	; (80031dc <HAL_GPIO_Init+0x2ec>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d101      	bne.n	80030cc <HAL_GPIO_Init+0x1dc>
 80030c8:	2304      	movs	r3, #4
 80030ca:	e008      	b.n	80030de <HAL_GPIO_Init+0x1ee>
 80030cc:	2305      	movs	r3, #5
 80030ce:	e006      	b.n	80030de <HAL_GPIO_Init+0x1ee>
 80030d0:	2303      	movs	r3, #3
 80030d2:	e004      	b.n	80030de <HAL_GPIO_Init+0x1ee>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e002      	b.n	80030de <HAL_GPIO_Init+0x1ee>
 80030d8:	2301      	movs	r3, #1
 80030da:	e000      	b.n	80030de <HAL_GPIO_Init+0x1ee>
 80030dc:	2300      	movs	r3, #0
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	f002 0203 	and.w	r2, r2, #3
 80030e4:	0092      	lsls	r2, r2, #2
 80030e6:	4093      	lsls	r3, r2
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030ee:	4937      	ldr	r1, [pc, #220]	; (80031cc <HAL_GPIO_Init+0x2dc>)
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	089b      	lsrs	r3, r3, #2
 80030f4:	3302      	adds	r3, #2
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030fc:	4b38      	ldr	r3, [pc, #224]	; (80031e0 <HAL_GPIO_Init+0x2f0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	43db      	mvns	r3, r3
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4013      	ands	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003120:	4a2f      	ldr	r2, [pc, #188]	; (80031e0 <HAL_GPIO_Init+0x2f0>)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003126:	4b2e      	ldr	r3, [pc, #184]	; (80031e0 <HAL_GPIO_Init+0x2f0>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	43db      	mvns	r3, r3
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4013      	ands	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800314a:	4a25      	ldr	r2, [pc, #148]	; (80031e0 <HAL_GPIO_Init+0x2f0>)
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003150:	4b23      	ldr	r3, [pc, #140]	; (80031e0 <HAL_GPIO_Init+0x2f0>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	43db      	mvns	r3, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4013      	ands	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003174:	4a1a      	ldr	r2, [pc, #104]	; (80031e0 <HAL_GPIO_Init+0x2f0>)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800317a:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <HAL_GPIO_Init+0x2f0>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	43db      	mvns	r3, r3
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4013      	ands	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800319e:	4a10      	ldr	r2, [pc, #64]	; (80031e0 <HAL_GPIO_Init+0x2f0>)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	3301      	adds	r3, #1
 80031a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f47f aea3 	bne.w	8002f00 <HAL_GPIO_Init+0x10>
  }
}
 80031ba:	bf00      	nop
 80031bc:	bf00      	nop
 80031be:	371c      	adds	r7, #28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40010000 	.word	0x40010000
 80031d0:	48000400 	.word	0x48000400
 80031d4:	48000800 	.word	0x48000800
 80031d8:	48000c00 	.word	0x48000c00
 80031dc:	48001000 	.word	0x48001000
 80031e0:	40010400 	.word	0x40010400

080031e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	807b      	strh	r3, [r7, #2]
 80031f0:	4613      	mov	r3, r2
 80031f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031f4:	787b      	ldrb	r3, [r7, #1]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031fa:	887a      	ldrh	r2, [r7, #2]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003200:	e002      	b.n	8003208 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003202:	887a      	ldrh	r2, [r7, #2]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003216:	b08b      	sub	sp, #44	; 0x2c
 8003218:	af06      	add	r7, sp, #24
 800321a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e0d0      	b.n	80033c8 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d106      	bne.n	8003240 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7fe faa4 	bl	8001788 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2203      	movs	r2, #3
 8003244:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f002 fd41 	bl	8005cd4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003252:	2300      	movs	r3, #0
 8003254:	73fb      	strb	r3, [r7, #15]
 8003256:	e04c      	b.n	80032f2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	440b      	add	r3, r1
 8003268:	3301      	adds	r3, #1
 800326a:	2201      	movs	r2, #1
 800326c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	440b      	add	r3, r1
 800327e:	7bfa      	ldrb	r2, [r7, #15]
 8003280:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003282:	7bfa      	ldrb	r2, [r7, #15]
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	b298      	uxth	r0, r3
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	440b      	add	r3, r1
 8003294:	3336      	adds	r3, #54	; 0x36
 8003296:	4602      	mov	r2, r0
 8003298:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	440b      	add	r3, r1
 80032aa:	3303      	adds	r3, #3
 80032ac:	2200      	movs	r2, #0
 80032ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032b0:	7bfa      	ldrb	r2, [r7, #15]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	440b      	add	r3, r1
 80032be:	3338      	adds	r3, #56	; 0x38
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032c4:	7bfa      	ldrb	r2, [r7, #15]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	440b      	add	r3, r1
 80032d2:	333c      	adds	r3, #60	; 0x3c
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032d8:	7bfa      	ldrb	r2, [r7, #15]
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	440b      	add	r3, r1
 80032e6:	3340      	adds	r3, #64	; 0x40
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	3301      	adds	r3, #1
 80032f0:	73fb      	strb	r3, [r7, #15]
 80032f2:	7bfa      	ldrb	r2, [r7, #15]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d3ad      	bcc.n	8003258 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032fc:	2300      	movs	r3, #0
 80032fe:	73fb      	strb	r3, [r7, #15]
 8003300:	e044      	b.n	800338c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	440b      	add	r3, r1
 8003310:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	440b      	add	r3, r1
 8003326:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800332a:	7bfa      	ldrb	r2, [r7, #15]
 800332c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800332e:	7bfa      	ldrb	r2, [r7, #15]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	440b      	add	r3, r1
 800333c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003340:	2200      	movs	r2, #0
 8003342:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003344:	7bfa      	ldrb	r2, [r7, #15]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	440b      	add	r3, r1
 8003352:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800335a:	7bfa      	ldrb	r2, [r7, #15]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	440b      	add	r3, r1
 8003368:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003370:	7bfa      	ldrb	r2, [r7, #15]
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	440b      	add	r3, r1
 800337e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	3301      	adds	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
 800338c:	7bfa      	ldrb	r2, [r7, #15]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	429a      	cmp	r2, r3
 8003394:	d3b5      	bcc.n	8003302 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	687e      	ldr	r6, [r7, #4]
 800339e:	466d      	mov	r5, sp
 80033a0:	f106 0410 	add.w	r4, r6, #16
 80033a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	602b      	str	r3, [r5, #0]
 80033ac:	1d33      	adds	r3, r6, #4
 80033ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033b0:	6838      	ldr	r0, [r7, #0]
 80033b2:	f002 fcaa 	bl	8005d0a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	1d3b      	adds	r3, r7, #4
 80033da:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033dc:	1d3b      	adds	r3, r7, #4
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d102      	bne.n	80033ea <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	f000 bef4 	b.w	80041d2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ea:	1d3b      	adds	r3, r7, #4
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 816a 	beq.w	80036ce <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80033fa:	4bb3      	ldr	r3, [pc, #716]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	2b04      	cmp	r3, #4
 8003404:	d00c      	beq.n	8003420 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003406:	4bb0      	ldr	r3, [pc, #704]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	2b08      	cmp	r3, #8
 8003410:	d159      	bne.n	80034c6 <HAL_RCC_OscConfig+0xf6>
 8003412:	4bad      	ldr	r3, [pc, #692]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800341e:	d152      	bne.n	80034c6 <HAL_RCC_OscConfig+0xf6>
 8003420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003424:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003428:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800342c:	fa93 f3a3 	rbit	r3, r3
 8003430:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003434:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003438:	fab3 f383 	clz	r3, r3
 800343c:	b2db      	uxtb	r3, r3
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	b2db      	uxtb	r3, r3
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	d102      	bne.n	8003452 <HAL_RCC_OscConfig+0x82>
 800344c:	4b9e      	ldr	r3, [pc, #632]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	e015      	b.n	800347e <HAL_RCC_OscConfig+0xae>
 8003452:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003456:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800345e:	fa93 f3a3 	rbit	r3, r3
 8003462:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003466:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800346a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800346e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003472:	fa93 f3a3 	rbit	r3, r3
 8003476:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800347a:	4b93      	ldr	r3, [pc, #588]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003482:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003486:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800348a:	fa92 f2a2 	rbit	r2, r2
 800348e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003492:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003496:	fab2 f282 	clz	r2, r2
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	f042 0220 	orr.w	r2, r2, #32
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	f002 021f 	and.w	r2, r2, #31
 80034a6:	2101      	movs	r1, #1
 80034a8:	fa01 f202 	lsl.w	r2, r1, r2
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 810c 	beq.w	80036cc <HAL_RCC_OscConfig+0x2fc>
 80034b4:	1d3b      	adds	r3, r7, #4
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f040 8106 	bne.w	80036cc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	f000 be86 	b.w	80041d2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c6:	1d3b      	adds	r3, r7, #4
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d0:	d106      	bne.n	80034e0 <HAL_RCC_OscConfig+0x110>
 80034d2:	4b7d      	ldr	r3, [pc, #500]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a7c      	ldr	r2, [pc, #496]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 80034d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	e030      	b.n	8003542 <HAL_RCC_OscConfig+0x172>
 80034e0:	1d3b      	adds	r3, r7, #4
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10c      	bne.n	8003504 <HAL_RCC_OscConfig+0x134>
 80034ea:	4b77      	ldr	r3, [pc, #476]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a76      	ldr	r2, [pc, #472]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 80034f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	4b74      	ldr	r3, [pc, #464]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a73      	ldr	r2, [pc, #460]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 80034fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	e01e      	b.n	8003542 <HAL_RCC_OscConfig+0x172>
 8003504:	1d3b      	adds	r3, r7, #4
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800350e:	d10c      	bne.n	800352a <HAL_RCC_OscConfig+0x15a>
 8003510:	4b6d      	ldr	r3, [pc, #436]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a6c      	ldr	r2, [pc, #432]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 8003516:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	4b6a      	ldr	r3, [pc, #424]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a69      	ldr	r2, [pc, #420]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 8003522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	e00b      	b.n	8003542 <HAL_RCC_OscConfig+0x172>
 800352a:	4b67      	ldr	r3, [pc, #412]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a66      	ldr	r2, [pc, #408]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 8003530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	4b64      	ldr	r3, [pc, #400]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a63      	ldr	r2, [pc, #396]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 800353c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003540:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003542:	4b61      	ldr	r3, [pc, #388]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 8003544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003546:	f023 020f 	bic.w	r2, r3, #15
 800354a:	1d3b      	adds	r3, r7, #4
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	495d      	ldr	r1, [pc, #372]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 8003552:	4313      	orrs	r3, r2
 8003554:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003556:	1d3b      	adds	r3, r7, #4
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d059      	beq.n	8003614 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003560:	f7fe fa3e 	bl	80019e0 <HAL_GetTick>
 8003564:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003568:	e00a      	b.n	8003580 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800356a:	f7fe fa39 	bl	80019e0 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b64      	cmp	r3, #100	; 0x64
 8003578:	d902      	bls.n	8003580 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	f000 be29 	b.w	80041d2 <HAL_RCC_OscConfig+0xe02>
 8003580:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003584:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003588:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800358c:	fa93 f3a3 	rbit	r3, r3
 8003590:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003594:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003598:	fab3 f383 	clz	r3, r3
 800359c:	b2db      	uxtb	r3, r3
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d102      	bne.n	80035b2 <HAL_RCC_OscConfig+0x1e2>
 80035ac:	4b46      	ldr	r3, [pc, #280]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	e015      	b.n	80035de <HAL_RCC_OscConfig+0x20e>
 80035b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035b6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ba:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80035be:	fa93 f3a3 	rbit	r3, r3
 80035c2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80035c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035ca:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80035ce:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80035d2:	fa93 f3a3 	rbit	r3, r3
 80035d6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80035da:	4b3b      	ldr	r3, [pc, #236]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035e2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80035e6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80035ea:	fa92 f2a2 	rbit	r2, r2
 80035ee:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80035f2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80035f6:	fab2 f282 	clz	r2, r2
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	f042 0220 	orr.w	r2, r2, #32
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	f002 021f 	and.w	r2, r2, #31
 8003606:	2101      	movs	r1, #1
 8003608:	fa01 f202 	lsl.w	r2, r1, r2
 800360c:	4013      	ands	r3, r2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0ab      	beq.n	800356a <HAL_RCC_OscConfig+0x19a>
 8003612:	e05c      	b.n	80036ce <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7fe f9e4 	bl	80019e0 <HAL_GetTick>
 8003618:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800361c:	e00a      	b.n	8003634 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800361e:	f7fe f9df 	bl	80019e0 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b64      	cmp	r3, #100	; 0x64
 800362c:	d902      	bls.n	8003634 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	f000 bdcf 	b.w	80041d2 <HAL_RCC_OscConfig+0xe02>
 8003634:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003638:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003640:	fa93 f3a3 	rbit	r3, r3
 8003644:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003648:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364c:	fab3 f383 	clz	r3, r3
 8003650:	b2db      	uxtb	r3, r3
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	b2db      	uxtb	r3, r3
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b01      	cmp	r3, #1
 800365e:	d102      	bne.n	8003666 <HAL_RCC_OscConfig+0x296>
 8003660:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	e015      	b.n	8003692 <HAL_RCC_OscConfig+0x2c2>
 8003666:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800366a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003672:	fa93 f3a3 	rbit	r3, r3
 8003676:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800367a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800367e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003682:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003686:	fa93 f3a3 	rbit	r3, r3
 800368a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800368e:	4b0e      	ldr	r3, [pc, #56]	; (80036c8 <HAL_RCC_OscConfig+0x2f8>)
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003696:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800369a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800369e:	fa92 f2a2 	rbit	r2, r2
 80036a2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80036a6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80036aa:	fab2 f282 	clz	r2, r2
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	f042 0220 	orr.w	r2, r2, #32
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	f002 021f 	and.w	r2, r2, #31
 80036ba:	2101      	movs	r1, #1
 80036bc:	fa01 f202 	lsl.w	r2, r1, r2
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1ab      	bne.n	800361e <HAL_RCC_OscConfig+0x24e>
 80036c6:	e002      	b.n	80036ce <HAL_RCC_OscConfig+0x2fe>
 80036c8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ce:	1d3b      	adds	r3, r7, #4
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 816f 	beq.w	80039bc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80036de:	4bd0      	ldr	r3, [pc, #832]	; (8003a20 <HAL_RCC_OscConfig+0x650>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f003 030c 	and.w	r3, r3, #12
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00b      	beq.n	8003702 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80036ea:	4bcd      	ldr	r3, [pc, #820]	; (8003a20 <HAL_RCC_OscConfig+0x650>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d16c      	bne.n	80037d0 <HAL_RCC_OscConfig+0x400>
 80036f6:	4bca      	ldr	r3, [pc, #808]	; (8003a20 <HAL_RCC_OscConfig+0x650>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d166      	bne.n	80037d0 <HAL_RCC_OscConfig+0x400>
 8003702:	2302      	movs	r3, #2
 8003704:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003708:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800370c:	fa93 f3a3 	rbit	r3, r3
 8003710:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003714:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003718:	fab3 f383 	clz	r3, r3
 800371c:	b2db      	uxtb	r3, r3
 800371e:	095b      	lsrs	r3, r3, #5
 8003720:	b2db      	uxtb	r3, r3
 8003722:	f043 0301 	orr.w	r3, r3, #1
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b01      	cmp	r3, #1
 800372a:	d102      	bne.n	8003732 <HAL_RCC_OscConfig+0x362>
 800372c:	4bbc      	ldr	r3, [pc, #752]	; (8003a20 <HAL_RCC_OscConfig+0x650>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	e013      	b.n	800375a <HAL_RCC_OscConfig+0x38a>
 8003732:	2302      	movs	r3, #2
 8003734:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003738:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800373c:	fa93 f3a3 	rbit	r3, r3
 8003740:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003744:	2302      	movs	r3, #2
 8003746:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800374a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800374e:	fa93 f3a3 	rbit	r3, r3
 8003752:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003756:	4bb2      	ldr	r3, [pc, #712]	; (8003a20 <HAL_RCC_OscConfig+0x650>)
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	2202      	movs	r2, #2
 800375c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003760:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003764:	fa92 f2a2 	rbit	r2, r2
 8003768:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800376c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003770:	fab2 f282 	clz	r2, r2
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	f042 0220 	orr.w	r2, r2, #32
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	f002 021f 	and.w	r2, r2, #31
 8003780:	2101      	movs	r1, #1
 8003782:	fa01 f202 	lsl.w	r2, r1, r2
 8003786:	4013      	ands	r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d007      	beq.n	800379c <HAL_RCC_OscConfig+0x3cc>
 800378c:	1d3b      	adds	r3, r7, #4
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d002      	beq.n	800379c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	f000 bd1b 	b.w	80041d2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379c:	4ba0      	ldr	r3, [pc, #640]	; (8003a20 <HAL_RCC_OscConfig+0x650>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a4:	1d3b      	adds	r3, r7, #4
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	21f8      	movs	r1, #248	; 0xf8
 80037ac:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80037b4:	fa91 f1a1 	rbit	r1, r1
 80037b8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80037bc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80037c0:	fab1 f181 	clz	r1, r1
 80037c4:	b2c9      	uxtb	r1, r1
 80037c6:	408b      	lsls	r3, r1
 80037c8:	4995      	ldr	r1, [pc, #596]	; (8003a20 <HAL_RCC_OscConfig+0x650>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ce:	e0f5      	b.n	80039bc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037d0:	1d3b      	adds	r3, r7, #4
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 8085 	beq.w	80038e6 <HAL_RCC_OscConfig+0x516>
 80037dc:	2301      	movs	r3, #1
 80037de:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80037e6:	fa93 f3a3 	rbit	r3, r3
 80037ea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80037ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037f2:	fab3 f383 	clz	r3, r3
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	461a      	mov	r2, r3
 8003804:	2301      	movs	r3, #1
 8003806:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003808:	f7fe f8ea 	bl	80019e0 <HAL_GetTick>
 800380c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003810:	e00a      	b.n	8003828 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003812:	f7fe f8e5 	bl	80019e0 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d902      	bls.n	8003828 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	f000 bcd5 	b.w	80041d2 <HAL_RCC_OscConfig+0xe02>
 8003828:	2302      	movs	r3, #2
 800382a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003832:	fa93 f3a3 	rbit	r3, r3
 8003836:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800383a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383e:	fab3 f383 	clz	r3, r3
 8003842:	b2db      	uxtb	r3, r3
 8003844:	095b      	lsrs	r3, r3, #5
 8003846:	b2db      	uxtb	r3, r3
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b01      	cmp	r3, #1
 8003850:	d102      	bne.n	8003858 <HAL_RCC_OscConfig+0x488>
 8003852:	4b73      	ldr	r3, [pc, #460]	; (8003a20 <HAL_RCC_OscConfig+0x650>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	e013      	b.n	8003880 <HAL_RCC_OscConfig+0x4b0>
 8003858:	2302      	movs	r3, #2
 800385a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003862:	fa93 f3a3 	rbit	r3, r3
 8003866:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800386a:	2302      	movs	r3, #2
 800386c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003870:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003874:	fa93 f3a3 	rbit	r3, r3
 8003878:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800387c:	4b68      	ldr	r3, [pc, #416]	; (8003a20 <HAL_RCC_OscConfig+0x650>)
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	2202      	movs	r2, #2
 8003882:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003886:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800388a:	fa92 f2a2 	rbit	r2, r2
 800388e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003892:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003896:	fab2 f282 	clz	r2, r2
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	f042 0220 	orr.w	r2, r2, #32
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	f002 021f 	and.w	r2, r2, #31
 80038a6:	2101      	movs	r1, #1
 80038a8:	fa01 f202 	lsl.w	r2, r1, r2
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0af      	beq.n	8003812 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b2:	4b5b      	ldr	r3, [pc, #364]	; (8003a20 <HAL_RCC_OscConfig+0x650>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ba:	1d3b      	adds	r3, r7, #4
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	21f8      	movs	r1, #248	; 0xf8
 80038c2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80038ca:	fa91 f1a1 	rbit	r1, r1
 80038ce:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80038d2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80038d6:	fab1 f181 	clz	r1, r1
 80038da:	b2c9      	uxtb	r1, r1
 80038dc:	408b      	lsls	r3, r1
 80038de:	4950      	ldr	r1, [pc, #320]	; (8003a20 <HAL_RCC_OscConfig+0x650>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	600b      	str	r3, [r1, #0]
 80038e4:	e06a      	b.n	80039bc <HAL_RCC_OscConfig+0x5ec>
 80038e6:	2301      	movs	r3, #1
 80038e8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80038f0:	fa93 f3a3 	rbit	r3, r3
 80038f4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80038f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038fc:	fab3 f383 	clz	r3, r3
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003906:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	461a      	mov	r2, r3
 800390e:	2300      	movs	r3, #0
 8003910:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003912:	f7fe f865 	bl	80019e0 <HAL_GetTick>
 8003916:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391a:	e00a      	b.n	8003932 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800391c:	f7fe f860 	bl	80019e0 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d902      	bls.n	8003932 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	f000 bc50 	b.w	80041d2 <HAL_RCC_OscConfig+0xe02>
 8003932:	2302      	movs	r3, #2
 8003934:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003938:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800393c:	fa93 f3a3 	rbit	r3, r3
 8003940:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003944:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003948:	fab3 f383 	clz	r3, r3
 800394c:	b2db      	uxtb	r3, r3
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	b2db      	uxtb	r3, r3
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b01      	cmp	r3, #1
 800395a:	d102      	bne.n	8003962 <HAL_RCC_OscConfig+0x592>
 800395c:	4b30      	ldr	r3, [pc, #192]	; (8003a20 <HAL_RCC_OscConfig+0x650>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	e013      	b.n	800398a <HAL_RCC_OscConfig+0x5ba>
 8003962:	2302      	movs	r3, #2
 8003964:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003968:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800396c:	fa93 f3a3 	rbit	r3, r3
 8003970:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003974:	2302      	movs	r3, #2
 8003976:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800397a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800397e:	fa93 f3a3 	rbit	r3, r3
 8003982:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003986:	4b26      	ldr	r3, [pc, #152]	; (8003a20 <HAL_RCC_OscConfig+0x650>)
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	2202      	movs	r2, #2
 800398c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003990:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003994:	fa92 f2a2 	rbit	r2, r2
 8003998:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800399c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80039a0:	fab2 f282 	clz	r2, r2
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	f042 0220 	orr.w	r2, r2, #32
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	f002 021f 	and.w	r2, r2, #31
 80039b0:	2101      	movs	r1, #1
 80039b2:	fa01 f202 	lsl.w	r2, r1, r2
 80039b6:	4013      	ands	r3, r2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1af      	bne.n	800391c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039bc:	1d3b      	adds	r3, r7, #4
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 80da 	beq.w	8003b80 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039cc:	1d3b      	adds	r3, r7, #4
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d069      	beq.n	8003aaa <HAL_RCC_OscConfig+0x6da>
 80039d6:	2301      	movs	r3, #1
 80039d8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80039e0:	fa93 f3a3 	rbit	r3, r3
 80039e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80039e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ec:	fab3 f383 	clz	r3, r3
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	461a      	mov	r2, r3
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_RCC_OscConfig+0x654>)
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	461a      	mov	r2, r3
 80039fc:	2301      	movs	r3, #1
 80039fe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a00:	f7fd ffee 	bl	80019e0 <HAL_GetTick>
 8003a04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a08:	e00e      	b.n	8003a28 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a0a:	f7fd ffe9 	bl	80019e0 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d906      	bls.n	8003a28 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e3d9      	b.n	80041d2 <HAL_RCC_OscConfig+0xe02>
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000
 8003a24:	10908120 	.word	0x10908120
 8003a28:	2302      	movs	r3, #2
 8003a2a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a32:	fa93 f3a3 	rbit	r3, r3
 8003a36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a3a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003a3e:	2202      	movs	r2, #2
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	fa93 f2a3 	rbit	r2, r3
 8003a4c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003a56:	2202      	movs	r2, #2
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	fa93 f2a3 	rbit	r2, r3
 8003a64:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003a68:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a6a:	4ba5      	ldr	r3, [pc, #660]	; (8003d00 <HAL_RCC_OscConfig+0x930>)
 8003a6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a6e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003a72:	2102      	movs	r1, #2
 8003a74:	6019      	str	r1, [r3, #0]
 8003a76:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	fa93 f1a3 	rbit	r1, r3
 8003a80:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003a84:	6019      	str	r1, [r3, #0]
  return result;
 8003a86:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	fab3 f383 	clz	r3, r3
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0b0      	beq.n	8003a0a <HAL_RCC_OscConfig+0x63a>
 8003aa8:	e06a      	b.n	8003b80 <HAL_RCC_OscConfig+0x7b0>
 8003aaa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003aae:	2201      	movs	r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	fa93 f2a3 	rbit	r2, r3
 8003abc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003ac0:	601a      	str	r2, [r3, #0]
  return result;
 8003ac2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003ac6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ac8:	fab3 f383 	clz	r3, r3
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	461a      	mov	r2, r3
 8003ad0:	4b8c      	ldr	r3, [pc, #560]	; (8003d04 <HAL_RCC_OscConfig+0x934>)
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	2300      	movs	r3, #0
 8003ada:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003adc:	f7fd ff80 	bl	80019e0 <HAL_GetTick>
 8003ae0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae4:	e009      	b.n	8003afa <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ae6:	f7fd ff7b 	bl	80019e0 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e36b      	b.n	80041d2 <HAL_RCC_OscConfig+0xe02>
 8003afa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003afe:	2202      	movs	r2, #2
 8003b00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b02:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	fa93 f2a3 	rbit	r2, r3
 8003b0c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003b16:	2202      	movs	r2, #2
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	fa93 f2a3 	rbit	r2, r3
 8003b24:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003b2e:	2202      	movs	r2, #2
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	fa93 f2a3 	rbit	r2, r3
 8003b3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003b40:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b42:	4b6f      	ldr	r3, [pc, #444]	; (8003d00 <HAL_RCC_OscConfig+0x930>)
 8003b44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b46:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	6019      	str	r1, [r3, #0]
 8003b4e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	fa93 f1a3 	rbit	r1, r3
 8003b58:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003b5c:	6019      	str	r1, [r3, #0]
  return result;
 8003b5e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	fab3 f383 	clz	r3, r3
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	f003 031f 	and.w	r3, r3, #31
 8003b74:	2101      	movs	r1, #1
 8003b76:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1b2      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b80:	1d3b      	adds	r3, r7, #4
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 8158 	beq.w	8003e40 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b90:	2300      	movs	r3, #0
 8003b92:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b96:	4b5a      	ldr	r3, [pc, #360]	; (8003d00 <HAL_RCC_OscConfig+0x930>)
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d112      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba2:	4b57      	ldr	r3, [pc, #348]	; (8003d00 <HAL_RCC_OscConfig+0x930>)
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	4a56      	ldr	r2, [pc, #344]	; (8003d00 <HAL_RCC_OscConfig+0x930>)
 8003ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bac:	61d3      	str	r3, [r2, #28]
 8003bae:	4b54      	ldr	r3, [pc, #336]	; (8003d00 <HAL_RCC_OscConfig+0x930>)
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003bb6:	f107 0308 	add.w	r3, r7, #8
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	f107 0308 	add.w	r3, r7, #8
 8003bc0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc8:	4b4f      	ldr	r3, [pc, #316]	; (8003d08 <HAL_RCC_OscConfig+0x938>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d11a      	bne.n	8003c0a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bd4:	4b4c      	ldr	r3, [pc, #304]	; (8003d08 <HAL_RCC_OscConfig+0x938>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a4b      	ldr	r2, [pc, #300]	; (8003d08 <HAL_RCC_OscConfig+0x938>)
 8003bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bde:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003be0:	f7fd fefe 	bl	80019e0 <HAL_GetTick>
 8003be4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be8:	e009      	b.n	8003bfe <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bea:	f7fd fef9 	bl	80019e0 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	; 0x64
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e2e9      	b.n	80041d2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfe:	4b42      	ldr	r3, [pc, #264]	; (8003d08 <HAL_RCC_OscConfig+0x938>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0ef      	beq.n	8003bea <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c0a:	1d3b      	adds	r3, r7, #4
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d106      	bne.n	8003c22 <HAL_RCC_OscConfig+0x852>
 8003c14:	4b3a      	ldr	r3, [pc, #232]	; (8003d00 <HAL_RCC_OscConfig+0x930>)
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	4a39      	ldr	r2, [pc, #228]	; (8003d00 <HAL_RCC_OscConfig+0x930>)
 8003c1a:	f043 0301 	orr.w	r3, r3, #1
 8003c1e:	6213      	str	r3, [r2, #32]
 8003c20:	e02f      	b.n	8003c82 <HAL_RCC_OscConfig+0x8b2>
 8003c22:	1d3b      	adds	r3, r7, #4
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10c      	bne.n	8003c46 <HAL_RCC_OscConfig+0x876>
 8003c2c:	4b34      	ldr	r3, [pc, #208]	; (8003d00 <HAL_RCC_OscConfig+0x930>)
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	4a33      	ldr	r2, [pc, #204]	; (8003d00 <HAL_RCC_OscConfig+0x930>)
 8003c32:	f023 0301 	bic.w	r3, r3, #1
 8003c36:	6213      	str	r3, [r2, #32]
 8003c38:	4b31      	ldr	r3, [pc, #196]	; (8003d00 <HAL_RCC_OscConfig+0x930>)
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	4a30      	ldr	r2, [pc, #192]	; (8003d00 <HAL_RCC_OscConfig+0x930>)
 8003c3e:	f023 0304 	bic.w	r3, r3, #4
 8003c42:	6213      	str	r3, [r2, #32]
 8003c44:	e01d      	b.n	8003c82 <HAL_RCC_OscConfig+0x8b2>
 8003c46:	1d3b      	adds	r3, r7, #4
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	2b05      	cmp	r3, #5
 8003c4e:	d10c      	bne.n	8003c6a <HAL_RCC_OscConfig+0x89a>
 8003c50:	4b2b      	ldr	r3, [pc, #172]	; (8003d00 <HAL_RCC_OscConfig+0x930>)
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	4a2a      	ldr	r2, [pc, #168]	; (8003d00 <HAL_RCC_OscConfig+0x930>)
 8003c56:	f043 0304 	orr.w	r3, r3, #4
 8003c5a:	6213      	str	r3, [r2, #32]
 8003c5c:	4b28      	ldr	r3, [pc, #160]	; (8003d00 <HAL_RCC_OscConfig+0x930>)
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	4a27      	ldr	r2, [pc, #156]	; (8003d00 <HAL_RCC_OscConfig+0x930>)
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	6213      	str	r3, [r2, #32]
 8003c68:	e00b      	b.n	8003c82 <HAL_RCC_OscConfig+0x8b2>
 8003c6a:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <HAL_RCC_OscConfig+0x930>)
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	4a24      	ldr	r2, [pc, #144]	; (8003d00 <HAL_RCC_OscConfig+0x930>)
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	6213      	str	r3, [r2, #32]
 8003c76:	4b22      	ldr	r3, [pc, #136]	; (8003d00 <HAL_RCC_OscConfig+0x930>)
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	4a21      	ldr	r2, [pc, #132]	; (8003d00 <HAL_RCC_OscConfig+0x930>)
 8003c7c:	f023 0304 	bic.w	r3, r3, #4
 8003c80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c82:	1d3b      	adds	r3, r7, #4
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d06b      	beq.n	8003d64 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c8c:	f7fd fea8 	bl	80019e0 <HAL_GetTick>
 8003c90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c94:	e00b      	b.n	8003cae <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c96:	f7fd fea3 	bl	80019e0 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e291      	b.n	80041d2 <HAL_RCC_OscConfig+0xe02>
 8003cae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	fa93 f2a3 	rbit	r2, r3
 8003cc0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003cca:	2202      	movs	r2, #2
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	fa93 f2a3 	rbit	r2, r3
 8003cd8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003cdc:	601a      	str	r2, [r3, #0]
  return result;
 8003cde:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003ce2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce4:	fab3 f383 	clz	r3, r3
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	095b      	lsrs	r3, r3, #5
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	f043 0302 	orr.w	r3, r3, #2
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d109      	bne.n	8003d0c <HAL_RCC_OscConfig+0x93c>
 8003cf8:	4b01      	ldr	r3, [pc, #4]	; (8003d00 <HAL_RCC_OscConfig+0x930>)
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	e014      	b.n	8003d28 <HAL_RCC_OscConfig+0x958>
 8003cfe:	bf00      	nop
 8003d00:	40021000 	.word	0x40021000
 8003d04:	10908120 	.word	0x10908120
 8003d08:	40007000 	.word	0x40007000
 8003d0c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003d10:	2202      	movs	r2, #2
 8003d12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d14:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	fa93 f2a3 	rbit	r2, r3
 8003d1e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	4bbb      	ldr	r3, [pc, #748]	; (8004014 <HAL_RCC_OscConfig+0xc44>)
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003d2c:	2102      	movs	r1, #2
 8003d2e:	6011      	str	r1, [r2, #0]
 8003d30:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003d34:	6812      	ldr	r2, [r2, #0]
 8003d36:	fa92 f1a2 	rbit	r1, r2
 8003d3a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003d3e:	6011      	str	r1, [r2, #0]
  return result;
 8003d40:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	fab2 f282 	clz	r2, r2
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	f002 021f 	and.w	r2, r2, #31
 8003d56:	2101      	movs	r1, #1
 8003d58:	fa01 f202 	lsl.w	r2, r1, r2
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d099      	beq.n	8003c96 <HAL_RCC_OscConfig+0x8c6>
 8003d62:	e063      	b.n	8003e2c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d64:	f7fd fe3c 	bl	80019e0 <HAL_GetTick>
 8003d68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d6c:	e00b      	b.n	8003d86 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d6e:	f7fd fe37 	bl	80019e0 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e225      	b.n	80041d2 <HAL_RCC_OscConfig+0xe02>
 8003d86:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	fa93 f2a3 	rbit	r2, r3
 8003d98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003da2:	2202      	movs	r2, #2
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	fa93 f2a3 	rbit	r2, r3
 8003db0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003db4:	601a      	str	r2, [r3, #0]
  return result;
 8003db6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003dba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dbc:	fab3 f383 	clz	r3, r3
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	f043 0302 	orr.w	r3, r3, #2
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d102      	bne.n	8003dd6 <HAL_RCC_OscConfig+0xa06>
 8003dd0:	4b90      	ldr	r3, [pc, #576]	; (8004014 <HAL_RCC_OscConfig+0xc44>)
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	e00d      	b.n	8003df2 <HAL_RCC_OscConfig+0xa22>
 8003dd6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003dda:	2202      	movs	r2, #2
 8003ddc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dde:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	fa93 f2a3 	rbit	r2, r3
 8003de8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	4b89      	ldr	r3, [pc, #548]	; (8004014 <HAL_RCC_OscConfig+0xc44>)
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003df6:	2102      	movs	r1, #2
 8003df8:	6011      	str	r1, [r2, #0]
 8003dfa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	fa92 f1a2 	rbit	r1, r2
 8003e04:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003e08:	6011      	str	r1, [r2, #0]
  return result;
 8003e0a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003e0e:	6812      	ldr	r2, [r2, #0]
 8003e10:	fab2 f282 	clz	r2, r2
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	f002 021f 	and.w	r2, r2, #31
 8003e20:	2101      	movs	r1, #1
 8003e22:	fa01 f202 	lsl.w	r2, r1, r2
 8003e26:	4013      	ands	r3, r2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1a0      	bne.n	8003d6e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e2c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d105      	bne.n	8003e40 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e34:	4b77      	ldr	r3, [pc, #476]	; (8004014 <HAL_RCC_OscConfig+0xc44>)
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	4a76      	ldr	r2, [pc, #472]	; (8004014 <HAL_RCC_OscConfig+0xc44>)
 8003e3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e40:	1d3b      	adds	r3, r7, #4
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 81c2 	beq.w	80041d0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e4c:	4b71      	ldr	r3, [pc, #452]	; (8004014 <HAL_RCC_OscConfig+0xc44>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f003 030c 	and.w	r3, r3, #12
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	f000 819c 	beq.w	8004192 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e5a:	1d3b      	adds	r3, r7, #4
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	f040 8114 	bne.w	800408e <HAL_RCC_OscConfig+0xcbe>
 8003e66:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003e6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e70:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	fa93 f2a3 	rbit	r2, r3
 8003e7a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e7e:	601a      	str	r2, [r3, #0]
  return result;
 8003e80:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e84:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e86:	fab3 f383 	clz	r3, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	461a      	mov	r2, r3
 8003e98:	2300      	movs	r3, #0
 8003e9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9c:	f7fd fda0 	bl	80019e0 <HAL_GetTick>
 8003ea0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ea4:	e009      	b.n	8003eba <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea6:	f7fd fd9b 	bl	80019e0 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e18b      	b.n	80041d2 <HAL_RCC_OscConfig+0xe02>
 8003eba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003ebe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ec2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	fa93 f2a3 	rbit	r2, r3
 8003ece:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ed2:	601a      	str	r2, [r3, #0]
  return result;
 8003ed4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ed8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eda:	fab3 f383 	clz	r3, r3
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	095b      	lsrs	r3, r3, #5
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	f043 0301 	orr.w	r3, r3, #1
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d102      	bne.n	8003ef4 <HAL_RCC_OscConfig+0xb24>
 8003eee:	4b49      	ldr	r3, [pc, #292]	; (8004014 <HAL_RCC_OscConfig+0xc44>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	e01b      	b.n	8003f2c <HAL_RCC_OscConfig+0xb5c>
 8003ef4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003ef8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003efc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	fa93 f2a3 	rbit	r2, r3
 8003f08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003f12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	fa93 f2a3 	rbit	r2, r3
 8003f22:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	4b3a      	ldr	r3, [pc, #232]	; (8004014 <HAL_RCC_OscConfig+0xc44>)
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f34:	6011      	str	r1, [r2, #0]
 8003f36:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	fa92 f1a2 	rbit	r1, r2
 8003f40:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003f44:	6011      	str	r1, [r2, #0]
  return result;
 8003f46:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003f4a:	6812      	ldr	r2, [r2, #0]
 8003f4c:	fab2 f282 	clz	r2, r2
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	f042 0220 	orr.w	r2, r2, #32
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	f002 021f 	and.w	r2, r2, #31
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d19e      	bne.n	8003ea6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f68:	4b2a      	ldr	r3, [pc, #168]	; (8004014 <HAL_RCC_OscConfig+0xc44>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f70:	1d3b      	adds	r3, r7, #4
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f76:	1d3b      	adds	r3, r7, #4
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	4925      	ldr	r1, [pc, #148]	; (8004014 <HAL_RCC_OscConfig+0xc44>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]
 8003f84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	fa93 f2a3 	rbit	r2, r3
 8003f98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f9c:	601a      	str	r2, [r3, #0]
  return result;
 8003f9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003fa2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fa4:	fab3 f383 	clz	r3, r3
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fba:	f7fd fd11 	bl	80019e0 <HAL_GetTick>
 8003fbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fc2:	e009      	b.n	8003fd8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc4:	f7fd fd0c 	bl	80019e0 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e0fc      	b.n	80041d2 <HAL_RCC_OscConfig+0xe02>
 8003fd8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003fdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	fa93 f2a3 	rbit	r2, r3
 8003fec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ff0:	601a      	str	r2, [r3, #0]
  return result;
 8003ff2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ff6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ff8:	fab3 f383 	clz	r3, r3
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	095b      	lsrs	r3, r3, #5
 8004000:	b2db      	uxtb	r3, r3
 8004002:	f043 0301 	orr.w	r3, r3, #1
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b01      	cmp	r3, #1
 800400a:	d105      	bne.n	8004018 <HAL_RCC_OscConfig+0xc48>
 800400c:	4b01      	ldr	r3, [pc, #4]	; (8004014 <HAL_RCC_OscConfig+0xc44>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	e01e      	b.n	8004050 <HAL_RCC_OscConfig+0xc80>
 8004012:	bf00      	nop
 8004014:	40021000 	.word	0x40021000
 8004018:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800401c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004020:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004022:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	fa93 f2a3 	rbit	r2, r3
 800402c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004036:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	fa93 f2a3 	rbit	r2, r3
 8004046:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	4b63      	ldr	r3, [pc, #396]	; (80041dc <HAL_RCC_OscConfig+0xe0c>)
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004054:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004058:	6011      	str	r1, [r2, #0]
 800405a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800405e:	6812      	ldr	r2, [r2, #0]
 8004060:	fa92 f1a2 	rbit	r1, r2
 8004064:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004068:	6011      	str	r1, [r2, #0]
  return result;
 800406a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800406e:	6812      	ldr	r2, [r2, #0]
 8004070:	fab2 f282 	clz	r2, r2
 8004074:	b2d2      	uxtb	r2, r2
 8004076:	f042 0220 	orr.w	r2, r2, #32
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	f002 021f 	and.w	r2, r2, #31
 8004080:	2101      	movs	r1, #1
 8004082:	fa01 f202 	lsl.w	r2, r1, r2
 8004086:	4013      	ands	r3, r2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d09b      	beq.n	8003fc4 <HAL_RCC_OscConfig+0xbf4>
 800408c:	e0a0      	b.n	80041d0 <HAL_RCC_OscConfig+0xe00>
 800408e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004092:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004096:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004098:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	fa93 f2a3 	rbit	r2, r3
 80040a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040a6:	601a      	str	r2, [r3, #0]
  return result;
 80040a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040ac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ae:	fab3 f383 	clz	r3, r3
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	461a      	mov	r2, r3
 80040c0:	2300      	movs	r3, #0
 80040c2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c4:	f7fd fc8c 	bl	80019e0 <HAL_GetTick>
 80040c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040cc:	e009      	b.n	80040e2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ce:	f7fd fc87 	bl	80019e0 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e077      	b.n	80041d2 <HAL_RCC_OscConfig+0xe02>
 80040e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	fa93 f2a3 	rbit	r2, r3
 80040f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040fa:	601a      	str	r2, [r3, #0]
  return result;
 80040fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004100:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004102:	fab3 f383 	clz	r3, r3
 8004106:	b2db      	uxtb	r3, r3
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	b2db      	uxtb	r3, r3
 800410c:	f043 0301 	orr.w	r3, r3, #1
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b01      	cmp	r3, #1
 8004114:	d102      	bne.n	800411c <HAL_RCC_OscConfig+0xd4c>
 8004116:	4b31      	ldr	r3, [pc, #196]	; (80041dc <HAL_RCC_OscConfig+0xe0c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	e01b      	b.n	8004154 <HAL_RCC_OscConfig+0xd84>
 800411c:	f107 0320 	add.w	r3, r7, #32
 8004120:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004124:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004126:	f107 0320 	add.w	r3, r7, #32
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	fa93 f2a3 	rbit	r2, r3
 8004130:	f107 031c 	add.w	r3, r7, #28
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	f107 0318 	add.w	r3, r7, #24
 800413a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f107 0318 	add.w	r3, r7, #24
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	fa93 f2a3 	rbit	r2, r3
 800414a:	f107 0314 	add.w	r3, r7, #20
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	4b22      	ldr	r3, [pc, #136]	; (80041dc <HAL_RCC_OscConfig+0xe0c>)
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	f107 0210 	add.w	r2, r7, #16
 8004158:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800415c:	6011      	str	r1, [r2, #0]
 800415e:	f107 0210 	add.w	r2, r7, #16
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	fa92 f1a2 	rbit	r1, r2
 8004168:	f107 020c 	add.w	r2, r7, #12
 800416c:	6011      	str	r1, [r2, #0]
  return result;
 800416e:	f107 020c 	add.w	r2, r7, #12
 8004172:	6812      	ldr	r2, [r2, #0]
 8004174:	fab2 f282 	clz	r2, r2
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	f042 0220 	orr.w	r2, r2, #32
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	f002 021f 	and.w	r2, r2, #31
 8004184:	2101      	movs	r1, #1
 8004186:	fa01 f202 	lsl.w	r2, r1, r2
 800418a:	4013      	ands	r3, r2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d19e      	bne.n	80040ce <HAL_RCC_OscConfig+0xcfe>
 8004190:	e01e      	b.n	80041d0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004192:	1d3b      	adds	r3, r7, #4
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e018      	b.n	80041d2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041a0:	4b0e      	ldr	r3, [pc, #56]	; (80041dc <HAL_RCC_OscConfig+0xe0c>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041a8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80041ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041b0:	1d3b      	adds	r3, r7, #4
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d108      	bne.n	80041cc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80041ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80041be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041c2:	1d3b      	adds	r3, r7, #4
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d001      	beq.n	80041d0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e000      	b.n	80041d2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40021000 	.word	0x40021000

080041e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b09e      	sub	sp, #120	; 0x78
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e162      	b.n	80044be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041f8:	4b90      	ldr	r3, [pc, #576]	; (800443c <HAL_RCC_ClockConfig+0x25c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d910      	bls.n	8004228 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004206:	4b8d      	ldr	r3, [pc, #564]	; (800443c <HAL_RCC_ClockConfig+0x25c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f023 0207 	bic.w	r2, r3, #7
 800420e:	498b      	ldr	r1, [pc, #556]	; (800443c <HAL_RCC_ClockConfig+0x25c>)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	4313      	orrs	r3, r2
 8004214:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004216:	4b89      	ldr	r3, [pc, #548]	; (800443c <HAL_RCC_ClockConfig+0x25c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d001      	beq.n	8004228 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e14a      	b.n	80044be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d008      	beq.n	8004246 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004234:	4b82      	ldr	r3, [pc, #520]	; (8004440 <HAL_RCC_ClockConfig+0x260>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	497f      	ldr	r1, [pc, #508]	; (8004440 <HAL_RCC_ClockConfig+0x260>)
 8004242:	4313      	orrs	r3, r2
 8004244:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 80dc 	beq.w	800440c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d13c      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xf6>
 800425c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004260:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004262:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004264:	fa93 f3a3 	rbit	r3, r3
 8004268:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800426a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426c:	fab3 f383 	clz	r3, r3
 8004270:	b2db      	uxtb	r3, r3
 8004272:	095b      	lsrs	r3, r3, #5
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f043 0301 	orr.w	r3, r3, #1
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b01      	cmp	r3, #1
 800427e:	d102      	bne.n	8004286 <HAL_RCC_ClockConfig+0xa6>
 8004280:	4b6f      	ldr	r3, [pc, #444]	; (8004440 <HAL_RCC_ClockConfig+0x260>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	e00f      	b.n	80042a6 <HAL_RCC_ClockConfig+0xc6>
 8004286:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800428a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800428e:	fa93 f3a3 	rbit	r3, r3
 8004292:	667b      	str	r3, [r7, #100]	; 0x64
 8004294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004298:	663b      	str	r3, [r7, #96]	; 0x60
 800429a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800429c:	fa93 f3a3 	rbit	r3, r3
 80042a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042a2:	4b67      	ldr	r3, [pc, #412]	; (8004440 <HAL_RCC_ClockConfig+0x260>)
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80042ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042ae:	fa92 f2a2 	rbit	r2, r2
 80042b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80042b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80042b6:	fab2 f282 	clz	r2, r2
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	f042 0220 	orr.w	r2, r2, #32
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	f002 021f 	and.w	r2, r2, #31
 80042c6:	2101      	movs	r1, #1
 80042c8:	fa01 f202 	lsl.w	r2, r1, r2
 80042cc:	4013      	ands	r3, r2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d17b      	bne.n	80043ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e0f3      	b.n	80044be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d13c      	bne.n	8004358 <HAL_RCC_ClockConfig+0x178>
 80042de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042e6:	fa93 f3a3 	rbit	r3, r3
 80042ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80042ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ee:	fab3 f383 	clz	r3, r3
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	095b      	lsrs	r3, r3, #5
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d102      	bne.n	8004308 <HAL_RCC_ClockConfig+0x128>
 8004302:	4b4f      	ldr	r3, [pc, #316]	; (8004440 <HAL_RCC_ClockConfig+0x260>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	e00f      	b.n	8004328 <HAL_RCC_ClockConfig+0x148>
 8004308:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800430c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004310:	fa93 f3a3 	rbit	r3, r3
 8004314:	647b      	str	r3, [r7, #68]	; 0x44
 8004316:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800431a:	643b      	str	r3, [r7, #64]	; 0x40
 800431c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800431e:	fa93 f3a3 	rbit	r3, r3
 8004322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004324:	4b46      	ldr	r3, [pc, #280]	; (8004440 <HAL_RCC_ClockConfig+0x260>)
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800432c:	63ba      	str	r2, [r7, #56]	; 0x38
 800432e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004330:	fa92 f2a2 	rbit	r2, r2
 8004334:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004338:	fab2 f282 	clz	r2, r2
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	f042 0220 	orr.w	r2, r2, #32
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	f002 021f 	and.w	r2, r2, #31
 8004348:	2101      	movs	r1, #1
 800434a:	fa01 f202 	lsl.w	r2, r1, r2
 800434e:	4013      	ands	r3, r2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d13a      	bne.n	80043ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e0b2      	b.n	80044be <HAL_RCC_ClockConfig+0x2de>
 8004358:	2302      	movs	r3, #2
 800435a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	fa93 f3a3 	rbit	r3, r3
 8004362:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004366:	fab3 f383 	clz	r3, r3
 800436a:	b2db      	uxtb	r3, r3
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	b2db      	uxtb	r3, r3
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b01      	cmp	r3, #1
 8004378:	d102      	bne.n	8004380 <HAL_RCC_ClockConfig+0x1a0>
 800437a:	4b31      	ldr	r3, [pc, #196]	; (8004440 <HAL_RCC_ClockConfig+0x260>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	e00d      	b.n	800439c <HAL_RCC_ClockConfig+0x1bc>
 8004380:	2302      	movs	r3, #2
 8004382:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004386:	fa93 f3a3 	rbit	r3, r3
 800438a:	627b      	str	r3, [r7, #36]	; 0x24
 800438c:	2302      	movs	r3, #2
 800438e:	623b      	str	r3, [r7, #32]
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	fa93 f3a3 	rbit	r3, r3
 8004396:	61fb      	str	r3, [r7, #28]
 8004398:	4b29      	ldr	r3, [pc, #164]	; (8004440 <HAL_RCC_ClockConfig+0x260>)
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	2202      	movs	r2, #2
 800439e:	61ba      	str	r2, [r7, #24]
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	fa92 f2a2 	rbit	r2, r2
 80043a6:	617a      	str	r2, [r7, #20]
  return result;
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	fab2 f282 	clz	r2, r2
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	f042 0220 	orr.w	r2, r2, #32
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	f002 021f 	and.w	r2, r2, #31
 80043ba:	2101      	movs	r1, #1
 80043bc:	fa01 f202 	lsl.w	r2, r1, r2
 80043c0:	4013      	ands	r3, r2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e079      	b.n	80044be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ca:	4b1d      	ldr	r3, [pc, #116]	; (8004440 <HAL_RCC_ClockConfig+0x260>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f023 0203 	bic.w	r2, r3, #3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	491a      	ldr	r1, [pc, #104]	; (8004440 <HAL_RCC_ClockConfig+0x260>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043dc:	f7fd fb00 	bl	80019e0 <HAL_GetTick>
 80043e0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e2:	e00a      	b.n	80043fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e4:	f7fd fafc 	bl	80019e0 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e061      	b.n	80044be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fa:	4b11      	ldr	r3, [pc, #68]	; (8004440 <HAL_RCC_ClockConfig+0x260>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f003 020c 	and.w	r2, r3, #12
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	429a      	cmp	r2, r3
 800440a:	d1eb      	bne.n	80043e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800440c:	4b0b      	ldr	r3, [pc, #44]	; (800443c <HAL_RCC_ClockConfig+0x25c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d214      	bcs.n	8004444 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441a:	4b08      	ldr	r3, [pc, #32]	; (800443c <HAL_RCC_ClockConfig+0x25c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f023 0207 	bic.w	r2, r3, #7
 8004422:	4906      	ldr	r1, [pc, #24]	; (800443c <HAL_RCC_ClockConfig+0x25c>)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	4313      	orrs	r3, r2
 8004428:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800442a:	4b04      	ldr	r3, [pc, #16]	; (800443c <HAL_RCC_ClockConfig+0x25c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d005      	beq.n	8004444 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e040      	b.n	80044be <HAL_RCC_ClockConfig+0x2de>
 800443c:	40022000 	.word	0x40022000
 8004440:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004450:	4b1d      	ldr	r3, [pc, #116]	; (80044c8 <HAL_RCC_ClockConfig+0x2e8>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	491a      	ldr	r1, [pc, #104]	; (80044c8 <HAL_RCC_ClockConfig+0x2e8>)
 800445e:	4313      	orrs	r3, r2
 8004460:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d009      	beq.n	8004482 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800446e:	4b16      	ldr	r3, [pc, #88]	; (80044c8 <HAL_RCC_ClockConfig+0x2e8>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	4912      	ldr	r1, [pc, #72]	; (80044c8 <HAL_RCC_ClockConfig+0x2e8>)
 800447e:	4313      	orrs	r3, r2
 8004480:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004482:	f000 f829 	bl	80044d8 <HAL_RCC_GetSysClockFreq>
 8004486:	4601      	mov	r1, r0
 8004488:	4b0f      	ldr	r3, [pc, #60]	; (80044c8 <HAL_RCC_ClockConfig+0x2e8>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004490:	22f0      	movs	r2, #240	; 0xf0
 8004492:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	fa92 f2a2 	rbit	r2, r2
 800449a:	60fa      	str	r2, [r7, #12]
  return result;
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	fab2 f282 	clz	r2, r2
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	40d3      	lsrs	r3, r2
 80044a6:	4a09      	ldr	r2, [pc, #36]	; (80044cc <HAL_RCC_ClockConfig+0x2ec>)
 80044a8:	5cd3      	ldrb	r3, [r2, r3]
 80044aa:	fa21 f303 	lsr.w	r3, r1, r3
 80044ae:	4a08      	ldr	r2, [pc, #32]	; (80044d0 <HAL_RCC_ClockConfig+0x2f0>)
 80044b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80044b2:	4b08      	ldr	r3, [pc, #32]	; (80044d4 <HAL_RCC_ClockConfig+0x2f4>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fd f9aa 	bl	8001810 <HAL_InitTick>
  
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3778      	adds	r7, #120	; 0x78
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	40021000 	.word	0x40021000
 80044cc:	080087d0 	.word	0x080087d0
 80044d0:	20000000 	.word	0x20000000
 80044d4:	20000004 	.word	0x20000004

080044d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	b08b      	sub	sp, #44	; 0x2c
 80044dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	2300      	movs	r3, #0
 80044e4:	61bb      	str	r3, [r7, #24]
 80044e6:	2300      	movs	r3, #0
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80044f2:	4b29      	ldr	r3, [pc, #164]	; (8004598 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	f003 030c 	and.w	r3, r3, #12
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d002      	beq.n	8004508 <HAL_RCC_GetSysClockFreq+0x30>
 8004502:	2b08      	cmp	r3, #8
 8004504:	d003      	beq.n	800450e <HAL_RCC_GetSysClockFreq+0x36>
 8004506:	e03c      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004508:	4b24      	ldr	r3, [pc, #144]	; (800459c <HAL_RCC_GetSysClockFreq+0xc4>)
 800450a:	623b      	str	r3, [r7, #32]
      break;
 800450c:	e03c      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004514:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004518:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	fa92 f2a2 	rbit	r2, r2
 8004520:	607a      	str	r2, [r7, #4]
  return result;
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	fab2 f282 	clz	r2, r2
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	40d3      	lsrs	r3, r2
 800452c:	4a1c      	ldr	r2, [pc, #112]	; (80045a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800452e:	5cd3      	ldrb	r3, [r2, r3]
 8004530:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004532:	4b19      	ldr	r3, [pc, #100]	; (8004598 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	220f      	movs	r2, #15
 800453c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	fa92 f2a2 	rbit	r2, r2
 8004544:	60fa      	str	r2, [r7, #12]
  return result;
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	fab2 f282 	clz	r2, r2
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	40d3      	lsrs	r3, r2
 8004550:	4a14      	ldr	r2, [pc, #80]	; (80045a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004552:	5cd3      	ldrb	r3, [r2, r3]
 8004554:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d008      	beq.n	8004572 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004560:	4a0e      	ldr	r2, [pc, #56]	; (800459c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	fbb2 f2f3 	udiv	r2, r2, r3
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	fb02 f303 	mul.w	r3, r2, r3
 800456e:	627b      	str	r3, [r7, #36]	; 0x24
 8004570:	e004      	b.n	800457c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	4a0c      	ldr	r2, [pc, #48]	; (80045a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004576:	fb02 f303 	mul.w	r3, r2, r3
 800457a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	623b      	str	r3, [r7, #32]
      break;
 8004580:	e002      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004582:	4b06      	ldr	r3, [pc, #24]	; (800459c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004584:	623b      	str	r3, [r7, #32]
      break;
 8004586:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004588:	6a3b      	ldr	r3, [r7, #32]
}
 800458a:	4618      	mov	r0, r3
 800458c:	372c      	adds	r7, #44	; 0x2c
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40021000 	.word	0x40021000
 800459c:	007a1200 	.word	0x007a1200
 80045a0:	080087e8 	.word	0x080087e8
 80045a4:	080087f8 	.word	0x080087f8
 80045a8:	003d0900 	.word	0x003d0900

080045ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045b0:	4b03      	ldr	r3, [pc, #12]	; (80045c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80045b2:	681b      	ldr	r3, [r3, #0]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	20000000 	.word	0x20000000

080045c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80045ca:	f7ff ffef 	bl	80045ac <HAL_RCC_GetHCLKFreq>
 80045ce:	4601      	mov	r1, r0
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80045dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	fa92 f2a2 	rbit	r2, r2
 80045e4:	603a      	str	r2, [r7, #0]
  return result;
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	fab2 f282 	clz	r2, r2
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	40d3      	lsrs	r3, r2
 80045f0:	4a04      	ldr	r2, [pc, #16]	; (8004604 <HAL_RCC_GetPCLK1Freq+0x40>)
 80045f2:	5cd3      	ldrb	r3, [r2, r3]
 80045f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40021000 	.word	0x40021000
 8004604:	080087e0 	.word	0x080087e0

08004608 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	220f      	movs	r2, #15
 8004616:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004618:	4b12      	ldr	r3, [pc, #72]	; (8004664 <HAL_RCC_GetClockConfig+0x5c>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f003 0203 	and.w	r2, r3, #3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004624:	4b0f      	ldr	r3, [pc, #60]	; (8004664 <HAL_RCC_GetClockConfig+0x5c>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004630:	4b0c      	ldr	r3, [pc, #48]	; (8004664 <HAL_RCC_GetClockConfig+0x5c>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800463c:	4b09      	ldr	r3, [pc, #36]	; (8004664 <HAL_RCC_GetClockConfig+0x5c>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	08db      	lsrs	r3, r3, #3
 8004642:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800464a:	4b07      	ldr	r3, [pc, #28]	; (8004668 <HAL_RCC_GetClockConfig+0x60>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0207 	and.w	r2, r3, #7
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	601a      	str	r2, [r3, #0]
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	40021000 	.word	0x40021000
 8004668:	40022000 	.word	0x40022000

0800466c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b092      	sub	sp, #72	; 0x48
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800467c:	2300      	movs	r3, #0
 800467e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 80d4 	beq.w	8004838 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004690:	4b4e      	ldr	r3, [pc, #312]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10e      	bne.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800469c:	4b4b      	ldr	r3, [pc, #300]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	4a4a      	ldr	r2, [pc, #296]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a6:	61d3      	str	r3, [r2, #28]
 80046a8:	4b48      	ldr	r3, [pc, #288]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b0:	60bb      	str	r3, [r7, #8]
 80046b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046b4:	2301      	movs	r3, #1
 80046b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ba:	4b45      	ldr	r3, [pc, #276]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d118      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046c6:	4b42      	ldr	r3, [pc, #264]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a41      	ldr	r2, [pc, #260]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d2:	f7fd f985 	bl	80019e0 <HAL_GetTick>
 80046d6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d8:	e008      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046da:	f7fd f981 	bl	80019e0 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b64      	cmp	r3, #100	; 0x64
 80046e6:	d901      	bls.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e169      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ec:	4b38      	ldr	r3, [pc, #224]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0f0      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046f8:	4b34      	ldr	r3, [pc, #208]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004700:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 8084 	beq.w	8004812 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004712:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004714:	429a      	cmp	r2, r3
 8004716:	d07c      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004718:	4b2c      	ldr	r3, [pc, #176]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004726:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472a:	fa93 f3a3 	rbit	r3, r3
 800472e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004732:	fab3 f383 	clz	r3, r3
 8004736:	b2db      	uxtb	r3, r3
 8004738:	461a      	mov	r2, r3
 800473a:	4b26      	ldr	r3, [pc, #152]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	461a      	mov	r2, r3
 8004742:	2301      	movs	r3, #1
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800474a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474e:	fa93 f3a3 	rbit	r3, r3
 8004752:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004756:	fab3 f383 	clz	r3, r3
 800475a:	b2db      	uxtb	r3, r3
 800475c:	461a      	mov	r2, r3
 800475e:	4b1d      	ldr	r3, [pc, #116]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004760:	4413      	add	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	461a      	mov	r2, r3
 8004766:	2300      	movs	r3, #0
 8004768:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800476a:	4a18      	ldr	r2, [pc, #96]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800476e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d04b      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477a:	f7fd f931 	bl	80019e0 <HAL_GetTick>
 800477e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004780:	e00a      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004782:	f7fd f92d 	bl	80019e0 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004790:	4293      	cmp	r3, r2
 8004792:	d901      	bls.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e113      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004798:	2302      	movs	r3, #2
 800479a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479e:	fa93 f3a3 	rbit	r3, r3
 80047a2:	627b      	str	r3, [r7, #36]	; 0x24
 80047a4:	2302      	movs	r3, #2
 80047a6:	623b      	str	r3, [r7, #32]
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	fa93 f3a3 	rbit	r3, r3
 80047ae:	61fb      	str	r3, [r7, #28]
  return result;
 80047b0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b2:	fab3 f383 	clz	r3, r3
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	095b      	lsrs	r3, r3, #5
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	f043 0302 	orr.w	r3, r3, #2
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d108      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80047c6:	4b01      	ldr	r3, [pc, #4]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	e00d      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80047cc:	40021000 	.word	0x40021000
 80047d0:	40007000 	.word	0x40007000
 80047d4:	10908100 	.word	0x10908100
 80047d8:	2302      	movs	r3, #2
 80047da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	fa93 f3a3 	rbit	r3, r3
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	4b78      	ldr	r3, [pc, #480]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	2202      	movs	r2, #2
 80047ea:	613a      	str	r2, [r7, #16]
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	fa92 f2a2 	rbit	r2, r2
 80047f2:	60fa      	str	r2, [r7, #12]
  return result;
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	fab2 f282 	clz	r2, r2
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	f002 021f 	and.w	r2, r2, #31
 8004806:	2101      	movs	r1, #1
 8004808:	fa01 f202 	lsl.w	r2, r1, r2
 800480c:	4013      	ands	r3, r2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0b7      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004812:	4b6d      	ldr	r3, [pc, #436]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	496a      	ldr	r1, [pc, #424]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004820:	4313      	orrs	r3, r2
 8004822:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004824:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004828:	2b01      	cmp	r3, #1
 800482a:	d105      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800482c:	4b66      	ldr	r3, [pc, #408]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	4a65      	ldr	r2, [pc, #404]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004836:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d008      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004844:	4b60      	ldr	r3, [pc, #384]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004848:	f023 0203 	bic.w	r2, r3, #3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	495d      	ldr	r1, [pc, #372]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004852:	4313      	orrs	r3, r2
 8004854:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d008      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004862:	4b59      	ldr	r3, [pc, #356]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	4956      	ldr	r1, [pc, #344]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004870:	4313      	orrs	r3, r2
 8004872:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d008      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004880:	4b51      	ldr	r3, [pc, #324]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	494e      	ldr	r1, [pc, #312]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800488e:	4313      	orrs	r3, r2
 8004890:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0320 	and.w	r3, r3, #32
 800489a:	2b00      	cmp	r3, #0
 800489c:	d008      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800489e:	4b4a      	ldr	r3, [pc, #296]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a2:	f023 0210 	bic.w	r2, r3, #16
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	4947      	ldr	r1, [pc, #284]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d008      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80048bc:	4b42      	ldr	r3, [pc, #264]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c8:	493f      	ldr	r1, [pc, #252]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d008      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048da:	4b3b      	ldr	r3, [pc, #236]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048de:	f023 0220 	bic.w	r2, r3, #32
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	4938      	ldr	r1, [pc, #224]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048f8:	4b33      	ldr	r3, [pc, #204]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	4930      	ldr	r1, [pc, #192]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004906:	4313      	orrs	r3, r2
 8004908:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0310 	and.w	r3, r3, #16
 8004912:	2b00      	cmp	r3, #0
 8004914:	d008      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004916:	4b2c      	ldr	r3, [pc, #176]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	4929      	ldr	r1, [pc, #164]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004924:	4313      	orrs	r3, r2
 8004926:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004930:	2b00      	cmp	r3, #0
 8004932:	d008      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004934:	4b24      	ldr	r3, [pc, #144]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004940:	4921      	ldr	r1, [pc, #132]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004942:	4313      	orrs	r3, r2
 8004944:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494e:	2b00      	cmp	r3, #0
 8004950:	d008      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004952:	4b1d      	ldr	r3, [pc, #116]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004956:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	491a      	ldr	r1, [pc, #104]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004960:	4313      	orrs	r3, r2
 8004962:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496c:	2b00      	cmp	r3, #0
 800496e:	d008      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004970:	4b15      	ldr	r3, [pc, #84]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	4912      	ldr	r1, [pc, #72]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800497e:	4313      	orrs	r3, r2
 8004980:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d008      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800498e:	4b0e      	ldr	r3, [pc, #56]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004992:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499a:	490b      	ldr	r1, [pc, #44]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800499c:	4313      	orrs	r3, r2
 800499e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80049ac:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b8:	4903      	ldr	r1, [pc, #12]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3748      	adds	r7, #72	; 0x48
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40021000 	.word	0x40021000

080049cc <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e0aa      	b.n	8004b34 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fc fe7e 	bl	80016f0 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0201 	bic.w	r2, r2, #1
 8004a08:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a16:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695a      	ldr	r2, [r3, #20]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a26:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695a      	ldr	r2, [r3, #20]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a36:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a40:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a50:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d012      	beq.n	8004a80 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d107      	bne.n	8004a72 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a6e:	609a      	str	r2, [r3, #8]
 8004a70:	e006      	b.n	8004a80 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004a7e:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d104      	bne.n	8004a92 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6812      	ldr	r2, [r2, #0]
 8004a9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004aa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aa4:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695a      	ldr	r2, [r3, #20]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a1a      	ldr	r2, [r3, #32]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8004ace:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8004ae0:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8004ae2:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aec:	d110      	bne.n	8004b10 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d004      	beq.n	8004b00 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8004afa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004afe:	d107      	bne.n	8004b10 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004b0e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0201 	orr.w	r2, r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_SMBUS_EV_IRQHandler>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_EV_IRQHandler(SMBUS_HandleTypeDef *hsmbus)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Use a local variable to store the current ISR flags */
  /* This action will avoid a wrong treatment due to ISR flags change during interrupt handler */
  uint32_t tmpisrvalue = READ_REG(hsmbus->Instance->ISR);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr1value = READ_REG(hsmbus->Instance->CR1);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60bb      	str	r3, [r7, #8]

  /* SMBUS in mode Transmitter ---------------------------------------------------*/
  if ((SMBUS_CHECK_IT_SOURCE(tmpcr1value, (SMBUS_IT_TCI | SMBUS_IT_STOPI |
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f003 0372 	and.w	r3, r3, #114	; 0x72
 8004b5a:	2b72      	cmp	r3, #114	; 0x72
 8004b5c:	d132      	bne.n	8004bc4 <HAL_SMBUS_EV_IRQHandler+0x88>
                                           SMBUS_IT_NACKI | SMBUS_IT_TXI)) != RESET) &&
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TXIS) != RESET) ||
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	085b      	lsrs	r3, r3, #1
 8004b62:	f003 0301 	and.w	r3, r3, #1
                                           SMBUS_IT_NACKI | SMBUS_IT_TXI)) != RESET) &&
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d117      	bne.n	8004b9a <HAL_SMBUS_EV_IRQHandler+0x5e>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	09db      	lsrs	r3, r3, #7
 8004b6e:	f003 0301 	and.w	r3, r3, #1
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TXIS) != RESET) ||
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d111      	bne.n	8004b9a <HAL_SMBUS_EV_IRQHandler+0x5e>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	099b      	lsrs	r3, r3, #6
 8004b7a:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10b      	bne.n	8004b9a <HAL_SMBUS_EV_IRQHandler+0x5e>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	095b      	lsrs	r3, r3, #5
 8004b86:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d105      	bne.n	8004b9a <HAL_SMBUS_EV_IRQHandler+0x5e>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	091b      	lsrs	r3, r3, #4
 8004b92:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d014      	beq.n	8004bc4 <HAL_SMBUS_EV_IRQHandler+0x88>
  {
    /* Slave mode selected */
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b9e:	f003 0332 	and.w	r3, r3, #50	; 0x32
 8004ba2:	2b32      	cmp	r3, #50	; 0x32
 8004ba4:	d104      	bne.n	8004bb0 <HAL_SMBUS_EV_IRQHandler+0x74>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 8004ba6:	68f9      	ldr	r1, [r7, #12]
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 fa97 	bl	80050dc <SMBUS_Slave_ISR>
 8004bae:	e009      	b.n	8004bc4 <HAL_SMBUS_EV_IRQHandler+0x88>
    }
    /* Master mode selected */
    else if ((hsmbus->State & HAL_SMBUS_STATE_MASTER_BUSY_TX) == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb4:	f003 0312 	and.w	r3, r3, #18
 8004bb8:	2b12      	cmp	r3, #18
 8004bba:	d103      	bne.n	8004bc4 <HAL_SMBUS_EV_IRQHandler+0x88>
    {
      (void)SMBUS_Master_ISR(hsmbus, tmpisrvalue);
 8004bbc:	68f9      	ldr	r1, [r7, #12]
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f8b4 	bl	8004d2c <SMBUS_Master_ISR>
      /* Nothing to do */
    }
  }

  /* SMBUS in mode Receiver ----------------------------------------------------*/
  if ((SMBUS_CHECK_IT_SOURCE(tmpcr1value, (SMBUS_IT_TCI | SMBUS_IT_STOPI |
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f003 0374 	and.w	r3, r3, #116	; 0x74
 8004bca:	2b74      	cmp	r3, #116	; 0x74
 8004bcc:	d132      	bne.n	8004c34 <HAL_SMBUS_EV_IRQHandler+0xf8>
                                           SMBUS_IT_NACKI | SMBUS_IT_RXI)) != RESET) &&
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_RXNE) != RESET) ||
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	089b      	lsrs	r3, r3, #2
 8004bd2:	f003 0301 	and.w	r3, r3, #1
                                           SMBUS_IT_NACKI | SMBUS_IT_RXI)) != RESET) &&
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d117      	bne.n	8004c0a <HAL_SMBUS_EV_IRQHandler+0xce>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	09db      	lsrs	r3, r3, #7
 8004bde:	f003 0301 	and.w	r3, r3, #1
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_RXNE) != RESET) ||
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d111      	bne.n	8004c0a <HAL_SMBUS_EV_IRQHandler+0xce>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	099b      	lsrs	r3, r3, #6
 8004bea:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10b      	bne.n	8004c0a <HAL_SMBUS_EV_IRQHandler+0xce>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	095b      	lsrs	r3, r3, #5
 8004bf6:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d105      	bne.n	8004c0a <HAL_SMBUS_EV_IRQHandler+0xce>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	091b      	lsrs	r3, r3, #4
 8004c02:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d014      	beq.n	8004c34 <HAL_SMBUS_EV_IRQHandler+0xf8>
  {
    /* Slave mode selected */
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c0e:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8004c12:	2b42      	cmp	r3, #66	; 0x42
 8004c14:	d104      	bne.n	8004c20 <HAL_SMBUS_EV_IRQHandler+0xe4>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 8004c16:	68f9      	ldr	r1, [r7, #12]
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 fa5f 	bl	80050dc <SMBUS_Slave_ISR>
 8004c1e:	e009      	b.n	8004c34 <HAL_SMBUS_EV_IRQHandler+0xf8>
    }
    /* Master mode selected */
    else if ((hsmbus->State & HAL_SMBUS_STATE_MASTER_BUSY_RX) == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c24:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004c28:	2b22      	cmp	r3, #34	; 0x22
 8004c2a:	d103      	bne.n	8004c34 <HAL_SMBUS_EV_IRQHandler+0xf8>
    {
      (void)SMBUS_Master_ISR(hsmbus, tmpisrvalue);
 8004c2c:	68f9      	ldr	r1, [r7, #12]
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f87c 	bl	8004d2c <SMBUS_Master_ISR>
      /* Nothing to do */
    }
  }

  /* SMBUS in mode Listener Only --------------------------------------------------*/
  if (((SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_ADDRI) != RESET) ||
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	08db      	lsrs	r3, r3, #3
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10b      	bne.n	8004c58 <HAL_SMBUS_EV_IRQHandler+0x11c>
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_STOPI) != RESET) ||
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	095b      	lsrs	r3, r3, #5
 8004c44:	f003 0301 	and.w	r3, r3, #1
  if (((SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_ADDRI) != RESET) ||
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d105      	bne.n	8004c58 <HAL_SMBUS_EV_IRQHandler+0x11c>
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_NACKI) != RESET)) &&
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	091b      	lsrs	r3, r3, #4
 8004c50:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_STOPI) != RESET) ||
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d01b      	beq.n	8004c90 <HAL_SMBUS_EV_IRQHandler+0x154>
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_ADDR) != RESET) ||
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	08db      	lsrs	r3, r3, #3
 8004c5c:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_NACKI) != RESET)) &&
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10b      	bne.n	8004c7c <HAL_SMBUS_EV_IRQHandler+0x140>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	095b      	lsrs	r3, r3, #5
 8004c68:	f003 0301 	and.w	r3, r3, #1
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_ADDR) != RESET) ||
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d105      	bne.n	8004c7c <HAL_SMBUS_EV_IRQHandler+0x140>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	091b      	lsrs	r3, r3, #4
 8004c74:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d009      	beq.n	8004c90 <HAL_SMBUS_EV_IRQHandler+0x154>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d103      	bne.n	8004c90 <HAL_SMBUS_EV_IRQHandler+0x154>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 8004c88:	68f9      	ldr	r1, [r7, #12]
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fa26 	bl	80050dc <SMBUS_Slave_ISR>
    }
  }
}
 8004c90:	bf00      	nop
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_SMBUS_MasterTxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_MasterTxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_MasterTxCpltCallback() could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_SMBUS_MasterRxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_MasterRxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_MasterRxCpltCallback() could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_SMBUS_SlaveTxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_SlaveTxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_SlaveTxCpltCallback() could be implemented in the user file
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_SMBUS_SlaveRxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_SlaveRxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_SlaveRxCpltCallback() could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_SMBUS_AddrCallback>:
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_SMBUS_AddrCallback(SMBUS_HandleTypeDef *hsmbus, uint8_t TransferDirection,
                                   uint16_t AddrMatchCode)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	70fb      	strb	r3, [r7, #3]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_AddrCallback() could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_SMBUS_ListenCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_ListenCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_ListenCpltCallback() could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_SMBUS_ErrorCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_ErrorCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_ErrorCallback() could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <SMBUS_Master_ISR>:
  *                the configuration information for the specified SMBUS.
  * @param  StatusFlags Value of Interrupt Flags.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMBUS_Master_ISR(SMBUS_HandleTypeDef *hsmbus, uint32_t StatusFlags)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint16_t DevAddress;

  /* Process Locked */
  __HAL_LOCK(hsmbus);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <SMBUS_Master_ISR+0x18>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e1c6      	b.n	80050d2 <SMBUS_Master_ISR+0x3a6>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_AF) != RESET)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	091b      	lsrs	r3, r3, #4
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d011      	beq.n	8004d7c <SMBUS_Master_ISR+0x50>
  {
    /* Clear NACK Flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2210      	movs	r2, #16
 8004d5e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ACKF;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d64:	f043 0204 	orr.w	r2, r3, #4
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->ErrorCallback(hsmbus);
#else
    HAL_SMBUS_ErrorCallback(hsmbus);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff ffcf 	bl	8004d18 <HAL_SMBUS_ErrorCallback>
 8004d7a:	e1a5      	b.n	80050c8 <SMBUS_Master_ISR+0x39c>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_STOPF) != RESET)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d07a      	beq.n	8004e7e <SMBUS_Master_ISR+0x152>
  {
    /* Check and treat errors if errors occurs during STOP process */
    SMBUS_ITErrorHandler(hsmbus);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 fc00 	bl	800558e <SMBUS_ITErrorHandler>

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d92:	2b12      	cmp	r3, #18
 8004d94:	d12d      	bne.n	8004df2 <SMBUS_Master_ISR+0xc6>
    {
      /* Disable Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 8004d96:	21f2      	movs	r1, #242	; 0xf2
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fb7b 	bl	8005494 <SMBUS_Disable_IRQ>

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2220      	movs	r2, #32
 8004da4:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6859      	ldr	r1, [r3, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	4b91      	ldr	r3, [pc, #580]	; (8004ff8 <SMBUS_Master_ISR+0x2cc>)
 8004db2:	400b      	ands	r3, r1
 8004db4:	6053      	str	r3, [r2, #4]

      /* Flush remaining data in Fifo register in case of error occurs before TXEmpty */
      /* Disable the selected SMBUS peripheral */
      __HAL_SMBUS_DISABLE(hsmbus);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0201 	bic.w	r2, r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]

      hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Re-enable the selected SMBUS peripheral */
      __HAL_SMBUS_ENABLE(hsmbus);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f042 0201 	orr.w	r2, r2, #1
 8004de8:	601a      	str	r2, [r3, #0]

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->MasterTxCpltCallback(hsmbus);
#else
      HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7ff ff54 	bl	8004c98 <HAL_SMBUS_MasterTxCpltCallback>
 8004df0:	e16a      	b.n	80050c8 <SMBUS_Master_ISR+0x39c>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
    else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df6:	2b22      	cmp	r3, #34	; 0x22
 8004df8:	f040 8166 	bne.w	80050c8 <SMBUS_Master_ISR+0x39c>
    {
      /* Store Last receive data if any */
      if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	089b      	lsrs	r3, r3, #2
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01c      	beq.n	8004e42 <SMBUS_Master_ISR+0x116>
      {
        /* Read data from RXDR */
        *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hsmbus->pBuffPtr++;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1a:	1c5a      	adds	r2, r3, #1
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	635a      	str	r2, [r3, #52]	; 0x34

        if ((hsmbus->XferSize > 0U))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00c      	beq.n	8004e42 <SMBUS_Master_ISR+0x116>
        {
          hsmbus->XferSize--;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
      }

      /* Disable Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 8004e42:	21d4      	movs	r1, #212	; 0xd4
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fb25 	bl	8005494 <SMBUS_Disable_IRQ>

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6859      	ldr	r1, [r3, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	4b66      	ldr	r3, [pc, #408]	; (8004ff8 <SMBUS_Master_ISR+0x2cc>)
 8004e5e:	400b      	ands	r3, r1
 8004e60:	6053      	str	r3, [r2, #4]

      hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->MasterRxCpltCallback(hsmbus);
#else
      HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7ff ff18 	bl	8004cac <HAL_SMBUS_MasterRxCpltCallback>
 8004e7c:	e124      	b.n	80050c8 <SMBUS_Master_ISR+0x39c>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	089b      	lsrs	r3, r3, #2
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d019      	beq.n	8004ebe <SMBUS_Master_ISR+0x192>
  {
    /* Read data from RXDR */
    *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hsmbus->pBuffPtr++;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment Size counter */
    hsmbus->XferSize--;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	871a      	strh	r2, [r3, #56]	; 0x38
    hsmbus->XferCount--;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	875a      	strh	r2, [r3, #58]	; 0x3a
 8004ebc:	e104      	b.n	80050c8 <SMBUS_Master_ISR+0x39c>
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TXIS) != RESET)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	085b      	lsrs	r3, r3, #1
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d018      	beq.n	8004efc <SMBUS_Master_ISR+0x1d0>
  {
    /* Write data to TXDR */
    hsmbus->Instance->TXDR = *hsmbus->pBuffPtr;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ece:	781a      	ldrb	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hsmbus->pBuffPtr++;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment Size counter */
    hsmbus->XferSize--;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	871a      	strh	r2, [r3, #56]	; 0x38
    hsmbus->XferCount--;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	875a      	strh	r2, [r3, #58]	; 0x3a
 8004efa:	e0e5      	b.n	80050c8 <SMBUS_Master_ISR+0x39c>
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TCR) != RESET)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	09db      	lsrs	r3, r3, #7
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 8090 	beq.w	800502a <SMBUS_Master_ISR+0x2fe>
  {
    if ((hsmbus->XferCount != 0U) && (hsmbus->XferSize == 0U))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d046      	beq.n	8004fa2 <SMBUS_Master_ISR+0x276>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d142      	bne.n	8004fa2 <SMBUS_Master_ISR+0x276>
    {
      DevAddress = (uint16_t)(hsmbus->Instance->CR2 & I2C_CR2_SADD);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f28:	81fb      	strh	r3, [r7, #14]

      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2bff      	cmp	r3, #255	; 0xff
 8004f32:	d910      	bls.n	8004f56 <SMBUS_Master_ISR+0x22a>
      {
        SMBUS_TransferConfig(hsmbus, DevAddress, MAX_NBYTE_SIZE,
                             (SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE)),
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        SMBUS_TransferConfig(hsmbus, DevAddress, MAX_NBYTE_SIZE,
 8004f3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f40:	89f9      	ldrh	r1, [r7, #14]
 8004f42:	2200      	movs	r2, #0
 8004f44:	9200      	str	r2, [sp, #0]
 8004f46:	22ff      	movs	r2, #255	; 0xff
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fbd3 	bl	80056f4 <SMBUS_TransferConfig>
                             SMBUS_NO_STARTSTOP);
        hsmbus->XferSize = MAX_NBYTE_SIZE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	22ff      	movs	r2, #255	; 0xff
 8004f52:	871a      	strh	r2, [r3, #56]	; 0x38
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 8004f54:	e0b7      	b.n	80050c6 <SMBUS_Master_ISR+0x39a>
      }
      else
      {
        hsmbus->XferSize = hsmbus->XferCount;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	871a      	strh	r2, [r3, #56]	; 0x38
        SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions,
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6a:	89f9      	ldrh	r1, [r7, #14]
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	9000      	str	r0, [sp, #0]
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 fbbf 	bl	80056f4 <SMBUS_TransferConfig>
                             SMBUS_NO_STARTSTOP);
        /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
        /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
        if (SMBUS_GET_PEC_MODE(hsmbus) != 0UL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 80a0 	beq.w	80050c6 <SMBUS_Master_ISR+0x39a>
        {
          hsmbus->XferSize--;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	875a      	strh	r2, [r3, #58]	; 0x3a
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 8004fa0:	e091      	b.n	80050c6 <SMBUS_Master_ISR+0x39a>
        }
      }
    }
    else if ((hsmbus->XferCount == 0U) && (hsmbus->XferSize == 0U))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f040 808d 	bne.w	80050c8 <SMBUS_Master_ISR+0x39c>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f040 8088 	bne.w	80050c8 <SMBUS_Master_ISR+0x39c>
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (SMBUS_GET_STOP_MODE(hsmbus) != SMBUS_AUTOEND_MODE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fc6:	d07f      	beq.n	80050c8 <SMBUS_Master_ISR+0x39c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fcc:	2b12      	cmp	r3, #18
 8004fce:	d115      	bne.n	8004ffc <SMBUS_Master_ISR+0x2d0>
        {
          /* Disable Interrupt */
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 8004fd0:	21f2      	movs	r1, #242	; 0xf2
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fa5e 	bl	8005494 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterTxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7ff fe52 	bl	8004c98 <HAL_SMBUS_MasterTxCpltCallback>
 8004ff4:	e068      	b.n	80050c8 <SMBUS_Master_ISR+0x39c>
 8004ff6:	bf00      	nop
 8004ff8:	fe00e800 	.word	0xfe00e800
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
        }
        else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005000:	2b22      	cmp	r3, #34	; 0x22
 8005002:	d161      	bne.n	80050c8 <SMBUS_Master_ISR+0x39c>
        {
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 8005004:	21d4      	movs	r1, #212	; 0xd4
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fa44 	bl	8005494 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterRxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7ff fe42 	bl	8004cac <HAL_SMBUS_MasterRxCpltCallback>
 8005028:	e04e      	b.n	80050c8 <SMBUS_Master_ISR+0x39c>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TC) != RESET)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	099b      	lsrs	r3, r3, #6
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d048      	beq.n	80050c8 <SMBUS_Master_ISR+0x39c>
  {
    if (hsmbus->XferCount == 0U)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800503a:	b29b      	uxth	r3, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	d143      	bne.n	80050c8 <SMBUS_Master_ISR+0x39c>
    {
      /* Specific use case for Quick command */
      if (hsmbus->pBuffPtr == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005044:	2b00      	cmp	r3, #0
 8005046:	d108      	bne.n	800505a <SMBUS_Master_ISR+0x32e>
      {
        /* Generate a Stop command */
        hsmbus->Instance->CR2 |= I2C_CR2_STOP;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005056:	605a      	str	r2, [r3, #4]
 8005058:	e036      	b.n	80050c8 <SMBUS_Master_ISR+0x39c>
      }
      /* Call TxCpltCallback() if no stop mode is set */
      else if (SMBUS_GET_STOP_MODE(hsmbus) != SMBUS_AUTOEND_MODE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005064:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005068:	d02e      	beq.n	80050c8 <SMBUS_Master_ISR+0x39c>
      {
        /* No Generate Stop, to permit restart mode */
        /* The stop will be done at the end of transfer, when SMBUS_AUTOEND_MODE enable */

        /* Call the corresponding callback to inform upper layer of End of Transfer */
        if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800506e:	2b12      	cmp	r3, #18
 8005070:	d112      	bne.n	8005098 <SMBUS_Master_ISR+0x36c>
        {
          /* Disable Interrupt */
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 8005072:	21f2      	movs	r1, #242	; 0xf2
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 fa0d 	bl	8005494 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterTxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7ff fe01 	bl	8004c98 <HAL_SMBUS_MasterTxCpltCallback>
 8005096:	e017      	b.n	80050c8 <SMBUS_Master_ISR+0x39c>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
        }
        else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800509c:	2b22      	cmp	r3, #34	; 0x22
 800509e:	d113      	bne.n	80050c8 <SMBUS_Master_ISR+0x39c>
        {
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 80050a0:	21d4      	movs	r1, #212	; 0xd4
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f9f6 	bl	8005494 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterRxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff fdf4 	bl	8004cac <HAL_SMBUS_MasterRxCpltCallback>
 80050c4:	e000      	b.n	80050c8 <SMBUS_Master_ISR+0x39c>
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 80050c6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsmbus);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop

080050dc <SMBUS_Slave_ISR>:
  *                the configuration information for the specified SMBUS.
  * @param  StatusFlags Value of Interrupt Flags.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMBUS_Slave_ISR(SMBUS_HandleTypeDef *hsmbus, uint32_t StatusFlags)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection;
  uint16_t SlaveAddrCode;

  /* Process Locked */
  __HAL_LOCK(hsmbus);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <SMBUS_Slave_ISR+0x18>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e1c8      	b.n	8005486 <SMBUS_Slave_ISR+0x3aa>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_AF) != RESET)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	091b      	lsrs	r3, r3, #4
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d033      	beq.n	8005170 <SMBUS_Slave_ISR+0x94>
  {
    /* Check that SMBUS transfer finished */
    /* if yes, normal usecase, a NACK is sent by the HOST when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hsmbus->XferCount == 0U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d108      	bne.n	8005124 <SMBUS_Slave_ISR+0x48>
    {
      /* Clear NACK Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2210      	movs	r2, #16
 8005118:	61da      	str	r2, [r3, #28]

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005122:	e14a      	b.n	80053ba <SMBUS_Slave_ISR+0x2de>
    }
    else
    {
      /* if no, error usecase, a Non-Acknowledge of last Data is generated by the HOST*/
      /* Clear NACK Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2210      	movs	r2, #16
 800512a:	61da      	str	r2, [r3, #28]

      /* Set HAL State to "Idle" State, mean to LISTEN state */
      /* So reset Slave Busy state */
      hsmbus->PreviousState = hsmbus->State;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_TX);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005138:	f023 0232 	bic.w	r2, r3, #50	; 0x32
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	649a      	str	r2, [r3, #72]	; 0x48
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_RX);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005144:	f023 0242 	bic.w	r2, r3, #66	; 0x42
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	649a      	str	r2, [r3, #72]	; 0x48

      /* Disable RX/TX Interrupts, keep only ADDR Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_TX);
 800514c:	21f6      	movs	r1, #246	; 0xf6
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f9a0 	bl	8005494 <SMBUS_Disable_IRQ>

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ACKF;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005158:	f043 0204 	orr.w	r2, r3, #4
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->ErrorCallback(hsmbus);
#else
      HAL_SMBUS_ErrorCallback(hsmbus);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7ff fdd5 	bl	8004d18 <HAL_SMBUS_ErrorCallback>
 800516e:	e124      	b.n	80053ba <SMBUS_Slave_ISR+0x2de>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_ADDR) != RESET)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	08db      	lsrs	r3, r3, #3
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	d022      	beq.n	80051c2 <SMBUS_Slave_ISR+0xe6>
  {
    TransferDirection = (uint8_t)(SMBUS_GET_DIR(hsmbus));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	0c1b      	lsrs	r3, r3, #16
 8005184:	b2db      	uxtb	r3, r3
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	73fb      	strb	r3, [r7, #15]
    SlaveAddrCode = (uint16_t)(SMBUS_GET_ADDR_MATCH(hsmbus));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	0c5b      	lsrs	r3, r3, #17
 8005194:	b29b      	uxth	r3, r3
 8005196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800519a:	81bb      	strh	r3, [r7, #12]

    /* Disable ADDR interrupt to prevent multiple ADDRInterrupt*/
    /* Other ADDRInterrupt will be treat in next Listen usecase */
    __HAL_SMBUS_DISABLE_IT(hsmbus, SMBUS_IT_ADDRI);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0208 	bic.w	r2, r2, #8
 80051aa:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Call Slave Addr callback */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->AddrCallback(hsmbus, TransferDirection, SlaveAddrCode);
#else
    HAL_SMBUS_AddrCallback(hsmbus, TransferDirection, SlaveAddrCode);
 80051b4:	89ba      	ldrh	r2, [r7, #12]
 80051b6:	7bfb      	ldrb	r3, [r7, #15]
 80051b8:	4619      	mov	r1, r3
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7ff fd94 	bl	8004ce8 <HAL_SMBUS_AddrCallback>
 80051c0:	e0fb      	b.n	80053ba <SMBUS_Slave_ISR+0x2de>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
  else if ((SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET) ||
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	089b      	lsrs	r3, r3, #2
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d106      	bne.n	80051dc <SMBUS_Slave_ISR+0x100>
           (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TCR) != RESET))
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	09db      	lsrs	r3, r3, #7
 80051d2:	f003 0301 	and.w	r3, r3, #1
  else if ((SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET) ||
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 80b0 	beq.w	800533c <SMBUS_Slave_ISR+0x260>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e0:	f003 0342 	and.w	r3, r3, #66	; 0x42
 80051e4:	2b42      	cmp	r3, #66	; 0x42
 80051e6:	d15e      	bne.n	80052a6 <SMBUS_Slave_ISR+0x1ca>
    {
      /* Read data from RXDR */
      *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hsmbus->pBuffPtr++;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	635a      	str	r2, [r3, #52]	; 0x34

      hsmbus->XferSize--;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005204:	3b01      	subs	r3, #1
 8005206:	b29a      	uxth	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	871a      	strh	r2, [r3, #56]	; 0x38
      hsmbus->XferCount--;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	875a      	strh	r2, [r3, #58]	; 0x3a

      if (hsmbus->XferCount == 1U)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800521e:	b29b      	uxth	r3, r3
 8005220:	2b01      	cmp	r3, #1
 8005222:	d10f      	bne.n	8005244 <SMBUS_Slave_ISR+0x168>
      {
        /* Receive last Byte, can be PEC byte in case of PEC BYTE enabled */
        /* or only the last Byte of Transfer */
        /* So reset the RELOAD bit mode */
        hsmbus->XferOptions &= ~SMBUS_RELOAD_MODE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005228:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	63da      	str	r2, [r3, #60]	; 0x3c
        SMBUS_TransferConfig(hsmbus, 0, 1, hsmbus->XferOptions, SMBUS_NO_STARTSTOP);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005234:	2200      	movs	r2, #0
 8005236:	9200      	str	r2, [sp, #0]
 8005238:	2201      	movs	r2, #1
 800523a:	2100      	movs	r1, #0
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fa59 	bl	80056f4 <SMBUS_TransferConfig>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8005242:	e0b9      	b.n	80053b8 <SMBUS_Slave_ISR+0x2dc>
      }
      else if (hsmbus->XferCount == 0U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d115      	bne.n	800527a <SMBUS_Slave_ISR+0x19e>
      {
        /* Last Byte is received, disable Interrupt */
        SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 800524e:	21d4      	movs	r1, #212	; 0xd4
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f91f 	bl	8005494 <SMBUS_Disable_IRQ>

        /* Remove HAL_SMBUS_STATE_SLAVE_BUSY_RX, keep only HAL_SMBUS_STATE_LISTEN */
        hsmbus->PreviousState = hsmbus->State;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	641a      	str	r2, [r3, #64]	; 0x40
        hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_RX);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005262:	f023 0242 	bic.w	r2, r3, #66	; 0x42
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	649a      	str	r2, [r3, #72]	; 0x48

        /* Process Unlocked */
        __HAL_UNLOCK(hsmbus);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
        hsmbus->SlaveRxCpltCallback(hsmbus);
#else
        HAL_SMBUS_SlaveRxCpltCallback(hsmbus);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7ff fd2e 	bl	8004cd4 <HAL_SMBUS_SlaveRxCpltCallback>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8005278:	e09e      	b.n	80053b8 <SMBUS_Slave_ISR+0x2dc>
      }
      else
      {
        /* Set Reload for next Bytes */
        SMBUS_TransferConfig(hsmbus, 0, 1,
                             SMBUS_RELOAD_MODE  | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE),
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        SMBUS_TransferConfig(hsmbus, 0, 1,
 8005282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005286:	2200      	movs	r2, #0
 8005288:	9200      	str	r2, [sp, #0]
 800528a:	2201      	movs	r2, #1
 800528c:	2100      	movs	r1, #0
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fa30 	bl	80056f4 <SMBUS_TransferConfig>
                             SMBUS_NO_STARTSTOP);

        /* Ack last Byte Read */
        hsmbus->Instance->CR2 &= ~I2C_CR2_NACK;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052a2:	605a      	str	r2, [r3, #4]
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 80052a4:	e088      	b.n	80053b8 <SMBUS_Slave_ISR+0x2dc>
      }
    }
    else if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052aa:	f003 0332 	and.w	r3, r3, #50	; 0x32
 80052ae:	2b32      	cmp	r3, #50	; 0x32
 80052b0:	f040 8082 	bne.w	80053b8 <SMBUS_Slave_ISR+0x2dc>
    {
      if ((hsmbus->XferCount != 0U) && (hsmbus->XferSize == 0U))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d07c      	beq.n	80053b8 <SMBUS_Slave_ISR+0x2dc>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d178      	bne.n	80053b8 <SMBUS_Slave_ISR+0x2dc>
      {
        if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	2bff      	cmp	r3, #255	; 0xff
 80052ce:	d910      	bls.n	80052f2 <SMBUS_Slave_ISR+0x216>
        {
          SMBUS_TransferConfig(hsmbus, 0, MAX_NBYTE_SIZE,
                               (SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE)),
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
          SMBUS_TransferConfig(hsmbus, 0, MAX_NBYTE_SIZE,
 80052d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052dc:	2200      	movs	r2, #0
 80052de:	9200      	str	r2, [sp, #0]
 80052e0:	22ff      	movs	r2, #255	; 0xff
 80052e2:	2100      	movs	r1, #0
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fa05 	bl	80056f4 <SMBUS_TransferConfig>
                               SMBUS_NO_STARTSTOP);
          hsmbus->XferSize = MAX_NBYTE_SIZE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	22ff      	movs	r2, #255	; 0xff
 80052ee:	871a      	strh	r2, [r3, #56]	; 0x38
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 80052f0:	e062      	b.n	80053b8 <SMBUS_Slave_ISR+0x2dc>
        }
        else
        {
          hsmbus->XferSize = hsmbus->XferCount;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	871a      	strh	r2, [r3, #56]	; 0x38
          SMBUS_TransferConfig(hsmbus, 0, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions,
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005300:	b2da      	uxtb	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005306:	2100      	movs	r1, #0
 8005308:	9100      	str	r1, [sp, #0]
 800530a:	2100      	movs	r1, #0
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f9f1 	bl	80056f4 <SMBUS_TransferConfig>
                               SMBUS_NO_STARTSTOP);
          /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
          /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
          if (SMBUS_GET_PEC_MODE(hsmbus) != 0UL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d04b      	beq.n	80053b8 <SMBUS_Slave_ISR+0x2dc>
          {
            hsmbus->XferSize--;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005324:	3b01      	subs	r3, #1
 8005326:	b29a      	uxth	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	871a      	strh	r2, [r3, #56]	; 0x38
            hsmbus->XferCount--;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005330:	b29b      	uxth	r3, r3
 8005332:	3b01      	subs	r3, #1
 8005334:	b29a      	uxth	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	875a      	strh	r2, [r3, #58]	; 0x3a
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800533a:	e03d      	b.n	80053b8 <SMBUS_Slave_ISR+0x2dc>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TXIS) != RESET)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	085b      	lsrs	r3, r3, #1
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	d038      	beq.n	80053ba <SMBUS_Slave_ISR+0x2de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hsmbus->XferCount > 0U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800534c:	b29b      	uxth	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d017      	beq.n	8005382 <SMBUS_Slave_ISR+0x2a6>
    {
      /* Write data to TXDR */
      hsmbus->Instance->TXDR = *hsmbus->pBuffPtr;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005356:	781a      	ldrb	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hsmbus->pBuffPtr++;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	635a      	str	r2, [r3, #52]	; 0x34

      hsmbus->XferCount--;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	875a      	strh	r2, [r3, #58]	; 0x3a
      hsmbus->XferSize--;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	871a      	strh	r2, [r3, #56]	; 0x38
    }

    if (hsmbus->XferCount == 0U)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005386:	b29b      	uxth	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d116      	bne.n	80053ba <SMBUS_Slave_ISR+0x2de>
    {
      /* Last Byte is Transmitted */
      /* Remove HAL_SMBUS_STATE_SLAVE_BUSY_TX, keep only HAL_SMBUS_STATE_LISTEN */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 800538c:	21f2      	movs	r1, #242	; 0xf2
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f880 	bl	8005494 <SMBUS_Disable_IRQ>
      hsmbus->PreviousState = hsmbus->State;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_TX);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053a0:	f023 0232 	bic.w	r2, r3, #50	; 0x32
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->SlaveTxCpltCallback(hsmbus);
#else
      HAL_SMBUS_SlaveTxCpltCallback(hsmbus);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7ff fc85 	bl	8004cc0 <HAL_SMBUS_SlaveTxCpltCallback>
 80053b6:	e000      	b.n	80053ba <SMBUS_Slave_ISR+0x2de>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 80053b8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_STOPF) != RESET)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	095b      	lsrs	r3, r3, #5
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d05a      	beq.n	800547c <SMBUS_Slave_ISR+0x3a0>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	2b08      	cmp	r3, #8
 80053d0:	d154      	bne.n	800547c <SMBUS_Slave_ISR+0x3a0>
    {
      /* Store Last receive data if any */
      if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_RXNE) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d11c      	bne.n	800541a <SMBUS_Slave_ISR+0x33e>
      {
        /* Read data from RXDR */
        *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hsmbus->pBuffPtr++;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	635a      	str	r2, [r3, #52]	; 0x34

        if ((hsmbus->XferSize > 0U))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00c      	beq.n	800541a <SMBUS_Slave_ISR+0x33e>
        {
          hsmbus->XferSize--;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005404:	3b01      	subs	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005410:	b29b      	uxth	r3, r3
 8005412:	3b01      	subs	r3, #1
 8005414:	b29a      	uxth	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
      }

      /* Disable RX and TX Interrupts */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_TX);
 800541a:	21f6      	movs	r1, #246	; 0xf6
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f839 	bl	8005494 <SMBUS_Disable_IRQ>

      /* Disable ADDR Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_ADDR);
 8005422:	2138      	movs	r1, #56	; 0x38
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f835 	bl	8005494 <SMBUS_Disable_IRQ>

      /* Disable Address Acknowledge */
      hsmbus->Instance->CR2 |= I2C_CR2_NACK;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005438:	605a      	str	r2, [r3, #4]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6859      	ldr	r1, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	4b12      	ldr	r3, [pc, #72]	; (8005490 <SMBUS_Slave_ISR+0x3b4>)
 8005446:	400b      	ands	r3, r1
 8005448:	6053      	str	r3, [r2, #4]

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2220      	movs	r2, #32
 8005450:	61da      	str	r2, [r3, #28]

      /* Clear ADDR flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ADDR);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2208      	movs	r2, #8
 8005458:	61da      	str	r2, [r3, #28]

      hsmbus->XferOptions = 0;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	63da      	str	r2, [r3, #60]	; 0x3c
      hsmbus->PreviousState = hsmbus->State;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->ListenCpltCallback(hsmbus);
#else
      HAL_SMBUS_ListenCpltCallback(hsmbus);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7ff fc44 	bl	8004d04 <HAL_SMBUS_ListenCpltCallback>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsmbus);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	fe00e800 	.word	0xfe00e800

08005494 <SMBUS_Disable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Disable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpstate = hsmbus->State;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a6:	60bb      	str	r3, [r7, #8]

  if ((tmpstate == HAL_SMBUS_STATE_READY) && ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT))
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d108      	bne.n	80054c0 <SMBUS_Disable_IRQ+0x2c>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <SMBUS_Disable_IRQ+0x2c>
  {
    /* Disable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054be:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80054c6:	2bf2      	cmp	r3, #242	; 0xf2
 80054c8:	d11c      	bne.n	8005504 <SMBUS_Disable_IRQ+0x70>
  {
    /* Disable TC, STOP, NACK and TXI interrupt */
    tmpisr |= SMBUS_IT_TCI | SMBUS_IT_TXI;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80054d0:	60fb      	str	r3, [r7, #12]

    if ((SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d108      	bne.n	80054f2 <SMBUS_Disable_IRQ+0x5e>
        && ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN))
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d103      	bne.n	80054f2 <SMBUS_Disable_IRQ+0x5e>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f0:	60fb      	str	r3, [r7, #12]
    }

    if ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN)
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d103      	bne.n	8005504 <SMBUS_Disable_IRQ+0x70>
    {
      /* Disable STOP and NACK interrupt */
      tmpisr |= SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005502:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 800550a:	2bd4      	cmp	r3, #212	; 0xd4
 800550c:	d11c      	bne.n	8005548 <SMBUS_Disable_IRQ+0xb4>
  {
    /* Disable TC, STOP, NACK and RXI interrupt */
    tmpisr |= SMBUS_IT_TCI | SMBUS_IT_RXI;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005514:	60fb      	str	r3, [r7, #12]

    if ((SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d108      	bne.n	8005536 <SMBUS_Disable_IRQ+0xa2>
        && ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f003 0308 	and.w	r3, r3, #8
 800552a:	2b00      	cmp	r3, #0
 800552c:	d103      	bne.n	8005536 <SMBUS_Disable_IRQ+0xa2>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005534:	60fb      	str	r3, [r7, #12]
    }

    if ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN)
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f003 0308 	and.w	r3, r3, #8
 800553c:	2b00      	cmp	r3, #0
 800553e:	d103      	bne.n	8005548 <SMBUS_Disable_IRQ+0xb4>
    {
      /* Disable STOP and NACK interrupt */
      tmpisr |= SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005546:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800554e:	2b38      	cmp	r3, #56	; 0x38
 8005550:	d10e      	bne.n	8005570 <SMBUS_Disable_IRQ+0xdc>
  {
    /* Disable ADDR, STOP and NACK interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8005558:	60fb      	str	r3, [r7, #12]

    if (SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d103      	bne.n	8005570 <SMBUS_Disable_IRQ+0xdc>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800556e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_SMBUS_DISABLE_IT(hsmbus, tmpisr);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6819      	ldr	r1, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	43da      	mvns	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	400a      	ands	r2, r1
 8005580:	601a      	str	r2, [r3, #0]
}
 8005582:	bf00      	nop
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <SMBUS_ITErrorHandler>:
  * @brief  SMBUS interrupts error handler.
  * @param  hsmbus SMBUS handle.
  * @retval None
  */
static void SMBUS_ITErrorHandler(SMBUS_HandleTypeDef *hsmbus)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b086      	sub	sp, #24
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hsmbus->Instance->ISR);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hsmbus->Instance->CR1);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	613b      	str	r3, [r7, #16]
  uint32_t tmpstate;
  uint32_t tmperror;

  /* SMBUS Bus error interrupt occurred ------------------------------------*/
  if (((itflags & SMBUS_FLAG_BERR) == SMBUS_FLAG_BERR) && \
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00f      	beq.n	80055d0 <SMBUS_ITErrorHandler+0x42>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if (((itflags & SMBUS_FLAG_BERR) == SMBUS_FLAG_BERR) && \
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <SMBUS_ITErrorHandler+0x42>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_BERR;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055be:	f043 0201 	orr.w	r2, r3, #1
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear BERR flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_BERR);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055ce:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if (((itflags & SMBUS_FLAG_OVR) == SMBUS_FLAG_OVR) && \
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00f      	beq.n	80055fa <SMBUS_ITErrorHandler+0x6c>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if (((itflags & SMBUS_FLAG_OVR) == SMBUS_FLAG_OVR) && \
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <SMBUS_ITErrorHandler+0x6c>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_OVR;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055e8:	f043 0208 	orr.w	r2, r3, #8
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear OVR flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_OVR);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055f8:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Arbitration Loss error interrupt occurred ------------------------------------*/
  if (((itflags & SMBUS_FLAG_ARLO) == SMBUS_FLAG_ARLO) && \
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00f      	beq.n	8005624 <SMBUS_ITErrorHandler+0x96>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if (((itflags & SMBUS_FLAG_ARLO) == SMBUS_FLAG_ARLO) && \
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <SMBUS_ITErrorHandler+0x96>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ARLO;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005612:	f043 0202 	orr.w	r2, r3, #2
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear ARLO flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ARLO);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005622:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Timeout error interrupt occurred ---------------------------------------------*/
  if (((itflags & SMBUS_FLAG_TIMEOUT) == SMBUS_FLAG_TIMEOUT) && \
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00f      	beq.n	800564e <SMBUS_ITErrorHandler+0xc0>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if (((itflags & SMBUS_FLAG_TIMEOUT) == SMBUS_FLAG_TIMEOUT) && \
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00a      	beq.n	800564e <SMBUS_ITErrorHandler+0xc0>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_BUSTIMEOUT;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800563c:	f043 0220 	orr.w	r2, r3, #32
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear TIMEOUT flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_TIMEOUT);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800564c:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Alert error interrupt occurred -----------------------------------------------*/
  if (((itflags & SMBUS_FLAG_ALERT) == SMBUS_FLAG_ALERT) && \
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00f      	beq.n	8005678 <SMBUS_ITErrorHandler+0xea>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if (((itflags & SMBUS_FLAG_ALERT) == SMBUS_FLAG_ALERT) && \
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <SMBUS_ITErrorHandler+0xea>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ALERT;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005666:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear ALERT flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005676:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Packet Error Check error interrupt occurred ----------------------------------*/
  if (((itflags & SMBUS_FLAG_PECERR) == SMBUS_FLAG_PECERR) && \
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00f      	beq.n	80056a2 <SMBUS_ITErrorHandler+0x114>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if (((itflags & SMBUS_FLAG_PECERR) == SMBUS_FLAG_PECERR) && \
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <SMBUS_ITErrorHandler+0x114>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_PECERR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005690:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear PEC error flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_PECERR);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056a0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hsmbus->State, misra rule */
  tmperror = hsmbus->ErrorCode;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror != HAL_SMBUS_ERROR_NONE) && (tmperror != HAL_SMBUS_ERROR_ACKF))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d01d      	beq.n	80056ea <SMBUS_ITErrorHandler+0x15c>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	d01a      	beq.n	80056ea <SMBUS_ITErrorHandler+0x15c>
  {
    /* Do not Reset the HAL state in case of ALERT error */
    if ((tmperror & HAL_SMBUS_ERROR_ALERT) != HAL_SMBUS_ERROR_ALERT)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d112      	bne.n	80056e4 <SMBUS_ITErrorHandler+0x156>
    {
      /* Store current volatile hsmbus->State, misra rule */
      tmpstate = hsmbus->State;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056c2:	60bb      	str	r3, [r7, #8]

      if (((tmpstate & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f003 0332 	and.w	r3, r3, #50	; 0x32
 80056ca:	2b32      	cmp	r3, #50	; 0x32
 80056cc:	d004      	beq.n	80056d8 <SMBUS_ITErrorHandler+0x14a>
          || ((tmpstate & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX))
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f003 0342 	and.w	r3, r3, #66	; 0x42
 80056d4:	2b42      	cmp	r3, #66	; 0x42
 80056d6:	d105      	bne.n	80056e4 <SMBUS_ITErrorHandler+0x156>
      {
        /* Reset only HAL_SMBUS_STATE_SLAVE_BUSY_XX */
        /* keep HAL_SMBUS_STATE_LISTEN if set */
        hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	641a      	str	r2, [r3, #64]	; 0x40
        hsmbus->State = HAL_SMBUS_STATE_LISTEN;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2208      	movs	r2, #8
 80056e2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->ErrorCallback(hsmbus);
#else
    HAL_SMBUS_ErrorCallback(hsmbus);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff fb17 	bl	8004d18 <HAL_SMBUS_ErrorCallback>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
}
 80056ea:	bf00      	nop
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
	...

080056f4 <SMBUS_TransferConfig>:
  *     @arg @ref SMBUS_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void SMBUS_TransferConfig(SMBUS_HandleTypeDef *hsmbus,  uint16_t DevAddress, uint8_t Size,
                                 uint32_t Mode, uint32_t Request)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	607b      	str	r3, [r7, #4]
 80056fe:	460b      	mov	r3, r1
 8005700:	817b      	strh	r3, [r7, #10]
 8005702:	4613      	mov	r3, r2
 8005704:	727b      	strb	r3, [r7, #9]
  assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
  assert_param(IS_SMBUS_TRANSFER_MODE(Mode));
  assert_param(IS_SMBUS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hsmbus->Instance->CR2,
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	0d5b      	lsrs	r3, r3, #21
 8005710:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005714:	4b0d      	ldr	r3, [pc, #52]	; (800574c <SMBUS_TransferConfig+0x58>)
 8005716:	430b      	orrs	r3, r1
 8005718:	43db      	mvns	r3, r3
 800571a:	ea02 0103 	and.w	r1, r2, r3
 800571e:	897b      	ldrh	r3, [r7, #10]
 8005720:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005724:	7a7b      	ldrb	r3, [r7, #9]
 8005726:	041b      	lsls	r3, r3, #16
 8005728:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	431a      	orrs	r2, r3
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	431a      	orrs	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31UL - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_PECBYTE)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	07ff63ff 	.word	0x07ff63ff

08005750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e049      	b.n	80057f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f841 	bl	80057fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3304      	adds	r3, #4
 800578c:	4619      	mov	r1, r3
 800578e:	4610      	mov	r0, r2
 8005790:	f000 f9f2 	bl	8005b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
	...

08005814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b01      	cmp	r3, #1
 8005826:	d001      	beq.n	800582c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e04a      	b.n	80058c2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a21      	ldr	r2, [pc, #132]	; (80058d0 <HAL_TIM_Base_Start_IT+0xbc>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d018      	beq.n	8005880 <HAL_TIM_Base_Start_IT+0x6c>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005856:	d013      	beq.n	8005880 <HAL_TIM_Base_Start_IT+0x6c>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1d      	ldr	r2, [pc, #116]	; (80058d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00e      	beq.n	8005880 <HAL_TIM_Base_Start_IT+0x6c>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a1c      	ldr	r2, [pc, #112]	; (80058d8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d009      	beq.n	8005880 <HAL_TIM_Base_Start_IT+0x6c>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a1a      	ldr	r2, [pc, #104]	; (80058dc <HAL_TIM_Base_Start_IT+0xc8>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d004      	beq.n	8005880 <HAL_TIM_Base_Start_IT+0x6c>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a19      	ldr	r2, [pc, #100]	; (80058e0 <HAL_TIM_Base_Start_IT+0xcc>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d115      	bne.n	80058ac <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	4b17      	ldr	r3, [pc, #92]	; (80058e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005888:	4013      	ands	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b06      	cmp	r3, #6
 8005890:	d015      	beq.n	80058be <HAL_TIM_Base_Start_IT+0xaa>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005898:	d011      	beq.n	80058be <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0201 	orr.w	r2, r2, #1
 80058a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058aa:	e008      	b.n	80058be <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	e000      	b.n	80058c0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	40012c00 	.word	0x40012c00
 80058d4:	40000400 	.word	0x40000400
 80058d8:	40000800 	.word	0x40000800
 80058dc:	40013400 	.word	0x40013400
 80058e0:	40014000 	.word	0x40014000
 80058e4:	00010007 	.word	0x00010007

080058e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d122      	bne.n	8005944 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b02      	cmp	r3, #2
 800590a:	d11b      	bne.n	8005944 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f06f 0202 	mvn.w	r2, #2
 8005914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f905 	bl	8005b3a <HAL_TIM_IC_CaptureCallback>
 8005930:	e005      	b.n	800593e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f8f7 	bl	8005b26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f908 	bl	8005b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f003 0304 	and.w	r3, r3, #4
 800594e:	2b04      	cmp	r3, #4
 8005950:	d122      	bne.n	8005998 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b04      	cmp	r3, #4
 800595e:	d11b      	bne.n	8005998 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f06f 0204 	mvn.w	r2, #4
 8005968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2202      	movs	r2, #2
 800596e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f8db 	bl	8005b3a <HAL_TIM_IC_CaptureCallback>
 8005984:	e005      	b.n	8005992 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f8cd 	bl	8005b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f8de 	bl	8005b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b08      	cmp	r3, #8
 80059a4:	d122      	bne.n	80059ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f003 0308 	and.w	r3, r3, #8
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d11b      	bne.n	80059ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f06f 0208 	mvn.w	r2, #8
 80059bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2204      	movs	r2, #4
 80059c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f003 0303 	and.w	r3, r3, #3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f8b1 	bl	8005b3a <HAL_TIM_IC_CaptureCallback>
 80059d8:	e005      	b.n	80059e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f8a3 	bl	8005b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f8b4 	bl	8005b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f003 0310 	and.w	r3, r3, #16
 80059f6:	2b10      	cmp	r3, #16
 80059f8:	d122      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b10      	cmp	r3, #16
 8005a06:	d11b      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f06f 0210 	mvn.w	r2, #16
 8005a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2208      	movs	r2, #8
 8005a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f887 	bl	8005b3a <HAL_TIM_IC_CaptureCallback>
 8005a2c:	e005      	b.n	8005a3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f879 	bl	8005b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f88a 	bl	8005b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d10e      	bne.n	8005a6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d107      	bne.n	8005a6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f06f 0201 	mvn.w	r2, #1
 8005a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7fb fd92 	bl	8001590 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a76:	2b80      	cmp	r3, #128	; 0x80
 8005a78:	d10e      	bne.n	8005a98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a84:	2b80      	cmp	r3, #128	; 0x80
 8005a86:	d107      	bne.n	8005a98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f90a 	bl	8005cac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aa6:	d10e      	bne.n	8005ac6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab2:	2b80      	cmp	r3, #128	; 0x80
 8005ab4:	d107      	bne.n	8005ac6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f8fd 	bl	8005cc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad0:	2b40      	cmp	r3, #64	; 0x40
 8005ad2:	d10e      	bne.n	8005af2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ade:	2b40      	cmp	r3, #64	; 0x40
 8005ae0:	d107      	bne.n	8005af2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f838 	bl	8005b62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	f003 0320 	and.w	r3, r3, #32
 8005afc:	2b20      	cmp	r3, #32
 8005afe:	d10e      	bne.n	8005b1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f003 0320 	and.w	r3, r3, #32
 8005b0a:	2b20      	cmp	r3, #32
 8005b0c:	d107      	bne.n	8005b1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f06f 0220 	mvn.w	r2, #32
 8005b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f8bd 	bl	8005c98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b1e:	bf00      	nop
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b42:	bf00      	nop
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b083      	sub	sp, #12
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b6a:	bf00      	nop
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
	...

08005b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a3c      	ldr	r2, [pc, #240]	; (8005c7c <TIM_Base_SetConfig+0x104>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00f      	beq.n	8005bb0 <TIM_Base_SetConfig+0x38>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b96:	d00b      	beq.n	8005bb0 <TIM_Base_SetConfig+0x38>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a39      	ldr	r2, [pc, #228]	; (8005c80 <TIM_Base_SetConfig+0x108>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d007      	beq.n	8005bb0 <TIM_Base_SetConfig+0x38>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a38      	ldr	r2, [pc, #224]	; (8005c84 <TIM_Base_SetConfig+0x10c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d003      	beq.n	8005bb0 <TIM_Base_SetConfig+0x38>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a37      	ldr	r2, [pc, #220]	; (8005c88 <TIM_Base_SetConfig+0x110>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d108      	bne.n	8005bc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a2d      	ldr	r2, [pc, #180]	; (8005c7c <TIM_Base_SetConfig+0x104>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d01b      	beq.n	8005c02 <TIM_Base_SetConfig+0x8a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd0:	d017      	beq.n	8005c02 <TIM_Base_SetConfig+0x8a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a2a      	ldr	r2, [pc, #168]	; (8005c80 <TIM_Base_SetConfig+0x108>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d013      	beq.n	8005c02 <TIM_Base_SetConfig+0x8a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a29      	ldr	r2, [pc, #164]	; (8005c84 <TIM_Base_SetConfig+0x10c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d00f      	beq.n	8005c02 <TIM_Base_SetConfig+0x8a>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a28      	ldr	r2, [pc, #160]	; (8005c88 <TIM_Base_SetConfig+0x110>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d00b      	beq.n	8005c02 <TIM_Base_SetConfig+0x8a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a27      	ldr	r2, [pc, #156]	; (8005c8c <TIM_Base_SetConfig+0x114>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d007      	beq.n	8005c02 <TIM_Base_SetConfig+0x8a>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a26      	ldr	r2, [pc, #152]	; (8005c90 <TIM_Base_SetConfig+0x118>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d003      	beq.n	8005c02 <TIM_Base_SetConfig+0x8a>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a25      	ldr	r2, [pc, #148]	; (8005c94 <TIM_Base_SetConfig+0x11c>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d108      	bne.n	8005c14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a10      	ldr	r2, [pc, #64]	; (8005c7c <TIM_Base_SetConfig+0x104>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d00f      	beq.n	8005c60 <TIM_Base_SetConfig+0xe8>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a11      	ldr	r2, [pc, #68]	; (8005c88 <TIM_Base_SetConfig+0x110>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d00b      	beq.n	8005c60 <TIM_Base_SetConfig+0xe8>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a10      	ldr	r2, [pc, #64]	; (8005c8c <TIM_Base_SetConfig+0x114>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d007      	beq.n	8005c60 <TIM_Base_SetConfig+0xe8>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a0f      	ldr	r2, [pc, #60]	; (8005c90 <TIM_Base_SetConfig+0x118>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d003      	beq.n	8005c60 <TIM_Base_SetConfig+0xe8>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a0e      	ldr	r2, [pc, #56]	; (8005c94 <TIM_Base_SetConfig+0x11c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d103      	bne.n	8005c68 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	691a      	ldr	r2, [r3, #16]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	615a      	str	r2, [r3, #20]
}
 8005c6e:	bf00      	nop
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	40012c00 	.word	0x40012c00
 8005c80:	40000400 	.word	0x40000400
 8005c84:	40000800 	.word	0x40000800
 8005c88:	40013400 	.word	0x40013400
 8005c8c:	40014000 	.word	0x40014000
 8005c90:	40014400 	.word	0x40014400
 8005c94:	40014800 	.word	0x40014800

08005c98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005cdc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005ce0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	43db      	mvns	r3, r3
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	f107 0014 	add.w	r0, r7, #20
 8005d18:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	b004      	add	sp, #16
 8005d4a:	4770      	bx	lr

08005d4c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	4603      	mov	r3, r0
 8005d54:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005d56:	2300      	movs	r3, #0
 8005d58:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005d5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d5e:	2b84      	cmp	r3, #132	; 0x84
 8005d60:	d005      	beq.n	8005d6e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005d62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4413      	add	r3, r2
 8005d6a:	3303      	adds	r3, #3
 8005d6c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d82:	f3ef 8305 	mrs	r3, IPSR
 8005d86:	607b      	str	r3, [r7, #4]
  return(result);
 8005d88:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	bf14      	ite	ne
 8005d8e:	2301      	movne	r3, #1
 8005d90:	2300      	moveq	r3, #0
 8005d92:	b2db      	uxtb	r3, r3
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005da4:	f001 f96e 	bl	8007084 <vTaskStartScheduler>
  
  return osOK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	bd80      	pop	{r7, pc}

08005dae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005dae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005db0:	b089      	sub	sp, #36	; 0x24
 8005db2:	af04      	add	r7, sp, #16
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d020      	beq.n	8005e02 <osThreadCreate+0x54>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d01c      	beq.n	8005e02 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685c      	ldr	r4, [r3, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681d      	ldr	r5, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	691e      	ldr	r6, [r3, #16]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7ff ffb6 	bl	8005d4c <makeFreeRtosPriority>
 8005de0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dea:	9202      	str	r2, [sp, #8]
 8005dec:	9301      	str	r3, [sp, #4]
 8005dee:	9100      	str	r1, [sp, #0]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	4632      	mov	r2, r6
 8005df4:	4629      	mov	r1, r5
 8005df6:	4620      	mov	r0, r4
 8005df8:	f000 ff86 	bl	8006d08 <xTaskCreateStatic>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	e01c      	b.n	8005e3c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685c      	ldr	r4, [r3, #4]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e0e:	b29e      	uxth	r6, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7ff ff98 	bl	8005d4c <makeFreeRtosPriority>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	f107 030c 	add.w	r3, r7, #12
 8005e22:	9301      	str	r3, [sp, #4]
 8005e24:	9200      	str	r2, [sp, #0]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	4632      	mov	r2, r6
 8005e2a:	4629      	mov	r1, r5
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	f000 ffc7 	bl	8006dc0 <xTaskCreate>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d001      	beq.n	8005e3c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	e000      	b.n	8005e3e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e46 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b084      	sub	sp, #16
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <osDelay+0x16>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	e000      	b.n	8005e5e <osDelay+0x18>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f001 f8dc 	bl	800701c <vTaskDelay>
  
  return osOK;
 8005e64:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b082      	sub	sp, #8
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d007      	beq.n	8005e8e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	4619      	mov	r1, r3
 8005e84:	2001      	movs	r0, #1
 8005e86:	f000 fae3 	bl	8006450 <xQueueCreateMutexStatic>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	e003      	b.n	8005e96 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005e8e:	2001      	movs	r0, #1
 8005e90:	f000 fac6 	bl	8006420 <xQueueCreateMutex>
 8005e94:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <osMutexWait+0x18>
    return osErrorParameter;
 8005eb4:	2380      	movs	r3, #128	; 0x80
 8005eb6:	e03a      	b.n	8005f2e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec2:	d103      	bne.n	8005ecc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	e009      	b.n	8005ee0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d006      	beq.n	8005ee0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <osMutexWait+0x40>
      ticks = 1;
 8005edc:	2301      	movs	r3, #1
 8005ede:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005ee0:	f7ff ff4c 	bl	8005d7c <inHandlerMode>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d017      	beq.n	8005f1a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005eea:	f107 0308 	add.w	r3, r7, #8
 8005eee:	461a      	mov	r2, r3
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fd60 	bl	80069b8 <xQueueReceiveFromISR>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d001      	beq.n	8005f02 <osMutexWait+0x62>
      return osErrorOS;
 8005efe:	23ff      	movs	r3, #255	; 0xff
 8005f00:	e015      	b.n	8005f2e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d011      	beq.n	8005f2c <osMutexWait+0x8c>
 8005f08:	4b0b      	ldr	r3, [pc, #44]	; (8005f38 <osMutexWait+0x98>)
 8005f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	e008      	b.n	8005f2c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005f1a:	68f9      	ldr	r1, [r7, #12]
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fc3f 	bl	80067a0 <xQueueSemaphoreTake>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d001      	beq.n	8005f2c <osMutexWait+0x8c>
    return osErrorOS;
 8005f28:	23ff      	movs	r3, #255	; 0xff
 8005f2a:	e000      	b.n	8005f2e <osMutexWait+0x8e>
  }
  
  return osOK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	e000ed04 	.word	0xe000ed04

08005f3c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005f4c:	f7ff ff16 	bl	8005d7c <inHandlerMode>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d016      	beq.n	8005f84 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005f56:	f107 0308 	add.w	r3, r7, #8
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fb91 	bl	8006684 <xQueueGiveFromISR>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d001      	beq.n	8005f6c <osMutexRelease+0x30>
      return osErrorOS;
 8005f68:	23ff      	movs	r3, #255	; 0xff
 8005f6a:	e017      	b.n	8005f9c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d013      	beq.n	8005f9a <osMutexRelease+0x5e>
 8005f72:	4b0c      	ldr	r3, [pc, #48]	; (8005fa4 <osMutexRelease+0x68>)
 8005f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	e00a      	b.n	8005f9a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005f84:	2300      	movs	r3, #0
 8005f86:	2200      	movs	r2, #0
 8005f88:	2100      	movs	r1, #0
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fa7c 	bl	8006488 <xQueueGenericSend>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d001      	beq.n	8005f9a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005f96:	23ff      	movs	r3, #255	; 0xff
 8005f98:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	e000ed04 	.word	0xe000ed04

08005fa8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af02      	add	r7, sp, #8
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00f      	beq.n	8005fda <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d10a      	bne.n	8005fd6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2203      	movs	r2, #3
 8005fc6:	9200      	str	r2, [sp, #0]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	2100      	movs	r1, #0
 8005fcc:	2001      	movs	r0, #1
 8005fce:	f000 f939 	bl	8006244 <xQueueGenericCreateStatic>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	e016      	b.n	8006004 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	e014      	b.n	8006004 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d110      	bne.n	8006002 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005fe0:	2203      	movs	r2, #3
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	2001      	movs	r0, #1
 8005fe6:	f000 f9a4 	bl	8006332 <xQueueGenericCreate>
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d005      	beq.n	8005ffe <osSemaphoreCreate+0x56>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 fa45 	bl	8006488 <xQueueGenericSend>
      return sema;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	e000      	b.n	8006004 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006002:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f103 0208 	add.w	r2, r3, #8
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f04f 32ff 	mov.w	r2, #4294967295
 8006024:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f103 0208 	add.w	r2, r3, #8
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f103 0208 	add.w	r2, r3, #8
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006066:	b480      	push	{r7}
 8006068:	b085      	sub	sp, #20
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	601a      	str	r2, [r3, #0]
}
 80060a2:	bf00      	nop
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060ae:	b480      	push	{r7}
 80060b0:	b085      	sub	sp, #20
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c4:	d103      	bne.n	80060ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	e00c      	b.n	80060e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3308      	adds	r3, #8
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	e002      	b.n	80060dc <vListInsert+0x2e>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d2f6      	bcs.n	80060d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	1c5a      	adds	r2, r3, #1
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	601a      	str	r2, [r3, #0]
}
 8006114:	bf00      	nop
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6892      	ldr	r2, [r2, #8]
 8006136:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	6852      	ldr	r2, [r2, #4]
 8006140:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	429a      	cmp	r2, r3
 800614a:	d103      	bne.n	8006154 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689a      	ldr	r2, [r3, #8]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	1e5a      	subs	r2, r3, #1
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10a      	bne.n	800619e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618c:	f383 8811 	msr	BASEPRI, r3
 8006190:	f3bf 8f6f 	isb	sy
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800619a:	bf00      	nop
 800619c:	e7fe      	b.n	800619c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800619e:	f001 fee9 	bl	8007f74 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061aa:	68f9      	ldr	r1, [r7, #12]
 80061ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061ae:	fb01 f303 	mul.w	r3, r1, r3
 80061b2:	441a      	add	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ce:	3b01      	subs	r3, #1
 80061d0:	68f9      	ldr	r1, [r7, #12]
 80061d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061d4:	fb01 f303 	mul.w	r3, r1, r3
 80061d8:	441a      	add	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	22ff      	movs	r2, #255	; 0xff
 80061e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	22ff      	movs	r2, #255	; 0xff
 80061ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d114      	bne.n	800621e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01a      	beq.n	8006232 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	3310      	adds	r3, #16
 8006200:	4618      	mov	r0, r3
 8006202:	f001 f987 	bl	8007514 <xTaskRemoveFromEventList>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d012      	beq.n	8006232 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800620c:	4b0c      	ldr	r3, [pc, #48]	; (8006240 <xQueueGenericReset+0xcc>)
 800620e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	e009      	b.n	8006232 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3310      	adds	r3, #16
 8006222:	4618      	mov	r0, r3
 8006224:	f7ff fef2 	bl	800600c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	3324      	adds	r3, #36	; 0x24
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff feed 	bl	800600c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006232:	f001 fecf 	bl	8007fd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006236:	2301      	movs	r3, #1
}
 8006238:	4618      	mov	r0, r3
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	e000ed04 	.word	0xe000ed04

08006244 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006244:	b580      	push	{r7, lr}
 8006246:	b08e      	sub	sp, #56	; 0x38
 8006248:	af02      	add	r7, sp, #8
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
 8006250:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10a      	bne.n	800626e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800626a:	bf00      	nop
 800626c:	e7fe      	b.n	800626c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10a      	bne.n	800628a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006278:	f383 8811 	msr	BASEPRI, r3
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006286:	bf00      	nop
 8006288:	e7fe      	b.n	8006288 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <xQueueGenericCreateStatic+0x52>
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <xQueueGenericCreateStatic+0x56>
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <xQueueGenericCreateStatic+0x58>
 800629a:	2300      	movs	r3, #0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10a      	bne.n	80062b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	623b      	str	r3, [r7, #32]
}
 80062b2:	bf00      	nop
 80062b4:	e7fe      	b.n	80062b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d102      	bne.n	80062c2 <xQueueGenericCreateStatic+0x7e>
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <xQueueGenericCreateStatic+0x82>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e000      	b.n	80062c8 <xQueueGenericCreateStatic+0x84>
 80062c6:	2300      	movs	r3, #0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10a      	bne.n	80062e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	61fb      	str	r3, [r7, #28]
}
 80062de:	bf00      	nop
 80062e0:	e7fe      	b.n	80062e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062e2:	2348      	movs	r3, #72	; 0x48
 80062e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2b48      	cmp	r3, #72	; 0x48
 80062ea:	d00a      	beq.n	8006302 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80062ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	61bb      	str	r3, [r7, #24]
}
 80062fe:	bf00      	nop
 8006300:	e7fe      	b.n	8006300 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00d      	beq.n	8006328 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800630c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006314:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	4613      	mov	r3, r2
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	68b9      	ldr	r1, [r7, #8]
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 f843 	bl	80063ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800632a:	4618      	mov	r0, r3
 800632c:	3730      	adds	r7, #48	; 0x30
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006332:	b580      	push	{r7, lr}
 8006334:	b08a      	sub	sp, #40	; 0x28
 8006336:	af02      	add	r7, sp, #8
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	4613      	mov	r3, r2
 800633e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10a      	bne.n	800635c <xQueueGenericCreate+0x2a>
	__asm volatile
 8006346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	613b      	str	r3, [r7, #16]
}
 8006358:	bf00      	nop
 800635a:	e7fe      	b.n	800635a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d102      	bne.n	8006368 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006362:	2300      	movs	r3, #0
 8006364:	61fb      	str	r3, [r7, #28]
 8006366:	e004      	b.n	8006372 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	fb02 f303 	mul.w	r3, r2, r3
 8006370:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	3348      	adds	r3, #72	; 0x48
 8006376:	4618      	mov	r0, r3
 8006378:	f001 ff1e 	bl	80081b8 <pvPortMalloc>
 800637c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00f      	beq.n	80063a4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	3348      	adds	r3, #72	; 0x48
 8006388:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006392:	79fa      	ldrb	r2, [r7, #7]
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	4613      	mov	r3, r2
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	68b9      	ldr	r1, [r7, #8]
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f000 f805 	bl	80063ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80063a4:	69bb      	ldr	r3, [r7, #24]
	}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3720      	adds	r7, #32
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b084      	sub	sp, #16
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	60f8      	str	r0, [r7, #12]
 80063b6:	60b9      	str	r1, [r7, #8]
 80063b8:	607a      	str	r2, [r7, #4]
 80063ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d103      	bne.n	80063ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	e002      	b.n	80063d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80063dc:	2101      	movs	r1, #1
 80063de:	69b8      	ldr	r0, [r7, #24]
 80063e0:	f7ff fec8 	bl	8006174 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80063e4:	bf00      	nop
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00e      	beq.n	8006418 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800640c:	2300      	movs	r3, #0
 800640e:	2200      	movs	r2, #0
 8006410:	2100      	movs	r1, #0
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f838 	bl	8006488 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006418:	bf00      	nop
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	4603      	mov	r3, r0
 8006428:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800642a:	2301      	movs	r3, #1
 800642c:	617b      	str	r3, [r7, #20]
 800642e:	2300      	movs	r3, #0
 8006430:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006432:	79fb      	ldrb	r3, [r7, #7]
 8006434:	461a      	mov	r2, r3
 8006436:	6939      	ldr	r1, [r7, #16]
 8006438:	6978      	ldr	r0, [r7, #20]
 800643a:	f7ff ff7a 	bl	8006332 <xQueueGenericCreate>
 800643e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f7ff ffd3 	bl	80063ec <prvInitialiseMutex>

		return pxNewQueue;
 8006446:	68fb      	ldr	r3, [r7, #12]
	}
 8006448:	4618      	mov	r0, r3
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af02      	add	r7, sp, #8
 8006456:	4603      	mov	r3, r0
 8006458:	6039      	str	r1, [r7, #0]
 800645a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800645c:	2301      	movs	r3, #1
 800645e:	617b      	str	r3, [r7, #20]
 8006460:	2300      	movs	r3, #0
 8006462:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006464:	79fb      	ldrb	r3, [r7, #7]
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	2200      	movs	r2, #0
 800646c:	6939      	ldr	r1, [r7, #16]
 800646e:	6978      	ldr	r0, [r7, #20]
 8006470:	f7ff fee8 	bl	8006244 <xQueueGenericCreateStatic>
 8006474:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f7ff ffb8 	bl	80063ec <prvInitialiseMutex>

		return pxNewQueue;
 800647c:	68fb      	ldr	r3, [r7, #12]
	}
 800647e:	4618      	mov	r0, r3
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
	...

08006488 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08e      	sub	sp, #56	; 0x38
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006496:	2300      	movs	r3, #0
 8006498:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10a      	bne.n	80064ba <xQueueGenericSend+0x32>
	__asm volatile
 80064a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80064b6:	bf00      	nop
 80064b8:	e7fe      	b.n	80064b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d103      	bne.n	80064c8 <xQueueGenericSend+0x40>
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <xQueueGenericSend+0x44>
 80064c8:	2301      	movs	r3, #1
 80064ca:	e000      	b.n	80064ce <xQueueGenericSend+0x46>
 80064cc:	2300      	movs	r3, #0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <xQueueGenericSend+0x60>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064e4:	bf00      	nop
 80064e6:	e7fe      	b.n	80064e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d103      	bne.n	80064f6 <xQueueGenericSend+0x6e>
 80064ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d101      	bne.n	80064fa <xQueueGenericSend+0x72>
 80064f6:	2301      	movs	r3, #1
 80064f8:	e000      	b.n	80064fc <xQueueGenericSend+0x74>
 80064fa:	2300      	movs	r3, #0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10a      	bne.n	8006516 <xQueueGenericSend+0x8e>
	__asm volatile
 8006500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	623b      	str	r3, [r7, #32]
}
 8006512:	bf00      	nop
 8006514:	e7fe      	b.n	8006514 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006516:	f001 f9bf 	bl	8007898 <xTaskGetSchedulerState>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d102      	bne.n	8006526 <xQueueGenericSend+0x9e>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <xQueueGenericSend+0xa2>
 8006526:	2301      	movs	r3, #1
 8006528:	e000      	b.n	800652c <xQueueGenericSend+0xa4>
 800652a:	2300      	movs	r3, #0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <xQueueGenericSend+0xbe>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	61fb      	str	r3, [r7, #28]
}
 8006542:	bf00      	nop
 8006544:	e7fe      	b.n	8006544 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006546:	f001 fd15 	bl	8007f74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800654e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006552:	429a      	cmp	r2, r3
 8006554:	d302      	bcc.n	800655c <xQueueGenericSend+0xd4>
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b02      	cmp	r3, #2
 800655a:	d129      	bne.n	80065b0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	68b9      	ldr	r1, [r7, #8]
 8006560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006562:	f000 fac1 	bl	8006ae8 <prvCopyDataToQueue>
 8006566:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656c:	2b00      	cmp	r3, #0
 800656e:	d010      	beq.n	8006592 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006572:	3324      	adds	r3, #36	; 0x24
 8006574:	4618      	mov	r0, r3
 8006576:	f000 ffcd 	bl	8007514 <xTaskRemoveFromEventList>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d013      	beq.n	80065a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006580:	4b3f      	ldr	r3, [pc, #252]	; (8006680 <xQueueGenericSend+0x1f8>)
 8006582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	e00a      	b.n	80065a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006594:	2b00      	cmp	r3, #0
 8006596:	d007      	beq.n	80065a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006598:	4b39      	ldr	r3, [pc, #228]	; (8006680 <xQueueGenericSend+0x1f8>)
 800659a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800659e:	601a      	str	r2, [r3, #0]
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80065a8:	f001 fd14 	bl	8007fd4 <vPortExitCritical>
				return pdPASS;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e063      	b.n	8006678 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d103      	bne.n	80065be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065b6:	f001 fd0d 	bl	8007fd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	e05c      	b.n	8006678 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d106      	bne.n	80065d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065c4:	f107 0314 	add.w	r3, r7, #20
 80065c8:	4618      	mov	r0, r3
 80065ca:	f001 f805 	bl	80075d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065ce:	2301      	movs	r3, #1
 80065d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065d2:	f001 fcff 	bl	8007fd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065d6:	f000 fdb5 	bl	8007144 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065da:	f001 fccb 	bl	8007f74 <vPortEnterCritical>
 80065de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065e4:	b25b      	sxtb	r3, r3
 80065e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ea:	d103      	bne.n	80065f4 <xQueueGenericSend+0x16c>
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065fa:	b25b      	sxtb	r3, r3
 80065fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006600:	d103      	bne.n	800660a <xQueueGenericSend+0x182>
 8006602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800660a:	f001 fce3 	bl	8007fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800660e:	1d3a      	adds	r2, r7, #4
 8006610:	f107 0314 	add.w	r3, r7, #20
 8006614:	4611      	mov	r1, r2
 8006616:	4618      	mov	r0, r3
 8006618:	f000 fff4 	bl	8007604 <xTaskCheckForTimeOut>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d124      	bne.n	800666c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006622:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006624:	f000 fb58 	bl	8006cd8 <prvIsQueueFull>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d018      	beq.n	8006660 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	3310      	adds	r3, #16
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	4611      	mov	r1, r2
 8006636:	4618      	mov	r0, r3
 8006638:	f000 ff48 	bl	80074cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800663c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800663e:	f000 fae3 	bl	8006c08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006642:	f000 fd8d 	bl	8007160 <xTaskResumeAll>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	f47f af7c 	bne.w	8006546 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800664e:	4b0c      	ldr	r3, [pc, #48]	; (8006680 <xQueueGenericSend+0x1f8>)
 8006650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	e772      	b.n	8006546 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006662:	f000 fad1 	bl	8006c08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006666:	f000 fd7b 	bl	8007160 <xTaskResumeAll>
 800666a:	e76c      	b.n	8006546 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800666c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800666e:	f000 facb 	bl	8006c08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006672:	f000 fd75 	bl	8007160 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006676:	2300      	movs	r3, #0
		}
	}
}
 8006678:	4618      	mov	r0, r3
 800667a:	3738      	adds	r7, #56	; 0x38
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	e000ed04 	.word	0xe000ed04

08006684 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b08e      	sub	sp, #56	; 0x38
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10a      	bne.n	80066ae <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	623b      	str	r3, [r7, #32]
}
 80066aa:	bf00      	nop
 80066ac:	e7fe      	b.n	80066ac <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80066ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00a      	beq.n	80066cc <xQueueGiveFromISR+0x48>
	__asm volatile
 80066b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	61fb      	str	r3, [r7, #28]
}
 80066c8:	bf00      	nop
 80066ca:	e7fe      	b.n	80066ca <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80066cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d103      	bne.n	80066dc <xQueueGiveFromISR+0x58>
 80066d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <xQueueGiveFromISR+0x5c>
 80066dc:	2301      	movs	r3, #1
 80066de:	e000      	b.n	80066e2 <xQueueGiveFromISR+0x5e>
 80066e0:	2300      	movs	r3, #0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10a      	bne.n	80066fc <xQueueGiveFromISR+0x78>
	__asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	61bb      	str	r3, [r7, #24]
}
 80066f8:	bf00      	nop
 80066fa:	e7fe      	b.n	80066fa <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066fc:	f001 fd1c 	bl	8008138 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006700:	f3ef 8211 	mrs	r2, BASEPRI
 8006704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	617a      	str	r2, [r7, #20]
 8006716:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006718:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800671a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800671c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006720:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006728:	429a      	cmp	r2, r3
 800672a:	d22b      	bcs.n	8006784 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800672c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	1c5a      	adds	r2, r3, #1
 800673a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800673e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006746:	d112      	bne.n	800676e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	2b00      	cmp	r3, #0
 800674e:	d016      	beq.n	800677e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006752:	3324      	adds	r3, #36	; 0x24
 8006754:	4618      	mov	r0, r3
 8006756:	f000 fedd 	bl	8007514 <xTaskRemoveFromEventList>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00e      	beq.n	800677e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00b      	beq.n	800677e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2201      	movs	r2, #1
 800676a:	601a      	str	r2, [r3, #0]
 800676c:	e007      	b.n	800677e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800676e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006772:	3301      	adds	r3, #1
 8006774:	b2db      	uxtb	r3, r3
 8006776:	b25a      	sxtb	r2, r3
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800677e:	2301      	movs	r3, #1
 8006780:	637b      	str	r3, [r7, #52]	; 0x34
 8006782:	e001      	b.n	8006788 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006784:	2300      	movs	r3, #0
 8006786:	637b      	str	r3, [r7, #52]	; 0x34
 8006788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006792:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006796:	4618      	mov	r0, r3
 8006798:	3738      	adds	r7, #56	; 0x38
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
	...

080067a0 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b08e      	sub	sp, #56	; 0x38
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80067aa:	2300      	movs	r3, #0
 80067ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80067b2:	2300      	movs	r3, #0
 80067b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10a      	bne.n	80067d2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	f383 8811 	msr	BASEPRI, r3
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	623b      	str	r3, [r7, #32]
}
 80067ce:	bf00      	nop
 80067d0:	e7fe      	b.n	80067d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80067d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00a      	beq.n	80067f0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80067da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067de:	f383 8811 	msr	BASEPRI, r3
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	61fb      	str	r3, [r7, #28]
}
 80067ec:	bf00      	nop
 80067ee:	e7fe      	b.n	80067ee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067f0:	f001 f852 	bl	8007898 <xTaskGetSchedulerState>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d102      	bne.n	8006800 <xQueueSemaphoreTake+0x60>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <xQueueSemaphoreTake+0x64>
 8006800:	2301      	movs	r3, #1
 8006802:	e000      	b.n	8006806 <xQueueSemaphoreTake+0x66>
 8006804:	2300      	movs	r3, #0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10a      	bne.n	8006820 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	61bb      	str	r3, [r7, #24]
}
 800681c:	bf00      	nop
 800681e:	e7fe      	b.n	800681e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006820:	f001 fba8 	bl	8007f74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006828:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800682a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682c:	2b00      	cmp	r3, #0
 800682e:	d024      	beq.n	800687a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006832:	1e5a      	subs	r2, r3, #1
 8006834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006836:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d104      	bne.n	800684a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006840:	f001 f9f4 	bl	8007c2c <pvTaskIncrementMutexHeldCount>
 8006844:	4602      	mov	r2, r0
 8006846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006848:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800684a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00f      	beq.n	8006872 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006854:	3310      	adds	r3, #16
 8006856:	4618      	mov	r0, r3
 8006858:	f000 fe5c 	bl	8007514 <xTaskRemoveFromEventList>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d007      	beq.n	8006872 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006862:	4b54      	ldr	r3, [pc, #336]	; (80069b4 <xQueueSemaphoreTake+0x214>)
 8006864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006872:	f001 fbaf 	bl	8007fd4 <vPortExitCritical>
				return pdPASS;
 8006876:	2301      	movs	r3, #1
 8006878:	e097      	b.n	80069aa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d111      	bne.n	80068a4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00a      	beq.n	800689c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	617b      	str	r3, [r7, #20]
}
 8006898:	bf00      	nop
 800689a:	e7fe      	b.n	800689a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800689c:	f001 fb9a 	bl	8007fd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80068a0:	2300      	movs	r3, #0
 80068a2:	e082      	b.n	80069aa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d106      	bne.n	80068b8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068aa:	f107 030c 	add.w	r3, r7, #12
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 fe92 	bl	80075d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068b4:	2301      	movs	r3, #1
 80068b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068b8:	f001 fb8c 	bl	8007fd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068bc:	f000 fc42 	bl	8007144 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068c0:	f001 fb58 	bl	8007f74 <vPortEnterCritical>
 80068c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068ca:	b25b      	sxtb	r3, r3
 80068cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d0:	d103      	bne.n	80068da <xQueueSemaphoreTake+0x13a>
 80068d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068e0:	b25b      	sxtb	r3, r3
 80068e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e6:	d103      	bne.n	80068f0 <xQueueSemaphoreTake+0x150>
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068f0:	f001 fb70 	bl	8007fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068f4:	463a      	mov	r2, r7
 80068f6:	f107 030c 	add.w	r3, r7, #12
 80068fa:	4611      	mov	r1, r2
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 fe81 	bl	8007604 <xTaskCheckForTimeOut>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d132      	bne.n	800696e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006908:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800690a:	f000 f9cf 	bl	8006cac <prvIsQueueEmpty>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d026      	beq.n	8006962 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d109      	bne.n	8006930 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800691c:	f001 fb2a 	bl	8007f74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	4618      	mov	r0, r3
 8006926:	f000 ffd5 	bl	80078d4 <xTaskPriorityInherit>
 800692a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800692c:	f001 fb52 	bl	8007fd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006932:	3324      	adds	r3, #36	; 0x24
 8006934:	683a      	ldr	r2, [r7, #0]
 8006936:	4611      	mov	r1, r2
 8006938:	4618      	mov	r0, r3
 800693a:	f000 fdc7 	bl	80074cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800693e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006940:	f000 f962 	bl	8006c08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006944:	f000 fc0c 	bl	8007160 <xTaskResumeAll>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	f47f af68 	bne.w	8006820 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006950:	4b18      	ldr	r3, [pc, #96]	; (80069b4 <xQueueSemaphoreTake+0x214>)
 8006952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	e75e      	b.n	8006820 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006962:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006964:	f000 f950 	bl	8006c08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006968:	f000 fbfa 	bl	8007160 <xTaskResumeAll>
 800696c:	e758      	b.n	8006820 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800696e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006970:	f000 f94a 	bl	8006c08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006974:	f000 fbf4 	bl	8007160 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006978:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800697a:	f000 f997 	bl	8006cac <prvIsQueueEmpty>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	f43f af4d 	beq.w	8006820 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00d      	beq.n	80069a8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800698c:	f001 faf2 	bl	8007f74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006990:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006992:	f000 f891 	bl	8006ab8 <prvGetDisinheritPriorityAfterTimeout>
 8006996:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800699e:	4618      	mov	r0, r3
 80069a0:	f001 f8a4 	bl	8007aec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80069a4:	f001 fb16 	bl	8007fd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3738      	adds	r7, #56	; 0x38
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	e000ed04 	.word	0xe000ed04

080069b8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b08e      	sub	sp, #56	; 0x38
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10a      	bne.n	80069e4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	623b      	str	r3, [r7, #32]
}
 80069e0:	bf00      	nop
 80069e2:	e7fe      	b.n	80069e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d103      	bne.n	80069f2 <xQueueReceiveFromISR+0x3a>
 80069ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <xQueueReceiveFromISR+0x3e>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e000      	b.n	80069f8 <xQueueReceiveFromISR+0x40>
 80069f6:	2300      	movs	r3, #0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10a      	bne.n	8006a12 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80069fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	61fb      	str	r3, [r7, #28]
}
 8006a0e:	bf00      	nop
 8006a10:	e7fe      	b.n	8006a10 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a12:	f001 fb91 	bl	8008138 <vPortValidateInterruptPriority>
	__asm volatile
 8006a16:	f3ef 8211 	mrs	r2, BASEPRI
 8006a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	61ba      	str	r2, [r7, #24]
 8006a2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006a2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d02f      	beq.n	8006a9e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a48:	68b9      	ldr	r1, [r7, #8]
 8006a4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a4c:	f000 f8b6 	bl	8006bbc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a52:	1e5a      	subs	r2, r3, #1
 8006a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006a58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a60:	d112      	bne.n	8006a88 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d016      	beq.n	8006a98 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6c:	3310      	adds	r3, #16
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 fd50 	bl	8007514 <xTaskRemoveFromEventList>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00e      	beq.n	8006a98 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00b      	beq.n	8006a98 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	e007      	b.n	8006a98 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	b25a      	sxtb	r2, r3
 8006a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a9c:	e001      	b.n	8006aa2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f383 8811 	msr	BASEPRI, r3
}
 8006aac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3738      	adds	r7, #56	; 0x38
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d006      	beq.n	8006ad6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f1c3 0307 	rsb	r3, r3, #7
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	e001      	b.n	8006ada <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006ada:	68fb      	ldr	r3, [r7, #12]
	}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006af4:	2300      	movs	r3, #0
 8006af6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10d      	bne.n	8006b22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d14d      	bne.n	8006baa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 ff64 	bl	80079e0 <xTaskPriorityDisinherit>
 8006b18:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	605a      	str	r2, [r3, #4]
 8006b20:	e043      	b.n	8006baa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d119      	bne.n	8006b5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6898      	ldr	r0, [r3, #8]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b30:	461a      	mov	r2, r3
 8006b32:	68b9      	ldr	r1, [r7, #8]
 8006b34:	f001 fd3e 	bl	80085b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b40:	441a      	add	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	689a      	ldr	r2, [r3, #8]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d32b      	bcc.n	8006baa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	609a      	str	r2, [r3, #8]
 8006b5a:	e026      	b.n	8006baa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	68d8      	ldr	r0, [r3, #12]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b64:	461a      	mov	r2, r3
 8006b66:	68b9      	ldr	r1, [r7, #8]
 8006b68:	f001 fd24 	bl	80085b4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	68da      	ldr	r2, [r3, #12]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b74:	425b      	negs	r3, r3
 8006b76:	441a      	add	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	68da      	ldr	r2, [r3, #12]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d207      	bcs.n	8006b98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b90:	425b      	negs	r3, r3
 8006b92:	441a      	add	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d105      	bne.n	8006baa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d002      	beq.n	8006baa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	1c5a      	adds	r2, r3, #1
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006bb2:	697b      	ldr	r3, [r7, #20]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d018      	beq.n	8006c00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd6:	441a      	add	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68da      	ldr	r2, [r3, #12]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d303      	bcc.n	8006bf0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68d9      	ldr	r1, [r3, #12]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	6838      	ldr	r0, [r7, #0]
 8006bfc:	f001 fcda 	bl	80085b4 <memcpy>
	}
}
 8006c00:	bf00      	nop
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c10:	f001 f9b0 	bl	8007f74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c1c:	e011      	b.n	8006c42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d012      	beq.n	8006c4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	3324      	adds	r3, #36	; 0x24
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 fc72 	bl	8007514 <xTaskRemoveFromEventList>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d001      	beq.n	8006c3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c36:	f000 fd47 	bl	80076c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	dce9      	bgt.n	8006c1e <prvUnlockQueue+0x16>
 8006c4a:	e000      	b.n	8006c4e <prvUnlockQueue+0x46>
					break;
 8006c4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	22ff      	movs	r2, #255	; 0xff
 8006c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006c56:	f001 f9bd 	bl	8007fd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c5a:	f001 f98b 	bl	8007f74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c66:	e011      	b.n	8006c8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d012      	beq.n	8006c96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3310      	adds	r3, #16
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 fc4d 	bl	8007514 <xTaskRemoveFromEventList>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c80:	f000 fd22 	bl	80076c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c84:	7bbb      	ldrb	r3, [r7, #14]
 8006c86:	3b01      	subs	r3, #1
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	dce9      	bgt.n	8006c68 <prvUnlockQueue+0x60>
 8006c94:	e000      	b.n	8006c98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006c96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	22ff      	movs	r2, #255	; 0xff
 8006c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006ca0:	f001 f998 	bl	8007fd4 <vPortExitCritical>
}
 8006ca4:	bf00      	nop
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cb4:	f001 f95e 	bl	8007f74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d102      	bne.n	8006cc6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	e001      	b.n	8006cca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cca:	f001 f983 	bl	8007fd4 <vPortExitCritical>

	return xReturn;
 8006cce:	68fb      	ldr	r3, [r7, #12]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ce0:	f001 f948 	bl	8007f74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d102      	bne.n	8006cf6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	e001      	b.n	8006cfa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cfa:	f001 f96b 	bl	8007fd4 <vPortExitCritical>

	return xReturn;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b08e      	sub	sp, #56	; 0x38
 8006d0c:	af04      	add	r7, sp, #16
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
 8006d14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10a      	bne.n	8006d32 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d20:	f383 8811 	msr	BASEPRI, r3
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	623b      	str	r3, [r7, #32]
}
 8006d2e:	bf00      	nop
 8006d30:	e7fe      	b.n	8006d30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10a      	bne.n	8006d4e <xTaskCreateStatic+0x46>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	61fb      	str	r3, [r7, #28]
}
 8006d4a:	bf00      	nop
 8006d4c:	e7fe      	b.n	8006d4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006d4e:	2354      	movs	r3, #84	; 0x54
 8006d50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	2b54      	cmp	r3, #84	; 0x54
 8006d56:	d00a      	beq.n	8006d6e <xTaskCreateStatic+0x66>
	__asm volatile
 8006d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5c:	f383 8811 	msr	BASEPRI, r3
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	61bb      	str	r3, [r7, #24]
}
 8006d6a:	bf00      	nop
 8006d6c:	e7fe      	b.n	8006d6c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d01e      	beq.n	8006db2 <xTaskCreateStatic+0xaa>
 8006d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d01b      	beq.n	8006db2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d82:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	9303      	str	r3, [sp, #12]
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	9302      	str	r3, [sp, #8]
 8006d94:	f107 0314 	add.w	r3, r7, #20
 8006d98:	9301      	str	r3, [sp, #4]
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	68b9      	ldr	r1, [r7, #8]
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 f850 	bl	8006e4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006daa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006dac:	f000 f8cc 	bl	8006f48 <prvAddNewTaskToReadyList>
 8006db0:	e001      	b.n	8006db6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006db2:	2300      	movs	r3, #0
 8006db4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006db6:	697b      	ldr	r3, [r7, #20]
	}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3728      	adds	r7, #40	; 0x28
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08c      	sub	sp, #48	; 0x30
 8006dc4:	af04      	add	r7, sp, #16
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	603b      	str	r3, [r7, #0]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dd0:	88fb      	ldrh	r3, [r7, #6]
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f001 f9ef 	bl	80081b8 <pvPortMalloc>
 8006dda:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00e      	beq.n	8006e00 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006de2:	2054      	movs	r0, #84	; 0x54
 8006de4:	f001 f9e8 	bl	80081b8 <pvPortMalloc>
 8006de8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d003      	beq.n	8006df8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	631a      	str	r2, [r3, #48]	; 0x30
 8006df6:	e005      	b.n	8006e04 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006df8:	6978      	ldr	r0, [r7, #20]
 8006dfa:	f001 faa1 	bl	8008340 <vPortFree>
 8006dfe:	e001      	b.n	8006e04 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006e00:	2300      	movs	r3, #0
 8006e02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d017      	beq.n	8006e3a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006e12:	88fa      	ldrh	r2, [r7, #6]
 8006e14:	2300      	movs	r3, #0
 8006e16:	9303      	str	r3, [sp, #12]
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	9302      	str	r3, [sp, #8]
 8006e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1e:	9301      	str	r3, [sp, #4]
 8006e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	68b9      	ldr	r1, [r7, #8]
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 f80e 	bl	8006e4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e2e:	69f8      	ldr	r0, [r7, #28]
 8006e30:	f000 f88a 	bl	8006f48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006e34:	2301      	movs	r3, #1
 8006e36:	61bb      	str	r3, [r7, #24]
 8006e38:	e002      	b.n	8006e40 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e3e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006e40:	69bb      	ldr	r3, [r7, #24]
	}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3720      	adds	r7, #32
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b088      	sub	sp, #32
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	60f8      	str	r0, [r7, #12]
 8006e52:	60b9      	str	r1, [r7, #8]
 8006e54:	607a      	str	r2, [r7, #4]
 8006e56:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e62:	3b01      	subs	r3, #1
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	f023 0307 	bic.w	r3, r3, #7
 8006e70:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	f003 0307 	and.w	r3, r3, #7
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00a      	beq.n	8006e92 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	617b      	str	r3, [r7, #20]
}
 8006e8e:	bf00      	nop
 8006e90:	e7fe      	b.n	8006e90 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e92:	2300      	movs	r3, #0
 8006e94:	61fb      	str	r3, [r7, #28]
 8006e96:	e012      	b.n	8006ebe <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	7819      	ldrb	r1, [r3, #0]
 8006ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	3334      	adds	r3, #52	; 0x34
 8006ea8:	460a      	mov	r2, r1
 8006eaa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d006      	beq.n	8006ec6 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	61fb      	str	r3, [r7, #28]
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	2b0f      	cmp	r3, #15
 8006ec2:	d9e9      	bls.n	8006e98 <prvInitialiseNewTask+0x4e>
 8006ec4:	e000      	b.n	8006ec8 <prvInitialiseNewTask+0x7e>
		{
			break;
 8006ec6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed2:	2b06      	cmp	r3, #6
 8006ed4:	d901      	bls.n	8006eda <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ed6:	2306      	movs	r3, #6
 8006ed8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ede:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ee4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee8:	2200      	movs	r2, #0
 8006eea:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eee:	3304      	adds	r3, #4
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7ff f8ab 	bl	800604c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef8:	3318      	adds	r3, #24
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7ff f8a6 	bl	800604c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f04:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f08:	f1c3 0207 	rsb	r2, r3, #7
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f14:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f18:	2200      	movs	r2, #0
 8006f1a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	68f9      	ldr	r1, [r7, #12]
 8006f28:	69b8      	ldr	r0, [r7, #24]
 8006f2a:	f000 fef9 	bl	8007d20 <pxPortInitialiseStack>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f32:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d002      	beq.n	8006f40 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f40:	bf00      	nop
 8006f42:	3720      	adds	r7, #32
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f50:	f001 f810 	bl	8007f74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f54:	4b2a      	ldr	r3, [pc, #168]	; (8007000 <prvAddNewTaskToReadyList+0xb8>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	4a29      	ldr	r2, [pc, #164]	; (8007000 <prvAddNewTaskToReadyList+0xb8>)
 8006f5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f5e:	4b29      	ldr	r3, [pc, #164]	; (8007004 <prvAddNewTaskToReadyList+0xbc>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d109      	bne.n	8006f7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f66:	4a27      	ldr	r2, [pc, #156]	; (8007004 <prvAddNewTaskToReadyList+0xbc>)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f6c:	4b24      	ldr	r3, [pc, #144]	; (8007000 <prvAddNewTaskToReadyList+0xb8>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d110      	bne.n	8006f96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f74:	f000 fbcc 	bl	8007710 <prvInitialiseTaskLists>
 8006f78:	e00d      	b.n	8006f96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f7a:	4b23      	ldr	r3, [pc, #140]	; (8007008 <prvAddNewTaskToReadyList+0xc0>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d109      	bne.n	8006f96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f82:	4b20      	ldr	r3, [pc, #128]	; (8007004 <prvAddNewTaskToReadyList+0xbc>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d802      	bhi.n	8006f96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006f90:	4a1c      	ldr	r2, [pc, #112]	; (8007004 <prvAddNewTaskToReadyList+0xbc>)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006f96:	4b1d      	ldr	r3, [pc, #116]	; (800700c <prvAddNewTaskToReadyList+0xc4>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	4a1b      	ldr	r2, [pc, #108]	; (800700c <prvAddNewTaskToReadyList+0xc4>)
 8006f9e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	409a      	lsls	r2, r3
 8006fa8:	4b19      	ldr	r3, [pc, #100]	; (8007010 <prvAddNewTaskToReadyList+0xc8>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	4a18      	ldr	r2, [pc, #96]	; (8007010 <prvAddNewTaskToReadyList+0xc8>)
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4a15      	ldr	r2, [pc, #84]	; (8007014 <prvAddNewTaskToReadyList+0xcc>)
 8006fc0:	441a      	add	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	3304      	adds	r3, #4
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	4610      	mov	r0, r2
 8006fca:	f7ff f84c 	bl	8006066 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006fce:	f001 f801 	bl	8007fd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006fd2:	4b0d      	ldr	r3, [pc, #52]	; (8007008 <prvAddNewTaskToReadyList+0xc0>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00e      	beq.n	8006ff8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006fda:	4b0a      	ldr	r3, [pc, #40]	; (8007004 <prvAddNewTaskToReadyList+0xbc>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d207      	bcs.n	8006ff8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006fe8:	4b0b      	ldr	r3, [pc, #44]	; (8007018 <prvAddNewTaskToReadyList+0xd0>)
 8006fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fee:	601a      	str	r2, [r3, #0]
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ff8:	bf00      	nop
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	20000398 	.word	0x20000398
 8007004:	20000298 	.word	0x20000298
 8007008:	200003a4 	.word	0x200003a4
 800700c:	200003b4 	.word	0x200003b4
 8007010:	200003a0 	.word	0x200003a0
 8007014:	2000029c 	.word	0x2000029c
 8007018:	e000ed04 	.word	0xe000ed04

0800701c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007024:	2300      	movs	r3, #0
 8007026:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d017      	beq.n	800705e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800702e:	4b13      	ldr	r3, [pc, #76]	; (800707c <vTaskDelay+0x60>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00a      	beq.n	800704c <vTaskDelay+0x30>
	__asm volatile
 8007036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	60bb      	str	r3, [r7, #8]
}
 8007048:	bf00      	nop
 800704a:	e7fe      	b.n	800704a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800704c:	f000 f87a 	bl	8007144 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007050:	2100      	movs	r1, #0
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fdfe 	bl	8007c54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007058:	f000 f882 	bl	8007160 <xTaskResumeAll>
 800705c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d107      	bne.n	8007074 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007064:	4b06      	ldr	r3, [pc, #24]	; (8007080 <vTaskDelay+0x64>)
 8007066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007074:	bf00      	nop
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	200003c0 	.word	0x200003c0
 8007080:	e000ed04 	.word	0xe000ed04

08007084 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b08a      	sub	sp, #40	; 0x28
 8007088:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800708a:	2300      	movs	r3, #0
 800708c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800708e:	2300      	movs	r3, #0
 8007090:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007092:	463a      	mov	r2, r7
 8007094:	1d39      	adds	r1, r7, #4
 8007096:	f107 0308 	add.w	r3, r7, #8
 800709a:	4618      	mov	r0, r3
 800709c:	f7f9 fcb6 	bl	8000a0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	9202      	str	r2, [sp, #8]
 80070a8:	9301      	str	r3, [sp, #4]
 80070aa:	2300      	movs	r3, #0
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	2300      	movs	r3, #0
 80070b0:	460a      	mov	r2, r1
 80070b2:	491e      	ldr	r1, [pc, #120]	; (800712c <vTaskStartScheduler+0xa8>)
 80070b4:	481e      	ldr	r0, [pc, #120]	; (8007130 <vTaskStartScheduler+0xac>)
 80070b6:	f7ff fe27 	bl	8006d08 <xTaskCreateStatic>
 80070ba:	4603      	mov	r3, r0
 80070bc:	4a1d      	ldr	r2, [pc, #116]	; (8007134 <vTaskStartScheduler+0xb0>)
 80070be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80070c0:	4b1c      	ldr	r3, [pc, #112]	; (8007134 <vTaskStartScheduler+0xb0>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80070c8:	2301      	movs	r3, #1
 80070ca:	617b      	str	r3, [r7, #20]
 80070cc:	e001      	b.n	80070d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80070ce:	2300      	movs	r3, #0
 80070d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d116      	bne.n	8007106 <vTaskStartScheduler+0x82>
	__asm volatile
 80070d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070dc:	f383 8811 	msr	BASEPRI, r3
 80070e0:	f3bf 8f6f 	isb	sy
 80070e4:	f3bf 8f4f 	dsb	sy
 80070e8:	613b      	str	r3, [r7, #16]
}
 80070ea:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80070ec:	4b12      	ldr	r3, [pc, #72]	; (8007138 <vTaskStartScheduler+0xb4>)
 80070ee:	f04f 32ff 	mov.w	r2, #4294967295
 80070f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80070f4:	4b11      	ldr	r3, [pc, #68]	; (800713c <vTaskStartScheduler+0xb8>)
 80070f6:	2201      	movs	r2, #1
 80070f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80070fa:	4b11      	ldr	r3, [pc, #68]	; (8007140 <vTaskStartScheduler+0xbc>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007100:	f000 fe96 	bl	8007e30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007104:	e00e      	b.n	8007124 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710c:	d10a      	bne.n	8007124 <vTaskStartScheduler+0xa0>
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	60fb      	str	r3, [r7, #12]
}
 8007120:	bf00      	nop
 8007122:	e7fe      	b.n	8007122 <vTaskStartScheduler+0x9e>
}
 8007124:	bf00      	nop
 8007126:	3718      	adds	r7, #24
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	080087c8 	.word	0x080087c8
 8007130:	080076e1 	.word	0x080076e1
 8007134:	200003bc 	.word	0x200003bc
 8007138:	200003b8 	.word	0x200003b8
 800713c:	200003a4 	.word	0x200003a4
 8007140:	2000039c 	.word	0x2000039c

08007144 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007144:	b480      	push	{r7}
 8007146:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007148:	4b04      	ldr	r3, [pc, #16]	; (800715c <vTaskSuspendAll+0x18>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	3301      	adds	r3, #1
 800714e:	4a03      	ldr	r2, [pc, #12]	; (800715c <vTaskSuspendAll+0x18>)
 8007150:	6013      	str	r3, [r2, #0]
}
 8007152:	bf00      	nop
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	200003c0 	.word	0x200003c0

08007160 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007166:	2300      	movs	r3, #0
 8007168:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800716a:	2300      	movs	r3, #0
 800716c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800716e:	4b41      	ldr	r3, [pc, #260]	; (8007274 <xTaskResumeAll+0x114>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10a      	bne.n	800718c <xTaskResumeAll+0x2c>
	__asm volatile
 8007176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	603b      	str	r3, [r7, #0]
}
 8007188:	bf00      	nop
 800718a:	e7fe      	b.n	800718a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800718c:	f000 fef2 	bl	8007f74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007190:	4b38      	ldr	r3, [pc, #224]	; (8007274 <xTaskResumeAll+0x114>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	3b01      	subs	r3, #1
 8007196:	4a37      	ldr	r2, [pc, #220]	; (8007274 <xTaskResumeAll+0x114>)
 8007198:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800719a:	4b36      	ldr	r3, [pc, #216]	; (8007274 <xTaskResumeAll+0x114>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d161      	bne.n	8007266 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80071a2:	4b35      	ldr	r3, [pc, #212]	; (8007278 <xTaskResumeAll+0x118>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d05d      	beq.n	8007266 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071aa:	e02e      	b.n	800720a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80071ac:	4b33      	ldr	r3, [pc, #204]	; (800727c <xTaskResumeAll+0x11c>)
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	3318      	adds	r3, #24
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fe ffb1 	bl	8006120 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	3304      	adds	r3, #4
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fe ffac 	bl	8006120 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071cc:	2201      	movs	r2, #1
 80071ce:	409a      	lsls	r2, r3
 80071d0:	4b2b      	ldr	r3, [pc, #172]	; (8007280 <xTaskResumeAll+0x120>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	4a2a      	ldr	r2, [pc, #168]	; (8007280 <xTaskResumeAll+0x120>)
 80071d8:	6013      	str	r3, [r2, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071de:	4613      	mov	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4a27      	ldr	r2, [pc, #156]	; (8007284 <xTaskResumeAll+0x124>)
 80071e8:	441a      	add	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	3304      	adds	r3, #4
 80071ee:	4619      	mov	r1, r3
 80071f0:	4610      	mov	r0, r2
 80071f2:	f7fe ff38 	bl	8006066 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071fa:	4b23      	ldr	r3, [pc, #140]	; (8007288 <xTaskResumeAll+0x128>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	429a      	cmp	r2, r3
 8007202:	d302      	bcc.n	800720a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007204:	4b21      	ldr	r3, [pc, #132]	; (800728c <xTaskResumeAll+0x12c>)
 8007206:	2201      	movs	r2, #1
 8007208:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800720a:	4b1c      	ldr	r3, [pc, #112]	; (800727c <xTaskResumeAll+0x11c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1cc      	bne.n	80071ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d001      	beq.n	800721c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007218:	f000 fb18 	bl	800784c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800721c:	4b1c      	ldr	r3, [pc, #112]	; (8007290 <xTaskResumeAll+0x130>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d010      	beq.n	800724a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007228:	f000 f836 	bl	8007298 <xTaskIncrementTick>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d002      	beq.n	8007238 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007232:	4b16      	ldr	r3, [pc, #88]	; (800728c <xTaskResumeAll+0x12c>)
 8007234:	2201      	movs	r2, #1
 8007236:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	3b01      	subs	r3, #1
 800723c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1f1      	bne.n	8007228 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007244:	4b12      	ldr	r3, [pc, #72]	; (8007290 <xTaskResumeAll+0x130>)
 8007246:	2200      	movs	r2, #0
 8007248:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800724a:	4b10      	ldr	r3, [pc, #64]	; (800728c <xTaskResumeAll+0x12c>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d009      	beq.n	8007266 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007252:	2301      	movs	r3, #1
 8007254:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007256:	4b0f      	ldr	r3, [pc, #60]	; (8007294 <xTaskResumeAll+0x134>)
 8007258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007266:	f000 feb5 	bl	8007fd4 <vPortExitCritical>

	return xAlreadyYielded;
 800726a:	68bb      	ldr	r3, [r7, #8]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	200003c0 	.word	0x200003c0
 8007278:	20000398 	.word	0x20000398
 800727c:	20000358 	.word	0x20000358
 8007280:	200003a0 	.word	0x200003a0
 8007284:	2000029c 	.word	0x2000029c
 8007288:	20000298 	.word	0x20000298
 800728c:	200003ac 	.word	0x200003ac
 8007290:	200003a8 	.word	0x200003a8
 8007294:	e000ed04 	.word	0xe000ed04

08007298 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800729e:	2300      	movs	r3, #0
 80072a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072a2:	4b51      	ldr	r3, [pc, #324]	; (80073e8 <xTaskIncrementTick+0x150>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f040 808d 	bne.w	80073c6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80072ac:	4b4f      	ldr	r3, [pc, #316]	; (80073ec <xTaskIncrementTick+0x154>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	3301      	adds	r3, #1
 80072b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80072b4:	4a4d      	ldr	r2, [pc, #308]	; (80073ec <xTaskIncrementTick+0x154>)
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d120      	bne.n	8007302 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80072c0:	4b4b      	ldr	r3, [pc, #300]	; (80073f0 <xTaskIncrementTick+0x158>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	603b      	str	r3, [r7, #0]
}
 80072dc:	bf00      	nop
 80072de:	e7fe      	b.n	80072de <xTaskIncrementTick+0x46>
 80072e0:	4b43      	ldr	r3, [pc, #268]	; (80073f0 <xTaskIncrementTick+0x158>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	4b43      	ldr	r3, [pc, #268]	; (80073f4 <xTaskIncrementTick+0x15c>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a41      	ldr	r2, [pc, #260]	; (80073f0 <xTaskIncrementTick+0x158>)
 80072ec:	6013      	str	r3, [r2, #0]
 80072ee:	4a41      	ldr	r2, [pc, #260]	; (80073f4 <xTaskIncrementTick+0x15c>)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6013      	str	r3, [r2, #0]
 80072f4:	4b40      	ldr	r3, [pc, #256]	; (80073f8 <xTaskIncrementTick+0x160>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3301      	adds	r3, #1
 80072fa:	4a3f      	ldr	r2, [pc, #252]	; (80073f8 <xTaskIncrementTick+0x160>)
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	f000 faa5 	bl	800784c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007302:	4b3e      	ldr	r3, [pc, #248]	; (80073fc <xTaskIncrementTick+0x164>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	693a      	ldr	r2, [r7, #16]
 8007308:	429a      	cmp	r2, r3
 800730a:	d34d      	bcc.n	80073a8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800730c:	4b38      	ldr	r3, [pc, #224]	; (80073f0 <xTaskIncrementTick+0x158>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <xTaskIncrementTick+0x82>
 8007316:	2301      	movs	r3, #1
 8007318:	e000      	b.n	800731c <xTaskIncrementTick+0x84>
 800731a:	2300      	movs	r3, #0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d004      	beq.n	800732a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007320:	4b36      	ldr	r3, [pc, #216]	; (80073fc <xTaskIncrementTick+0x164>)
 8007322:	f04f 32ff 	mov.w	r2, #4294967295
 8007326:	601a      	str	r2, [r3, #0]
					break;
 8007328:	e03e      	b.n	80073a8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800732a:	4b31      	ldr	r3, [pc, #196]	; (80073f0 <xTaskIncrementTick+0x158>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	429a      	cmp	r2, r3
 8007340:	d203      	bcs.n	800734a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007342:	4a2e      	ldr	r2, [pc, #184]	; (80073fc <xTaskIncrementTick+0x164>)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6013      	str	r3, [r2, #0]
						break;
 8007348:	e02e      	b.n	80073a8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	3304      	adds	r3, #4
 800734e:	4618      	mov	r0, r3
 8007350:	f7fe fee6 	bl	8006120 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007358:	2b00      	cmp	r3, #0
 800735a:	d004      	beq.n	8007366 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	3318      	adds	r3, #24
 8007360:	4618      	mov	r0, r3
 8007362:	f7fe fedd 	bl	8006120 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736a:	2201      	movs	r2, #1
 800736c:	409a      	lsls	r2, r3
 800736e:	4b24      	ldr	r3, [pc, #144]	; (8007400 <xTaskIncrementTick+0x168>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4313      	orrs	r3, r2
 8007374:	4a22      	ldr	r2, [pc, #136]	; (8007400 <xTaskIncrementTick+0x168>)
 8007376:	6013      	str	r3, [r2, #0]
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800737c:	4613      	mov	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4a1f      	ldr	r2, [pc, #124]	; (8007404 <xTaskIncrementTick+0x16c>)
 8007386:	441a      	add	r2, r3
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	3304      	adds	r3, #4
 800738c:	4619      	mov	r1, r3
 800738e:	4610      	mov	r0, r2
 8007390:	f7fe fe69 	bl	8006066 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007398:	4b1b      	ldr	r3, [pc, #108]	; (8007408 <xTaskIncrementTick+0x170>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739e:	429a      	cmp	r2, r3
 80073a0:	d3b4      	bcc.n	800730c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80073a2:	2301      	movs	r3, #1
 80073a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073a6:	e7b1      	b.n	800730c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80073a8:	4b17      	ldr	r3, [pc, #92]	; (8007408 <xTaskIncrementTick+0x170>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ae:	4915      	ldr	r1, [pc, #84]	; (8007404 <xTaskIncrementTick+0x16c>)
 80073b0:	4613      	mov	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	440b      	add	r3, r1
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d907      	bls.n	80073d0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80073c0:	2301      	movs	r3, #1
 80073c2:	617b      	str	r3, [r7, #20]
 80073c4:	e004      	b.n	80073d0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80073c6:	4b11      	ldr	r3, [pc, #68]	; (800740c <xTaskIncrementTick+0x174>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3301      	adds	r3, #1
 80073cc:	4a0f      	ldr	r2, [pc, #60]	; (800740c <xTaskIncrementTick+0x174>)
 80073ce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80073d0:	4b0f      	ldr	r3, [pc, #60]	; (8007410 <xTaskIncrementTick+0x178>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80073d8:	2301      	movs	r3, #1
 80073da:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80073dc:	697b      	ldr	r3, [r7, #20]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3718      	adds	r7, #24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	200003c0 	.word	0x200003c0
 80073ec:	2000039c 	.word	0x2000039c
 80073f0:	20000350 	.word	0x20000350
 80073f4:	20000354 	.word	0x20000354
 80073f8:	200003b0 	.word	0x200003b0
 80073fc:	200003b8 	.word	0x200003b8
 8007400:	200003a0 	.word	0x200003a0
 8007404:	2000029c 	.word	0x2000029c
 8007408:	20000298 	.word	0x20000298
 800740c:	200003a8 	.word	0x200003a8
 8007410:	200003ac 	.word	0x200003ac

08007414 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007414:	b480      	push	{r7}
 8007416:	b087      	sub	sp, #28
 8007418:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800741a:	4b27      	ldr	r3, [pc, #156]	; (80074b8 <vTaskSwitchContext+0xa4>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007422:	4b26      	ldr	r3, [pc, #152]	; (80074bc <vTaskSwitchContext+0xa8>)
 8007424:	2201      	movs	r2, #1
 8007426:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007428:	e03f      	b.n	80074aa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800742a:	4b24      	ldr	r3, [pc, #144]	; (80074bc <vTaskSwitchContext+0xa8>)
 800742c:	2200      	movs	r2, #0
 800742e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007430:	4b23      	ldr	r3, [pc, #140]	; (80074c0 <vTaskSwitchContext+0xac>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	fab3 f383 	clz	r3, r3
 800743c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800743e:	7afb      	ldrb	r3, [r7, #11]
 8007440:	f1c3 031f 	rsb	r3, r3, #31
 8007444:	617b      	str	r3, [r7, #20]
 8007446:	491f      	ldr	r1, [pc, #124]	; (80074c4 <vTaskSwitchContext+0xb0>)
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	4613      	mov	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4413      	add	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	440b      	add	r3, r1
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10a      	bne.n	8007470 <vTaskSwitchContext+0x5c>
	__asm volatile
 800745a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	607b      	str	r3, [r7, #4]
}
 800746c:	bf00      	nop
 800746e:	e7fe      	b.n	800746e <vTaskSwitchContext+0x5a>
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	4613      	mov	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4a12      	ldr	r2, [pc, #72]	; (80074c4 <vTaskSwitchContext+0xb0>)
 800747c:	4413      	add	r3, r2
 800747e:	613b      	str	r3, [r7, #16]
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	685a      	ldr	r2, [r3, #4]
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	605a      	str	r2, [r3, #4]
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	3308      	adds	r3, #8
 8007492:	429a      	cmp	r2, r3
 8007494:	d104      	bne.n	80074a0 <vTaskSwitchContext+0x8c>
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	605a      	str	r2, [r3, #4]
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	4a08      	ldr	r2, [pc, #32]	; (80074c8 <vTaskSwitchContext+0xb4>)
 80074a8:	6013      	str	r3, [r2, #0]
}
 80074aa:	bf00      	nop
 80074ac:	371c      	adds	r7, #28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	200003c0 	.word	0x200003c0
 80074bc:	200003ac 	.word	0x200003ac
 80074c0:	200003a0 	.word	0x200003a0
 80074c4:	2000029c 	.word	0x2000029c
 80074c8:	20000298 	.word	0x20000298

080074cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10a      	bne.n	80074f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80074dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e0:	f383 8811 	msr	BASEPRI, r3
 80074e4:	f3bf 8f6f 	isb	sy
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	60fb      	str	r3, [r7, #12]
}
 80074ee:	bf00      	nop
 80074f0:	e7fe      	b.n	80074f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074f2:	4b07      	ldr	r3, [pc, #28]	; (8007510 <vTaskPlaceOnEventList+0x44>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3318      	adds	r3, #24
 80074f8:	4619      	mov	r1, r3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7fe fdd7 	bl	80060ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007500:	2101      	movs	r1, #1
 8007502:	6838      	ldr	r0, [r7, #0]
 8007504:	f000 fba6 	bl	8007c54 <prvAddCurrentTaskToDelayedList>
}
 8007508:	bf00      	nop
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	20000298 	.word	0x20000298

08007514 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10a      	bne.n	8007540 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	60fb      	str	r3, [r7, #12]
}
 800753c:	bf00      	nop
 800753e:	e7fe      	b.n	800753e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	3318      	adds	r3, #24
 8007544:	4618      	mov	r0, r3
 8007546:	f7fe fdeb 	bl	8006120 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800754a:	4b1d      	ldr	r3, [pc, #116]	; (80075c0 <xTaskRemoveFromEventList+0xac>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d11c      	bne.n	800758c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	3304      	adds	r3, #4
 8007556:	4618      	mov	r0, r3
 8007558:	f7fe fde2 	bl	8006120 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007560:	2201      	movs	r2, #1
 8007562:	409a      	lsls	r2, r3
 8007564:	4b17      	ldr	r3, [pc, #92]	; (80075c4 <xTaskRemoveFromEventList+0xb0>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4313      	orrs	r3, r2
 800756a:	4a16      	ldr	r2, [pc, #88]	; (80075c4 <xTaskRemoveFromEventList+0xb0>)
 800756c:	6013      	str	r3, [r2, #0]
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007572:	4613      	mov	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4a13      	ldr	r2, [pc, #76]	; (80075c8 <xTaskRemoveFromEventList+0xb4>)
 800757c:	441a      	add	r2, r3
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	3304      	adds	r3, #4
 8007582:	4619      	mov	r1, r3
 8007584:	4610      	mov	r0, r2
 8007586:	f7fe fd6e 	bl	8006066 <vListInsertEnd>
 800758a:	e005      	b.n	8007598 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	3318      	adds	r3, #24
 8007590:	4619      	mov	r1, r3
 8007592:	480e      	ldr	r0, [pc, #56]	; (80075cc <xTaskRemoveFromEventList+0xb8>)
 8007594:	f7fe fd67 	bl	8006066 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800759c:	4b0c      	ldr	r3, [pc, #48]	; (80075d0 <xTaskRemoveFromEventList+0xbc>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d905      	bls.n	80075b2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80075a6:	2301      	movs	r3, #1
 80075a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80075aa:	4b0a      	ldr	r3, [pc, #40]	; (80075d4 <xTaskRemoveFromEventList+0xc0>)
 80075ac:	2201      	movs	r2, #1
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	e001      	b.n	80075b6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80075b2:	2300      	movs	r3, #0
 80075b4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80075b6:	697b      	ldr	r3, [r7, #20]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3718      	adds	r7, #24
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	200003c0 	.word	0x200003c0
 80075c4:	200003a0 	.word	0x200003a0
 80075c8:	2000029c 	.word	0x2000029c
 80075cc:	20000358 	.word	0x20000358
 80075d0:	20000298 	.word	0x20000298
 80075d4:	200003ac 	.word	0x200003ac

080075d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80075e0:	4b06      	ldr	r3, [pc, #24]	; (80075fc <vTaskInternalSetTimeOutState+0x24>)
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80075e8:	4b05      	ldr	r3, [pc, #20]	; (8007600 <vTaskInternalSetTimeOutState+0x28>)
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	605a      	str	r2, [r3, #4]
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr
 80075fc:	200003b0 	.word	0x200003b0
 8007600:	2000039c 	.word	0x2000039c

08007604 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b088      	sub	sp, #32
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10a      	bne.n	800762a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007618:	f383 8811 	msr	BASEPRI, r3
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	613b      	str	r3, [r7, #16]
}
 8007626:	bf00      	nop
 8007628:	e7fe      	b.n	8007628 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10a      	bne.n	8007646 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	60fb      	str	r3, [r7, #12]
}
 8007642:	bf00      	nop
 8007644:	e7fe      	b.n	8007644 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007646:	f000 fc95 	bl	8007f74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800764a:	4b1d      	ldr	r3, [pc, #116]	; (80076c0 <xTaskCheckForTimeOut+0xbc>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	69ba      	ldr	r2, [r7, #24]
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007662:	d102      	bne.n	800766a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007664:	2300      	movs	r3, #0
 8007666:	61fb      	str	r3, [r7, #28]
 8007668:	e023      	b.n	80076b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	4b15      	ldr	r3, [pc, #84]	; (80076c4 <xTaskCheckForTimeOut+0xc0>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	429a      	cmp	r2, r3
 8007674:	d007      	beq.n	8007686 <xTaskCheckForTimeOut+0x82>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	429a      	cmp	r2, r3
 800767e:	d302      	bcc.n	8007686 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007680:	2301      	movs	r3, #1
 8007682:	61fb      	str	r3, [r7, #28]
 8007684:	e015      	b.n	80076b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	429a      	cmp	r2, r3
 800768e:	d20b      	bcs.n	80076a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	1ad2      	subs	r2, r2, r3
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f7ff ff9b 	bl	80075d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80076a2:	2300      	movs	r3, #0
 80076a4:	61fb      	str	r3, [r7, #28]
 80076a6:	e004      	b.n	80076b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	2200      	movs	r2, #0
 80076ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80076ae:	2301      	movs	r3, #1
 80076b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80076b2:	f000 fc8f 	bl	8007fd4 <vPortExitCritical>

	return xReturn;
 80076b6:	69fb      	ldr	r3, [r7, #28]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3720      	adds	r7, #32
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	2000039c 	.word	0x2000039c
 80076c4:	200003b0 	.word	0x200003b0

080076c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80076c8:	b480      	push	{r7}
 80076ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80076cc:	4b03      	ldr	r3, [pc, #12]	; (80076dc <vTaskMissedYield+0x14>)
 80076ce:	2201      	movs	r2, #1
 80076d0:	601a      	str	r2, [r3, #0]
}
 80076d2:	bf00      	nop
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	200003ac 	.word	0x200003ac

080076e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80076e8:	f000 f852 	bl	8007790 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80076ec:	4b06      	ldr	r3, [pc, #24]	; (8007708 <prvIdleTask+0x28>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d9f9      	bls.n	80076e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80076f4:	4b05      	ldr	r3, [pc, #20]	; (800770c <prvIdleTask+0x2c>)
 80076f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076fa:	601a      	str	r2, [r3, #0]
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007704:	e7f0      	b.n	80076e8 <prvIdleTask+0x8>
 8007706:	bf00      	nop
 8007708:	2000029c 	.word	0x2000029c
 800770c:	e000ed04 	.word	0xe000ed04

08007710 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007716:	2300      	movs	r3, #0
 8007718:	607b      	str	r3, [r7, #4]
 800771a:	e00c      	b.n	8007736 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	4613      	mov	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4a12      	ldr	r2, [pc, #72]	; (8007770 <prvInitialiseTaskLists+0x60>)
 8007728:	4413      	add	r3, r2
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe fc6e 	bl	800600c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	3301      	adds	r3, #1
 8007734:	607b      	str	r3, [r7, #4]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2b06      	cmp	r3, #6
 800773a:	d9ef      	bls.n	800771c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800773c:	480d      	ldr	r0, [pc, #52]	; (8007774 <prvInitialiseTaskLists+0x64>)
 800773e:	f7fe fc65 	bl	800600c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007742:	480d      	ldr	r0, [pc, #52]	; (8007778 <prvInitialiseTaskLists+0x68>)
 8007744:	f7fe fc62 	bl	800600c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007748:	480c      	ldr	r0, [pc, #48]	; (800777c <prvInitialiseTaskLists+0x6c>)
 800774a:	f7fe fc5f 	bl	800600c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800774e:	480c      	ldr	r0, [pc, #48]	; (8007780 <prvInitialiseTaskLists+0x70>)
 8007750:	f7fe fc5c 	bl	800600c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007754:	480b      	ldr	r0, [pc, #44]	; (8007784 <prvInitialiseTaskLists+0x74>)
 8007756:	f7fe fc59 	bl	800600c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800775a:	4b0b      	ldr	r3, [pc, #44]	; (8007788 <prvInitialiseTaskLists+0x78>)
 800775c:	4a05      	ldr	r2, [pc, #20]	; (8007774 <prvInitialiseTaskLists+0x64>)
 800775e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007760:	4b0a      	ldr	r3, [pc, #40]	; (800778c <prvInitialiseTaskLists+0x7c>)
 8007762:	4a05      	ldr	r2, [pc, #20]	; (8007778 <prvInitialiseTaskLists+0x68>)
 8007764:	601a      	str	r2, [r3, #0]
}
 8007766:	bf00      	nop
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	2000029c 	.word	0x2000029c
 8007774:	20000328 	.word	0x20000328
 8007778:	2000033c 	.word	0x2000033c
 800777c:	20000358 	.word	0x20000358
 8007780:	2000036c 	.word	0x2000036c
 8007784:	20000384 	.word	0x20000384
 8007788:	20000350 	.word	0x20000350
 800778c:	20000354 	.word	0x20000354

08007790 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007796:	e019      	b.n	80077cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007798:	f000 fbec 	bl	8007f74 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800779c:	4b10      	ldr	r3, [pc, #64]	; (80077e0 <prvCheckTasksWaitingTermination+0x50>)
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	3304      	adds	r3, #4
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fe fcb9 	bl	8006120 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077ae:	4b0d      	ldr	r3, [pc, #52]	; (80077e4 <prvCheckTasksWaitingTermination+0x54>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3b01      	subs	r3, #1
 80077b4:	4a0b      	ldr	r2, [pc, #44]	; (80077e4 <prvCheckTasksWaitingTermination+0x54>)
 80077b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077b8:	4b0b      	ldr	r3, [pc, #44]	; (80077e8 <prvCheckTasksWaitingTermination+0x58>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	3b01      	subs	r3, #1
 80077be:	4a0a      	ldr	r2, [pc, #40]	; (80077e8 <prvCheckTasksWaitingTermination+0x58>)
 80077c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80077c2:	f000 fc07 	bl	8007fd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f810 	bl	80077ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077cc:	4b06      	ldr	r3, [pc, #24]	; (80077e8 <prvCheckTasksWaitingTermination+0x58>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1e1      	bne.n	8007798 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	2000036c 	.word	0x2000036c
 80077e4:	20000398 	.word	0x20000398
 80077e8:	20000380 	.word	0x20000380

080077ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d108      	bne.n	8007810 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007802:	4618      	mov	r0, r3
 8007804:	f000 fd9c 	bl	8008340 <vPortFree>
				vPortFree( pxTCB );
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fd99 	bl	8008340 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800780e:	e018      	b.n	8007842 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007816:	2b01      	cmp	r3, #1
 8007818:	d103      	bne.n	8007822 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fd90 	bl	8008340 <vPortFree>
	}
 8007820:	e00f      	b.n	8007842 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007828:	2b02      	cmp	r3, #2
 800782a:	d00a      	beq.n	8007842 <prvDeleteTCB+0x56>
	__asm volatile
 800782c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007830:	f383 8811 	msr	BASEPRI, r3
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	60fb      	str	r3, [r7, #12]
}
 800783e:	bf00      	nop
 8007840:	e7fe      	b.n	8007840 <prvDeleteTCB+0x54>
	}
 8007842:	bf00      	nop
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
	...

0800784c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007852:	4b0f      	ldr	r3, [pc, #60]	; (8007890 <prvResetNextTaskUnblockTime+0x44>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d101      	bne.n	8007860 <prvResetNextTaskUnblockTime+0x14>
 800785c:	2301      	movs	r3, #1
 800785e:	e000      	b.n	8007862 <prvResetNextTaskUnblockTime+0x16>
 8007860:	2300      	movs	r3, #0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d004      	beq.n	8007870 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007866:	4b0b      	ldr	r3, [pc, #44]	; (8007894 <prvResetNextTaskUnblockTime+0x48>)
 8007868:	f04f 32ff 	mov.w	r2, #4294967295
 800786c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800786e:	e008      	b.n	8007882 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007870:	4b07      	ldr	r3, [pc, #28]	; (8007890 <prvResetNextTaskUnblockTime+0x44>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	4a05      	ldr	r2, [pc, #20]	; (8007894 <prvResetNextTaskUnblockTime+0x48>)
 8007880:	6013      	str	r3, [r2, #0]
}
 8007882:	bf00      	nop
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	20000350 	.word	0x20000350
 8007894:	200003b8 	.word	0x200003b8

08007898 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800789e:	4b0b      	ldr	r3, [pc, #44]	; (80078cc <xTaskGetSchedulerState+0x34>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d102      	bne.n	80078ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80078a6:	2301      	movs	r3, #1
 80078a8:	607b      	str	r3, [r7, #4]
 80078aa:	e008      	b.n	80078be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078ac:	4b08      	ldr	r3, [pc, #32]	; (80078d0 <xTaskGetSchedulerState+0x38>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d102      	bne.n	80078ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80078b4:	2302      	movs	r3, #2
 80078b6:	607b      	str	r3, [r7, #4]
 80078b8:	e001      	b.n	80078be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80078ba:	2300      	movs	r3, #0
 80078bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80078be:	687b      	ldr	r3, [r7, #4]
	}
 80078c0:	4618      	mov	r0, r3
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	200003a4 	.word	0x200003a4
 80078d0:	200003c0 	.word	0x200003c0

080078d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80078e0:	2300      	movs	r3, #0
 80078e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d06e      	beq.n	80079c8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ee:	4b39      	ldr	r3, [pc, #228]	; (80079d4 <xTaskPriorityInherit+0x100>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d25e      	bcs.n	80079b6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	db06      	blt.n	800790e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007900:	4b34      	ldr	r3, [pc, #208]	; (80079d4 <xTaskPriorityInherit+0x100>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007906:	f1c3 0207 	rsb	r2, r3, #7
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	6959      	ldr	r1, [r3, #20]
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007916:	4613      	mov	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4a2e      	ldr	r2, [pc, #184]	; (80079d8 <xTaskPriorityInherit+0x104>)
 8007920:	4413      	add	r3, r2
 8007922:	4299      	cmp	r1, r3
 8007924:	d101      	bne.n	800792a <xTaskPriorityInherit+0x56>
 8007926:	2301      	movs	r3, #1
 8007928:	e000      	b.n	800792c <xTaskPriorityInherit+0x58>
 800792a:	2300      	movs	r3, #0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d03a      	beq.n	80079a6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	3304      	adds	r3, #4
 8007934:	4618      	mov	r0, r3
 8007936:	f7fe fbf3 	bl	8006120 <uxListRemove>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d115      	bne.n	800796c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007944:	4924      	ldr	r1, [pc, #144]	; (80079d8 <xTaskPriorityInherit+0x104>)
 8007946:	4613      	mov	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	440b      	add	r3, r1
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10a      	bne.n	800796c <xTaskPriorityInherit+0x98>
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795a:	2201      	movs	r2, #1
 800795c:	fa02 f303 	lsl.w	r3, r2, r3
 8007960:	43da      	mvns	r2, r3
 8007962:	4b1e      	ldr	r3, [pc, #120]	; (80079dc <xTaskPriorityInherit+0x108>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4013      	ands	r3, r2
 8007968:	4a1c      	ldr	r2, [pc, #112]	; (80079dc <xTaskPriorityInherit+0x108>)
 800796a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800796c:	4b19      	ldr	r3, [pc, #100]	; (80079d4 <xTaskPriorityInherit+0x100>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797a:	2201      	movs	r2, #1
 800797c:	409a      	lsls	r2, r3
 800797e:	4b17      	ldr	r3, [pc, #92]	; (80079dc <xTaskPriorityInherit+0x108>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4313      	orrs	r3, r2
 8007984:	4a15      	ldr	r2, [pc, #84]	; (80079dc <xTaskPriorityInherit+0x108>)
 8007986:	6013      	str	r3, [r2, #0]
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798c:	4613      	mov	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4a10      	ldr	r2, [pc, #64]	; (80079d8 <xTaskPriorityInherit+0x104>)
 8007996:	441a      	add	r2, r3
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	3304      	adds	r3, #4
 800799c:	4619      	mov	r1, r3
 800799e:	4610      	mov	r0, r2
 80079a0:	f7fe fb61 	bl	8006066 <vListInsertEnd>
 80079a4:	e004      	b.n	80079b0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80079a6:	4b0b      	ldr	r3, [pc, #44]	; (80079d4 <xTaskPriorityInherit+0x100>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80079b0:	2301      	movs	r3, #1
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	e008      	b.n	80079c8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079ba:	4b06      	ldr	r3, [pc, #24]	; (80079d4 <xTaskPriorityInherit+0x100>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d201      	bcs.n	80079c8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80079c4:	2301      	movs	r3, #1
 80079c6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079c8:	68fb      	ldr	r3, [r7, #12]
	}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	20000298 	.word	0x20000298
 80079d8:	2000029c 	.word	0x2000029c
 80079dc:	200003a0 	.word	0x200003a0

080079e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80079ec:	2300      	movs	r3, #0
 80079ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d06e      	beq.n	8007ad4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80079f6:	4b3a      	ldr	r3, [pc, #232]	; (8007ae0 <xTaskPriorityDisinherit+0x100>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d00a      	beq.n	8007a16 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	60fb      	str	r3, [r7, #12]
}
 8007a12:	bf00      	nop
 8007a14:	e7fe      	b.n	8007a14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10a      	bne.n	8007a34 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	60bb      	str	r3, [r7, #8]
}
 8007a30:	bf00      	nop
 8007a32:	e7fe      	b.n	8007a32 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a38:	1e5a      	subs	r2, r3, #1
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d044      	beq.n	8007ad4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d140      	bne.n	8007ad4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	3304      	adds	r3, #4
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fe fb62 	bl	8006120 <uxListRemove>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d115      	bne.n	8007a8e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a66:	491f      	ldr	r1, [pc, #124]	; (8007ae4 <xTaskPriorityDisinherit+0x104>)
 8007a68:	4613      	mov	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	440b      	add	r3, r1
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10a      	bne.n	8007a8e <xTaskPriorityDisinherit+0xae>
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a82:	43da      	mvns	r2, r3
 8007a84:	4b18      	ldr	r3, [pc, #96]	; (8007ae8 <xTaskPriorityDisinherit+0x108>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4013      	ands	r3, r2
 8007a8a:	4a17      	ldr	r2, [pc, #92]	; (8007ae8 <xTaskPriorityDisinherit+0x108>)
 8007a8c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9a:	f1c3 0207 	rsb	r2, r3, #7
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	409a      	lsls	r2, r3
 8007aaa:	4b0f      	ldr	r3, [pc, #60]	; (8007ae8 <xTaskPriorityDisinherit+0x108>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	4a0d      	ldr	r2, [pc, #52]	; (8007ae8 <xTaskPriorityDisinherit+0x108>)
 8007ab2:	6013      	str	r3, [r2, #0]
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab8:	4613      	mov	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4a08      	ldr	r2, [pc, #32]	; (8007ae4 <xTaskPriorityDisinherit+0x104>)
 8007ac2:	441a      	add	r2, r3
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	3304      	adds	r3, #4
 8007ac8:	4619      	mov	r1, r3
 8007aca:	4610      	mov	r0, r2
 8007acc:	f7fe facb 	bl	8006066 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ad4:	697b      	ldr	r3, [r7, #20]
	}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3718      	adds	r7, #24
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	20000298 	.word	0x20000298
 8007ae4:	2000029c 	.word	0x2000029c
 8007ae8:	200003a0 	.word	0x200003a0

08007aec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b088      	sub	sp, #32
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007afa:	2301      	movs	r3, #1
 8007afc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 8088 	beq.w	8007c16 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10a      	bne.n	8007b24 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	60fb      	str	r3, [r7, #12]
}
 8007b20:	bf00      	nop
 8007b22:	e7fe      	b.n	8007b22 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b28:	683a      	ldr	r2, [r7, #0]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d902      	bls.n	8007b34 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	61fb      	str	r3, [r7, #28]
 8007b32:	e002      	b.n	8007b3a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b38:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3e:	69fa      	ldr	r2, [r7, #28]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d068      	beq.n	8007c16 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b48:	697a      	ldr	r2, [r7, #20]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d163      	bne.n	8007c16 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007b4e:	4b34      	ldr	r3, [pc, #208]	; (8007c20 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d10a      	bne.n	8007b6e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8007b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5c:	f383 8811 	msr	BASEPRI, r3
 8007b60:	f3bf 8f6f 	isb	sy
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	60bb      	str	r3, [r7, #8]
}
 8007b6a:	bf00      	nop
 8007b6c:	e7fe      	b.n	8007b6c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b72:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	69fa      	ldr	r2, [r7, #28]
 8007b78:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	db04      	blt.n	8007b8c <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	f1c3 0207 	rsb	r2, r3, #7
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	6959      	ldr	r1, [r3, #20]
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	4613      	mov	r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4413      	add	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4a22      	ldr	r2, [pc, #136]	; (8007c24 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007b9c:	4413      	add	r3, r2
 8007b9e:	4299      	cmp	r1, r3
 8007ba0:	d101      	bne.n	8007ba6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e000      	b.n	8007ba8 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d034      	beq.n	8007c16 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	3304      	adds	r3, #4
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7fe fab5 	bl	8006120 <uxListRemove>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d115      	bne.n	8007be8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc0:	4918      	ldr	r1, [pc, #96]	; (8007c24 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	440b      	add	r3, r1
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10a      	bne.n	8007be8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bdc:	43da      	mvns	r2, r3
 8007bde:	4b12      	ldr	r3, [pc, #72]	; (8007c28 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4013      	ands	r3, r2
 8007be4:	4a10      	ldr	r2, [pc, #64]	; (8007c28 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007be6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bec:	2201      	movs	r2, #1
 8007bee:	409a      	lsls	r2, r3
 8007bf0:	4b0d      	ldr	r3, [pc, #52]	; (8007c28 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	4a0c      	ldr	r2, [pc, #48]	; (8007c28 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007bf8:	6013      	str	r3, [r2, #0]
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bfe:	4613      	mov	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4a07      	ldr	r2, [pc, #28]	; (8007c24 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007c08:	441a      	add	r2, r3
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	4619      	mov	r1, r3
 8007c10:	4610      	mov	r0, r2
 8007c12:	f7fe fa28 	bl	8006066 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c16:	bf00      	nop
 8007c18:	3720      	adds	r7, #32
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	20000298 	.word	0x20000298
 8007c24:	2000029c 	.word	0x2000029c
 8007c28:	200003a0 	.word	0x200003a0

08007c2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007c2c:	b480      	push	{r7}
 8007c2e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007c30:	4b07      	ldr	r3, [pc, #28]	; (8007c50 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d004      	beq.n	8007c42 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007c38:	4b05      	ldr	r3, [pc, #20]	; (8007c50 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c3e:	3201      	adds	r2, #1
 8007c40:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007c42:	4b03      	ldr	r3, [pc, #12]	; (8007c50 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c44:	681b      	ldr	r3, [r3, #0]
	}
 8007c46:	4618      	mov	r0, r3
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	20000298 	.word	0x20000298

08007c54 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c5e:	4b29      	ldr	r3, [pc, #164]	; (8007d04 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c64:	4b28      	ldr	r3, [pc, #160]	; (8007d08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3304      	adds	r3, #4
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fe fa58 	bl	8006120 <uxListRemove>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10b      	bne.n	8007c8e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007c76:	4b24      	ldr	r3, [pc, #144]	; (8007d08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c82:	43da      	mvns	r2, r3
 8007c84:	4b21      	ldr	r3, [pc, #132]	; (8007d0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4013      	ands	r3, r2
 8007c8a:	4a20      	ldr	r2, [pc, #128]	; (8007d0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c8c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c94:	d10a      	bne.n	8007cac <prvAddCurrentTaskToDelayedList+0x58>
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d007      	beq.n	8007cac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c9c:	4b1a      	ldr	r3, [pc, #104]	; (8007d08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	3304      	adds	r3, #4
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	481a      	ldr	r0, [pc, #104]	; (8007d10 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007ca6:	f7fe f9de 	bl	8006066 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007caa:	e026      	b.n	8007cfa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cb4:	4b14      	ldr	r3, [pc, #80]	; (8007d08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d209      	bcs.n	8007cd8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cc4:	4b13      	ldr	r3, [pc, #76]	; (8007d14 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	4b0f      	ldr	r3, [pc, #60]	; (8007d08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3304      	adds	r3, #4
 8007cce:	4619      	mov	r1, r3
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	f7fe f9ec 	bl	80060ae <vListInsert>
}
 8007cd6:	e010      	b.n	8007cfa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cd8:	4b0f      	ldr	r3, [pc, #60]	; (8007d18 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	4b0a      	ldr	r3, [pc, #40]	; (8007d08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	f7fe f9e2 	bl	80060ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007cea:	4b0c      	ldr	r3, [pc, #48]	; (8007d1c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d202      	bcs.n	8007cfa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007cf4:	4a09      	ldr	r2, [pc, #36]	; (8007d1c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	6013      	str	r3, [r2, #0]
}
 8007cfa:	bf00      	nop
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	2000039c 	.word	0x2000039c
 8007d08:	20000298 	.word	0x20000298
 8007d0c:	200003a0 	.word	0x200003a0
 8007d10:	20000384 	.word	0x20000384
 8007d14:	20000354 	.word	0x20000354
 8007d18:	20000350 	.word	0x20000350
 8007d1c:	200003b8 	.word	0x200003b8

08007d20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	3b04      	subs	r3, #4
 8007d30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	3b04      	subs	r3, #4
 8007d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	f023 0201 	bic.w	r2, r3, #1
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3b04      	subs	r3, #4
 8007d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d50:	4a0c      	ldr	r2, [pc, #48]	; (8007d84 <pxPortInitialiseStack+0x64>)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3b14      	subs	r3, #20
 8007d5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3b04      	subs	r3, #4
 8007d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f06f 0202 	mvn.w	r2, #2
 8007d6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	3b20      	subs	r3, #32
 8007d74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d76:	68fb      	ldr	r3, [r7, #12]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	08007d89 	.word	0x08007d89

08007d88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d92:	4b12      	ldr	r3, [pc, #72]	; (8007ddc <prvTaskExitError+0x54>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9a:	d00a      	beq.n	8007db2 <prvTaskExitError+0x2a>
	__asm volatile
 8007d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da0:	f383 8811 	msr	BASEPRI, r3
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	60fb      	str	r3, [r7, #12]
}
 8007dae:	bf00      	nop
 8007db0:	e7fe      	b.n	8007db0 <prvTaskExitError+0x28>
	__asm volatile
 8007db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db6:	f383 8811 	msr	BASEPRI, r3
 8007dba:	f3bf 8f6f 	isb	sy
 8007dbe:	f3bf 8f4f 	dsb	sy
 8007dc2:	60bb      	str	r3, [r7, #8]
}
 8007dc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007dc6:	bf00      	nop
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d0fc      	beq.n	8007dc8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007dce:	bf00      	nop
 8007dd0:	bf00      	nop
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	2000000c 	.word	0x2000000c

08007de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007de0:	4b07      	ldr	r3, [pc, #28]	; (8007e00 <pxCurrentTCBConst2>)
 8007de2:	6819      	ldr	r1, [r3, #0]
 8007de4:	6808      	ldr	r0, [r1, #0]
 8007de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dea:	f380 8809 	msr	PSP, r0
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f04f 0000 	mov.w	r0, #0
 8007df6:	f380 8811 	msr	BASEPRI, r0
 8007dfa:	4770      	bx	lr
 8007dfc:	f3af 8000 	nop.w

08007e00 <pxCurrentTCBConst2>:
 8007e00:	20000298 	.word	0x20000298
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e04:	bf00      	nop
 8007e06:	bf00      	nop

08007e08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e08:	4808      	ldr	r0, [pc, #32]	; (8007e2c <prvPortStartFirstTask+0x24>)
 8007e0a:	6800      	ldr	r0, [r0, #0]
 8007e0c:	6800      	ldr	r0, [r0, #0]
 8007e0e:	f380 8808 	msr	MSP, r0
 8007e12:	f04f 0000 	mov.w	r0, #0
 8007e16:	f380 8814 	msr	CONTROL, r0
 8007e1a:	b662      	cpsie	i
 8007e1c:	b661      	cpsie	f
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	df00      	svc	0
 8007e28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e2a:	bf00      	nop
 8007e2c:	e000ed08 	.word	0xe000ed08

08007e30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e36:	4b46      	ldr	r3, [pc, #280]	; (8007f50 <xPortStartScheduler+0x120>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a46      	ldr	r2, [pc, #280]	; (8007f54 <xPortStartScheduler+0x124>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d10a      	bne.n	8007e56 <xPortStartScheduler+0x26>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	613b      	str	r3, [r7, #16]
}
 8007e52:	bf00      	nop
 8007e54:	e7fe      	b.n	8007e54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e56:	4b3e      	ldr	r3, [pc, #248]	; (8007f50 <xPortStartScheduler+0x120>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a3f      	ldr	r2, [pc, #252]	; (8007f58 <xPortStartScheduler+0x128>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d10a      	bne.n	8007e76 <xPortStartScheduler+0x46>
	__asm volatile
 8007e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e64:	f383 8811 	msr	BASEPRI, r3
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	60fb      	str	r3, [r7, #12]
}
 8007e72:	bf00      	nop
 8007e74:	e7fe      	b.n	8007e74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e76:	4b39      	ldr	r3, [pc, #228]	; (8007f5c <xPortStartScheduler+0x12c>)
 8007e78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	22ff      	movs	r2, #255	; 0xff
 8007e86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e90:	78fb      	ldrb	r3, [r7, #3]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e98:	b2da      	uxtb	r2, r3
 8007e9a:	4b31      	ldr	r3, [pc, #196]	; (8007f60 <xPortStartScheduler+0x130>)
 8007e9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e9e:	4b31      	ldr	r3, [pc, #196]	; (8007f64 <xPortStartScheduler+0x134>)
 8007ea0:	2207      	movs	r2, #7
 8007ea2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ea4:	e009      	b.n	8007eba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007ea6:	4b2f      	ldr	r3, [pc, #188]	; (8007f64 <xPortStartScheduler+0x134>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	4a2d      	ldr	r2, [pc, #180]	; (8007f64 <xPortStartScheduler+0x134>)
 8007eae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007eb0:	78fb      	ldrb	r3, [r7, #3]
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007eba:	78fb      	ldrb	r3, [r7, #3]
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec2:	2b80      	cmp	r3, #128	; 0x80
 8007ec4:	d0ef      	beq.n	8007ea6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ec6:	4b27      	ldr	r3, [pc, #156]	; (8007f64 <xPortStartScheduler+0x134>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f1c3 0307 	rsb	r3, r3, #7
 8007ece:	2b04      	cmp	r3, #4
 8007ed0:	d00a      	beq.n	8007ee8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed6:	f383 8811 	msr	BASEPRI, r3
 8007eda:	f3bf 8f6f 	isb	sy
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	60bb      	str	r3, [r7, #8]
}
 8007ee4:	bf00      	nop
 8007ee6:	e7fe      	b.n	8007ee6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ee8:	4b1e      	ldr	r3, [pc, #120]	; (8007f64 <xPortStartScheduler+0x134>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	021b      	lsls	r3, r3, #8
 8007eee:	4a1d      	ldr	r2, [pc, #116]	; (8007f64 <xPortStartScheduler+0x134>)
 8007ef0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ef2:	4b1c      	ldr	r3, [pc, #112]	; (8007f64 <xPortStartScheduler+0x134>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007efa:	4a1a      	ldr	r2, [pc, #104]	; (8007f64 <xPortStartScheduler+0x134>)
 8007efc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	b2da      	uxtb	r2, r3
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f06:	4b18      	ldr	r3, [pc, #96]	; (8007f68 <xPortStartScheduler+0x138>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a17      	ldr	r2, [pc, #92]	; (8007f68 <xPortStartScheduler+0x138>)
 8007f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f12:	4b15      	ldr	r3, [pc, #84]	; (8007f68 <xPortStartScheduler+0x138>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a14      	ldr	r2, [pc, #80]	; (8007f68 <xPortStartScheduler+0x138>)
 8007f18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f1e:	f000 f8dd 	bl	80080dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f22:	4b12      	ldr	r3, [pc, #72]	; (8007f6c <xPortStartScheduler+0x13c>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f28:	f000 f8fc 	bl	8008124 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f2c:	4b10      	ldr	r3, [pc, #64]	; (8007f70 <xPortStartScheduler+0x140>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a0f      	ldr	r2, [pc, #60]	; (8007f70 <xPortStartScheduler+0x140>)
 8007f32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f38:	f7ff ff66 	bl	8007e08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f3c:	f7ff fa6a 	bl	8007414 <vTaskSwitchContext>
	prvTaskExitError();
 8007f40:	f7ff ff22 	bl	8007d88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3718      	adds	r7, #24
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	e000ed00 	.word	0xe000ed00
 8007f54:	410fc271 	.word	0x410fc271
 8007f58:	410fc270 	.word	0x410fc270
 8007f5c:	e000e400 	.word	0xe000e400
 8007f60:	200003c4 	.word	0x200003c4
 8007f64:	200003c8 	.word	0x200003c8
 8007f68:	e000ed20 	.word	0xe000ed20
 8007f6c:	2000000c 	.word	0x2000000c
 8007f70:	e000ef34 	.word	0xe000ef34

08007f74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
	__asm volatile
 8007f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7e:	f383 8811 	msr	BASEPRI, r3
 8007f82:	f3bf 8f6f 	isb	sy
 8007f86:	f3bf 8f4f 	dsb	sy
 8007f8a:	607b      	str	r3, [r7, #4]
}
 8007f8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f8e:	4b0f      	ldr	r3, [pc, #60]	; (8007fcc <vPortEnterCritical+0x58>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	3301      	adds	r3, #1
 8007f94:	4a0d      	ldr	r2, [pc, #52]	; (8007fcc <vPortEnterCritical+0x58>)
 8007f96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f98:	4b0c      	ldr	r3, [pc, #48]	; (8007fcc <vPortEnterCritical+0x58>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d10f      	bne.n	8007fc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007fa0:	4b0b      	ldr	r3, [pc, #44]	; (8007fd0 <vPortEnterCritical+0x5c>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00a      	beq.n	8007fc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	603b      	str	r3, [r7, #0]
}
 8007fbc:	bf00      	nop
 8007fbe:	e7fe      	b.n	8007fbe <vPortEnterCritical+0x4a>
	}
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	2000000c 	.word	0x2000000c
 8007fd0:	e000ed04 	.word	0xe000ed04

08007fd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007fda:	4b12      	ldr	r3, [pc, #72]	; (8008024 <vPortExitCritical+0x50>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10a      	bne.n	8007ff8 <vPortExitCritical+0x24>
	__asm volatile
 8007fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	607b      	str	r3, [r7, #4]
}
 8007ff4:	bf00      	nop
 8007ff6:	e7fe      	b.n	8007ff6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ff8:	4b0a      	ldr	r3, [pc, #40]	; (8008024 <vPortExitCritical+0x50>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	4a09      	ldr	r2, [pc, #36]	; (8008024 <vPortExitCritical+0x50>)
 8008000:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008002:	4b08      	ldr	r3, [pc, #32]	; (8008024 <vPortExitCritical+0x50>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d105      	bne.n	8008016 <vPortExitCritical+0x42>
 800800a:	2300      	movs	r3, #0
 800800c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	f383 8811 	msr	BASEPRI, r3
}
 8008014:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008016:	bf00      	nop
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	2000000c 	.word	0x2000000c
	...

08008030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008030:	f3ef 8009 	mrs	r0, PSP
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	4b15      	ldr	r3, [pc, #84]	; (8008090 <pxCurrentTCBConst>)
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	f01e 0f10 	tst.w	lr, #16
 8008040:	bf08      	it	eq
 8008042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804a:	6010      	str	r0, [r2, #0]
 800804c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008050:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008054:	f380 8811 	msr	BASEPRI, r0
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	f7ff f9d8 	bl	8007414 <vTaskSwitchContext>
 8008064:	f04f 0000 	mov.w	r0, #0
 8008068:	f380 8811 	msr	BASEPRI, r0
 800806c:	bc09      	pop	{r0, r3}
 800806e:	6819      	ldr	r1, [r3, #0]
 8008070:	6808      	ldr	r0, [r1, #0]
 8008072:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008076:	f01e 0f10 	tst.w	lr, #16
 800807a:	bf08      	it	eq
 800807c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008080:	f380 8809 	msr	PSP, r0
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	f3af 8000 	nop.w

08008090 <pxCurrentTCBConst>:
 8008090:	20000298 	.word	0x20000298
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008094:	bf00      	nop
 8008096:	bf00      	nop

08008098 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
	__asm volatile
 800809e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	607b      	str	r3, [r7, #4]
}
 80080b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80080b2:	f7ff f8f1 	bl	8007298 <xTaskIncrementTick>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d003      	beq.n	80080c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080bc:	4b06      	ldr	r3, [pc, #24]	; (80080d8 <SysTick_Handler+0x40>)
 80080be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	2300      	movs	r3, #0
 80080c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	f383 8811 	msr	BASEPRI, r3
}
 80080ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80080d0:	bf00      	nop
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	e000ed04 	.word	0xe000ed04

080080dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80080dc:	b480      	push	{r7}
 80080de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80080e0:	4b0b      	ldr	r3, [pc, #44]	; (8008110 <vPortSetupTimerInterrupt+0x34>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80080e6:	4b0b      	ldr	r3, [pc, #44]	; (8008114 <vPortSetupTimerInterrupt+0x38>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80080ec:	4b0a      	ldr	r3, [pc, #40]	; (8008118 <vPortSetupTimerInterrupt+0x3c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a0a      	ldr	r2, [pc, #40]	; (800811c <vPortSetupTimerInterrupt+0x40>)
 80080f2:	fba2 2303 	umull	r2, r3, r2, r3
 80080f6:	099b      	lsrs	r3, r3, #6
 80080f8:	4a09      	ldr	r2, [pc, #36]	; (8008120 <vPortSetupTimerInterrupt+0x44>)
 80080fa:	3b01      	subs	r3, #1
 80080fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080fe:	4b04      	ldr	r3, [pc, #16]	; (8008110 <vPortSetupTimerInterrupt+0x34>)
 8008100:	2207      	movs	r2, #7
 8008102:	601a      	str	r2, [r3, #0]
}
 8008104:	bf00      	nop
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	e000e010 	.word	0xe000e010
 8008114:	e000e018 	.word	0xe000e018
 8008118:	20000000 	.word	0x20000000
 800811c:	10624dd3 	.word	0x10624dd3
 8008120:	e000e014 	.word	0xe000e014

08008124 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008124:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008134 <vPortEnableVFP+0x10>
 8008128:	6801      	ldr	r1, [r0, #0]
 800812a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800812e:	6001      	str	r1, [r0, #0]
 8008130:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008132:	bf00      	nop
 8008134:	e000ed88 	.word	0xe000ed88

08008138 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800813e:	f3ef 8305 	mrs	r3, IPSR
 8008142:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2b0f      	cmp	r3, #15
 8008148:	d914      	bls.n	8008174 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800814a:	4a17      	ldr	r2, [pc, #92]	; (80081a8 <vPortValidateInterruptPriority+0x70>)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	4413      	add	r3, r2
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008154:	4b15      	ldr	r3, [pc, #84]	; (80081ac <vPortValidateInterruptPriority+0x74>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	7afa      	ldrb	r2, [r7, #11]
 800815a:	429a      	cmp	r2, r3
 800815c:	d20a      	bcs.n	8008174 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	607b      	str	r3, [r7, #4]
}
 8008170:	bf00      	nop
 8008172:	e7fe      	b.n	8008172 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008174:	4b0e      	ldr	r3, [pc, #56]	; (80081b0 <vPortValidateInterruptPriority+0x78>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800817c:	4b0d      	ldr	r3, [pc, #52]	; (80081b4 <vPortValidateInterruptPriority+0x7c>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	429a      	cmp	r2, r3
 8008182:	d90a      	bls.n	800819a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008188:	f383 8811 	msr	BASEPRI, r3
 800818c:	f3bf 8f6f 	isb	sy
 8008190:	f3bf 8f4f 	dsb	sy
 8008194:	603b      	str	r3, [r7, #0]
}
 8008196:	bf00      	nop
 8008198:	e7fe      	b.n	8008198 <vPortValidateInterruptPriority+0x60>
	}
 800819a:	bf00      	nop
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	e000e3f0 	.word	0xe000e3f0
 80081ac:	200003c4 	.word	0x200003c4
 80081b0:	e000ed0c 	.word	0xe000ed0c
 80081b4:	200003c8 	.word	0x200003c8

080081b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08a      	sub	sp, #40	; 0x28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80081c0:	2300      	movs	r3, #0
 80081c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80081c4:	f7fe ffbe 	bl	8007144 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80081c8:	4b58      	ldr	r3, [pc, #352]	; (800832c <pvPortMalloc+0x174>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d101      	bne.n	80081d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80081d0:	f000 f910 	bl	80083f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80081d4:	4b56      	ldr	r3, [pc, #344]	; (8008330 <pvPortMalloc+0x178>)
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4013      	ands	r3, r2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f040 808e 	bne.w	80082fe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d01d      	beq.n	8008224 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80081e8:	2208      	movs	r2, #8
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4413      	add	r3, r2
 80081ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f003 0307 	and.w	r3, r3, #7
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d014      	beq.n	8008224 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f023 0307 	bic.w	r3, r3, #7
 8008200:	3308      	adds	r3, #8
 8008202:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f003 0307 	and.w	r3, r3, #7
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00a      	beq.n	8008224 <pvPortMalloc+0x6c>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	617b      	str	r3, [r7, #20]
}
 8008220:	bf00      	nop
 8008222:	e7fe      	b.n	8008222 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d069      	beq.n	80082fe <pvPortMalloc+0x146>
 800822a:	4b42      	ldr	r3, [pc, #264]	; (8008334 <pvPortMalloc+0x17c>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	429a      	cmp	r2, r3
 8008232:	d864      	bhi.n	80082fe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008234:	4b40      	ldr	r3, [pc, #256]	; (8008338 <pvPortMalloc+0x180>)
 8008236:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008238:	4b3f      	ldr	r3, [pc, #252]	; (8008338 <pvPortMalloc+0x180>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800823e:	e004      	b.n	800824a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008242:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	429a      	cmp	r2, r3
 8008252:	d903      	bls.n	800825c <pvPortMalloc+0xa4>
 8008254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1f1      	bne.n	8008240 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800825c:	4b33      	ldr	r3, [pc, #204]	; (800832c <pvPortMalloc+0x174>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008262:	429a      	cmp	r2, r3
 8008264:	d04b      	beq.n	80082fe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008266:	6a3b      	ldr	r3, [r7, #32]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2208      	movs	r2, #8
 800826c:	4413      	add	r3, r2
 800826e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	6a3b      	ldr	r3, [r7, #32]
 8008276:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827a:	685a      	ldr	r2, [r3, #4]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	1ad2      	subs	r2, r2, r3
 8008280:	2308      	movs	r3, #8
 8008282:	005b      	lsls	r3, r3, #1
 8008284:	429a      	cmp	r2, r3
 8008286:	d91f      	bls.n	80082c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4413      	add	r3, r2
 800828e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	f003 0307 	and.w	r3, r3, #7
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00a      	beq.n	80082b0 <pvPortMalloc+0xf8>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	613b      	str	r3, [r7, #16]
}
 80082ac:	bf00      	nop
 80082ae:	e7fe      	b.n	80082ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80082b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b2:	685a      	ldr	r2, [r3, #4]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	1ad2      	subs	r2, r2, r3
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80082bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80082c2:	69b8      	ldr	r0, [r7, #24]
 80082c4:	f000 f8f8 	bl	80084b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80082c8:	4b1a      	ldr	r3, [pc, #104]	; (8008334 <pvPortMalloc+0x17c>)
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	4a18      	ldr	r2, [pc, #96]	; (8008334 <pvPortMalloc+0x17c>)
 80082d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80082d6:	4b17      	ldr	r3, [pc, #92]	; (8008334 <pvPortMalloc+0x17c>)
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	4b18      	ldr	r3, [pc, #96]	; (800833c <pvPortMalloc+0x184>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d203      	bcs.n	80082ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80082e2:	4b14      	ldr	r3, [pc, #80]	; (8008334 <pvPortMalloc+0x17c>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a15      	ldr	r2, [pc, #84]	; (800833c <pvPortMalloc+0x184>)
 80082e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ec:	685a      	ldr	r2, [r3, #4]
 80082ee:	4b10      	ldr	r3, [pc, #64]	; (8008330 <pvPortMalloc+0x178>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	431a      	orrs	r2, r3
 80082f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	2200      	movs	r2, #0
 80082fc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80082fe:	f7fe ff2f 	bl	8007160 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	f003 0307 	and.w	r3, r3, #7
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00a      	beq.n	8008322 <pvPortMalloc+0x16a>
	__asm volatile
 800830c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	60fb      	str	r3, [r7, #12]
}
 800831e:	bf00      	nop
 8008320:	e7fe      	b.n	8008320 <pvPortMalloc+0x168>
	return pvReturn;
 8008322:	69fb      	ldr	r3, [r7, #28]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3728      	adds	r7, #40	; 0x28
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	20000fd4 	.word	0x20000fd4
 8008330:	20000fe0 	.word	0x20000fe0
 8008334:	20000fd8 	.word	0x20000fd8
 8008338:	20000fcc 	.word	0x20000fcc
 800833c:	20000fdc 	.word	0x20000fdc

08008340 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d048      	beq.n	80083e4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008352:	2308      	movs	r3, #8
 8008354:	425b      	negs	r3, r3
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	4413      	add	r3, r2
 800835a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	4b21      	ldr	r3, [pc, #132]	; (80083ec <vPortFree+0xac>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4013      	ands	r3, r2
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10a      	bne.n	8008384 <vPortFree+0x44>
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	60fb      	str	r3, [r7, #12]
}
 8008380:	bf00      	nop
 8008382:	e7fe      	b.n	8008382 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00a      	beq.n	80083a2 <vPortFree+0x62>
	__asm volatile
 800838c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	60bb      	str	r3, [r7, #8]
}
 800839e:	bf00      	nop
 80083a0:	e7fe      	b.n	80083a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	4b11      	ldr	r3, [pc, #68]	; (80083ec <vPortFree+0xac>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4013      	ands	r3, r2
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d019      	beq.n	80083e4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d115      	bne.n	80083e4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	685a      	ldr	r2, [r3, #4]
 80083bc:	4b0b      	ldr	r3, [pc, #44]	; (80083ec <vPortFree+0xac>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	43db      	mvns	r3, r3
 80083c2:	401a      	ands	r2, r3
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80083c8:	f7fe febc 	bl	8007144 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	685a      	ldr	r2, [r3, #4]
 80083d0:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <vPortFree+0xb0>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4413      	add	r3, r2
 80083d6:	4a06      	ldr	r2, [pc, #24]	; (80083f0 <vPortFree+0xb0>)
 80083d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80083da:	6938      	ldr	r0, [r7, #16]
 80083dc:	f000 f86c 	bl	80084b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80083e0:	f7fe febe 	bl	8007160 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80083e4:	bf00      	nop
 80083e6:	3718      	adds	r7, #24
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	20000fe0 	.word	0x20000fe0
 80083f0:	20000fd8 	.word	0x20000fd8

080083f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80083fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80083fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008400:	4b27      	ldr	r3, [pc, #156]	; (80084a0 <prvHeapInit+0xac>)
 8008402:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f003 0307 	and.w	r3, r3, #7
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00c      	beq.n	8008428 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	3307      	adds	r3, #7
 8008412:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f023 0307 	bic.w	r3, r3, #7
 800841a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	4a1f      	ldr	r2, [pc, #124]	; (80084a0 <prvHeapInit+0xac>)
 8008424:	4413      	add	r3, r2
 8008426:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800842c:	4a1d      	ldr	r2, [pc, #116]	; (80084a4 <prvHeapInit+0xb0>)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008432:	4b1c      	ldr	r3, [pc, #112]	; (80084a4 <prvHeapInit+0xb0>)
 8008434:	2200      	movs	r2, #0
 8008436:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	4413      	add	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008440:	2208      	movs	r2, #8
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	1a9b      	subs	r3, r3, r2
 8008446:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f023 0307 	bic.w	r3, r3, #7
 800844e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4a15      	ldr	r2, [pc, #84]	; (80084a8 <prvHeapInit+0xb4>)
 8008454:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008456:	4b14      	ldr	r3, [pc, #80]	; (80084a8 <prvHeapInit+0xb4>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2200      	movs	r2, #0
 800845c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800845e:	4b12      	ldr	r3, [pc, #72]	; (80084a8 <prvHeapInit+0xb4>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2200      	movs	r2, #0
 8008464:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	1ad2      	subs	r2, r2, r3
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008474:	4b0c      	ldr	r3, [pc, #48]	; (80084a8 <prvHeapInit+0xb4>)
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	4a0a      	ldr	r2, [pc, #40]	; (80084ac <prvHeapInit+0xb8>)
 8008482:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	4a09      	ldr	r2, [pc, #36]	; (80084b0 <prvHeapInit+0xbc>)
 800848a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800848c:	4b09      	ldr	r3, [pc, #36]	; (80084b4 <prvHeapInit+0xc0>)
 800848e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008492:	601a      	str	r2, [r3, #0]
}
 8008494:	bf00      	nop
 8008496:	3714      	adds	r7, #20
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	200003cc 	.word	0x200003cc
 80084a4:	20000fcc 	.word	0x20000fcc
 80084a8:	20000fd4 	.word	0x20000fd4
 80084ac:	20000fdc 	.word	0x20000fdc
 80084b0:	20000fd8 	.word	0x20000fd8
 80084b4:	20000fe0 	.word	0x20000fe0

080084b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80084c0:	4b28      	ldr	r3, [pc, #160]	; (8008564 <prvInsertBlockIntoFreeList+0xac>)
 80084c2:	60fb      	str	r3, [r7, #12]
 80084c4:	e002      	b.n	80084cc <prvInsertBlockIntoFreeList+0x14>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d8f7      	bhi.n	80084c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	4413      	add	r3, r2
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d108      	bne.n	80084fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	441a      	add	r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	441a      	add	r2, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	429a      	cmp	r2, r3
 800850c:	d118      	bne.n	8008540 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	4b15      	ldr	r3, [pc, #84]	; (8008568 <prvInsertBlockIntoFreeList+0xb0>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	429a      	cmp	r2, r3
 8008518:	d00d      	beq.n	8008536 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685a      	ldr	r2, [r3, #4]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	441a      	add	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	e008      	b.n	8008548 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008536:	4b0c      	ldr	r3, [pc, #48]	; (8008568 <prvInsertBlockIntoFreeList+0xb0>)
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	601a      	str	r2, [r3, #0]
 800853e:	e003      	b.n	8008548 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	429a      	cmp	r2, r3
 800854e:	d002      	beq.n	8008556 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008556:	bf00      	nop
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	20000fcc 	.word	0x20000fcc
 8008568:	20000fd4 	.word	0x20000fd4

0800856c <__libc_init_array>:
 800856c:	b570      	push	{r4, r5, r6, lr}
 800856e:	4d0d      	ldr	r5, [pc, #52]	; (80085a4 <__libc_init_array+0x38>)
 8008570:	4c0d      	ldr	r4, [pc, #52]	; (80085a8 <__libc_init_array+0x3c>)
 8008572:	1b64      	subs	r4, r4, r5
 8008574:	10a4      	asrs	r4, r4, #2
 8008576:	2600      	movs	r6, #0
 8008578:	42a6      	cmp	r6, r4
 800857a:	d109      	bne.n	8008590 <__libc_init_array+0x24>
 800857c:	4d0b      	ldr	r5, [pc, #44]	; (80085ac <__libc_init_array+0x40>)
 800857e:	4c0c      	ldr	r4, [pc, #48]	; (80085b0 <__libc_init_array+0x44>)
 8008580:	f000 f82e 	bl	80085e0 <_init>
 8008584:	1b64      	subs	r4, r4, r5
 8008586:	10a4      	asrs	r4, r4, #2
 8008588:	2600      	movs	r6, #0
 800858a:	42a6      	cmp	r6, r4
 800858c:	d105      	bne.n	800859a <__libc_init_array+0x2e>
 800858e:	bd70      	pop	{r4, r5, r6, pc}
 8008590:	f855 3b04 	ldr.w	r3, [r5], #4
 8008594:	4798      	blx	r3
 8008596:	3601      	adds	r6, #1
 8008598:	e7ee      	b.n	8008578 <__libc_init_array+0xc>
 800859a:	f855 3b04 	ldr.w	r3, [r5], #4
 800859e:	4798      	blx	r3
 80085a0:	3601      	adds	r6, #1
 80085a2:	e7f2      	b.n	800858a <__libc_init_array+0x1e>
 80085a4:	08008808 	.word	0x08008808
 80085a8:	08008808 	.word	0x08008808
 80085ac:	08008808 	.word	0x08008808
 80085b0:	0800880c 	.word	0x0800880c

080085b4 <memcpy>:
 80085b4:	440a      	add	r2, r1
 80085b6:	4291      	cmp	r1, r2
 80085b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80085bc:	d100      	bne.n	80085c0 <memcpy+0xc>
 80085be:	4770      	bx	lr
 80085c0:	b510      	push	{r4, lr}
 80085c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085ca:	4291      	cmp	r1, r2
 80085cc:	d1f9      	bne.n	80085c2 <memcpy+0xe>
 80085ce:	bd10      	pop	{r4, pc}

080085d0 <memset>:
 80085d0:	4402      	add	r2, r0
 80085d2:	4603      	mov	r3, r0
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d100      	bne.n	80085da <memset+0xa>
 80085d8:	4770      	bx	lr
 80085da:	f803 1b01 	strb.w	r1, [r3], #1
 80085de:	e7f9      	b.n	80085d4 <memset+0x4>

080085e0 <_init>:
 80085e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e2:	bf00      	nop
 80085e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e6:	bc08      	pop	{r3}
 80085e8:	469e      	mov	lr, r3
 80085ea:	4770      	bx	lr

080085ec <_fini>:
 80085ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ee:	bf00      	nop
 80085f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085f2:	bc08      	pop	{r3}
 80085f4:	469e      	mov	lr, r3
 80085f6:	4770      	bx	lr
