
STM32_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003fec  08003fec  00013fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004074  08004074  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004074  08004074  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004074  08004074  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004074  08004074  00014074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004078  08004078  00014078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800407c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00001060  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001070  20001070  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000146fd  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d47  00000000  00000000  0003473d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  00037488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001008  00000000  00000000  000385d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e7db  00000000  00000000  000395e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000143ca  00000000  00000000  00057dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000baf2d  00000000  00000000  0006c185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001270b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047f8  00000000  00000000  00127108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003fd4 	.word	0x08003fd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08003fd4 	.word	0x08003fd4

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	20000080 	.word	0x20000080

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b5b0      	push	{r4, r5, r7, lr}
 8000206:	b08e      	sub	sp, #56	; 0x38
 8000208:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 facd 	bl	80007a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f833 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f8cd 	bl	80003b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000216:	f000 f88b 	bl	8000330 <MX_I2C1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01 */
  osThreadDef(Task01, StartTask01, osPriorityNormal, 0, 128);
 800021a:	4b13      	ldr	r3, [pc, #76]	; (8000268 <main+0x64>)
 800021c:	f107 041c 	add.w	r4, r7, #28
 8000220:	461d      	mov	r5, r3
 8000222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000226:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800022a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 800022e:	f107 031c 	add.w	r3, r7, #28
 8000232:	2100      	movs	r1, #0
 8000234:	4618      	mov	r0, r3
 8000236:	f002 fc80 	bl	8002b3a <osThreadCreate>
 800023a:	4603      	mov	r3, r0
 800023c:	4a0b      	ldr	r2, [pc, #44]	; (800026c <main+0x68>)
 800023e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 128);
 8000240:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <main+0x6c>)
 8000242:	463c      	mov	r4, r7
 8000244:	461d      	mov	r5, r3
 8000246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800024a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800024e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 8000252:	463b      	mov	r3, r7
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f002 fc6f 	bl	8002b3a <osThreadCreate>
 800025c:	4603      	mov	r3, r0
 800025e:	4a05      	ldr	r2, [pc, #20]	; (8000274 <main+0x70>)
 8000260:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000262:	f002 fc63 	bl	8002b2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000266:	e7fe      	b.n	8000266 <main+0x62>
 8000268:	08003ffc 	.word	0x08003ffc
 800026c:	2000101c 	.word	0x2000101c
 8000270:	08004018 	.word	0x08004018
 8000274:	20000fcc 	.word	0x20000fcc

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b09e      	sub	sp, #120	; 0x78
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000282:	2228      	movs	r2, #40	; 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f003 fe9c 	bl	8003fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029c:	463b      	mov	r3, r7
 800029e:	223c      	movs	r2, #60	; 0x3c
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f003 fe8e 	bl	8003fc4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002a8:	2303      	movs	r3, #3
 80002aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002b0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b6:	2301      	movs	r3, #1
 80002b8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ba:	2310      	movs	r3, #16
 80002bc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002be:	2302      	movs	r3, #2
 80002c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002cc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 fe52 	bl	8000f7c <HAL_RCC_OscConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002de:	f000 f92b 	bl	8000538 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e2:	230f      	movs	r3, #15
 80002e4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e6:	2302      	movs	r3, #2
 80002e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002fc:	2101      	movs	r1, #1
 80002fe:	4618      	mov	r0, r3
 8000300:	f001 fd44 	bl	8001d8c <HAL_RCC_ClockConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800030a:	f000 f915 	bl	8000538 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800030e:	2320      	movs	r3, #32
 8000310:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000312:	2300      	movs	r3, #0
 8000314:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000316:	463b      	mov	r3, r7
 8000318:	4618      	mov	r0, r3
 800031a:	f001 ff7d 	bl	8002218 <HAL_RCCEx_PeriphCLKConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000324:	f000 f908 	bl	8000538 <Error_Handler>
  }
}
 8000328:	bf00      	nop
 800032a:	3778      	adds	r7, #120	; 0x78
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000334:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000336:	4a1c      	ldr	r2, [pc, #112]	; (80003a8 <MX_I2C1_Init+0x78>)
 8000338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800033a:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <MX_I2C1_Init+0x74>)
 800033c:	4a1b      	ldr	r2, [pc, #108]	; (80003ac <MX_I2C1_Init+0x7c>)
 800033e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 10;
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000342:	220a      	movs	r2, #10
 8000344:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000346:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000348:	2201      	movs	r2, #1
 800034a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800034c:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <MX_I2C1_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000352:	4b14      	ldr	r3, [pc, #80]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000358:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <MX_I2C1_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800035e:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000360:	2200      	movs	r2, #0
 8000362:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000364:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000366:	2200      	movs	r2, #0
 8000368:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800036a:	480e      	ldr	r0, [pc, #56]	; (80003a4 <MX_I2C1_Init+0x74>)
 800036c:	f000 fcc6 	bl	8000cfc <HAL_I2C_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000376:	f000 f8df 	bl	8000538 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800037a:	2100      	movs	r1, #0
 800037c:	4809      	ldr	r0, [pc, #36]	; (80003a4 <MX_I2C1_Init+0x74>)
 800037e:	f000 fd66 	bl	8000e4e <HAL_I2CEx_ConfigAnalogFilter>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000388:	f000 f8d6 	bl	8000538 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800038c:	2100      	movs	r1, #0
 800038e:	4805      	ldr	r0, [pc, #20]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000390:	f000 fda8 	bl	8000ee4 <HAL_I2CEx_ConfigDigitalFilter>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800039a:	f000 f8cd 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20000fd0 	.word	0x20000fd0
 80003a8:	40005400 	.word	0x40005400
 80003ac:	2000090e 	.word	0x2000090e

080003b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b08a      	sub	sp, #40	; 0x28
 80003b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b6:	f107 0314 	add.w	r3, r7, #20
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003c6:	4b49      	ldr	r3, [pc, #292]	; (80004ec <MX_GPIO_Init+0x13c>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a48      	ldr	r2, [pc, #288]	; (80004ec <MX_GPIO_Init+0x13c>)
 80003cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003d0:	6153      	str	r3, [r2, #20]
 80003d2:	4b46      	ldr	r3, [pc, #280]	; (80004ec <MX_GPIO_Init+0x13c>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003da:	613b      	str	r3, [r7, #16]
 80003dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003de:	4b43      	ldr	r3, [pc, #268]	; (80004ec <MX_GPIO_Init+0x13c>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a42      	ldr	r2, [pc, #264]	; (80004ec <MX_GPIO_Init+0x13c>)
 80003e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003e8:	6153      	str	r3, [r2, #20]
 80003ea:	4b40      	ldr	r3, [pc, #256]	; (80004ec <MX_GPIO_Init+0x13c>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003f6:	4b3d      	ldr	r3, [pc, #244]	; (80004ec <MX_GPIO_Init+0x13c>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	4a3c      	ldr	r2, [pc, #240]	; (80004ec <MX_GPIO_Init+0x13c>)
 80003fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000400:	6153      	str	r3, [r2, #20]
 8000402:	4b3a      	ldr	r3, [pc, #232]	; (80004ec <MX_GPIO_Init+0x13c>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040e:	4b37      	ldr	r3, [pc, #220]	; (80004ec <MX_GPIO_Init+0x13c>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	4a36      	ldr	r2, [pc, #216]	; (80004ec <MX_GPIO_Init+0x13c>)
 8000414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000418:	6153      	str	r3, [r2, #20]
 800041a:	4b34      	ldr	r3, [pc, #208]	; (80004ec <MX_GPIO_Init+0x13c>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000426:	4b31      	ldr	r3, [pc, #196]	; (80004ec <MX_GPIO_Init+0x13c>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	4a30      	ldr	r2, [pc, #192]	; (80004ec <MX_GPIO_Init+0x13c>)
 800042c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000430:	6153      	str	r3, [r2, #20]
 8000432:	4b2e      	ldr	r3, [pc, #184]	; (80004ec <MX_GPIO_Init+0x13c>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800043a:	603b      	str	r3, [r7, #0]
 800043c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800043e:	2200      	movs	r2, #0
 8000440:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000444:	482a      	ldr	r0, [pc, #168]	; (80004f0 <MX_GPIO_Init+0x140>)
 8000446:	f000 fc41 	bl	8000ccc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800044a:	2337      	movs	r3, #55	; 0x37
 800044c:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800044e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000454:	2300      	movs	r3, #0
 8000456:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000458:	f107 0314 	add.w	r3, r7, #20
 800045c:	4619      	mov	r1, r3
 800045e:	4824      	ldr	r0, [pc, #144]	; (80004f0 <MX_GPIO_Init+0x140>)
 8000460:	f000 faba 	bl	80009d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000464:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000468:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046a:	2301      	movs	r3, #1
 800046c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046e:	2300      	movs	r3, #0
 8000470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000472:	2300      	movs	r3, #0
 8000474:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000476:	f107 0314 	add.w	r3, r7, #20
 800047a:	4619      	mov	r1, r3
 800047c:	481c      	ldr	r0, [pc, #112]	; (80004f0 <MX_GPIO_Init+0x140>)
 800047e:	f000 faab 	bl	80009d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000482:	2301      	movs	r3, #1
 8000484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000486:	2300      	movs	r3, #0
 8000488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	2300      	movs	r3, #0
 800048c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800048e:	f107 0314 	add.w	r3, r7, #20
 8000492:	4619      	mov	r1, r3
 8000494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000498:	f000 fa9e 	bl	80009d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800049c:	23e0      	movs	r3, #224	; 0xe0
 800049e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a0:	2302      	movs	r3, #2
 80004a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a8:	2303      	movs	r3, #3
 80004aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80004ac:	2305      	movs	r3, #5
 80004ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b0:	f107 0314 	add.w	r3, r7, #20
 80004b4:	4619      	mov	r1, r3
 80004b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ba:	f000 fa8d 	bl	80009d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80004be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80004c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c4:	2302      	movs	r3, #2
 80004c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004cc:	2303      	movs	r3, #3
 80004ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80004d0:	230e      	movs	r3, #14
 80004d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d4:	f107 0314 	add.w	r3, r7, #20
 80004d8:	4619      	mov	r1, r3
 80004da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004de:	f000 fa7b 	bl	80009d8 <HAL_GPIO_Init>

}
 80004e2:	bf00      	nop
 80004e4:	3728      	adds	r7, #40	; 0x28
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40021000 	.word	0x40021000
 80004f0:	48001000 	.word	0x48001000

080004f4 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004fc:	2001      	movs	r0, #1
 80004fe:	f002 fb68 	bl	8002bd2 <osDelay>
 8000502:	e7fb      	b.n	80004fc <StartTask01+0x8>

08000504 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800050c:	2001      	movs	r0, #1
 800050e:	f002 fb60 	bl	8002bd2 <osDelay>
 8000512:	e7fb      	b.n	800050c <StartTask02+0x8>

08000514 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a04      	ldr	r2, [pc, #16]	; (8000534 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d101      	bne.n	800052a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000526:	f000 f955 	bl	80007d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40001000 	.word	0x40001000

08000538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053c:	b672      	cpsid	i
}
 800053e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000540:	e7fe      	b.n	8000540 <Error_Handler+0x8>
	...

08000544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800054a:	4b11      	ldr	r3, [pc, #68]	; (8000590 <HAL_MspInit+0x4c>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	4a10      	ldr	r2, [pc, #64]	; (8000590 <HAL_MspInit+0x4c>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6193      	str	r3, [r2, #24]
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <HAL_MspInit+0x4c>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <HAL_MspInit+0x4c>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	4a0a      	ldr	r2, [pc, #40]	; (8000590 <HAL_MspInit+0x4c>)
 8000568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056c:	61d3      	str	r3, [r2, #28]
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <HAL_MspInit+0x4c>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	210f      	movs	r1, #15
 800057e:	f06f 0001 	mvn.w	r0, #1
 8000582:	f000 f9ff 	bl	8000984 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000

08000594 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a1b      	ldr	r2, [pc, #108]	; (8000620 <HAL_I2C_MspInit+0x8c>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d12f      	bne.n	8000616 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b6:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <HAL_I2C_MspInit+0x90>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a1a      	ldr	r2, [pc, #104]	; (8000624 <HAL_I2C_MspInit+0x90>)
 80005bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005c0:	6153      	str	r3, [r2, #20]
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <HAL_I2C_MspInit+0x90>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80005ce:	23c0      	movs	r3, #192	; 0xc0
 80005d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005d2:	2312      	movs	r3, #18
 80005d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005da:	2303      	movs	r3, #3
 80005dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005de:	2304      	movs	r3, #4
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4619      	mov	r1, r3
 80005e8:	480f      	ldr	r0, [pc, #60]	; (8000628 <HAL_I2C_MspInit+0x94>)
 80005ea:	f000 f9f5 	bl	80009d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <HAL_I2C_MspInit+0x90>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	4a0c      	ldr	r2, [pc, #48]	; (8000624 <HAL_I2C_MspInit+0x90>)
 80005f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005f8:	61d3      	str	r3, [r2, #28]
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <HAL_I2C_MspInit+0x90>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2105      	movs	r1, #5
 800060a:	201f      	movs	r0, #31
 800060c:	f000 f9ba 	bl	8000984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000610:	201f      	movs	r0, #31
 8000612:	f000 f9d3 	bl	80009bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000616:	bf00      	nop
 8000618:	3728      	adds	r7, #40	; 0x28
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40005400 	.word	0x40005400
 8000624:	40021000 	.word	0x40021000
 8000628:	48000400 	.word	0x48000400

0800062c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08c      	sub	sp, #48	; 0x30
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800063c:	2200      	movs	r2, #0
 800063e:	6879      	ldr	r1, [r7, #4]
 8000640:	2036      	movs	r0, #54	; 0x36
 8000642:	f000 f99f 	bl	8000984 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000646:	2036      	movs	r0, #54	; 0x36
 8000648:	f000 f9b8 	bl	80009bc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <HAL_InitTick+0xa0>)
 800064e:	69db      	ldr	r3, [r3, #28]
 8000650:	4a1e      	ldr	r2, [pc, #120]	; (80006cc <HAL_InitTick+0xa0>)
 8000652:	f043 0310 	orr.w	r3, r3, #16
 8000656:	61d3      	str	r3, [r2, #28]
 8000658:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <HAL_InitTick+0xa0>)
 800065a:	69db      	ldr	r3, [r3, #28]
 800065c:	f003 0310 	and.w	r3, r3, #16
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000664:	f107 0210 	add.w	r2, r7, #16
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4611      	mov	r1, r2
 800066e:	4618      	mov	r0, r3
 8000670:	f001 fda0 	bl	80021b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000674:	f001 fd7c 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8000678:	4603      	mov	r3, r0
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800067e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000680:	4a13      	ldr	r2, [pc, #76]	; (80006d0 <HAL_InitTick+0xa4>)
 8000682:	fba2 2303 	umull	r2, r3, r2, r3
 8000686:	0c9b      	lsrs	r3, r3, #18
 8000688:	3b01      	subs	r3, #1
 800068a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <HAL_InitTick+0xa8>)
 800068e:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <HAL_InitTick+0xac>)
 8000690:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <HAL_InitTick+0xa8>)
 8000694:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000698:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800069a:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <HAL_InitTick+0xa8>)
 800069c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800069e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <HAL_InitTick+0xa8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <HAL_InitTick+0xa8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80006ac:	4809      	ldr	r0, [pc, #36]	; (80006d4 <HAL_InitTick+0xa8>)
 80006ae:	f001 ff63 	bl	8002578 <HAL_TIM_Base_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d104      	bne.n	80006c2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80006b8:	4806      	ldr	r0, [pc, #24]	; (80006d4 <HAL_InitTick+0xa8>)
 80006ba:	f001 ffbf 	bl	800263c <HAL_TIM_Base_Start_IT>
 80006be:	4603      	mov	r3, r0
 80006c0:	e000      	b.n	80006c4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3730      	adds	r7, #48	; 0x30
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000
 80006d0:	431bde83 	.word	0x431bde83
 80006d4:	20001020 	.word	0x20001020
 80006d8:	40001000 	.word	0x40001000

080006dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <NMI_Handler+0x4>

080006e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <HardFault_Handler+0x4>

080006e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <MemManage_Handler+0x4>

080006ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <BusFault_Handler+0x4>

080006f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <UsageFault_Handler+0x4>

080006fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800070c:	4802      	ldr	r0, [pc, #8]	; (8000718 <I2C1_EV_IRQHandler+0x10>)
 800070e:	f000 fb84 	bl	8000e1a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000fd0 	.word	0x20000fd0

0800071c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000720:	4802      	ldr	r0, [pc, #8]	; (800072c <TIM6_DAC_IRQHandler+0x10>)
 8000722:	f001 fff5 	bl	8002710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20001020 	.word	0x20001020

08000730 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <SystemInit+0x20>)
 8000736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800073a:	4a05      	ldr	r2, [pc, #20]	; (8000750 <SystemInit+0x20>)
 800073c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800078c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000758:	480d      	ldr	r0, [pc, #52]	; (8000790 <LoopForever+0x6>)
  ldr r1, =_edata
 800075a:	490e      	ldr	r1, [pc, #56]	; (8000794 <LoopForever+0xa>)
  ldr r2, =_sidata
 800075c:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <LoopForever+0xe>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000760:	e002      	b.n	8000768 <LoopCopyDataInit>

08000762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000766:	3304      	adds	r3, #4

08000768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800076c:	d3f9      	bcc.n	8000762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076e:	4a0b      	ldr	r2, [pc, #44]	; (800079c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000770:	4c0b      	ldr	r4, [pc, #44]	; (80007a0 <LoopForever+0x16>)
  movs r3, #0
 8000772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000774:	e001      	b.n	800077a <LoopFillZerobss>

08000776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000778:	3204      	adds	r2, #4

0800077a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800077c:	d3fb      	bcc.n	8000776 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800077e:	f7ff ffd7 	bl	8000730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000782:	f003 fbfb 	bl	8003f7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000786:	f7ff fd3d 	bl	8000204 <main>

0800078a <LoopForever>:

LoopForever:
    b LoopForever
 800078a:	e7fe      	b.n	800078a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800078c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000794:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000798:	0800407c 	.word	0x0800407c
  ldr r2, =_sbss
 800079c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007a0:	20001070 	.word	0x20001070

080007a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007a4:	e7fe      	b.n	80007a4 <ADC1_2_IRQHandler>
	...

080007a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <HAL_Init+0x28>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <HAL_Init+0x28>)
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b8:	2003      	movs	r0, #3
 80007ba:	f000 f8d8 	bl	800096e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007be:	200f      	movs	r0, #15
 80007c0:	f7ff ff34 	bl	800062c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c4:	f7ff febe 	bl	8000544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40022000 	.word	0x40022000

080007d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_IncTick+0x20>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_IncTick+0x24>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4413      	add	r3, r2
 80007e4:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <HAL_IncTick+0x24>)
 80007e6:	6013      	str	r3, [r2, #0]
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	20000008 	.word	0x20000008
 80007f8:	2000106c 	.word	0x2000106c

080007fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <HAL_GetTick+0x14>)
 8000802:	681b      	ldr	r3, [r3, #0]
}
 8000804:	4618      	mov	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	2000106c 	.word	0x2000106c

08000814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <__NVIC_SetPriorityGrouping+0x44>)
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800082a:	68ba      	ldr	r2, [r7, #8]
 800082c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000830:	4013      	ands	r3, r2
 8000832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800083c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000846:	4a04      	ldr	r2, [pc, #16]	; (8000858 <__NVIC_SetPriorityGrouping+0x44>)
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	60d3      	str	r3, [r2, #12]
}
 800084c:	bf00      	nop
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <__NVIC_GetPriorityGrouping+0x18>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	0a1b      	lsrs	r3, r3, #8
 8000866:	f003 0307 	and.w	r3, r3, #7
}
 800086a:	4618      	mov	r0, r3
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000886:	2b00      	cmp	r3, #0
 8000888:	db0b      	blt.n	80008a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	f003 021f 	and.w	r2, r3, #31
 8000890:	4907      	ldr	r1, [pc, #28]	; (80008b0 <__NVIC_EnableIRQ+0x38>)
 8000892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000896:	095b      	lsrs	r3, r3, #5
 8000898:	2001      	movs	r0, #1
 800089a:	fa00 f202 	lsl.w	r2, r0, r2
 800089e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000e100 	.word	0xe000e100

080008b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	6039      	str	r1, [r7, #0]
 80008be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	db0a      	blt.n	80008de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	490c      	ldr	r1, [pc, #48]	; (8000900 <__NVIC_SetPriority+0x4c>)
 80008ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d2:	0112      	lsls	r2, r2, #4
 80008d4:	b2d2      	uxtb	r2, r2
 80008d6:	440b      	add	r3, r1
 80008d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008dc:	e00a      	b.n	80008f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4908      	ldr	r1, [pc, #32]	; (8000904 <__NVIC_SetPriority+0x50>)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	f003 030f 	and.w	r3, r3, #15
 80008ea:	3b04      	subs	r3, #4
 80008ec:	0112      	lsls	r2, r2, #4
 80008ee:	b2d2      	uxtb	r2, r2
 80008f0:	440b      	add	r3, r1
 80008f2:	761a      	strb	r2, [r3, #24]
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	e000e100 	.word	0xe000e100
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000908:	b480      	push	{r7}
 800090a:	b089      	sub	sp, #36	; 0x24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	f1c3 0307 	rsb	r3, r3, #7
 8000922:	2b04      	cmp	r3, #4
 8000924:	bf28      	it	cs
 8000926:	2304      	movcs	r3, #4
 8000928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	3304      	adds	r3, #4
 800092e:	2b06      	cmp	r3, #6
 8000930:	d902      	bls.n	8000938 <NVIC_EncodePriority+0x30>
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	3b03      	subs	r3, #3
 8000936:	e000      	b.n	800093a <NVIC_EncodePriority+0x32>
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800093c:	f04f 32ff 	mov.w	r2, #4294967295
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	43da      	mvns	r2, r3
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	401a      	ands	r2, r3
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000950:	f04f 31ff 	mov.w	r1, #4294967295
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	fa01 f303 	lsl.w	r3, r1, r3
 800095a:	43d9      	mvns	r1, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000960:	4313      	orrs	r3, r2
         );
}
 8000962:	4618      	mov	r0, r3
 8000964:	3724      	adds	r7, #36	; 0x24
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff ff4c 	bl	8000814 <__NVIC_SetPriorityGrouping>
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000996:	f7ff ff61 	bl	800085c <__NVIC_GetPriorityGrouping>
 800099a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	68b9      	ldr	r1, [r7, #8]
 80009a0:	6978      	ldr	r0, [r7, #20]
 80009a2:	f7ff ffb1 	bl	8000908 <NVIC_EncodePriority>
 80009a6:	4602      	mov	r2, r0
 80009a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ac:	4611      	mov	r1, r2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ff80 	bl	80008b4 <__NVIC_SetPriority>
}
 80009b4:	bf00      	nop
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ff54 	bl	8000878 <__NVIC_EnableIRQ>
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009d8:	b480      	push	{r7}
 80009da:	b087      	sub	sp, #28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009e6:	e154      	b.n	8000c92 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	2101      	movs	r1, #1
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	fa01 f303 	lsl.w	r3, r1, r3
 80009f4:	4013      	ands	r3, r2
 80009f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f000 8146 	beq.w	8000c8c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f003 0303 	and.w	r3, r3, #3
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d005      	beq.n	8000a18 <HAL_GPIO_Init+0x40>
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f003 0303 	and.w	r3, r3, #3
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d130      	bne.n	8000a7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	2203      	movs	r2, #3
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	68da      	ldr	r2, [r3, #12]
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a4e:	2201      	movs	r2, #1
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43db      	mvns	r3, r3
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	091b      	lsrs	r3, r3, #4
 8000a64:	f003 0201 	and.w	r2, r3, #1
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f003 0303 	and.w	r3, r3, #3
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d017      	beq.n	8000ab6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	68db      	ldr	r3, [r3, #12]
 8000a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	2203      	movs	r2, #3
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	43db      	mvns	r3, r3
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	689a      	ldr	r2, [r3, #8]
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f003 0303 	and.w	r3, r3, #3
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d123      	bne.n	8000b0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	08da      	lsrs	r2, r3, #3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	3208      	adds	r2, #8
 8000aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ace:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	220f      	movs	r2, #15
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	691a      	ldr	r2, [r3, #16]
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	f003 0307 	and.w	r3, r3, #7
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	08da      	lsrs	r2, r3, #3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3208      	adds	r2, #8
 8000b04:	6939      	ldr	r1, [r7, #16]
 8000b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	2203      	movs	r2, #3
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f003 0203 	and.w	r2, r3, #3
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f000 80a0 	beq.w	8000c8c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4c:	4b58      	ldr	r3, [pc, #352]	; (8000cb0 <HAL_GPIO_Init+0x2d8>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a57      	ldr	r2, [pc, #348]	; (8000cb0 <HAL_GPIO_Init+0x2d8>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b55      	ldr	r3, [pc, #340]	; (8000cb0 <HAL_GPIO_Init+0x2d8>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b64:	4a53      	ldr	r2, [pc, #332]	; (8000cb4 <HAL_GPIO_Init+0x2dc>)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	089b      	lsrs	r3, r3, #2
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	220f      	movs	r2, #15
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4013      	ands	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b8e:	d019      	beq.n	8000bc4 <HAL_GPIO_Init+0x1ec>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a49      	ldr	r2, [pc, #292]	; (8000cb8 <HAL_GPIO_Init+0x2e0>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d013      	beq.n	8000bc0 <HAL_GPIO_Init+0x1e8>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a48      	ldr	r2, [pc, #288]	; (8000cbc <HAL_GPIO_Init+0x2e4>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d00d      	beq.n	8000bbc <HAL_GPIO_Init+0x1e4>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a47      	ldr	r2, [pc, #284]	; (8000cc0 <HAL_GPIO_Init+0x2e8>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d007      	beq.n	8000bb8 <HAL_GPIO_Init+0x1e0>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a46      	ldr	r2, [pc, #280]	; (8000cc4 <HAL_GPIO_Init+0x2ec>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d101      	bne.n	8000bb4 <HAL_GPIO_Init+0x1dc>
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	e008      	b.n	8000bc6 <HAL_GPIO_Init+0x1ee>
 8000bb4:	2305      	movs	r3, #5
 8000bb6:	e006      	b.n	8000bc6 <HAL_GPIO_Init+0x1ee>
 8000bb8:	2303      	movs	r3, #3
 8000bba:	e004      	b.n	8000bc6 <HAL_GPIO_Init+0x1ee>
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	e002      	b.n	8000bc6 <HAL_GPIO_Init+0x1ee>
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e000      	b.n	8000bc6 <HAL_GPIO_Init+0x1ee>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	f002 0203 	and.w	r2, r2, #3
 8000bcc:	0092      	lsls	r2, r2, #2
 8000bce:	4093      	lsls	r3, r2
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bd6:	4937      	ldr	r1, [pc, #220]	; (8000cb4 <HAL_GPIO_Init+0x2dc>)
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	089b      	lsrs	r3, r3, #2
 8000bdc:	3302      	adds	r3, #2
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000be4:	4b38      	ldr	r3, [pc, #224]	; (8000cc8 <HAL_GPIO_Init+0x2f0>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	43db      	mvns	r3, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d003      	beq.n	8000c08 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c08:	4a2f      	ldr	r2, [pc, #188]	; (8000cc8 <HAL_GPIO_Init+0x2f0>)
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c0e:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <HAL_GPIO_Init+0x2f0>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	43db      	mvns	r3, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d003      	beq.n	8000c32 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c32:	4a25      	ldr	r2, [pc, #148]	; (8000cc8 <HAL_GPIO_Init+0x2f0>)
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c38:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <HAL_GPIO_Init+0x2f0>)
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	43db      	mvns	r3, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c5c:	4a1a      	ldr	r2, [pc, #104]	; (8000cc8 <HAL_GPIO_Init+0x2f0>)
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c62:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <HAL_GPIO_Init+0x2f0>)
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c86:	4a10      	ldr	r2, [pc, #64]	; (8000cc8 <HAL_GPIO_Init+0x2f0>)
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	fa22 f303 	lsr.w	r3, r2, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	f47f aea3 	bne.w	80009e8 <HAL_GPIO_Init+0x10>
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	bf00      	nop
 8000ca6:	371c      	adds	r7, #28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010000 	.word	0x40010000
 8000cb8:	48000400 	.word	0x48000400
 8000cbc:	48000800 	.word	0x48000800
 8000cc0:	48000c00 	.word	0x48000c00
 8000cc4:	48001000 	.word	0x48001000
 8000cc8:	40010400 	.word	0x40010400

08000ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	807b      	strh	r3, [r7, #2]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cdc:	787b      	ldrb	r3, [r7, #1]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d003      	beq.n	8000cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ce2:	887a      	ldrh	r2, [r7, #2]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ce8:	e002      	b.n	8000cf0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cea:	887a      	ldrh	r2, [r7, #2]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e081      	b.n	8000e12 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d106      	bne.n	8000d28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff fc36 	bl	8000594 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2224      	movs	r2, #36	; 0x24
 8000d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f022 0201 	bic.w	r2, r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d107      	bne.n	8000d76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	689a      	ldr	r2, [r3, #8]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	e006      	b.n	8000d84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000d82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d104      	bne.n	8000d96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	6812      	ldr	r2, [r2, #0]
 8000da0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	68da      	ldr	r2, [r3, #12]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000db8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	691a      	ldr	r2, [r3, #16]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69d9      	ldr	r1, [r3, #28]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a1a      	ldr	r2, [r3, #32]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f042 0201 	orr.w	r2, r2, #1
 8000df2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2220      	movs	r2, #32
 8000dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b084      	sub	sp, #16
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d005      	beq.n	8000e46 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	68f9      	ldr	r1, [r7, #12]
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	4798      	blx	r3
  }
}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b20      	cmp	r3, #32
 8000e62:	d138      	bne.n	8000ed6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d101      	bne.n	8000e72 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000e6e:	2302      	movs	r3, #2
 8000e70:	e032      	b.n	8000ed8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2201      	movs	r2, #1
 8000e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2224      	movs	r2, #36	; 0x24
 8000e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 0201 	bic.w	r2, r2, #1
 8000e90:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ea0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	6819      	ldr	r1, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f042 0201 	orr.w	r2, r2, #1
 8000ec0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2220      	movs	r2, #32
 8000ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e000      	b.n	8000ed8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000ed6:	2302      	movs	r3, #2
  }
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b20      	cmp	r3, #32
 8000ef8:	d139      	bne.n	8000f6e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d101      	bne.n	8000f08 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000f04:	2302      	movs	r3, #2
 8000f06:	e033      	b.n	8000f70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2224      	movs	r2, #36	; 0x24
 8000f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0201 	bic.w	r2, r2, #1
 8000f26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f36:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	021b      	lsls	r3, r3, #8
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f042 0201 	orr.w	r2, r2, #1
 8000f58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2220      	movs	r2, #32
 8000f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000f6e:	2302      	movs	r3, #2
  }
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d102      	bne.n	8000f96 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	f000 bef4 	b.w	8001d7e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 816a 	beq.w	800127a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fa6:	4bb3      	ldr	r3, [pc, #716]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 030c 	and.w	r3, r3, #12
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	d00c      	beq.n	8000fcc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fb2:	4bb0      	ldr	r3, [pc, #704]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 030c 	and.w	r3, r3, #12
 8000fba:	2b08      	cmp	r3, #8
 8000fbc:	d159      	bne.n	8001072 <HAL_RCC_OscConfig+0xf6>
 8000fbe:	4bad      	ldr	r3, [pc, #692]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fca:	d152      	bne.n	8001072 <HAL_RCC_OscConfig+0xf6>
 8000fcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fd0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000fd8:	fa93 f3a3 	rbit	r3, r3
 8000fdc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fe0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe4:	fab3 f383 	clz	r3, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	095b      	lsrs	r3, r3, #5
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d102      	bne.n	8000ffe <HAL_RCC_OscConfig+0x82>
 8000ff8:	4b9e      	ldr	r3, [pc, #632]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	e015      	b.n	800102a <HAL_RCC_OscConfig+0xae>
 8000ffe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001002:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001006:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800100a:	fa93 f3a3 	rbit	r3, r3
 800100e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001012:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001016:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800101a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800101e:	fa93 f3a3 	rbit	r3, r3
 8001022:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001026:	4b93      	ldr	r3, [pc, #588]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 8001028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800102e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001032:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001036:	fa92 f2a2 	rbit	r2, r2
 800103a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800103e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001042:	fab2 f282 	clz	r2, r2
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	f042 0220 	orr.w	r2, r2, #32
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	f002 021f 	and.w	r2, r2, #31
 8001052:	2101      	movs	r1, #1
 8001054:	fa01 f202 	lsl.w	r2, r1, r2
 8001058:	4013      	ands	r3, r2
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 810c 	beq.w	8001278 <HAL_RCC_OscConfig+0x2fc>
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	f040 8106 	bne.w	8001278 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	f000 be86 	b.w	8001d7e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800107c:	d106      	bne.n	800108c <HAL_RCC_OscConfig+0x110>
 800107e:	4b7d      	ldr	r3, [pc, #500]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a7c      	ldr	r2, [pc, #496]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 8001084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	e030      	b.n	80010ee <HAL_RCC_OscConfig+0x172>
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d10c      	bne.n	80010b0 <HAL_RCC_OscConfig+0x134>
 8001096:	4b77      	ldr	r3, [pc, #476]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a76      	ldr	r2, [pc, #472]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 800109c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	4b74      	ldr	r3, [pc, #464]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a73      	ldr	r2, [pc, #460]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 80010a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	e01e      	b.n	80010ee <HAL_RCC_OscConfig+0x172>
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ba:	d10c      	bne.n	80010d6 <HAL_RCC_OscConfig+0x15a>
 80010bc:	4b6d      	ldr	r3, [pc, #436]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a6c      	ldr	r2, [pc, #432]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 80010c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	4b6a      	ldr	r3, [pc, #424]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a69      	ldr	r2, [pc, #420]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 80010ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	e00b      	b.n	80010ee <HAL_RCC_OscConfig+0x172>
 80010d6:	4b67      	ldr	r3, [pc, #412]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a66      	ldr	r2, [pc, #408]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 80010dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	4b64      	ldr	r3, [pc, #400]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a63      	ldr	r2, [pc, #396]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 80010e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ec:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010ee:	4b61      	ldr	r3, [pc, #388]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 80010f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f2:	f023 020f 	bic.w	r2, r3, #15
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	495d      	ldr	r1, [pc, #372]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 80010fe:	4313      	orrs	r3, r2
 8001100:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d059      	beq.n	80011c0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fb76 	bl	80007fc <HAL_GetTick>
 8001110:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001114:	e00a      	b.n	800112c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001116:	f7ff fb71 	bl	80007fc <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b64      	cmp	r3, #100	; 0x64
 8001124:	d902      	bls.n	800112c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	f000 be29 	b.w	8001d7e <HAL_RCC_OscConfig+0xe02>
 800112c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001130:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001134:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001138:	fa93 f3a3 	rbit	r3, r3
 800113c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001140:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001144:	fab3 f383 	clz	r3, r3
 8001148:	b2db      	uxtb	r3, r3
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b01      	cmp	r3, #1
 8001156:	d102      	bne.n	800115e <HAL_RCC_OscConfig+0x1e2>
 8001158:	4b46      	ldr	r3, [pc, #280]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	e015      	b.n	800118a <HAL_RCC_OscConfig+0x20e>
 800115e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001162:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001166:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800116a:	fa93 f3a3 	rbit	r3, r3
 800116e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001172:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001176:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800117a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800117e:	fa93 f3a3 	rbit	r3, r3
 8001182:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001186:	4b3b      	ldr	r3, [pc, #236]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800118e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001192:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001196:	fa92 f2a2 	rbit	r2, r2
 800119a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800119e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80011a2:	fab2 f282 	clz	r2, r2
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	f042 0220 	orr.w	r2, r2, #32
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	f002 021f 	and.w	r2, r2, #31
 80011b2:	2101      	movs	r1, #1
 80011b4:	fa01 f202 	lsl.w	r2, r1, r2
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0ab      	beq.n	8001116 <HAL_RCC_OscConfig+0x19a>
 80011be:	e05c      	b.n	800127a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c0:	f7ff fb1c 	bl	80007fc <HAL_GetTick>
 80011c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c8:	e00a      	b.n	80011e0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ca:	f7ff fb17 	bl	80007fc <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b64      	cmp	r3, #100	; 0x64
 80011d8:	d902      	bls.n	80011e0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	f000 bdcf 	b.w	8001d7e <HAL_RCC_OscConfig+0xe02>
 80011e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80011ec:	fa93 f3a3 	rbit	r3, r3
 80011f0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80011f4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f8:	fab3 f383 	clz	r3, r3
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b01      	cmp	r3, #1
 800120a:	d102      	bne.n	8001212 <HAL_RCC_OscConfig+0x296>
 800120c:	4b19      	ldr	r3, [pc, #100]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	e015      	b.n	800123e <HAL_RCC_OscConfig+0x2c2>
 8001212:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001216:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800121e:	fa93 f3a3 	rbit	r3, r3
 8001222:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001226:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800122a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800122e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001232:	fa93 f3a3 	rbit	r3, r3
 8001236:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <HAL_RCC_OscConfig+0x2f8>)
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001242:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001246:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800124a:	fa92 f2a2 	rbit	r2, r2
 800124e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001252:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001256:	fab2 f282 	clz	r2, r2
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	f042 0220 	orr.w	r2, r2, #32
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	f002 021f 	and.w	r2, r2, #31
 8001266:	2101      	movs	r1, #1
 8001268:	fa01 f202 	lsl.w	r2, r1, r2
 800126c:	4013      	ands	r3, r2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1ab      	bne.n	80011ca <HAL_RCC_OscConfig+0x24e>
 8001272:	e002      	b.n	800127a <HAL_RCC_OscConfig+0x2fe>
 8001274:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 816f 	beq.w	8001568 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800128a:	4bd0      	ldr	r3, [pc, #832]	; (80015cc <HAL_RCC_OscConfig+0x650>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00b      	beq.n	80012ae <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001296:	4bcd      	ldr	r3, [pc, #820]	; (80015cc <HAL_RCC_OscConfig+0x650>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 030c 	and.w	r3, r3, #12
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d16c      	bne.n	800137c <HAL_RCC_OscConfig+0x400>
 80012a2:	4bca      	ldr	r3, [pc, #808]	; (80015cc <HAL_RCC_OscConfig+0x650>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d166      	bne.n	800137c <HAL_RCC_OscConfig+0x400>
 80012ae:	2302      	movs	r3, #2
 80012b0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80012b8:	fa93 f3a3 	rbit	r3, r3
 80012bc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80012c0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c4:	fab3 f383 	clz	r3, r3
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	095b      	lsrs	r3, r3, #5
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d102      	bne.n	80012de <HAL_RCC_OscConfig+0x362>
 80012d8:	4bbc      	ldr	r3, [pc, #752]	; (80015cc <HAL_RCC_OscConfig+0x650>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	e013      	b.n	8001306 <HAL_RCC_OscConfig+0x38a>
 80012de:	2302      	movs	r3, #2
 80012e0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80012e8:	fa93 f3a3 	rbit	r3, r3
 80012ec:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80012f0:	2302      	movs	r3, #2
 80012f2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80012f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80012fa:	fa93 f3a3 	rbit	r3, r3
 80012fe:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001302:	4bb2      	ldr	r3, [pc, #712]	; (80015cc <HAL_RCC_OscConfig+0x650>)
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	2202      	movs	r2, #2
 8001308:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800130c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001310:	fa92 f2a2 	rbit	r2, r2
 8001314:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001318:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800131c:	fab2 f282 	clz	r2, r2
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	f042 0220 	orr.w	r2, r2, #32
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	f002 021f 	and.w	r2, r2, #31
 800132c:	2101      	movs	r1, #1
 800132e:	fa01 f202 	lsl.w	r2, r1, r2
 8001332:	4013      	ands	r3, r2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d007      	beq.n	8001348 <HAL_RCC_OscConfig+0x3cc>
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d002      	beq.n	8001348 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	f000 bd1b 	b.w	8001d7e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001348:	4ba0      	ldr	r3, [pc, #640]	; (80015cc <HAL_RCC_OscConfig+0x650>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	21f8      	movs	r1, #248	; 0xf8
 8001358:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001360:	fa91 f1a1 	rbit	r1, r1
 8001364:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001368:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800136c:	fab1 f181 	clz	r1, r1
 8001370:	b2c9      	uxtb	r1, r1
 8001372:	408b      	lsls	r3, r1
 8001374:	4995      	ldr	r1, [pc, #596]	; (80015cc <HAL_RCC_OscConfig+0x650>)
 8001376:	4313      	orrs	r3, r2
 8001378:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137a:	e0f5      	b.n	8001568 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 8085 	beq.w	8001492 <HAL_RCC_OscConfig+0x516>
 8001388:	2301      	movs	r3, #1
 800138a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001392:	fa93 f3a3 	rbit	r3, r3
 8001396:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800139a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800139e:	fab3 f383 	clz	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	461a      	mov	r2, r3
 80013b0:	2301      	movs	r3, #1
 80013b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fa22 	bl	80007fc <HAL_GetTick>
 80013b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013bc:	e00a      	b.n	80013d4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013be:	f7ff fa1d 	bl	80007fc <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d902      	bls.n	80013d4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	f000 bcd5 	b.w	8001d7e <HAL_RCC_OscConfig+0xe02>
 80013d4:	2302      	movs	r3, #2
 80013d6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013da:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80013de:	fa93 f3a3 	rbit	r3, r3
 80013e2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80013e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ea:	fab3 f383 	clz	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	095b      	lsrs	r3, r3, #5
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d102      	bne.n	8001404 <HAL_RCC_OscConfig+0x488>
 80013fe:	4b73      	ldr	r3, [pc, #460]	; (80015cc <HAL_RCC_OscConfig+0x650>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	e013      	b.n	800142c <HAL_RCC_OscConfig+0x4b0>
 8001404:	2302      	movs	r3, #2
 8001406:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800140e:	fa93 f3a3 	rbit	r3, r3
 8001412:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001416:	2302      	movs	r3, #2
 8001418:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800141c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001420:	fa93 f3a3 	rbit	r3, r3
 8001424:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001428:	4b68      	ldr	r3, [pc, #416]	; (80015cc <HAL_RCC_OscConfig+0x650>)
 800142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142c:	2202      	movs	r2, #2
 800142e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001432:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001436:	fa92 f2a2 	rbit	r2, r2
 800143a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800143e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001442:	fab2 f282 	clz	r2, r2
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	f042 0220 	orr.w	r2, r2, #32
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	f002 021f 	and.w	r2, r2, #31
 8001452:	2101      	movs	r1, #1
 8001454:	fa01 f202 	lsl.w	r2, r1, r2
 8001458:	4013      	ands	r3, r2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0af      	beq.n	80013be <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145e:	4b5b      	ldr	r3, [pc, #364]	; (80015cc <HAL_RCC_OscConfig+0x650>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	21f8      	movs	r1, #248	; 0xf8
 800146e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001472:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001476:	fa91 f1a1 	rbit	r1, r1
 800147a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800147e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001482:	fab1 f181 	clz	r1, r1
 8001486:	b2c9      	uxtb	r1, r1
 8001488:	408b      	lsls	r3, r1
 800148a:	4950      	ldr	r1, [pc, #320]	; (80015cc <HAL_RCC_OscConfig+0x650>)
 800148c:	4313      	orrs	r3, r2
 800148e:	600b      	str	r3, [r1, #0]
 8001490:	e06a      	b.n	8001568 <HAL_RCC_OscConfig+0x5ec>
 8001492:	2301      	movs	r3, #1
 8001494:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001498:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800149c:	fa93 f3a3 	rbit	r3, r3
 80014a0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80014a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a8:	fab3 f383 	clz	r3, r3
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	461a      	mov	r2, r3
 80014ba:	2300      	movs	r3, #0
 80014bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014be:	f7ff f99d 	bl	80007fc <HAL_GetTick>
 80014c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c6:	e00a      	b.n	80014de <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014c8:	f7ff f998 	bl	80007fc <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d902      	bls.n	80014de <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	f000 bc50 	b.w	8001d7e <HAL_RCC_OscConfig+0xe02>
 80014de:	2302      	movs	r3, #2
 80014e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80014e8:	fa93 f3a3 	rbit	r3, r3
 80014ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80014f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f4:	fab3 f383 	clz	r3, r3
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b01      	cmp	r3, #1
 8001506:	d102      	bne.n	800150e <HAL_RCC_OscConfig+0x592>
 8001508:	4b30      	ldr	r3, [pc, #192]	; (80015cc <HAL_RCC_OscConfig+0x650>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	e013      	b.n	8001536 <HAL_RCC_OscConfig+0x5ba>
 800150e:	2302      	movs	r3, #2
 8001510:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001514:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001518:	fa93 f3a3 	rbit	r3, r3
 800151c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001520:	2302      	movs	r3, #2
 8001522:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001526:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800152a:	fa93 f3a3 	rbit	r3, r3
 800152e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001532:	4b26      	ldr	r3, [pc, #152]	; (80015cc <HAL_RCC_OscConfig+0x650>)
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	2202      	movs	r2, #2
 8001538:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800153c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001540:	fa92 f2a2 	rbit	r2, r2
 8001544:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001548:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800154c:	fab2 f282 	clz	r2, r2
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	f042 0220 	orr.w	r2, r2, #32
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	f002 021f 	and.w	r2, r2, #31
 800155c:	2101      	movs	r1, #1
 800155e:	fa01 f202 	lsl.w	r2, r1, r2
 8001562:	4013      	ands	r3, r2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1af      	bne.n	80014c8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 80da 	beq.w	800172c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d069      	beq.n	8001656 <HAL_RCC_OscConfig+0x6da>
 8001582:	2301      	movs	r3, #1
 8001584:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001588:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800158c:	fa93 f3a3 	rbit	r3, r3
 8001590:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001598:	fab3 f383 	clz	r3, r3
 800159c:	b2db      	uxtb	r3, r3
 800159e:	461a      	mov	r2, r3
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_RCC_OscConfig+0x654>)
 80015a2:	4413      	add	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	461a      	mov	r2, r3
 80015a8:	2301      	movs	r3, #1
 80015aa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ac:	f7ff f926 	bl	80007fc <HAL_GetTick>
 80015b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b4:	e00e      	b.n	80015d4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015b6:	f7ff f921 	bl	80007fc <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d906      	bls.n	80015d4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e3d9      	b.n	8001d7e <HAL_RCC_OscConfig+0xe02>
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000
 80015d0:	10908120 	.word	0x10908120
 80015d4:	2302      	movs	r3, #2
 80015d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015de:	fa93 f3a3 	rbit	r3, r3
 80015e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015e6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80015ea:	2202      	movs	r2, #2
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	fa93 f2a3 	rbit	r2, r3
 80015f8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001602:	2202      	movs	r2, #2
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	fa93 f2a3 	rbit	r2, r3
 8001610:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001614:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001616:	4ba5      	ldr	r3, [pc, #660]	; (80018ac <HAL_RCC_OscConfig+0x930>)
 8001618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800161a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800161e:	2102      	movs	r1, #2
 8001620:	6019      	str	r1, [r3, #0]
 8001622:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	fa93 f1a3 	rbit	r1, r3
 800162c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001630:	6019      	str	r1, [r3, #0]
  return result;
 8001632:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	fab3 f383 	clz	r3, r3
 800163c:	b2db      	uxtb	r3, r3
 800163e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001642:	b2db      	uxtb	r3, r3
 8001644:	f003 031f 	and.w	r3, r3, #31
 8001648:	2101      	movs	r1, #1
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	4013      	ands	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0b0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x63a>
 8001654:	e06a      	b.n	800172c <HAL_RCC_OscConfig+0x7b0>
 8001656:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800165a:	2201      	movs	r2, #1
 800165c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	fa93 f2a3 	rbit	r2, r3
 8001668:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800166c:	601a      	str	r2, [r3, #0]
  return result;
 800166e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001672:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001674:	fab3 f383 	clz	r3, r3
 8001678:	b2db      	uxtb	r3, r3
 800167a:	461a      	mov	r2, r3
 800167c:	4b8c      	ldr	r3, [pc, #560]	; (80018b0 <HAL_RCC_OscConfig+0x934>)
 800167e:	4413      	add	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	461a      	mov	r2, r3
 8001684:	2300      	movs	r3, #0
 8001686:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001688:	f7ff f8b8 	bl	80007fc <HAL_GetTick>
 800168c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001690:	e009      	b.n	80016a6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001692:	f7ff f8b3 	bl	80007fc <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e36b      	b.n	8001d7e <HAL_RCC_OscConfig+0xe02>
 80016a6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80016aa:	2202      	movs	r2, #2
 80016ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	fa93 f2a3 	rbit	r2, r3
 80016b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80016c2:	2202      	movs	r2, #2
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	fa93 f2a3 	rbit	r2, r3
 80016d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80016da:	2202      	movs	r2, #2
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	fa93 f2a3 	rbit	r2, r3
 80016e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ee:	4b6f      	ldr	r3, [pc, #444]	; (80018ac <HAL_RCC_OscConfig+0x930>)
 80016f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016f2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016f6:	2102      	movs	r1, #2
 80016f8:	6019      	str	r1, [r3, #0]
 80016fa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	fa93 f1a3 	rbit	r1, r3
 8001704:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001708:	6019      	str	r1, [r3, #0]
  return result;
 800170a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	fab3 f383 	clz	r3, r3
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800171a:	b2db      	uxtb	r3, r3
 800171c:	f003 031f 	and.w	r3, r3, #31
 8001720:	2101      	movs	r1, #1
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	4013      	ands	r3, r2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1b2      	bne.n	8001692 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 8158 	beq.w	80019ec <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001742:	4b5a      	ldr	r3, [pc, #360]	; (80018ac <HAL_RCC_OscConfig+0x930>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d112      	bne.n	8001774 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	4b57      	ldr	r3, [pc, #348]	; (80018ac <HAL_RCC_OscConfig+0x930>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	4a56      	ldr	r2, [pc, #344]	; (80018ac <HAL_RCC_OscConfig+0x930>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001758:	61d3      	str	r3, [r2, #28]
 800175a:	4b54      	ldr	r3, [pc, #336]	; (80018ac <HAL_RCC_OscConfig+0x930>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001762:	f107 0308 	add.w	r3, r7, #8
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	f107 0308 	add.w	r3, r7, #8
 800176c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800176e:	2301      	movs	r3, #1
 8001770:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001774:	4b4f      	ldr	r3, [pc, #316]	; (80018b4 <HAL_RCC_OscConfig+0x938>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177c:	2b00      	cmp	r3, #0
 800177e:	d11a      	bne.n	80017b6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001780:	4b4c      	ldr	r3, [pc, #304]	; (80018b4 <HAL_RCC_OscConfig+0x938>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a4b      	ldr	r2, [pc, #300]	; (80018b4 <HAL_RCC_OscConfig+0x938>)
 8001786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800178c:	f7ff f836 	bl	80007fc <HAL_GetTick>
 8001790:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001794:	e009      	b.n	80017aa <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001796:	f7ff f831 	bl	80007fc <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b64      	cmp	r3, #100	; 0x64
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e2e9      	b.n	8001d7e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017aa:	4b42      	ldr	r3, [pc, #264]	; (80018b4 <HAL_RCC_OscConfig+0x938>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0ef      	beq.n	8001796 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d106      	bne.n	80017ce <HAL_RCC_OscConfig+0x852>
 80017c0:	4b3a      	ldr	r3, [pc, #232]	; (80018ac <HAL_RCC_OscConfig+0x930>)
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	4a39      	ldr	r2, [pc, #228]	; (80018ac <HAL_RCC_OscConfig+0x930>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6213      	str	r3, [r2, #32]
 80017cc:	e02f      	b.n	800182e <HAL_RCC_OscConfig+0x8b2>
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10c      	bne.n	80017f2 <HAL_RCC_OscConfig+0x876>
 80017d8:	4b34      	ldr	r3, [pc, #208]	; (80018ac <HAL_RCC_OscConfig+0x930>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4a33      	ldr	r2, [pc, #204]	; (80018ac <HAL_RCC_OscConfig+0x930>)
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	6213      	str	r3, [r2, #32]
 80017e4:	4b31      	ldr	r3, [pc, #196]	; (80018ac <HAL_RCC_OscConfig+0x930>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4a30      	ldr	r2, [pc, #192]	; (80018ac <HAL_RCC_OscConfig+0x930>)
 80017ea:	f023 0304 	bic.w	r3, r3, #4
 80017ee:	6213      	str	r3, [r2, #32]
 80017f0:	e01d      	b.n	800182e <HAL_RCC_OscConfig+0x8b2>
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	d10c      	bne.n	8001816 <HAL_RCC_OscConfig+0x89a>
 80017fc:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <HAL_RCC_OscConfig+0x930>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	4a2a      	ldr	r2, [pc, #168]	; (80018ac <HAL_RCC_OscConfig+0x930>)
 8001802:	f043 0304 	orr.w	r3, r3, #4
 8001806:	6213      	str	r3, [r2, #32]
 8001808:	4b28      	ldr	r3, [pc, #160]	; (80018ac <HAL_RCC_OscConfig+0x930>)
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4a27      	ldr	r2, [pc, #156]	; (80018ac <HAL_RCC_OscConfig+0x930>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6213      	str	r3, [r2, #32]
 8001814:	e00b      	b.n	800182e <HAL_RCC_OscConfig+0x8b2>
 8001816:	4b25      	ldr	r3, [pc, #148]	; (80018ac <HAL_RCC_OscConfig+0x930>)
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	4a24      	ldr	r2, [pc, #144]	; (80018ac <HAL_RCC_OscConfig+0x930>)
 800181c:	f023 0301 	bic.w	r3, r3, #1
 8001820:	6213      	str	r3, [r2, #32]
 8001822:	4b22      	ldr	r3, [pc, #136]	; (80018ac <HAL_RCC_OscConfig+0x930>)
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	4a21      	ldr	r2, [pc, #132]	; (80018ac <HAL_RCC_OscConfig+0x930>)
 8001828:	f023 0304 	bic.w	r3, r3, #4
 800182c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d06b      	beq.n	8001910 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001838:	f7fe ffe0 	bl	80007fc <HAL_GetTick>
 800183c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001840:	e00b      	b.n	800185a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001842:	f7fe ffdb 	bl	80007fc <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001852:	4293      	cmp	r3, r2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e291      	b.n	8001d7e <HAL_RCC_OscConfig+0xe02>
 800185a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800185e:	2202      	movs	r2, #2
 8001860:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001862:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	fa93 f2a3 	rbit	r2, r3
 800186c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001876:	2202      	movs	r2, #2
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	fa93 f2a3 	rbit	r2, r3
 8001884:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001888:	601a      	str	r2, [r3, #0]
  return result;
 800188a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800188e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001890:	fab3 f383 	clz	r3, r3
 8001894:	b2db      	uxtb	r3, r3
 8001896:	095b      	lsrs	r3, r3, #5
 8001898:	b2db      	uxtb	r3, r3
 800189a:	f043 0302 	orr.w	r3, r3, #2
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d109      	bne.n	80018b8 <HAL_RCC_OscConfig+0x93c>
 80018a4:	4b01      	ldr	r3, [pc, #4]	; (80018ac <HAL_RCC_OscConfig+0x930>)
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	e014      	b.n	80018d4 <HAL_RCC_OscConfig+0x958>
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000
 80018b0:	10908120 	.word	0x10908120
 80018b4:	40007000 	.word	0x40007000
 80018b8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80018bc:	2202      	movs	r2, #2
 80018be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	fa93 f2a3 	rbit	r2, r3
 80018ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	4bbb      	ldr	r3, [pc, #748]	; (8001bc0 <HAL_RCC_OscConfig+0xc44>)
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80018d8:	2102      	movs	r1, #2
 80018da:	6011      	str	r1, [r2, #0]
 80018dc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80018e0:	6812      	ldr	r2, [r2, #0]
 80018e2:	fa92 f1a2 	rbit	r1, r2
 80018e6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80018ea:	6011      	str	r1, [r2, #0]
  return result;
 80018ec:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80018f0:	6812      	ldr	r2, [r2, #0]
 80018f2:	fab2 f282 	clz	r2, r2
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	f002 021f 	and.w	r2, r2, #31
 8001902:	2101      	movs	r1, #1
 8001904:	fa01 f202 	lsl.w	r2, r1, r2
 8001908:	4013      	ands	r3, r2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d099      	beq.n	8001842 <HAL_RCC_OscConfig+0x8c6>
 800190e:	e063      	b.n	80019d8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001910:	f7fe ff74 	bl	80007fc <HAL_GetTick>
 8001914:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001918:	e00b      	b.n	8001932 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800191a:	f7fe ff6f 	bl	80007fc <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	f241 3288 	movw	r2, #5000	; 0x1388
 800192a:	4293      	cmp	r3, r2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e225      	b.n	8001d7e <HAL_RCC_OscConfig+0xe02>
 8001932:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001936:	2202      	movs	r2, #2
 8001938:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	fa93 f2a3 	rbit	r2, r3
 8001944:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800194e:	2202      	movs	r2, #2
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	fa93 f2a3 	rbit	r2, r3
 800195c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001960:	601a      	str	r2, [r3, #0]
  return result;
 8001962:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001966:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001968:	fab3 f383 	clz	r3, r3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	b2db      	uxtb	r3, r3
 8001972:	f043 0302 	orr.w	r3, r3, #2
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d102      	bne.n	8001982 <HAL_RCC_OscConfig+0xa06>
 800197c:	4b90      	ldr	r3, [pc, #576]	; (8001bc0 <HAL_RCC_OscConfig+0xc44>)
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	e00d      	b.n	800199e <HAL_RCC_OscConfig+0xa22>
 8001982:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001986:	2202      	movs	r2, #2
 8001988:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	fa93 f2a3 	rbit	r2, r3
 8001994:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	4b89      	ldr	r3, [pc, #548]	; (8001bc0 <HAL_RCC_OscConfig+0xc44>)
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80019a2:	2102      	movs	r1, #2
 80019a4:	6011      	str	r1, [r2, #0]
 80019a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	fa92 f1a2 	rbit	r1, r2
 80019b0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80019b4:	6011      	str	r1, [r2, #0]
  return result;
 80019b6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	fab2 f282 	clz	r2, r2
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	f002 021f 	and.w	r2, r2, #31
 80019cc:	2101      	movs	r1, #1
 80019ce:	fa01 f202 	lsl.w	r2, r1, r2
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1a0      	bne.n	800191a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019d8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d105      	bne.n	80019ec <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e0:	4b77      	ldr	r3, [pc, #476]	; (8001bc0 <HAL_RCC_OscConfig+0xc44>)
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	4a76      	ldr	r2, [pc, #472]	; (8001bc0 <HAL_RCC_OscConfig+0xc44>)
 80019e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 81c2 	beq.w	8001d7c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019f8:	4b71      	ldr	r3, [pc, #452]	; (8001bc0 <HAL_RCC_OscConfig+0xc44>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 030c 	and.w	r3, r3, #12
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	f000 819c 	beq.w	8001d3e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	f040 8114 	bne.w	8001c3a <HAL_RCC_OscConfig+0xcbe>
 8001a12:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	fa93 f2a3 	rbit	r2, r3
 8001a26:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a2a:	601a      	str	r2, [r3, #0]
  return result;
 8001a2c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a30:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a32:	fab3 f383 	clz	r3, r3
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	461a      	mov	r2, r3
 8001a44:	2300      	movs	r3, #0
 8001a46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7fe fed8 	bl	80007fc <HAL_GetTick>
 8001a4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a50:	e009      	b.n	8001a66 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a52:	f7fe fed3 	bl	80007fc <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e18b      	b.n	8001d7e <HAL_RCC_OscConfig+0xe02>
 8001a66:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	fa93 f2a3 	rbit	r2, r3
 8001a7a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a7e:	601a      	str	r2, [r3, #0]
  return result;
 8001a80:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a86:	fab3 f383 	clz	r3, r3
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	095b      	lsrs	r3, r3, #5
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d102      	bne.n	8001aa0 <HAL_RCC_OscConfig+0xb24>
 8001a9a:	4b49      	ldr	r3, [pc, #292]	; (8001bc0 <HAL_RCC_OscConfig+0xc44>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	e01b      	b.n	8001ad8 <HAL_RCC_OscConfig+0xb5c>
 8001aa0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001aa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aaa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	fa93 f2a3 	rbit	r2, r3
 8001ab4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001abe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	fa93 f2a3 	rbit	r2, r3
 8001ace:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	4b3a      	ldr	r3, [pc, #232]	; (8001bc0 <HAL_RCC_OscConfig+0xc44>)
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001adc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ae0:	6011      	str	r1, [r2, #0]
 8001ae2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	fa92 f1a2 	rbit	r1, r2
 8001aec:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001af0:	6011      	str	r1, [r2, #0]
  return result;
 8001af2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	fab2 f282 	clz	r2, r2
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	f042 0220 	orr.w	r2, r2, #32
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	f002 021f 	and.w	r2, r2, #31
 8001b08:	2101      	movs	r1, #1
 8001b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d19e      	bne.n	8001a52 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b14:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <HAL_RCC_OscConfig+0xc44>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	430b      	orrs	r3, r1
 8001b2a:	4925      	ldr	r1, [pc, #148]	; (8001bc0 <HAL_RCC_OscConfig+0xc44>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
 8001b30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	fa93 f2a3 	rbit	r2, r3
 8001b44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b48:	601a      	str	r2, [r3, #0]
  return result;
 8001b4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b4e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b50:	fab3 f383 	clz	r3, r3
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	461a      	mov	r2, r3
 8001b62:	2301      	movs	r3, #1
 8001b64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b66:	f7fe fe49 	bl	80007fc <HAL_GetTick>
 8001b6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b6e:	e009      	b.n	8001b84 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b70:	f7fe fe44 	bl	80007fc <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e0fc      	b.n	8001d7e <HAL_RCC_OscConfig+0xe02>
 8001b84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	fa93 f2a3 	rbit	r2, r3
 8001b98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b9c:	601a      	str	r2, [r3, #0]
  return result;
 8001b9e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ba2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ba4:	fab3 f383 	clz	r3, r3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d105      	bne.n	8001bc4 <HAL_RCC_OscConfig+0xc48>
 8001bb8:	4b01      	ldr	r3, [pc, #4]	; (8001bc0 <HAL_RCC_OscConfig+0xc44>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	e01e      	b.n	8001bfc <HAL_RCC_OscConfig+0xc80>
 8001bbe:	bf00      	nop
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	fa93 f2a3 	rbit	r2, r3
 8001bd8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001be2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	fa93 f2a3 	rbit	r2, r3
 8001bf2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	4b63      	ldr	r3, [pc, #396]	; (8001d88 <HAL_RCC_OscConfig+0xe0c>)
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c04:	6011      	str	r1, [r2, #0]
 8001c06:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	fa92 f1a2 	rbit	r1, r2
 8001c10:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001c14:	6011      	str	r1, [r2, #0]
  return result;
 8001c16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	fab2 f282 	clz	r2, r2
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	f042 0220 	orr.w	r2, r2, #32
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	f002 021f 	and.w	r2, r2, #31
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d09b      	beq.n	8001b70 <HAL_RCC_OscConfig+0xbf4>
 8001c38:	e0a0      	b.n	8001d7c <HAL_RCC_OscConfig+0xe00>
 8001c3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	fa93 f2a3 	rbit	r2, r3
 8001c4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c52:	601a      	str	r2, [r3, #0]
  return result;
 8001c54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c58:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7fe fdc4 	bl	80007fc <HAL_GetTick>
 8001c74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c78:	e009      	b.n	8001c8e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7a:	f7fe fdbf 	bl	80007fc <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e077      	b.n	8001d7e <HAL_RCC_OscConfig+0xe02>
 8001c8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	fa93 f2a3 	rbit	r2, r3
 8001ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca6:	601a      	str	r2, [r3, #0]
  return result;
 8001ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	095b      	lsrs	r3, r3, #5
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d102      	bne.n	8001cc8 <HAL_RCC_OscConfig+0xd4c>
 8001cc2:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <HAL_RCC_OscConfig+0xe0c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	e01b      	b.n	8001d00 <HAL_RCC_OscConfig+0xd84>
 8001cc8:	f107 0320 	add.w	r3, r7, #32
 8001ccc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	f107 0320 	add.w	r3, r7, #32
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	fa93 f2a3 	rbit	r2, r3
 8001cdc:	f107 031c 	add.w	r3, r7, #28
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	f107 0318 	add.w	r3, r7, #24
 8001ce6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	f107 0318 	add.w	r3, r7, #24
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	fa93 f2a3 	rbit	r2, r3
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <HAL_RCC_OscConfig+0xe0c>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	f107 0210 	add.w	r2, r7, #16
 8001d04:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d08:	6011      	str	r1, [r2, #0]
 8001d0a:	f107 0210 	add.w	r2, r7, #16
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	fa92 f1a2 	rbit	r1, r2
 8001d14:	f107 020c 	add.w	r2, r7, #12
 8001d18:	6011      	str	r1, [r2, #0]
  return result;
 8001d1a:	f107 020c 	add.w	r2, r7, #12
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	fab2 f282 	clz	r2, r2
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	f042 0220 	orr.w	r2, r2, #32
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	f002 021f 	and.w	r2, r2, #31
 8001d30:	2101      	movs	r1, #1
 8001d32:	fa01 f202 	lsl.w	r2, r1, r2
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d19e      	bne.n	8001c7a <HAL_RCC_OscConfig+0xcfe>
 8001d3c:	e01e      	b.n	8001d7c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e018      	b.n	8001d7e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <HAL_RCC_OscConfig+0xe0c>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d54:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d108      	bne.n	8001d78 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d66:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40021000 	.word	0x40021000

08001d8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b09e      	sub	sp, #120	; 0x78
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e162      	b.n	800206a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001da4:	4b90      	ldr	r3, [pc, #576]	; (8001fe8 <HAL_RCC_ClockConfig+0x25c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d910      	bls.n	8001dd4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4b8d      	ldr	r3, [pc, #564]	; (8001fe8 <HAL_RCC_ClockConfig+0x25c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 0207 	bic.w	r2, r3, #7
 8001dba:	498b      	ldr	r1, [pc, #556]	; (8001fe8 <HAL_RCC_ClockConfig+0x25c>)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc2:	4b89      	ldr	r3, [pc, #548]	; (8001fe8 <HAL_RCC_ClockConfig+0x25c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e14a      	b.n	800206a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de0:	4b82      	ldr	r3, [pc, #520]	; (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	497f      	ldr	r1, [pc, #508]	; (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 80dc 	beq.w	8001fb8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d13c      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xf6>
 8001e08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e0c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e10:	fa93 f3a3 	rbit	r3, r3
 8001e14:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d102      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xa6>
 8001e2c:	4b6f      	ldr	r3, [pc, #444]	; (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	e00f      	b.n	8001e52 <HAL_RCC_ClockConfig+0xc6>
 8001e32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e3a:	fa93 f3a3 	rbit	r3, r3
 8001e3e:	667b      	str	r3, [r7, #100]	; 0x64
 8001e40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e44:	663b      	str	r3, [r7, #96]	; 0x60
 8001e46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e48:	fa93 f3a3 	rbit	r3, r3
 8001e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e4e:	4b67      	ldr	r3, [pc, #412]	; (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e56:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e5a:	fa92 f2a2 	rbit	r2, r2
 8001e5e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e62:	fab2 f282 	clz	r2, r2
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	f042 0220 	orr.w	r2, r2, #32
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	f002 021f 	and.w	r2, r2, #31
 8001e72:	2101      	movs	r1, #1
 8001e74:	fa01 f202 	lsl.w	r2, r1, r2
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d17b      	bne.n	8001f76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0f3      	b.n	800206a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d13c      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x178>
 8001e8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e8e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	095b      	lsrs	r3, r3, #5
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d102      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x128>
 8001eae:	4b4f      	ldr	r3, [pc, #316]	; (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	e00f      	b.n	8001ed4 <HAL_RCC_ClockConfig+0x148>
 8001eb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eb8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ebc:	fa93 f3a3 	rbit	r3, r3
 8001ec0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ec2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ec6:	643b      	str	r3, [r7, #64]	; 0x40
 8001ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ed0:	4b46      	ldr	r3, [pc, #280]	; (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ed8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001eda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001edc:	fa92 f2a2 	rbit	r2, r2
 8001ee0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ee4:	fab2 f282 	clz	r2, r2
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	f042 0220 	orr.w	r2, r2, #32
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	f002 021f 	and.w	r2, r2, #31
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d13a      	bne.n	8001f76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0b2      	b.n	800206a <HAL_RCC_ClockConfig+0x2de>
 8001f04:	2302      	movs	r3, #2
 8001f06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	095b      	lsrs	r3, r3, #5
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d102      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x1a0>
 8001f26:	4b31      	ldr	r3, [pc, #196]	; (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	e00d      	b.n	8001f48 <HAL_RCC_ClockConfig+0x1bc>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f32:	fa93 f3a3 	rbit	r3, r3
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
 8001f38:	2302      	movs	r3, #2
 8001f3a:	623b      	str	r3, [r7, #32]
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	4b29      	ldr	r3, [pc, #164]	; (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	2202      	movs	r2, #2
 8001f4a:	61ba      	str	r2, [r7, #24]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	fa92 f2a2 	rbit	r2, r2
 8001f52:	617a      	str	r2, [r7, #20]
  return result;
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	fab2 f282 	clz	r2, r2
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	f042 0220 	orr.w	r2, r2, #32
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	f002 021f 	and.w	r2, r2, #31
 8001f66:	2101      	movs	r1, #1
 8001f68:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e079      	b.n	800206a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f76:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f023 0203 	bic.w	r2, r3, #3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	491a      	ldr	r1, [pc, #104]	; (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f88:	f7fe fc38 	bl	80007fc <HAL_GetTick>
 8001f8c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8e:	e00a      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f90:	f7fe fc34 	bl	80007fc <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e061      	b.n	800206a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 020c 	and.w	r2, r3, #12
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d1eb      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_RCC_ClockConfig+0x25c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d214      	bcs.n	8001ff0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <HAL_RCC_ClockConfig+0x25c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 0207 	bic.w	r2, r3, #7
 8001fce:	4906      	ldr	r1, [pc, #24]	; (8001fe8 <HAL_RCC_ClockConfig+0x25c>)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd6:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <HAL_RCC_ClockConfig+0x25c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e040      	b.n	800206a <HAL_RCC_ClockConfig+0x2de>
 8001fe8:	40022000 	.word	0x40022000
 8001fec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d008      	beq.n	800200e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_RCC_ClockConfig+0x2e8>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	491a      	ldr	r1, [pc, #104]	; (8002074 <HAL_RCC_ClockConfig+0x2e8>)
 800200a:	4313      	orrs	r3, r2
 800200c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d009      	beq.n	800202e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800201a:	4b16      	ldr	r3, [pc, #88]	; (8002074 <HAL_RCC_ClockConfig+0x2e8>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4912      	ldr	r1, [pc, #72]	; (8002074 <HAL_RCC_ClockConfig+0x2e8>)
 800202a:	4313      	orrs	r3, r2
 800202c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800202e:	f000 f829 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 8002032:	4601      	mov	r1, r0
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <HAL_RCC_ClockConfig+0x2e8>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800203c:	22f0      	movs	r2, #240	; 0xf0
 800203e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	fa92 f2a2 	rbit	r2, r2
 8002046:	60fa      	str	r2, [r7, #12]
  return result;
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	fab2 f282 	clz	r2, r2
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	40d3      	lsrs	r3, r2
 8002052:	4a09      	ldr	r2, [pc, #36]	; (8002078 <HAL_RCC_ClockConfig+0x2ec>)
 8002054:	5cd3      	ldrb	r3, [r2, r3]
 8002056:	fa21 f303 	lsr.w	r3, r1, r3
 800205a:	4a08      	ldr	r2, [pc, #32]	; (800207c <HAL_RCC_ClockConfig+0x2f0>)
 800205c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800205e:	4b08      	ldr	r3, [pc, #32]	; (8002080 <HAL_RCC_ClockConfig+0x2f4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fae2 	bl	800062c <HAL_InitTick>
  
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3778      	adds	r7, #120	; 0x78
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	0800403c 	.word	0x0800403c
 800207c:	20000000 	.word	0x20000000
 8002080:	20000004 	.word	0x20000004

08002084 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002084:	b480      	push	{r7}
 8002086:	b08b      	sub	sp, #44	; 0x2c
 8002088:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	2300      	movs	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
 8002092:	2300      	movs	r3, #0
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800209e:	4b29      	ldr	r3, [pc, #164]	; (8002144 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d002      	beq.n	80020b4 <HAL_RCC_GetSysClockFreq+0x30>
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d003      	beq.n	80020ba <HAL_RCC_GetSysClockFreq+0x36>
 80020b2:	e03c      	b.n	800212e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020b4:	4b24      	ldr	r3, [pc, #144]	; (8002148 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020b6:	623b      	str	r3, [r7, #32]
      break;
 80020b8:	e03c      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020c0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020c4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	fa92 f2a2 	rbit	r2, r2
 80020cc:	607a      	str	r2, [r7, #4]
  return result;
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	fab2 f282 	clz	r2, r2
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	40d3      	lsrs	r3, r2
 80020d8:	4a1c      	ldr	r2, [pc, #112]	; (800214c <HAL_RCC_GetSysClockFreq+0xc8>)
 80020da:	5cd3      	ldrb	r3, [r2, r3]
 80020dc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020de:	4b19      	ldr	r3, [pc, #100]	; (8002144 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	220f      	movs	r2, #15
 80020e8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	fa92 f2a2 	rbit	r2, r2
 80020f0:	60fa      	str	r2, [r7, #12]
  return result;
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	fab2 f282 	clz	r2, r2
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	40d3      	lsrs	r3, r2
 80020fc:	4a14      	ldr	r2, [pc, #80]	; (8002150 <HAL_RCC_GetSysClockFreq+0xcc>)
 80020fe:	5cd3      	ldrb	r3, [r2, r3]
 8002100:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800210c:	4a0e      	ldr	r2, [pc, #56]	; (8002148 <HAL_RCC_GetSysClockFreq+0xc4>)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	fbb2 f2f3 	udiv	r2, r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	fb02 f303 	mul.w	r3, r2, r3
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
 800211c:	e004      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	4a0c      	ldr	r2, [pc, #48]	; (8002154 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	623b      	str	r3, [r7, #32]
      break;
 800212c:	e002      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002130:	623b      	str	r3, [r7, #32]
      break;
 8002132:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002134:	6a3b      	ldr	r3, [r7, #32]
}
 8002136:	4618      	mov	r0, r3
 8002138:	372c      	adds	r7, #44	; 0x2c
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	007a1200 	.word	0x007a1200
 800214c:	08004054 	.word	0x08004054
 8002150:	08004064 	.word	0x08004064
 8002154:	003d0900 	.word	0x003d0900

08002158 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <HAL_RCC_GetHCLKFreq+0x14>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000000 	.word	0x20000000

08002170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002176:	f7ff ffef 	bl	8002158 <HAL_RCC_GetHCLKFreq>
 800217a:	4601      	mov	r1, r0
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_RCC_GetPCLK1Freq+0x3c>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002184:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002188:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	fa92 f2a2 	rbit	r2, r2
 8002190:	603a      	str	r2, [r7, #0]
  return result;
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	fab2 f282 	clz	r2, r2
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	40d3      	lsrs	r3, r2
 800219c:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800219e:	5cd3      	ldrb	r3, [r2, r3]
 80021a0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000
 80021b0:	0800404c 	.word	0x0800404c

080021b4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	220f      	movs	r2, #15
 80021c2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_RCC_GetClockConfig+0x5c>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0203 	and.w	r2, r3, #3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80021d0:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <HAL_RCC_GetClockConfig+0x5c>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80021dc:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <HAL_RCC_GetClockConfig+0x5c>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021e8:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_RCC_GetClockConfig+0x5c>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	08db      	lsrs	r3, r3, #3
 80021ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80021f6:	4b07      	ldr	r3, [pc, #28]	; (8002214 <HAL_RCC_GetClockConfig+0x60>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0207 	and.w	r2, r3, #7
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	601a      	str	r2, [r3, #0]
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40021000 	.word	0x40021000
 8002214:	40022000 	.word	0x40022000

08002218 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b092      	sub	sp, #72	; 0x48
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002228:	2300      	movs	r3, #0
 800222a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 80d4 	beq.w	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223c:	4b4e      	ldr	r3, [pc, #312]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10e      	bne.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002248:	4b4b      	ldr	r3, [pc, #300]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	4a4a      	ldr	r2, [pc, #296]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002252:	61d3      	str	r3, [r2, #28]
 8002254:	4b48      	ldr	r3, [pc, #288]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002260:	2301      	movs	r3, #1
 8002262:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002266:	4b45      	ldr	r3, [pc, #276]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226e:	2b00      	cmp	r3, #0
 8002270:	d118      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002272:	4b42      	ldr	r3, [pc, #264]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a41      	ldr	r2, [pc, #260]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800227e:	f7fe fabd 	bl	80007fc <HAL_GetTick>
 8002282:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002284:	e008      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002286:	f7fe fab9 	bl	80007fc <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b64      	cmp	r3, #100	; 0x64
 8002292:	d901      	bls.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e169      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002298:	4b38      	ldr	r3, [pc, #224]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022a4:	4b34      	ldr	r3, [pc, #208]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 8084 	beq.w	80023be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d07c      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022c4:	4b2c      	ldr	r3, [pc, #176]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022de:	fab3 f383 	clz	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b26      	ldr	r3, [pc, #152]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	461a      	mov	r2, r3
 80022ee:	2301      	movs	r3, #1
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fa:	fa93 f3a3 	rbit	r3, r3
 80022fe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	461a      	mov	r2, r3
 800230a:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800230c:	4413      	add	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	461a      	mov	r2, r3
 8002312:	2300      	movs	r3, #0
 8002314:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002316:	4a18      	ldr	r2, [pc, #96]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800231a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800231c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d04b      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002326:	f7fe fa69 	bl	80007fc <HAL_GetTick>
 800232a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232c:	e00a      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232e:	f7fe fa65 	bl	80007fc <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f241 3288 	movw	r2, #5000	; 0x1388
 800233c:	4293      	cmp	r3, r2
 800233e:	d901      	bls.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e113      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002344:	2302      	movs	r3, #2
 8002346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
 8002350:	2302      	movs	r3, #2
 8002352:	623b      	str	r3, [r7, #32]
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	61fb      	str	r3, [r7, #28]
  return result;
 800235c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	095b      	lsrs	r3, r3, #5
 8002366:	b2db      	uxtb	r3, r3
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d108      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002372:	4b01      	ldr	r3, [pc, #4]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	e00d      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002378:	40021000 	.word	0x40021000
 800237c:	40007000 	.word	0x40007000
 8002380:	10908100 	.word	0x10908100
 8002384:	2302      	movs	r3, #2
 8002386:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	4b78      	ldr	r3, [pc, #480]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	2202      	movs	r2, #2
 8002396:	613a      	str	r2, [r7, #16]
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	fa92 f2a2 	rbit	r2, r2
 800239e:	60fa      	str	r2, [r7, #12]
  return result;
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	fab2 f282 	clz	r2, r2
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	f002 021f 	and.w	r2, r2, #31
 80023b2:	2101      	movs	r1, #1
 80023b4:	fa01 f202 	lsl.w	r2, r1, r2
 80023b8:	4013      	ands	r3, r2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0b7      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023be:	4b6d      	ldr	r3, [pc, #436]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	496a      	ldr	r1, [pc, #424]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d105      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d8:	4b66      	ldr	r3, [pc, #408]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	4a65      	ldr	r2, [pc, #404]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023f0:	4b60      	ldr	r3, [pc, #384]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	f023 0203 	bic.w	r2, r3, #3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	495d      	ldr	r1, [pc, #372]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d008      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800240e:	4b59      	ldr	r3, [pc, #356]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	4956      	ldr	r1, [pc, #344]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800241c:	4313      	orrs	r3, r2
 800241e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800242c:	4b51      	ldr	r3, [pc, #324]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	494e      	ldr	r1, [pc, #312]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800243a:	4313      	orrs	r3, r2
 800243c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	2b00      	cmp	r3, #0
 8002448:	d008      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800244a:	4b4a      	ldr	r3, [pc, #296]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f023 0210 	bic.w	r2, r3, #16
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	4947      	ldr	r1, [pc, #284]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002458:	4313      	orrs	r3, r2
 800245a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002468:	4b42      	ldr	r3, [pc, #264]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002474:	493f      	ldr	r1, [pc, #252]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002482:	2b00      	cmp	r3, #0
 8002484:	d008      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002486:	4b3b      	ldr	r3, [pc, #236]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f023 0220 	bic.w	r2, r3, #32
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	4938      	ldr	r1, [pc, #224]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002494:	4313      	orrs	r3, r2
 8002496:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0308 	and.w	r3, r3, #8
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024a4:	4b33      	ldr	r3, [pc, #204]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	4930      	ldr	r1, [pc, #192]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d008      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024c2:	4b2c      	ldr	r3, [pc, #176]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	4929      	ldr	r1, [pc, #164]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024e0:	4b24      	ldr	r3, [pc, #144]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	4921      	ldr	r1, [pc, #132]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d008      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024fe:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002502:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	491a      	ldr	r1, [pc, #104]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800250c:	4313      	orrs	r3, r2
 800250e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800251c:	4b15      	ldr	r3, [pc, #84]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002528:	4912      	ldr	r1, [pc, #72]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800252a:	4313      	orrs	r3, r2
 800252c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d008      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800253a:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	490b      	ldr	r1, [pc, #44]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002548:	4313      	orrs	r3, r2
 800254a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002564:	4903      	ldr	r1, [pc, #12]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002566:	4313      	orrs	r3, r2
 8002568:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3748      	adds	r7, #72	; 0x48
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40021000 	.word	0x40021000

08002578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e049      	b.n	800261e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f841 	bl	8002626 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3304      	adds	r3, #4
 80025b4:	4619      	mov	r1, r3
 80025b6:	4610      	mov	r0, r2
 80025b8:	f000 f9f2 	bl	80029a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d001      	beq.n	8002654 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e04a      	b.n	80026ea <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0201 	orr.w	r2, r2, #1
 800266a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a21      	ldr	r2, [pc, #132]	; (80026f8 <HAL_TIM_Base_Start_IT+0xbc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d018      	beq.n	80026a8 <HAL_TIM_Base_Start_IT+0x6c>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800267e:	d013      	beq.n	80026a8 <HAL_TIM_Base_Start_IT+0x6c>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a1d      	ldr	r2, [pc, #116]	; (80026fc <HAL_TIM_Base_Start_IT+0xc0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00e      	beq.n	80026a8 <HAL_TIM_Base_Start_IT+0x6c>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a1c      	ldr	r2, [pc, #112]	; (8002700 <HAL_TIM_Base_Start_IT+0xc4>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d009      	beq.n	80026a8 <HAL_TIM_Base_Start_IT+0x6c>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a1a      	ldr	r2, [pc, #104]	; (8002704 <HAL_TIM_Base_Start_IT+0xc8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d004      	beq.n	80026a8 <HAL_TIM_Base_Start_IT+0x6c>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a19      	ldr	r2, [pc, #100]	; (8002708 <HAL_TIM_Base_Start_IT+0xcc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d115      	bne.n	80026d4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	4b17      	ldr	r3, [pc, #92]	; (800270c <HAL_TIM_Base_Start_IT+0xd0>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	d015      	beq.n	80026e6 <HAL_TIM_Base_Start_IT+0xaa>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c0:	d011      	beq.n	80026e6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f042 0201 	orr.w	r2, r2, #1
 80026d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d2:	e008      	b.n	80026e6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	e000      	b.n	80026e8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40012c00 	.word	0x40012c00
 80026fc:	40000400 	.word	0x40000400
 8002700:	40000800 	.word	0x40000800
 8002704:	40013400 	.word	0x40013400
 8002708:	40014000 	.word	0x40014000
 800270c:	00010007 	.word	0x00010007

08002710 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b02      	cmp	r3, #2
 8002724:	d122      	bne.n	800276c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b02      	cmp	r3, #2
 8002732:	d11b      	bne.n	800276c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f06f 0202 	mvn.w	r2, #2
 800273c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f905 	bl	8002962 <HAL_TIM_IC_CaptureCallback>
 8002758:	e005      	b.n	8002766 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f8f7 	bl	800294e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f908 	bl	8002976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b04      	cmp	r3, #4
 8002778:	d122      	bne.n	80027c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b04      	cmp	r3, #4
 8002786:	d11b      	bne.n	80027c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0204 	mvn.w	r2, #4
 8002790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2202      	movs	r2, #2
 8002796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f8db 	bl	8002962 <HAL_TIM_IC_CaptureCallback>
 80027ac:	e005      	b.n	80027ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f8cd 	bl	800294e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f8de 	bl	8002976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d122      	bne.n	8002814 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d11b      	bne.n	8002814 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0208 	mvn.w	r2, #8
 80027e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2204      	movs	r2, #4
 80027ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f8b1 	bl	8002962 <HAL_TIM_IC_CaptureCallback>
 8002800:	e005      	b.n	800280e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f8a3 	bl	800294e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f8b4 	bl	8002976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b10      	cmp	r3, #16
 8002820:	d122      	bne.n	8002868 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	2b10      	cmp	r3, #16
 800282e:	d11b      	bne.n	8002868 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0210 	mvn.w	r2, #16
 8002838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2208      	movs	r2, #8
 800283e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f887 	bl	8002962 <HAL_TIM_IC_CaptureCallback>
 8002854:	e005      	b.n	8002862 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f879 	bl	800294e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f88a 	bl	8002976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b01      	cmp	r3, #1
 8002874:	d10e      	bne.n	8002894 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b01      	cmp	r3, #1
 8002882:	d107      	bne.n	8002894 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0201 	mvn.w	r2, #1
 800288c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fd fe40 	bl	8000514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289e:	2b80      	cmp	r3, #128	; 0x80
 80028a0:	d10e      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	2b80      	cmp	r3, #128	; 0x80
 80028ae:	d107      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f90a 	bl	8002ad4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ce:	d10e      	bne.n	80028ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028da:	2b80      	cmp	r3, #128	; 0x80
 80028dc:	d107      	bne.n	80028ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80028e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f8fd 	bl	8002ae8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f8:	2b40      	cmp	r3, #64	; 0x40
 80028fa:	d10e      	bne.n	800291a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002906:	2b40      	cmp	r3, #64	; 0x40
 8002908:	d107      	bne.n	800291a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f838 	bl	800298a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	f003 0320 	and.w	r3, r3, #32
 8002924:	2b20      	cmp	r3, #32
 8002926:	d10e      	bne.n	8002946 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b20      	cmp	r3, #32
 8002934:	d107      	bne.n	8002946 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f06f 0220 	mvn.w	r2, #32
 800293e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f8bd 	bl	8002ac0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a3c      	ldr	r2, [pc, #240]	; (8002aa4 <TIM_Base_SetConfig+0x104>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d00f      	beq.n	80029d8 <TIM_Base_SetConfig+0x38>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029be:	d00b      	beq.n	80029d8 <TIM_Base_SetConfig+0x38>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a39      	ldr	r2, [pc, #228]	; (8002aa8 <TIM_Base_SetConfig+0x108>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d007      	beq.n	80029d8 <TIM_Base_SetConfig+0x38>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a38      	ldr	r2, [pc, #224]	; (8002aac <TIM_Base_SetConfig+0x10c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d003      	beq.n	80029d8 <TIM_Base_SetConfig+0x38>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a37      	ldr	r2, [pc, #220]	; (8002ab0 <TIM_Base_SetConfig+0x110>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d108      	bne.n	80029ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a2d      	ldr	r2, [pc, #180]	; (8002aa4 <TIM_Base_SetConfig+0x104>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d01b      	beq.n	8002a2a <TIM_Base_SetConfig+0x8a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f8:	d017      	beq.n	8002a2a <TIM_Base_SetConfig+0x8a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a2a      	ldr	r2, [pc, #168]	; (8002aa8 <TIM_Base_SetConfig+0x108>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d013      	beq.n	8002a2a <TIM_Base_SetConfig+0x8a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a29      	ldr	r2, [pc, #164]	; (8002aac <TIM_Base_SetConfig+0x10c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00f      	beq.n	8002a2a <TIM_Base_SetConfig+0x8a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a28      	ldr	r2, [pc, #160]	; (8002ab0 <TIM_Base_SetConfig+0x110>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00b      	beq.n	8002a2a <TIM_Base_SetConfig+0x8a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a27      	ldr	r2, [pc, #156]	; (8002ab4 <TIM_Base_SetConfig+0x114>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d007      	beq.n	8002a2a <TIM_Base_SetConfig+0x8a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a26      	ldr	r2, [pc, #152]	; (8002ab8 <TIM_Base_SetConfig+0x118>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d003      	beq.n	8002a2a <TIM_Base_SetConfig+0x8a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a25      	ldr	r2, [pc, #148]	; (8002abc <TIM_Base_SetConfig+0x11c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d108      	bne.n	8002a3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a10      	ldr	r2, [pc, #64]	; (8002aa4 <TIM_Base_SetConfig+0x104>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00f      	beq.n	8002a88 <TIM_Base_SetConfig+0xe8>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a11      	ldr	r2, [pc, #68]	; (8002ab0 <TIM_Base_SetConfig+0x110>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d00b      	beq.n	8002a88 <TIM_Base_SetConfig+0xe8>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a10      	ldr	r2, [pc, #64]	; (8002ab4 <TIM_Base_SetConfig+0x114>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d007      	beq.n	8002a88 <TIM_Base_SetConfig+0xe8>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a0f      	ldr	r2, [pc, #60]	; (8002ab8 <TIM_Base_SetConfig+0x118>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d003      	beq.n	8002a88 <TIM_Base_SetConfig+0xe8>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a0e      	ldr	r2, [pc, #56]	; (8002abc <TIM_Base_SetConfig+0x11c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d103      	bne.n	8002a90 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	615a      	str	r2, [r3, #20]
}
 8002a96:	bf00      	nop
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40012c00 	.word	0x40012c00
 8002aa8:	40000400 	.word	0x40000400
 8002aac:	40000800 	.word	0x40000800
 8002ab0:	40013400 	.word	0x40013400
 8002ab4:	40014000 	.word	0x40014000
 8002ab8:	40014400 	.word	0x40014400
 8002abc:	40014800 	.word	0x40014800

08002ac0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b0e:	2b84      	cmp	r3, #132	; 0x84
 8002b10:	d005      	beq.n	8002b1e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002b12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4413      	add	r3, r2
 8002b1a:	3303      	adds	r3, #3
 8002b1c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002b30:	f000 fad6 	bl	80030e0 <vTaskStartScheduler>
  
  return osOK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002b3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3c:	b089      	sub	sp, #36	; 0x24
 8002b3e:	af04      	add	r7, sp, #16
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d020      	beq.n	8002b8e <osThreadCreate+0x54>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01c      	beq.n	8002b8e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685c      	ldr	r4, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681d      	ldr	r5, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691e      	ldr	r6, [r3, #16]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff ffc8 	bl	8002afc <makeFreeRtosPriority>
 8002b6c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b76:	9202      	str	r2, [sp, #8]
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	9100      	str	r1, [sp, #0]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	4632      	mov	r2, r6
 8002b80:	4629      	mov	r1, r5
 8002b82:	4620      	mov	r0, r4
 8002b84:	f000 f8ed 	bl	8002d62 <xTaskCreateStatic>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	e01c      	b.n	8002bc8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685c      	ldr	r4, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b9a:	b29e      	uxth	r6, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff ffaa 	bl	8002afc <makeFreeRtosPriority>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	f107 030c 	add.w	r3, r7, #12
 8002bae:	9301      	str	r3, [sp, #4]
 8002bb0:	9200      	str	r2, [sp, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	4632      	mov	r2, r6
 8002bb6:	4629      	mov	r1, r5
 8002bb8:	4620      	mov	r0, r4
 8002bba:	f000 f92e 	bl	8002e1a <xTaskCreate>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d001      	beq.n	8002bc8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	e000      	b.n	8002bca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bd2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <osDelay+0x16>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	e000      	b.n	8002bea <osDelay+0x18>
 8002be8:	2301      	movs	r3, #1
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 fa44 	bl	8003078 <vTaskDelay>
  
  return osOK;
 8002bf0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f103 0208 	add.w	r2, r3, #8
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c12:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f103 0208 	add.w	r2, r3, #8
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f103 0208 	add.w	r2, r3, #8
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	601a      	str	r2, [r3, #0]
}
 8002c90:	bf00      	nop
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb2:	d103      	bne.n	8002cbc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	e00c      	b.n	8002cd6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3308      	adds	r3, #8
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	e002      	b.n	8002cca <vListInsert+0x2e>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d2f6      	bcs.n	8002cc4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	601a      	str	r2, [r3, #0]
}
 8002d02:	bf00      	nop
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b085      	sub	sp, #20
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6892      	ldr	r2, [r2, #8]
 8002d24:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6852      	ldr	r2, [r2, #4]
 8002d2e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d103      	bne.n	8002d42 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	1e5a      	subs	r2, r3, #1
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b08e      	sub	sp, #56	; 0x38
 8002d66:	af04      	add	r7, sp, #16
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	607a      	str	r2, [r7, #4]
 8002d6e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10a      	bne.n	8002d8c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7a:	f383 8811 	msr	BASEPRI, r3
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f3bf 8f4f 	dsb	sy
 8002d86:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d88:	bf00      	nop
 8002d8a:	e7fe      	b.n	8002d8a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10a      	bne.n	8002da8 <xTaskCreateStatic+0x46>
	__asm volatile
 8002d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d96:	f383 8811 	msr	BASEPRI, r3
 8002d9a:	f3bf 8f6f 	isb	sy
 8002d9e:	f3bf 8f4f 	dsb	sy
 8002da2:	61fb      	str	r3, [r7, #28]
}
 8002da4:	bf00      	nop
 8002da6:	e7fe      	b.n	8002da6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002da8:	2354      	movs	r3, #84	; 0x54
 8002daa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	2b54      	cmp	r3, #84	; 0x54
 8002db0:	d00a      	beq.n	8002dc8 <xTaskCreateStatic+0x66>
	__asm volatile
 8002db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db6:	f383 8811 	msr	BASEPRI, r3
 8002dba:	f3bf 8f6f 	isb	sy
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	61bb      	str	r3, [r7, #24]
}
 8002dc4:	bf00      	nop
 8002dc6:	e7fe      	b.n	8002dc6 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d01e      	beq.n	8002e0c <xTaskCreateStatic+0xaa>
 8002dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d01b      	beq.n	8002e0c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ddc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	2202      	movs	r2, #2
 8002de2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002de6:	2300      	movs	r3, #0
 8002de8:	9303      	str	r3, [sp, #12]
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	9302      	str	r3, [sp, #8]
 8002dee:	f107 0314 	add.w	r3, r7, #20
 8002df2:	9301      	str	r3, [sp, #4]
 8002df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f850 	bl	8002ea4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e06:	f000 f8cd 	bl	8002fa4 <prvAddNewTaskToReadyList>
 8002e0a:	e001      	b.n	8002e10 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e10:	697b      	ldr	r3, [r7, #20]
	}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3728      	adds	r7, #40	; 0x28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b08c      	sub	sp, #48	; 0x30
 8002e1e:	af04      	add	r7, sp, #16
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	603b      	str	r3, [r7, #0]
 8002e26:	4613      	mov	r3, r2
 8002e28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 feca 	bl	8003bc8 <pvPortMalloc>
 8002e34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00e      	beq.n	8002e5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002e3c:	2054      	movs	r0, #84	; 0x54
 8002e3e:	f000 fec3 	bl	8003bc8 <pvPortMalloc>
 8002e42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
 8002e50:	e005      	b.n	8002e5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e52:	6978      	ldr	r0, [r7, #20]
 8002e54:	f000 ff7c 	bl	8003d50 <vPortFree>
 8002e58:	e001      	b.n	8002e5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d017      	beq.n	8002e94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e6c:	88fa      	ldrh	r2, [r7, #6]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	9303      	str	r3, [sp, #12]
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	9302      	str	r3, [sp, #8]
 8002e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e78:	9301      	str	r3, [sp, #4]
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f80e 	bl	8002ea4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e88:	69f8      	ldr	r0, [r7, #28]
 8002e8a:	f000 f88b 	bl	8002fa4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	e002      	b.n	8002e9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e94:	f04f 33ff 	mov.w	r3, #4294967295
 8002e98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e9a:	69bb      	ldr	r3, [r7, #24]
	}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3720      	adds	r7, #32
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	f023 0307 	bic.w	r3, r3, #7
 8002eca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <prvInitialiseNewTask+0x48>
	__asm volatile
 8002ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eda:	f383 8811 	msr	BASEPRI, r3
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	617b      	str	r3, [r7, #20]
}
 8002ee8:	bf00      	nop
 8002eea:	e7fe      	b.n	8002eea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002eec:	2300      	movs	r3, #0
 8002eee:	61fb      	str	r3, [r7, #28]
 8002ef0:	e012      	b.n	8002f18 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	7819      	ldrb	r1, [r3, #0]
 8002efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	4413      	add	r3, r2
 8002f00:	3334      	adds	r3, #52	; 0x34
 8002f02:	460a      	mov	r2, r1
 8002f04:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d006      	beq.n	8002f20 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3301      	adds	r3, #1
 8002f16:	61fb      	str	r3, [r7, #28]
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	2b0f      	cmp	r3, #15
 8002f1c:	d9e9      	bls.n	8002ef2 <prvInitialiseNewTask+0x4e>
 8002f1e:	e000      	b.n	8002f22 <prvInitialiseNewTask+0x7e>
		{
			break;
 8002f20:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2c:	2b06      	cmp	r3, #6
 8002f2e:	d901      	bls.n	8002f34 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f30:	2306      	movs	r3, #6
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f3e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	2200      	movs	r2, #0
 8002f44:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f48:	3304      	adds	r3, #4
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fe75 	bl	8002c3a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	3318      	adds	r3, #24
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff fe70 	bl	8002c3a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	f1c3 0207 	rsb	r2, r3, #7
 8002f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f72:	2200      	movs	r2, #0
 8002f74:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	68f9      	ldr	r1, [r7, #12]
 8002f82:	69b8      	ldr	r0, [r7, #24]
 8002f84:	f000 fc12 	bl	80037ac <pxPortInitialiseStack>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f9a:	bf00      	nop
 8002f9c:	3720      	adds	r7, #32
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002fac:	f000 fd2a 	bl	8003a04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002fb0:	4b2a      	ldr	r3, [pc, #168]	; (800305c <prvAddNewTaskToReadyList+0xb8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	4a29      	ldr	r2, [pc, #164]	; (800305c <prvAddNewTaskToReadyList+0xb8>)
 8002fb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002fba:	4b29      	ldr	r3, [pc, #164]	; (8003060 <prvAddNewTaskToReadyList+0xbc>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d109      	bne.n	8002fd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002fc2:	4a27      	ldr	r2, [pc, #156]	; (8003060 <prvAddNewTaskToReadyList+0xbc>)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fc8:	4b24      	ldr	r3, [pc, #144]	; (800305c <prvAddNewTaskToReadyList+0xb8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d110      	bne.n	8002ff2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002fd0:	f000 fac2 	bl	8003558 <prvInitialiseTaskLists>
 8002fd4:	e00d      	b.n	8002ff2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002fd6:	4b23      	ldr	r3, [pc, #140]	; (8003064 <prvAddNewTaskToReadyList+0xc0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d109      	bne.n	8002ff2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fde:	4b20      	ldr	r3, [pc, #128]	; (8003060 <prvAddNewTaskToReadyList+0xbc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d802      	bhi.n	8002ff2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002fec:	4a1c      	ldr	r2, [pc, #112]	; (8003060 <prvAddNewTaskToReadyList+0xbc>)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002ff2:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <prvAddNewTaskToReadyList+0xc4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	4a1b      	ldr	r2, [pc, #108]	; (8003068 <prvAddNewTaskToReadyList+0xc4>)
 8002ffa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	2201      	movs	r2, #1
 8003002:	409a      	lsls	r2, r3
 8003004:	4b19      	ldr	r3, [pc, #100]	; (800306c <prvAddNewTaskToReadyList+0xc8>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4313      	orrs	r3, r2
 800300a:	4a18      	ldr	r2, [pc, #96]	; (800306c <prvAddNewTaskToReadyList+0xc8>)
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4a15      	ldr	r2, [pc, #84]	; (8003070 <prvAddNewTaskToReadyList+0xcc>)
 800301c:	441a      	add	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3304      	adds	r3, #4
 8003022:	4619      	mov	r1, r3
 8003024:	4610      	mov	r0, r2
 8003026:	f7ff fe15 	bl	8002c54 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800302a:	f000 fd1b 	bl	8003a64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800302e:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <prvAddNewTaskToReadyList+0xc0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00e      	beq.n	8003054 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003036:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <prvAddNewTaskToReadyList+0xbc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	429a      	cmp	r2, r3
 8003042:	d207      	bcs.n	8003054 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <prvAddNewTaskToReadyList+0xd0>)
 8003046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	20000380 	.word	0x20000380
 8003060:	20000280 	.word	0x20000280
 8003064:	2000038c 	.word	0x2000038c
 8003068:	2000039c 	.word	0x2000039c
 800306c:	20000388 	.word	0x20000388
 8003070:	20000284 	.word	0x20000284
 8003074:	e000ed04 	.word	0xe000ed04

08003078 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003080:	2300      	movs	r3, #0
 8003082:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d017      	beq.n	80030ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800308a:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <vTaskDelay+0x60>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00a      	beq.n	80030a8 <vTaskDelay+0x30>
	__asm volatile
 8003092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	60bb      	str	r3, [r7, #8]
}
 80030a4:	bf00      	nop
 80030a6:	e7fe      	b.n	80030a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80030a8:	f000 f87a 	bl	80031a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80030ac:	2100      	movs	r1, #0
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fb16 	bl	80036e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80030b4:	f000 f882 	bl	80031bc <xTaskResumeAll>
 80030b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d107      	bne.n	80030d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80030c0:	4b06      	ldr	r3, [pc, #24]	; (80030dc <vTaskDelay+0x64>)
 80030c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030d0:	bf00      	nop
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	200003a8 	.word	0x200003a8
 80030dc:	e000ed04 	.word	0xe000ed04

080030e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	; 0x28
 80030e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80030ee:	463a      	mov	r2, r7
 80030f0:	1d39      	adds	r1, r7, #4
 80030f2:	f107 0308 	add.w	r3, r7, #8
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fd f86a 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80030fc:	6839      	ldr	r1, [r7, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	9202      	str	r2, [sp, #8]
 8003104:	9301      	str	r3, [sp, #4]
 8003106:	2300      	movs	r3, #0
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	2300      	movs	r3, #0
 800310c:	460a      	mov	r2, r1
 800310e:	491e      	ldr	r1, [pc, #120]	; (8003188 <vTaskStartScheduler+0xa8>)
 8003110:	481e      	ldr	r0, [pc, #120]	; (800318c <vTaskStartScheduler+0xac>)
 8003112:	f7ff fe26 	bl	8002d62 <xTaskCreateStatic>
 8003116:	4603      	mov	r3, r0
 8003118:	4a1d      	ldr	r2, [pc, #116]	; (8003190 <vTaskStartScheduler+0xb0>)
 800311a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800311c:	4b1c      	ldr	r3, [pc, #112]	; (8003190 <vTaskStartScheduler+0xb0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003124:	2301      	movs	r3, #1
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	e001      	b.n	800312e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d116      	bne.n	8003162 <vTaskStartScheduler+0x82>
	__asm volatile
 8003134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003138:	f383 8811 	msr	BASEPRI, r3
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	613b      	str	r3, [r7, #16]
}
 8003146:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003148:	4b12      	ldr	r3, [pc, #72]	; (8003194 <vTaskStartScheduler+0xb4>)
 800314a:	f04f 32ff 	mov.w	r2, #4294967295
 800314e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003150:	4b11      	ldr	r3, [pc, #68]	; (8003198 <vTaskStartScheduler+0xb8>)
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003156:	4b11      	ldr	r3, [pc, #68]	; (800319c <vTaskStartScheduler+0xbc>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800315c:	f000 fbb0 	bl	80038c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003160:	e00e      	b.n	8003180 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003168:	d10a      	bne.n	8003180 <vTaskStartScheduler+0xa0>
	__asm volatile
 800316a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	60fb      	str	r3, [r7, #12]
}
 800317c:	bf00      	nop
 800317e:	e7fe      	b.n	800317e <vTaskStartScheduler+0x9e>
}
 8003180:	bf00      	nop
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	08004034 	.word	0x08004034
 800318c:	08003529 	.word	0x08003529
 8003190:	200003a4 	.word	0x200003a4
 8003194:	200003a0 	.word	0x200003a0
 8003198:	2000038c 	.word	0x2000038c
 800319c:	20000384 	.word	0x20000384

080031a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80031a4:	4b04      	ldr	r3, [pc, #16]	; (80031b8 <vTaskSuspendAll+0x18>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3301      	adds	r3, #1
 80031aa:	4a03      	ldr	r2, [pc, #12]	; (80031b8 <vTaskSuspendAll+0x18>)
 80031ac:	6013      	str	r3, [r2, #0]
}
 80031ae:	bf00      	nop
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	200003a8 	.word	0x200003a8

080031bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80031ca:	4b41      	ldr	r3, [pc, #260]	; (80032d0 <xTaskResumeAll+0x114>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10a      	bne.n	80031e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80031d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d6:	f383 8811 	msr	BASEPRI, r3
 80031da:	f3bf 8f6f 	isb	sy
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	603b      	str	r3, [r7, #0]
}
 80031e4:	bf00      	nop
 80031e6:	e7fe      	b.n	80031e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80031e8:	f000 fc0c 	bl	8003a04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80031ec:	4b38      	ldr	r3, [pc, #224]	; (80032d0 <xTaskResumeAll+0x114>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	4a37      	ldr	r2, [pc, #220]	; (80032d0 <xTaskResumeAll+0x114>)
 80031f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031f6:	4b36      	ldr	r3, [pc, #216]	; (80032d0 <xTaskResumeAll+0x114>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d161      	bne.n	80032c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031fe:	4b35      	ldr	r3, [pc, #212]	; (80032d4 <xTaskResumeAll+0x118>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d05d      	beq.n	80032c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003206:	e02e      	b.n	8003266 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003208:	4b33      	ldr	r3, [pc, #204]	; (80032d8 <xTaskResumeAll+0x11c>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	3318      	adds	r3, #24
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff fd7a 	bl	8002d0e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	3304      	adds	r3, #4
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fd75 	bl	8002d0e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	2201      	movs	r2, #1
 800322a:	409a      	lsls	r2, r3
 800322c:	4b2b      	ldr	r3, [pc, #172]	; (80032dc <xTaskResumeAll+0x120>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4313      	orrs	r3, r2
 8003232:	4a2a      	ldr	r2, [pc, #168]	; (80032dc <xTaskResumeAll+0x120>)
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4a27      	ldr	r2, [pc, #156]	; (80032e0 <xTaskResumeAll+0x124>)
 8003244:	441a      	add	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	3304      	adds	r3, #4
 800324a:	4619      	mov	r1, r3
 800324c:	4610      	mov	r0, r2
 800324e:	f7ff fd01 	bl	8002c54 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003256:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <xTaskResumeAll+0x128>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325c:	429a      	cmp	r2, r3
 800325e:	d302      	bcc.n	8003266 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003260:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <xTaskResumeAll+0x12c>)
 8003262:	2201      	movs	r2, #1
 8003264:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003266:	4b1c      	ldr	r3, [pc, #112]	; (80032d8 <xTaskResumeAll+0x11c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1cc      	bne.n	8003208 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003274:	f000 fa0e 	bl	8003694 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003278:	4b1c      	ldr	r3, [pc, #112]	; (80032ec <xTaskResumeAll+0x130>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d010      	beq.n	80032a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003284:	f000 f836 	bl	80032f4 <xTaskIncrementTick>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800328e:	4b16      	ldr	r3, [pc, #88]	; (80032e8 <xTaskResumeAll+0x12c>)
 8003290:	2201      	movs	r2, #1
 8003292:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3b01      	subs	r3, #1
 8003298:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f1      	bne.n	8003284 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80032a0:	4b12      	ldr	r3, [pc, #72]	; (80032ec <xTaskResumeAll+0x130>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80032a6:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <xTaskResumeAll+0x12c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d009      	beq.n	80032c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80032ae:	2301      	movs	r3, #1
 80032b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80032b2:	4b0f      	ldr	r3, [pc, #60]	; (80032f0 <xTaskResumeAll+0x134>)
 80032b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80032c2:	f000 fbcf 	bl	8003a64 <vPortExitCritical>

	return xAlreadyYielded;
 80032c6:	68bb      	ldr	r3, [r7, #8]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	200003a8 	.word	0x200003a8
 80032d4:	20000380 	.word	0x20000380
 80032d8:	20000340 	.word	0x20000340
 80032dc:	20000388 	.word	0x20000388
 80032e0:	20000284 	.word	0x20000284
 80032e4:	20000280 	.word	0x20000280
 80032e8:	20000394 	.word	0x20000394
 80032ec:	20000390 	.word	0x20000390
 80032f0:	e000ed04 	.word	0xe000ed04

080032f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032fe:	4b51      	ldr	r3, [pc, #324]	; (8003444 <xTaskIncrementTick+0x150>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	f040 808d 	bne.w	8003422 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003308:	4b4f      	ldr	r3, [pc, #316]	; (8003448 <xTaskIncrementTick+0x154>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	3301      	adds	r3, #1
 800330e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003310:	4a4d      	ldr	r2, [pc, #308]	; (8003448 <xTaskIncrementTick+0x154>)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d120      	bne.n	800335e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800331c:	4b4b      	ldr	r3, [pc, #300]	; (800344c <xTaskIncrementTick+0x158>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <xTaskIncrementTick+0x48>
	__asm volatile
 8003326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332a:	f383 8811 	msr	BASEPRI, r3
 800332e:	f3bf 8f6f 	isb	sy
 8003332:	f3bf 8f4f 	dsb	sy
 8003336:	603b      	str	r3, [r7, #0]
}
 8003338:	bf00      	nop
 800333a:	e7fe      	b.n	800333a <xTaskIncrementTick+0x46>
 800333c:	4b43      	ldr	r3, [pc, #268]	; (800344c <xTaskIncrementTick+0x158>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	4b43      	ldr	r3, [pc, #268]	; (8003450 <xTaskIncrementTick+0x15c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a41      	ldr	r2, [pc, #260]	; (800344c <xTaskIncrementTick+0x158>)
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	4a41      	ldr	r2, [pc, #260]	; (8003450 <xTaskIncrementTick+0x15c>)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	4b40      	ldr	r3, [pc, #256]	; (8003454 <xTaskIncrementTick+0x160>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3301      	adds	r3, #1
 8003356:	4a3f      	ldr	r2, [pc, #252]	; (8003454 <xTaskIncrementTick+0x160>)
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	f000 f99b 	bl	8003694 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800335e:	4b3e      	ldr	r3, [pc, #248]	; (8003458 <xTaskIncrementTick+0x164>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	429a      	cmp	r2, r3
 8003366:	d34d      	bcc.n	8003404 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003368:	4b38      	ldr	r3, [pc, #224]	; (800344c <xTaskIncrementTick+0x158>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <xTaskIncrementTick+0x82>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <xTaskIncrementTick+0x84>
 8003376:	2300      	movs	r3, #0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d004      	beq.n	8003386 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800337c:	4b36      	ldr	r3, [pc, #216]	; (8003458 <xTaskIncrementTick+0x164>)
 800337e:	f04f 32ff 	mov.w	r2, #4294967295
 8003382:	601a      	str	r2, [r3, #0]
					break;
 8003384:	e03e      	b.n	8003404 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003386:	4b31      	ldr	r3, [pc, #196]	; (800344c <xTaskIncrementTick+0x158>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	429a      	cmp	r2, r3
 800339c:	d203      	bcs.n	80033a6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800339e:	4a2e      	ldr	r2, [pc, #184]	; (8003458 <xTaskIncrementTick+0x164>)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6013      	str	r3, [r2, #0]
						break;
 80033a4:	e02e      	b.n	8003404 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	3304      	adds	r3, #4
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff fcaf 	bl	8002d0e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d004      	beq.n	80033c2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	3318      	adds	r3, #24
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff fca6 	bl	8002d0e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	2201      	movs	r2, #1
 80033c8:	409a      	lsls	r2, r3
 80033ca:	4b24      	ldr	r3, [pc, #144]	; (800345c <xTaskIncrementTick+0x168>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	4a22      	ldr	r2, [pc, #136]	; (800345c <xTaskIncrementTick+0x168>)
 80033d2:	6013      	str	r3, [r2, #0]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4a1f      	ldr	r2, [pc, #124]	; (8003460 <xTaskIncrementTick+0x16c>)
 80033e2:	441a      	add	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	3304      	adds	r3, #4
 80033e8:	4619      	mov	r1, r3
 80033ea:	4610      	mov	r0, r2
 80033ec:	f7ff fc32 	bl	8002c54 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f4:	4b1b      	ldr	r3, [pc, #108]	; (8003464 <xTaskIncrementTick+0x170>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d3b4      	bcc.n	8003368 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80033fe:	2301      	movs	r3, #1
 8003400:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003402:	e7b1      	b.n	8003368 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003404:	4b17      	ldr	r3, [pc, #92]	; (8003464 <xTaskIncrementTick+0x170>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340a:	4915      	ldr	r1, [pc, #84]	; (8003460 <xTaskIncrementTick+0x16c>)
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d907      	bls.n	800342c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800341c:	2301      	movs	r3, #1
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	e004      	b.n	800342c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003422:	4b11      	ldr	r3, [pc, #68]	; (8003468 <xTaskIncrementTick+0x174>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	3301      	adds	r3, #1
 8003428:	4a0f      	ldr	r2, [pc, #60]	; (8003468 <xTaskIncrementTick+0x174>)
 800342a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <xTaskIncrementTick+0x178>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003434:	2301      	movs	r3, #1
 8003436:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003438:	697b      	ldr	r3, [r7, #20]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	200003a8 	.word	0x200003a8
 8003448:	20000384 	.word	0x20000384
 800344c:	20000338 	.word	0x20000338
 8003450:	2000033c 	.word	0x2000033c
 8003454:	20000398 	.word	0x20000398
 8003458:	200003a0 	.word	0x200003a0
 800345c:	20000388 	.word	0x20000388
 8003460:	20000284 	.word	0x20000284
 8003464:	20000280 	.word	0x20000280
 8003468:	20000390 	.word	0x20000390
 800346c:	20000394 	.word	0x20000394

08003470 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003476:	4b27      	ldr	r3, [pc, #156]	; (8003514 <vTaskSwitchContext+0xa4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800347e:	4b26      	ldr	r3, [pc, #152]	; (8003518 <vTaskSwitchContext+0xa8>)
 8003480:	2201      	movs	r2, #1
 8003482:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003484:	e03f      	b.n	8003506 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003486:	4b24      	ldr	r3, [pc, #144]	; (8003518 <vTaskSwitchContext+0xa8>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800348c:	4b23      	ldr	r3, [pc, #140]	; (800351c <vTaskSwitchContext+0xac>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	fab3 f383 	clz	r3, r3
 8003498:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800349a:	7afb      	ldrb	r3, [r7, #11]
 800349c:	f1c3 031f 	rsb	r3, r3, #31
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	491f      	ldr	r1, [pc, #124]	; (8003520 <vTaskSwitchContext+0xb0>)
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10a      	bne.n	80034cc <vTaskSwitchContext+0x5c>
	__asm volatile
 80034b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ba:	f383 8811 	msr	BASEPRI, r3
 80034be:	f3bf 8f6f 	isb	sy
 80034c2:	f3bf 8f4f 	dsb	sy
 80034c6:	607b      	str	r3, [r7, #4]
}
 80034c8:	bf00      	nop
 80034ca:	e7fe      	b.n	80034ca <vTaskSwitchContext+0x5a>
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4a12      	ldr	r2, [pc, #72]	; (8003520 <vTaskSwitchContext+0xb0>)
 80034d8:	4413      	add	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	3308      	adds	r3, #8
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d104      	bne.n	80034fc <vTaskSwitchContext+0x8c>
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	605a      	str	r2, [r3, #4]
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	4a08      	ldr	r2, [pc, #32]	; (8003524 <vTaskSwitchContext+0xb4>)
 8003504:	6013      	str	r3, [r2, #0]
}
 8003506:	bf00      	nop
 8003508:	371c      	adds	r7, #28
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	200003a8 	.word	0x200003a8
 8003518:	20000394 	.word	0x20000394
 800351c:	20000388 	.word	0x20000388
 8003520:	20000284 	.word	0x20000284
 8003524:	20000280 	.word	0x20000280

08003528 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003530:	f000 f852 	bl	80035d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003534:	4b06      	ldr	r3, [pc, #24]	; (8003550 <prvIdleTask+0x28>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d9f9      	bls.n	8003530 <prvIdleTask+0x8>
			{
				taskYIELD();
 800353c:	4b05      	ldr	r3, [pc, #20]	; (8003554 <prvIdleTask+0x2c>)
 800353e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800354c:	e7f0      	b.n	8003530 <prvIdleTask+0x8>
 800354e:	bf00      	nop
 8003550:	20000284 	.word	0x20000284
 8003554:	e000ed04 	.word	0xe000ed04

08003558 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800355e:	2300      	movs	r3, #0
 8003560:	607b      	str	r3, [r7, #4]
 8003562:	e00c      	b.n	800357e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4a12      	ldr	r2, [pc, #72]	; (80035b8 <prvInitialiseTaskLists+0x60>)
 8003570:	4413      	add	r3, r2
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff fb41 	bl	8002bfa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3301      	adds	r3, #1
 800357c:	607b      	str	r3, [r7, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b06      	cmp	r3, #6
 8003582:	d9ef      	bls.n	8003564 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003584:	480d      	ldr	r0, [pc, #52]	; (80035bc <prvInitialiseTaskLists+0x64>)
 8003586:	f7ff fb38 	bl	8002bfa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800358a:	480d      	ldr	r0, [pc, #52]	; (80035c0 <prvInitialiseTaskLists+0x68>)
 800358c:	f7ff fb35 	bl	8002bfa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003590:	480c      	ldr	r0, [pc, #48]	; (80035c4 <prvInitialiseTaskLists+0x6c>)
 8003592:	f7ff fb32 	bl	8002bfa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003596:	480c      	ldr	r0, [pc, #48]	; (80035c8 <prvInitialiseTaskLists+0x70>)
 8003598:	f7ff fb2f 	bl	8002bfa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800359c:	480b      	ldr	r0, [pc, #44]	; (80035cc <prvInitialiseTaskLists+0x74>)
 800359e:	f7ff fb2c 	bl	8002bfa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80035a2:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <prvInitialiseTaskLists+0x78>)
 80035a4:	4a05      	ldr	r2, [pc, #20]	; (80035bc <prvInitialiseTaskLists+0x64>)
 80035a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80035a8:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <prvInitialiseTaskLists+0x7c>)
 80035aa:	4a05      	ldr	r2, [pc, #20]	; (80035c0 <prvInitialiseTaskLists+0x68>)
 80035ac:	601a      	str	r2, [r3, #0]
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000284 	.word	0x20000284
 80035bc:	20000310 	.word	0x20000310
 80035c0:	20000324 	.word	0x20000324
 80035c4:	20000340 	.word	0x20000340
 80035c8:	20000354 	.word	0x20000354
 80035cc:	2000036c 	.word	0x2000036c
 80035d0:	20000338 	.word	0x20000338
 80035d4:	2000033c 	.word	0x2000033c

080035d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035de:	e019      	b.n	8003614 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80035e0:	f000 fa10 	bl	8003a04 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80035e4:	4b10      	ldr	r3, [pc, #64]	; (8003628 <prvCheckTasksWaitingTermination+0x50>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3304      	adds	r3, #4
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fb8c 	bl	8002d0e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80035f6:	4b0d      	ldr	r3, [pc, #52]	; (800362c <prvCheckTasksWaitingTermination+0x54>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	4a0b      	ldr	r2, [pc, #44]	; (800362c <prvCheckTasksWaitingTermination+0x54>)
 80035fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <prvCheckTasksWaitingTermination+0x58>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3b01      	subs	r3, #1
 8003606:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <prvCheckTasksWaitingTermination+0x58>)
 8003608:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800360a:	f000 fa2b 	bl	8003a64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f810 	bl	8003634 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003614:	4b06      	ldr	r3, [pc, #24]	; (8003630 <prvCheckTasksWaitingTermination+0x58>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e1      	bne.n	80035e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800361c:	bf00      	nop
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	20000354 	.word	0x20000354
 800362c:	20000380 	.word	0x20000380
 8003630:	20000368 	.word	0x20000368

08003634 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003642:	2b00      	cmp	r3, #0
 8003644:	d108      	bne.n	8003658 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fb80 	bl	8003d50 <vPortFree>
				vPortFree( pxTCB );
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 fb7d 	bl	8003d50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003656:	e018      	b.n	800368a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800365e:	2b01      	cmp	r3, #1
 8003660:	d103      	bne.n	800366a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fb74 	bl	8003d50 <vPortFree>
	}
 8003668:	e00f      	b.n	800368a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003670:	2b02      	cmp	r3, #2
 8003672:	d00a      	beq.n	800368a <prvDeleteTCB+0x56>
	__asm volatile
 8003674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003678:	f383 8811 	msr	BASEPRI, r3
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	60fb      	str	r3, [r7, #12]
}
 8003686:	bf00      	nop
 8003688:	e7fe      	b.n	8003688 <prvDeleteTCB+0x54>
	}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800369a:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <prvResetNextTaskUnblockTime+0x44>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <prvResetNextTaskUnblockTime+0x14>
 80036a4:	2301      	movs	r3, #1
 80036a6:	e000      	b.n	80036aa <prvResetNextTaskUnblockTime+0x16>
 80036a8:	2300      	movs	r3, #0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d004      	beq.n	80036b8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80036ae:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <prvResetNextTaskUnblockTime+0x48>)
 80036b0:	f04f 32ff 	mov.w	r2, #4294967295
 80036b4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80036b6:	e008      	b.n	80036ca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80036b8:	4b07      	ldr	r3, [pc, #28]	; (80036d8 <prvResetNextTaskUnblockTime+0x44>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	4a05      	ldr	r2, [pc, #20]	; (80036dc <prvResetNextTaskUnblockTime+0x48>)
 80036c8:	6013      	str	r3, [r2, #0]
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	20000338 	.word	0x20000338
 80036dc:	200003a0 	.word	0x200003a0

080036e0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80036ea:	4b29      	ldr	r3, [pc, #164]	; (8003790 <prvAddCurrentTaskToDelayedList+0xb0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036f0:	4b28      	ldr	r3, [pc, #160]	; (8003794 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	3304      	adds	r3, #4
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff fb09 	bl	8002d0e <uxListRemove>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10b      	bne.n	800371a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003702:	4b24      	ldr	r3, [pc, #144]	; (8003794 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	2201      	movs	r2, #1
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	43da      	mvns	r2, r3
 8003710:	4b21      	ldr	r3, [pc, #132]	; (8003798 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4013      	ands	r3, r2
 8003716:	4a20      	ldr	r2, [pc, #128]	; (8003798 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003718:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d10a      	bne.n	8003738 <prvAddCurrentTaskToDelayedList+0x58>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d007      	beq.n	8003738 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003728:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <prvAddCurrentTaskToDelayedList+0xb4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3304      	adds	r3, #4
 800372e:	4619      	mov	r1, r3
 8003730:	481a      	ldr	r0, [pc, #104]	; (800379c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003732:	f7ff fa8f 	bl	8002c54 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003736:	e026      	b.n	8003786 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4413      	add	r3, r2
 800373e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003740:	4b14      	ldr	r3, [pc, #80]	; (8003794 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	429a      	cmp	r2, r3
 800374e:	d209      	bcs.n	8003764 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003750:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3304      	adds	r3, #4
 800375a:	4619      	mov	r1, r3
 800375c:	4610      	mov	r0, r2
 800375e:	f7ff fa9d 	bl	8002c9c <vListInsert>
}
 8003762:	e010      	b.n	8003786 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003764:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <prvAddCurrentTaskToDelayedList+0xb4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3304      	adds	r3, #4
 800376e:	4619      	mov	r1, r3
 8003770:	4610      	mov	r0, r2
 8003772:	f7ff fa93 	bl	8002c9c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003776:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	429a      	cmp	r2, r3
 800377e:	d202      	bcs.n	8003786 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003780:	4a09      	ldr	r2, [pc, #36]	; (80037a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	6013      	str	r3, [r2, #0]
}
 8003786:	bf00      	nop
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20000384 	.word	0x20000384
 8003794:	20000280 	.word	0x20000280
 8003798:	20000388 	.word	0x20000388
 800379c:	2000036c 	.word	0x2000036c
 80037a0:	2000033c 	.word	0x2000033c
 80037a4:	20000338 	.word	0x20000338
 80037a8:	200003a0 	.word	0x200003a0

080037ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	3b04      	subs	r3, #4
 80037bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	3b04      	subs	r3, #4
 80037ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f023 0201 	bic.w	r2, r3, #1
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	3b04      	subs	r3, #4
 80037da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80037dc:	4a0c      	ldr	r2, [pc, #48]	; (8003810 <pxPortInitialiseStack+0x64>)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3b14      	subs	r3, #20
 80037e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	3b04      	subs	r3, #4
 80037f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f06f 0202 	mvn.w	r2, #2
 80037fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	3b20      	subs	r3, #32
 8003800:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003802:	68fb      	ldr	r3, [r7, #12]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	08003815 	.word	0x08003815

08003814 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800381a:	2300      	movs	r3, #0
 800381c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800381e:	4b12      	ldr	r3, [pc, #72]	; (8003868 <prvTaskExitError+0x54>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003826:	d00a      	beq.n	800383e <prvTaskExitError+0x2a>
	__asm volatile
 8003828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	60fb      	str	r3, [r7, #12]
}
 800383a:	bf00      	nop
 800383c:	e7fe      	b.n	800383c <prvTaskExitError+0x28>
	__asm volatile
 800383e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003842:	f383 8811 	msr	BASEPRI, r3
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	60bb      	str	r3, [r7, #8]
}
 8003850:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003852:	bf00      	nop
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0fc      	beq.n	8003854 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800385a:	bf00      	nop
 800385c:	bf00      	nop
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	2000000c 	.word	0x2000000c
 800386c:	00000000 	.word	0x00000000

08003870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003870:	4b07      	ldr	r3, [pc, #28]	; (8003890 <pxCurrentTCBConst2>)
 8003872:	6819      	ldr	r1, [r3, #0]
 8003874:	6808      	ldr	r0, [r1, #0]
 8003876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800387a:	f380 8809 	msr	PSP, r0
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f04f 0000 	mov.w	r0, #0
 8003886:	f380 8811 	msr	BASEPRI, r0
 800388a:	4770      	bx	lr
 800388c:	f3af 8000 	nop.w

08003890 <pxCurrentTCBConst2>:
 8003890:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003894:	bf00      	nop
 8003896:	bf00      	nop

08003898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003898:	4808      	ldr	r0, [pc, #32]	; (80038bc <prvPortStartFirstTask+0x24>)
 800389a:	6800      	ldr	r0, [r0, #0]
 800389c:	6800      	ldr	r0, [r0, #0]
 800389e:	f380 8808 	msr	MSP, r0
 80038a2:	f04f 0000 	mov.w	r0, #0
 80038a6:	f380 8814 	msr	CONTROL, r0
 80038aa:	b662      	cpsie	i
 80038ac:	b661      	cpsie	f
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	df00      	svc	0
 80038b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80038ba:	bf00      	nop
 80038bc:	e000ed08 	.word	0xe000ed08

080038c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80038c6:	4b46      	ldr	r3, [pc, #280]	; (80039e0 <xPortStartScheduler+0x120>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a46      	ldr	r2, [pc, #280]	; (80039e4 <xPortStartScheduler+0x124>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d10a      	bne.n	80038e6 <xPortStartScheduler+0x26>
	__asm volatile
 80038d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d4:	f383 8811 	msr	BASEPRI, r3
 80038d8:	f3bf 8f6f 	isb	sy
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	613b      	str	r3, [r7, #16]
}
 80038e2:	bf00      	nop
 80038e4:	e7fe      	b.n	80038e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80038e6:	4b3e      	ldr	r3, [pc, #248]	; (80039e0 <xPortStartScheduler+0x120>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a3f      	ldr	r2, [pc, #252]	; (80039e8 <xPortStartScheduler+0x128>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d10a      	bne.n	8003906 <xPortStartScheduler+0x46>
	__asm volatile
 80038f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	60fb      	str	r3, [r7, #12]
}
 8003902:	bf00      	nop
 8003904:	e7fe      	b.n	8003904 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003906:	4b39      	ldr	r3, [pc, #228]	; (80039ec <xPortStartScheduler+0x12c>)
 8003908:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	22ff      	movs	r2, #255	; 0xff
 8003916:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003928:	b2da      	uxtb	r2, r3
 800392a:	4b31      	ldr	r3, [pc, #196]	; (80039f0 <xPortStartScheduler+0x130>)
 800392c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800392e:	4b31      	ldr	r3, [pc, #196]	; (80039f4 <xPortStartScheduler+0x134>)
 8003930:	2207      	movs	r2, #7
 8003932:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003934:	e009      	b.n	800394a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003936:	4b2f      	ldr	r3, [pc, #188]	; (80039f4 <xPortStartScheduler+0x134>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3b01      	subs	r3, #1
 800393c:	4a2d      	ldr	r2, [pc, #180]	; (80039f4 <xPortStartScheduler+0x134>)
 800393e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	b2db      	uxtb	r3, r3
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	b2db      	uxtb	r3, r3
 8003948:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800394a:	78fb      	ldrb	r3, [r7, #3]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003952:	2b80      	cmp	r3, #128	; 0x80
 8003954:	d0ef      	beq.n	8003936 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003956:	4b27      	ldr	r3, [pc, #156]	; (80039f4 <xPortStartScheduler+0x134>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f1c3 0307 	rsb	r3, r3, #7
 800395e:	2b04      	cmp	r3, #4
 8003960:	d00a      	beq.n	8003978 <xPortStartScheduler+0xb8>
	__asm volatile
 8003962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003966:	f383 8811 	msr	BASEPRI, r3
 800396a:	f3bf 8f6f 	isb	sy
 800396e:	f3bf 8f4f 	dsb	sy
 8003972:	60bb      	str	r3, [r7, #8]
}
 8003974:	bf00      	nop
 8003976:	e7fe      	b.n	8003976 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003978:	4b1e      	ldr	r3, [pc, #120]	; (80039f4 <xPortStartScheduler+0x134>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	021b      	lsls	r3, r3, #8
 800397e:	4a1d      	ldr	r2, [pc, #116]	; (80039f4 <xPortStartScheduler+0x134>)
 8003980:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003982:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <xPortStartScheduler+0x134>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800398a:	4a1a      	ldr	r2, [pc, #104]	; (80039f4 <xPortStartScheduler+0x134>)
 800398c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	b2da      	uxtb	r2, r3
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003996:	4b18      	ldr	r3, [pc, #96]	; (80039f8 <xPortStartScheduler+0x138>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a17      	ldr	r2, [pc, #92]	; (80039f8 <xPortStartScheduler+0x138>)
 800399c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80039a2:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <xPortStartScheduler+0x138>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a14      	ldr	r2, [pc, #80]	; (80039f8 <xPortStartScheduler+0x138>)
 80039a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80039ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80039ae:	f000 f8dd 	bl	8003b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80039b2:	4b12      	ldr	r3, [pc, #72]	; (80039fc <xPortStartScheduler+0x13c>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80039b8:	f000 f8fc 	bl	8003bb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80039bc:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <xPortStartScheduler+0x140>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a0f      	ldr	r2, [pc, #60]	; (8003a00 <xPortStartScheduler+0x140>)
 80039c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80039c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80039c8:	f7ff ff66 	bl	8003898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80039cc:	f7ff fd50 	bl	8003470 <vTaskSwitchContext>
	prvTaskExitError();
 80039d0:	f7ff ff20 	bl	8003814 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	e000ed00 	.word	0xe000ed00
 80039e4:	410fc271 	.word	0x410fc271
 80039e8:	410fc270 	.word	0x410fc270
 80039ec:	e000e400 	.word	0xe000e400
 80039f0:	200003ac 	.word	0x200003ac
 80039f4:	200003b0 	.word	0x200003b0
 80039f8:	e000ed20 	.word	0xe000ed20
 80039fc:	2000000c 	.word	0x2000000c
 8003a00:	e000ef34 	.word	0xe000ef34

08003a04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
	__asm volatile
 8003a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0e:	f383 8811 	msr	BASEPRI, r3
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	607b      	str	r3, [r7, #4]
}
 8003a1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003a1e:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <vPortEnterCritical+0x58>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3301      	adds	r3, #1
 8003a24:	4a0d      	ldr	r2, [pc, #52]	; (8003a5c <vPortEnterCritical+0x58>)
 8003a26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003a28:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <vPortEnterCritical+0x58>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d10f      	bne.n	8003a50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a30:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <vPortEnterCritical+0x5c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <vPortEnterCritical+0x4c>
	__asm volatile
 8003a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3e:	f383 8811 	msr	BASEPRI, r3
 8003a42:	f3bf 8f6f 	isb	sy
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	603b      	str	r3, [r7, #0]
}
 8003a4c:	bf00      	nop
 8003a4e:	e7fe      	b.n	8003a4e <vPortEnterCritical+0x4a>
	}
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	2000000c 	.word	0x2000000c
 8003a60:	e000ed04 	.word	0xe000ed04

08003a64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003a6a:	4b12      	ldr	r3, [pc, #72]	; (8003ab4 <vPortExitCritical+0x50>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10a      	bne.n	8003a88 <vPortExitCritical+0x24>
	__asm volatile
 8003a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	607b      	str	r3, [r7, #4]
}
 8003a84:	bf00      	nop
 8003a86:	e7fe      	b.n	8003a86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003a88:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <vPortExitCritical+0x50>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	4a09      	ldr	r2, [pc, #36]	; (8003ab4 <vPortExitCritical+0x50>)
 8003a90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003a92:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <vPortExitCritical+0x50>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d105      	bne.n	8003aa6 <vPortExitCritical+0x42>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003aa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	2000000c 	.word	0x2000000c
	...

08003ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ac0:	f3ef 8009 	mrs	r0, PSP
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <pxCurrentTCBConst>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	f01e 0f10 	tst.w	lr, #16
 8003ad0:	bf08      	it	eq
 8003ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ada:	6010      	str	r0, [r2, #0]
 8003adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003ae4:	f380 8811 	msr	BASEPRI, r0
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f7ff fcbe 	bl	8003470 <vTaskSwitchContext>
 8003af4:	f04f 0000 	mov.w	r0, #0
 8003af8:	f380 8811 	msr	BASEPRI, r0
 8003afc:	bc09      	pop	{r0, r3}
 8003afe:	6819      	ldr	r1, [r3, #0]
 8003b00:	6808      	ldr	r0, [r1, #0]
 8003b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b06:	f01e 0f10 	tst.w	lr, #16
 8003b0a:	bf08      	it	eq
 8003b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003b10:	f380 8809 	msr	PSP, r0
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	f3af 8000 	nop.w

08003b20 <pxCurrentTCBConst>:
 8003b20:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop

08003b28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8003b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b32:	f383 8811 	msr	BASEPRI, r3
 8003b36:	f3bf 8f6f 	isb	sy
 8003b3a:	f3bf 8f4f 	dsb	sy
 8003b3e:	607b      	str	r3, [r7, #4]
}
 8003b40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003b42:	f7ff fbd7 	bl	80032f4 <xTaskIncrementTick>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b4c:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <SysTick_Handler+0x40>)
 8003b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	2300      	movs	r3, #0
 8003b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	f383 8811 	msr	BASEPRI, r3
}
 8003b5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	e000ed04 	.word	0xe000ed04

08003b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <vPortSetupTimerInterrupt+0x34>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003b76:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <vPortSetupTimerInterrupt+0x38>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <vPortSetupTimerInterrupt+0x3c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a0a      	ldr	r2, [pc, #40]	; (8003bac <vPortSetupTimerInterrupt+0x40>)
 8003b82:	fba2 2303 	umull	r2, r3, r2, r3
 8003b86:	099b      	lsrs	r3, r3, #6
 8003b88:	4a09      	ldr	r2, [pc, #36]	; (8003bb0 <vPortSetupTimerInterrupt+0x44>)
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003b8e:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <vPortSetupTimerInterrupt+0x34>)
 8003b90:	2207      	movs	r2, #7
 8003b92:	601a      	str	r2, [r3, #0]
}
 8003b94:	bf00      	nop
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	e000e010 	.word	0xe000e010
 8003ba4:	e000e018 	.word	0xe000e018
 8003ba8:	20000000 	.word	0x20000000
 8003bac:	10624dd3 	.word	0x10624dd3
 8003bb0:	e000e014 	.word	0xe000e014

08003bb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003bb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003bc4 <vPortEnableVFP+0x10>
 8003bb8:	6801      	ldr	r1, [r0, #0]
 8003bba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003bbe:	6001      	str	r1, [r0, #0]
 8003bc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003bc2:	bf00      	nop
 8003bc4:	e000ed88 	.word	0xe000ed88

08003bc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08a      	sub	sp, #40	; 0x28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003bd4:	f7ff fae4 	bl	80031a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003bd8:	4b58      	ldr	r3, [pc, #352]	; (8003d3c <pvPortMalloc+0x174>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003be0:	f000 f910 	bl	8003e04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003be4:	4b56      	ldr	r3, [pc, #344]	; (8003d40 <pvPortMalloc+0x178>)
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4013      	ands	r3, r2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f040 808e 	bne.w	8003d0e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01d      	beq.n	8003c34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003bf8:	2208      	movs	r2, #8
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d014      	beq.n	8003c34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f023 0307 	bic.w	r3, r3, #7
 8003c10:	3308      	adds	r3, #8
 8003c12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <pvPortMalloc+0x6c>
	__asm volatile
 8003c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	617b      	str	r3, [r7, #20]
}
 8003c30:	bf00      	nop
 8003c32:	e7fe      	b.n	8003c32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d069      	beq.n	8003d0e <pvPortMalloc+0x146>
 8003c3a:	4b42      	ldr	r3, [pc, #264]	; (8003d44 <pvPortMalloc+0x17c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d864      	bhi.n	8003d0e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003c44:	4b40      	ldr	r3, [pc, #256]	; (8003d48 <pvPortMalloc+0x180>)
 8003c46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003c48:	4b3f      	ldr	r3, [pc, #252]	; (8003d48 <pvPortMalloc+0x180>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c4e:	e004      	b.n	8003c5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d903      	bls.n	8003c6c <pvPortMalloc+0xa4>
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1f1      	bne.n	8003c50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003c6c:	4b33      	ldr	r3, [pc, #204]	; (8003d3c <pvPortMalloc+0x174>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d04b      	beq.n	8003d0e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2208      	movs	r2, #8
 8003c7c:	4413      	add	r3, r2
 8003c7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	1ad2      	subs	r2, r2, r3
 8003c90:	2308      	movs	r3, #8
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d91f      	bls.n	8003cd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <pvPortMalloc+0xf8>
	__asm volatile
 8003caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cae:	f383 8811 	msr	BASEPRI, r3
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	613b      	str	r3, [r7, #16]
}
 8003cbc:	bf00      	nop
 8003cbe:	e7fe      	b.n	8003cbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	1ad2      	subs	r2, r2, r3
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003cd2:	69b8      	ldr	r0, [r7, #24]
 8003cd4:	f000 f8f8 	bl	8003ec8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003cd8:	4b1a      	ldr	r3, [pc, #104]	; (8003d44 <pvPortMalloc+0x17c>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	4a18      	ldr	r2, [pc, #96]	; (8003d44 <pvPortMalloc+0x17c>)
 8003ce4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003ce6:	4b17      	ldr	r3, [pc, #92]	; (8003d44 <pvPortMalloc+0x17c>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	4b18      	ldr	r3, [pc, #96]	; (8003d4c <pvPortMalloc+0x184>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d203      	bcs.n	8003cfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003cf2:	4b14      	ldr	r3, [pc, #80]	; (8003d44 <pvPortMalloc+0x17c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a15      	ldr	r2, [pc, #84]	; (8003d4c <pvPortMalloc+0x184>)
 8003cf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <pvPortMalloc+0x178>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003d0e:	f7ff fa55 	bl	80031bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <pvPortMalloc+0x16a>
	__asm volatile
 8003d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d20:	f383 8811 	msr	BASEPRI, r3
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	60fb      	str	r3, [r7, #12]
}
 8003d2e:	bf00      	nop
 8003d30:	e7fe      	b.n	8003d30 <pvPortMalloc+0x168>
	return pvReturn;
 8003d32:	69fb      	ldr	r3, [r7, #28]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3728      	adds	r7, #40	; 0x28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000fbc 	.word	0x20000fbc
 8003d40:	20000fc8 	.word	0x20000fc8
 8003d44:	20000fc0 	.word	0x20000fc0
 8003d48:	20000fb4 	.word	0x20000fb4
 8003d4c:	20000fc4 	.word	0x20000fc4

08003d50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d048      	beq.n	8003df4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003d62:	2308      	movs	r3, #8
 8003d64:	425b      	negs	r3, r3
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4413      	add	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	4b21      	ldr	r3, [pc, #132]	; (8003dfc <vPortFree+0xac>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10a      	bne.n	8003d94 <vPortFree+0x44>
	__asm volatile
 8003d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	60fb      	str	r3, [r7, #12]
}
 8003d90:	bf00      	nop
 8003d92:	e7fe      	b.n	8003d92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00a      	beq.n	8003db2 <vPortFree+0x62>
	__asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	60bb      	str	r3, [r7, #8]
}
 8003dae:	bf00      	nop
 8003db0:	e7fe      	b.n	8003db0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <vPortFree+0xac>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d019      	beq.n	8003df4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d115      	bne.n	8003df4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <vPortFree+0xac>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	401a      	ands	r2, r3
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003dd8:	f7ff f9e2 	bl	80031a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <vPortFree+0xb0>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4413      	add	r3, r2
 8003de6:	4a06      	ldr	r2, [pc, #24]	; (8003e00 <vPortFree+0xb0>)
 8003de8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003dea:	6938      	ldr	r0, [r7, #16]
 8003dec:	f000 f86c 	bl	8003ec8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003df0:	f7ff f9e4 	bl	80031bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003df4:	bf00      	nop
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20000fc8 	.word	0x20000fc8
 8003e00:	20000fc0 	.word	0x20000fc0

08003e04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003e10:	4b27      	ldr	r3, [pc, #156]	; (8003eb0 <prvHeapInit+0xac>)
 8003e12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00c      	beq.n	8003e38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	3307      	adds	r3, #7
 8003e22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0307 	bic.w	r3, r3, #7
 8003e2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	4a1f      	ldr	r2, [pc, #124]	; (8003eb0 <prvHeapInit+0xac>)
 8003e34:	4413      	add	r3, r2
 8003e36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003e3c:	4a1d      	ldr	r2, [pc, #116]	; (8003eb4 <prvHeapInit+0xb0>)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003e42:	4b1c      	ldr	r3, [pc, #112]	; (8003eb4 <prvHeapInit+0xb0>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003e50:	2208      	movs	r2, #8
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0307 	bic.w	r3, r3, #7
 8003e5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4a15      	ldr	r2, [pc, #84]	; (8003eb8 <prvHeapInit+0xb4>)
 8003e64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003e66:	4b14      	ldr	r3, [pc, #80]	; (8003eb8 <prvHeapInit+0xb4>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003e6e:	4b12      	ldr	r3, [pc, #72]	; (8003eb8 <prvHeapInit+0xb4>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	1ad2      	subs	r2, r2, r3
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003e84:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <prvHeapInit+0xb4>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	4a0a      	ldr	r2, [pc, #40]	; (8003ebc <prvHeapInit+0xb8>)
 8003e92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	4a09      	ldr	r2, [pc, #36]	; (8003ec0 <prvHeapInit+0xbc>)
 8003e9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003e9c:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <prvHeapInit+0xc0>)
 8003e9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ea2:	601a      	str	r2, [r3, #0]
}
 8003ea4:	bf00      	nop
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	200003b4 	.word	0x200003b4
 8003eb4:	20000fb4 	.word	0x20000fb4
 8003eb8:	20000fbc 	.word	0x20000fbc
 8003ebc:	20000fc4 	.word	0x20000fc4
 8003ec0:	20000fc0 	.word	0x20000fc0
 8003ec4:	20000fc8 	.word	0x20000fc8

08003ec8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ed0:	4b28      	ldr	r3, [pc, #160]	; (8003f74 <prvInsertBlockIntoFreeList+0xac>)
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	e002      	b.n	8003edc <prvInsertBlockIntoFreeList+0x14>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d8f7      	bhi.n	8003ed6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d108      	bne.n	8003f0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	441a      	add	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	441a      	add	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d118      	bne.n	8003f50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	4b15      	ldr	r3, [pc, #84]	; (8003f78 <prvInsertBlockIntoFreeList+0xb0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d00d      	beq.n	8003f46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	441a      	add	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	e008      	b.n	8003f58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003f46:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <prvInsertBlockIntoFreeList+0xb0>)
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	e003      	b.n	8003f58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d002      	beq.n	8003f66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f66:	bf00      	nop
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	20000fb4 	.word	0x20000fb4
 8003f78:	20000fbc 	.word	0x20000fbc

08003f7c <__libc_init_array>:
 8003f7c:	b570      	push	{r4, r5, r6, lr}
 8003f7e:	4d0d      	ldr	r5, [pc, #52]	; (8003fb4 <__libc_init_array+0x38>)
 8003f80:	4c0d      	ldr	r4, [pc, #52]	; (8003fb8 <__libc_init_array+0x3c>)
 8003f82:	1b64      	subs	r4, r4, r5
 8003f84:	10a4      	asrs	r4, r4, #2
 8003f86:	2600      	movs	r6, #0
 8003f88:	42a6      	cmp	r6, r4
 8003f8a:	d109      	bne.n	8003fa0 <__libc_init_array+0x24>
 8003f8c:	4d0b      	ldr	r5, [pc, #44]	; (8003fbc <__libc_init_array+0x40>)
 8003f8e:	4c0c      	ldr	r4, [pc, #48]	; (8003fc0 <__libc_init_array+0x44>)
 8003f90:	f000 f820 	bl	8003fd4 <_init>
 8003f94:	1b64      	subs	r4, r4, r5
 8003f96:	10a4      	asrs	r4, r4, #2
 8003f98:	2600      	movs	r6, #0
 8003f9a:	42a6      	cmp	r6, r4
 8003f9c:	d105      	bne.n	8003faa <__libc_init_array+0x2e>
 8003f9e:	bd70      	pop	{r4, r5, r6, pc}
 8003fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fa4:	4798      	blx	r3
 8003fa6:	3601      	adds	r6, #1
 8003fa8:	e7ee      	b.n	8003f88 <__libc_init_array+0xc>
 8003faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fae:	4798      	blx	r3
 8003fb0:	3601      	adds	r6, #1
 8003fb2:	e7f2      	b.n	8003f9a <__libc_init_array+0x1e>
 8003fb4:	08004074 	.word	0x08004074
 8003fb8:	08004074 	.word	0x08004074
 8003fbc:	08004074 	.word	0x08004074
 8003fc0:	08004078 	.word	0x08004078

08003fc4 <memset>:
 8003fc4:	4402      	add	r2, r0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d100      	bne.n	8003fce <memset+0xa>
 8003fcc:	4770      	bx	lr
 8003fce:	f803 1b01 	strb.w	r1, [r3], #1
 8003fd2:	e7f9      	b.n	8003fc8 <memset+0x4>

08003fd4 <_init>:
 8003fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd6:	bf00      	nop
 8003fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fda:	bc08      	pop	{r3}
 8003fdc:	469e      	mov	lr, r3
 8003fde:	4770      	bx	lr

08003fe0 <_fini>:
 8003fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe2:	bf00      	nop
 8003fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe6:	bc08      	pop	{r3}
 8003fe8:	469e      	mov	lr, r3
 8003fea:	4770      	bx	lr
