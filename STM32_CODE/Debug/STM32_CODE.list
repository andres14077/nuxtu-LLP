
STM32_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  080090d8  080090d8  000190d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009304  08009304  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08009304  08009304  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009304  08009304  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009304  08009304  00019304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009308  08009308  00019308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800930c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000015c0  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200015d0  200015d0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d4e0  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b7d  00000000  00000000  0003d520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001680  00000000  00000000  000410a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014e8  00000000  00000000  00042720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c8f  00000000  00000000  00043c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bca6  00000000  00000000  00064897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7d32  00000000  00000000  0008053d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014826f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ff4  00000000  00000000  001482c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080090c0 	.word	0x080090c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080090c0 	.word	0x080090c0

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <vApplicationGetIdleTaskMemory+0x30>)
 8000a22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	2000002c 	.word	0x2000002c
 8000a3c:	20000080 	.word	0x20000080

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b5b0      	push	{r4, r5, r7, lr}
 8000a42:	b0c4      	sub	sp, #272	; 0x110
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a46:	f001 f85b 	bl	8001b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4a:	f000 f9b3 	bl	8000db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4e:	f000 fae7 	bl	8001020 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a52:	f000 fa83 	bl	8000f5c <MX_I2C1_Init>
  MX_ADC1_Init();
 8000a56:	f000 fa11 	bl	8000e7c <MX_ADC1_Init>
  MX_USB_PCD_Init();
 8000a5a:	f000 fabf 	bl	8000fdc <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  //preconfigure the ADC to change channels
	sConfig2.Rank = ADC_REGULAR_RANK_1;
 8000a5e:	4bae      	ldr	r3, [pc, #696]	; (8000d18 <main+0x2d8>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	605a      	str	r2, [r3, #4]
	sConfig2.SingleDiff = ADC_SINGLE_ENDED;
 8000a64:	4bac      	ldr	r3, [pc, #688]	; (8000d18 <main+0x2d8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
	sConfig2.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000a6a:	4bab      	ldr	r3, [pc, #684]	; (8000d18 <main+0x2d8>)
 8000a6c:	2205      	movs	r2, #5
 8000a6e:	609a      	str	r2, [r3, #8]
	sConfig2.OffsetNumber = ADC_OFFSET_NONE;
 8000a70:	4ba9      	ldr	r3, [pc, #676]	; (8000d18 <main+0x2d8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
	sConfig2.Offset = 0;
 8000a76:	4ba8      	ldr	r3, [pc, #672]	; (8000d18 <main+0x2d8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  // PCB data initialization
  pcb.PCBUniqueID=PCBuniqueID;
 8000a7c:	4ba7      	ldr	r3, [pc, #668]	; (8000d1c <main+0x2dc>)
 8000a7e:	2228      	movs	r2, #40	; 0x28
 8000a80:	801a      	strh	r2, [r3, #0]
  pcb.NumberOfSensors=Numberofsensors;
 8000a82:	4ba6      	ldr	r3, [pc, #664]	; (8000d1c <main+0x2dc>)
 8000a84:	2204      	movs	r2, #4
 8000a86:	709a      	strb	r2, [r3, #2]
  strcpy(pcb.ManufacturingDate,Manufacturingdate);
 8000a88:	4aa5      	ldr	r2, [pc, #660]	; (8000d20 <main+0x2e0>)
 8000a8a:	4ba6      	ldr	r3, [pc, #664]	; (8000d24 <main+0x2e4>)
 8000a8c:	cb03      	ldmia	r3!, {r0, r1}
 8000a8e:	6010      	str	r0, [r2, #0]
 8000a90:	6051      	str	r1, [r2, #4]
 8000a92:	8819      	ldrh	r1, [r3, #0]
 8000a94:	789b      	ldrb	r3, [r3, #2]
 8000a96:	8111      	strh	r1, [r2, #8]
 8000a98:	7293      	strb	r3, [r2, #10]
  pcb.PCBCapabilities=temperature_degC*8 + temperaturePCB_degC*4 + humidity_percent*2 + absolutePressure_kPa;
 8000a9a:	4ba0      	ldr	r3, [pc, #640]	; (8000d1c <main+0x2dc>)
 8000a9c:	220f      	movs	r2, #15
 8000a9e:	735a      	strb	r2, [r3, #13]

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MutexADC1 */
  osMutexDef(MutexADC1);
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  MutexADC1Handle = osMutexCreate(osMutex(MutexADC1));
 8000aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f005 fec2 	bl	800683a <osMutexCreate>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	4a9b      	ldr	r2, [pc, #620]	; (8000d28 <main+0x2e8>)
 8000aba:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of SemI2C */
  osSemaphoreDef(SemI2C);
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  SemI2CHandle = osSemaphoreCreate(osSemaphore(SemI2C), 1);
 8000ac8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000acc:	2101      	movs	r1, #1
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f005 ff50 	bl	8006974 <osSemaphoreCreate>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	4a95      	ldr	r2, [pc, #596]	; (8000d2c <main+0x2ec>)
 8000ad8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01_I2C */
  osThreadDef(Task01_I2C, StartTask01_I2C, osPriorityRealtime, 0, 128);
 8000ada:	4b95      	ldr	r3, [pc, #596]	; (8000d30 <main+0x2f0>)
 8000adc:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 8000ae0:	461d      	mov	r5, r3
 8000ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01_I2CHandle = osThreadCreate(osThread(Task01_I2C), NULL);
 8000aee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f005 fe40 	bl	800677a <osThreadCreate>
 8000afa:	4603      	mov	r3, r0
 8000afc:	4a8d      	ldr	r2, [pc, #564]	; (8000d34 <main+0x2f4>)
 8000afe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  /* definition and creation of Task02 */
#if(temperature_degC==1)
	osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 128);
 8000b00:	4b8d      	ldr	r3, [pc, #564]	; (8000d38 <main+0x2f8>)
 8000b02:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8000b06:	461d      	mov	r5, r3
 8000b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task02Handle = osThreadCreate(osThread(Task02), NULL);
 8000b14:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f005 fe2d 	bl	800677a <osThreadCreate>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4a86      	ldr	r2, [pc, #536]	; (8000d3c <main+0x2fc>)
 8000b24:	6013      	str	r3, [r2, #0]
#endif
  /* definition and creation of Task03 */
#if(temperaturePCB_degC==1)
	osThreadDef(Task03, StartTask03, osPriorityNormal, 0, 128);
 8000b26:	4b86      	ldr	r3, [pc, #536]	; (8000d40 <main+0x300>)
 8000b28:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000b2c:	461d      	mov	r5, r3
 8000b2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task03Handle = osThreadCreate(osThread(Task03), NULL);
 8000b3a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f005 fe1a 	bl	800677a <osThreadCreate>
 8000b46:	4603      	mov	r3, r0
 8000b48:	4a7e      	ldr	r2, [pc, #504]	; (8000d44 <main+0x304>)
 8000b4a:	6013      	str	r3, [r2, #0]
#endif
  /* definition and creation of Task04 */
#if(humidity_percent==1)
	osThreadDef(Task04, StartTask04, osPriorityNormal, 0, 128);
 8000b4c:	4b7e      	ldr	r3, [pc, #504]	; (8000d48 <main+0x308>)
 8000b4e:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000b52:	461d      	mov	r5, r3
 8000b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task04Handle = osThreadCreate(osThread(Task04), NULL);
 8000b60:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f005 fe07 	bl	800677a <osThreadCreate>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	4a77      	ldr	r2, [pc, #476]	; (8000d4c <main+0x30c>)
 8000b70:	6013      	str	r3, [r2, #0]
#endif
  /* definition and creation of Task05 */
#if(absolutePressure_kPa==1)
	osThreadDef(Task05, StartTask05, osPriorityNormal, 0, 128);
 8000b72:	4b77      	ldr	r3, [pc, #476]	; (8000d50 <main+0x310>)
 8000b74:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000b78:	461d      	mov	r5, r3
 8000b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task05Handle = osThreadCreate(osThread(Task05), NULL);
 8000b86:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f005 fdf4 	bl	800677a <osThreadCreate>
 8000b92:	4603      	mov	r3, r0
 8000b94:	4a6f      	ldr	r2, [pc, #444]	; (8000d54 <main+0x314>)
 8000b96:	6013      	str	r3, [r2, #0]
#endif


  /* definition and creation of TaskN01 */
  //Sensor initialization
  	strcpy(MatrizSensor[0].Sensor_name,Sensor01_name);
 8000b98:	4b6f      	ldr	r3, [pc, #444]	; (8000d58 <main+0x318>)
 8000b9a:	4a70      	ldr	r2, [pc, #448]	; (8000d5c <main+0x31c>)
 8000b9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ba0:	6018      	str	r0, [r3, #0]
 8000ba2:	3304      	adds	r3, #4
 8000ba4:	7019      	strb	r1, [r3, #0]
  	strcpy(MatrizSensor[0].Sensor_type,Sensor01_type);
 8000ba6:	4b6e      	ldr	r3, [pc, #440]	; (8000d60 <main+0x320>)
 8000ba8:	4a6e      	ldr	r2, [pc, #440]	; (8000d64 <main+0x324>)
 8000baa:	6810      	ldr	r0, [r2, #0]
 8000bac:	6018      	str	r0, [r3, #0]
 8000bae:	7912      	ldrb	r2, [r2, #4]
 8000bb0:	711a      	strb	r2, [r3, #4]
  	strcpy(MatrizSensor[0].Main_gas,Sensor01_Main_gas);
 8000bb2:	4b6d      	ldr	r3, [pc, #436]	; (8000d68 <main+0x328>)
 8000bb4:	4a6d      	ldr	r2, [pc, #436]	; (8000d6c <main+0x32c>)
 8000bb6:	6810      	ldr	r0, [r2, #0]
 8000bb8:	6018      	str	r0, [r3, #0]
 8000bba:	8891      	ldrh	r1, [r2, #4]
 8000bbc:	7992      	ldrb	r2, [r2, #6]
 8000bbe:	8099      	strh	r1, [r3, #4]
 8000bc0:	719a      	strb	r2, [r3, #6]
  	MatrizSensor[0].Response_time=Sensor01_Response_time;
 8000bc2:	4b65      	ldr	r3, [pc, #404]	; (8000d58 <main+0x318>)
 8000bc4:	220a      	movs	r2, #10
 8000bc6:	85da      	strh	r2, [r3, #46]	; 0x2e
  	MatrizSensor[0].channel=Sensor01_ADC_Channel;
 8000bc8:	4b63      	ldr	r3, [pc, #396]	; (8000d58 <main+0x318>)
 8000bca:	2206      	movs	r2, #6
 8000bcc:	635a      	str	r2, [r3, #52]	; 0x34
	osThreadDef(TaskN01, StartTaskN, osPriorityNormal, 0, 128);
 8000bce:	4b68      	ldr	r3, [pc, #416]	; (8000d70 <main+0x330>)
 8000bd0:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000bd4:	461d      	mov	r5, r3
 8000bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskN01Handle = osThreadCreate(osThread(TaskN01), (void*) 0);
 8000be2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f005 fdc6 	bl	800677a <osThreadCreate>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	4a60      	ldr	r2, [pc, #384]	; (8000d74 <main+0x334>)
 8000bf2:	6013      	str	r3, [r2, #0]
  /* definition and creation of TaskN02 */
#if(Numberofsensors>1)
	//Sensor initialization
	strcpy(MatrizSensor[1].Sensor_name,Sensor02_name);
 8000bf4:	4b60      	ldr	r3, [pc, #384]	; (8000d78 <main+0x338>)
 8000bf6:	4a59      	ldr	r2, [pc, #356]	; (8000d5c <main+0x31c>)
 8000bf8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bfc:	6018      	str	r0, [r3, #0]
 8000bfe:	3304      	adds	r3, #4
 8000c00:	7019      	strb	r1, [r3, #0]
	strcpy(MatrizSensor[1].Sensor_type,Sensor02_type);
 8000c02:	4b5e      	ldr	r3, [pc, #376]	; (8000d7c <main+0x33c>)
 8000c04:	4a57      	ldr	r2, [pc, #348]	; (8000d64 <main+0x324>)
 8000c06:	6810      	ldr	r0, [r2, #0]
 8000c08:	6018      	str	r0, [r3, #0]
 8000c0a:	7912      	ldrb	r2, [r2, #4]
 8000c0c:	711a      	strb	r2, [r3, #4]
	strcpy(MatrizSensor[1].Main_gas,Sensor02_Main_gas);
 8000c0e:	4b5c      	ldr	r3, [pc, #368]	; (8000d80 <main+0x340>)
 8000c10:	4a56      	ldr	r2, [pc, #344]	; (8000d6c <main+0x32c>)
 8000c12:	6810      	ldr	r0, [r2, #0]
 8000c14:	6018      	str	r0, [r3, #0]
 8000c16:	8891      	ldrh	r1, [r2, #4]
 8000c18:	7992      	ldrb	r2, [r2, #6]
 8000c1a:	8099      	strh	r1, [r3, #4]
 8000c1c:	719a      	strb	r2, [r3, #6]
	MatrizSensor[1].Response_time=Sensor02_Response_time;
 8000c1e:	4b4e      	ldr	r3, [pc, #312]	; (8000d58 <main+0x318>)
 8000c20:	220a      	movs	r2, #10
 8000c22:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	MatrizSensor[1].channel=Sensor02_ADC_Channel;
 8000c26:	4b4c      	ldr	r3, [pc, #304]	; (8000d58 <main+0x318>)
 8000c28:	2206      	movs	r2, #6
 8000c2a:	66da      	str	r2, [r3, #108]	; 0x6c
	osThreadDef(TaskN02, StartTaskN, osPriorityNormal, 0, 128);
 8000c2c:	4b55      	ldr	r3, [pc, #340]	; (8000d84 <main+0x344>)
 8000c2e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000c32:	461d      	mov	r5, r3
 8000c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskN02Handle = osThreadCreate(osThread(TaskN02), (void*) 1);
 8000c40:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c44:	2101      	movs	r1, #1
 8000c46:	4618      	mov	r0, r3
 8000c48:	f005 fd97 	bl	800677a <osThreadCreate>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	4a4e      	ldr	r2, [pc, #312]	; (8000d88 <main+0x348>)
 8000c50:	6013      	str	r3, [r2, #0]
#endif
  /* definition and creation of TaskN03 */
#if(Numberofsensors>2)
  	//Sensor initialization
  	strcpy(MatrizSensor[2].Sensor_name,Sensor03_name);
 8000c52:	4b4e      	ldr	r3, [pc, #312]	; (8000d8c <main+0x34c>)
 8000c54:	4a41      	ldr	r2, [pc, #260]	; (8000d5c <main+0x31c>)
 8000c56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c5a:	6018      	str	r0, [r3, #0]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	7019      	strb	r1, [r3, #0]
  	strcpy(MatrizSensor[2].Sensor_type,Sensor03_type);
 8000c60:	4b4b      	ldr	r3, [pc, #300]	; (8000d90 <main+0x350>)
 8000c62:	4a40      	ldr	r2, [pc, #256]	; (8000d64 <main+0x324>)
 8000c64:	6810      	ldr	r0, [r2, #0]
 8000c66:	6018      	str	r0, [r3, #0]
 8000c68:	7912      	ldrb	r2, [r2, #4]
 8000c6a:	711a      	strb	r2, [r3, #4]
  	strcpy(MatrizSensor[2].Main_gas,Sensor03_Main_gas);
 8000c6c:	4b49      	ldr	r3, [pc, #292]	; (8000d94 <main+0x354>)
 8000c6e:	4a3f      	ldr	r2, [pc, #252]	; (8000d6c <main+0x32c>)
 8000c70:	6810      	ldr	r0, [r2, #0]
 8000c72:	6018      	str	r0, [r3, #0]
 8000c74:	8891      	ldrh	r1, [r2, #4]
 8000c76:	7992      	ldrb	r2, [r2, #6]
 8000c78:	8099      	strh	r1, [r3, #4]
 8000c7a:	719a      	strb	r2, [r3, #6]
  	MatrizSensor[2].Response_time=Sensor03_Response_time;
 8000c7c:	4b36      	ldr	r3, [pc, #216]	; (8000d58 <main+0x318>)
 8000c7e:	220a      	movs	r2, #10
 8000c80:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
  	MatrizSensor[2].channel=Sensor03_ADC_Channel;
 8000c84:	4b34      	ldr	r3, [pc, #208]	; (8000d58 <main+0x318>)
 8000c86:	2206      	movs	r2, #6
 8000c88:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  	osThreadDef(TaskN03, StartTaskN, osPriorityNormal, 0, 128);
 8000c8c:	4b42      	ldr	r3, [pc, #264]	; (8000d98 <main+0x358>)
 8000c8e:	f107 0420 	add.w	r4, r7, #32
 8000c92:	461d      	mov	r5, r3
 8000c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	TaskN03Handle = osThreadCreate(osThread(TaskN03), (void*) 2);
 8000ca0:	f107 0320 	add.w	r3, r7, #32
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f005 fd67 	bl	800677a <osThreadCreate>
 8000cac:	4603      	mov	r3, r0
 8000cae:	4a3b      	ldr	r2, [pc, #236]	; (8000d9c <main+0x35c>)
 8000cb0:	6013      	str	r3, [r2, #0]
#endif
  /* definition and creation of TaskN04 */
#if(Numberofsensors>3)
  	//Sensor initialization
  	strcpy(MatrizSensor[3].Sensor_name,Sensor04_name);
 8000cb2:	4b3b      	ldr	r3, [pc, #236]	; (8000da0 <main+0x360>)
 8000cb4:	4a29      	ldr	r2, [pc, #164]	; (8000d5c <main+0x31c>)
 8000cb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cba:	6018      	str	r0, [r3, #0]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	7019      	strb	r1, [r3, #0]
  	strcpy(MatrizSensor[3].Sensor_type,Sensor04_type);
 8000cc0:	4b38      	ldr	r3, [pc, #224]	; (8000da4 <main+0x364>)
 8000cc2:	4a28      	ldr	r2, [pc, #160]	; (8000d64 <main+0x324>)
 8000cc4:	6810      	ldr	r0, [r2, #0]
 8000cc6:	6018      	str	r0, [r3, #0]
 8000cc8:	7912      	ldrb	r2, [r2, #4]
 8000cca:	711a      	strb	r2, [r3, #4]
  	strcpy(MatrizSensor[3].Main_gas,Sensor04_Main_gas);
 8000ccc:	4b36      	ldr	r3, [pc, #216]	; (8000da8 <main+0x368>)
 8000cce:	4a27      	ldr	r2, [pc, #156]	; (8000d6c <main+0x32c>)
 8000cd0:	6810      	ldr	r0, [r2, #0]
 8000cd2:	6018      	str	r0, [r3, #0]
 8000cd4:	8891      	ldrh	r1, [r2, #4]
 8000cd6:	7992      	ldrb	r2, [r2, #6]
 8000cd8:	8099      	strh	r1, [r3, #4]
 8000cda:	719a      	strb	r2, [r3, #6]
  	MatrizSensor[3].Response_time=Sensor04_Response_time;
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <main+0x318>)
 8000cde:	220a      	movs	r2, #10
 8000ce0:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
  	MatrizSensor[3].channel=Sensor04_ADC_Channel;
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <main+0x318>)
 8000ce6:	2206      	movs	r2, #6
 8000ce8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  	osThreadDef(TaskN04, StartTaskN, osPriorityNormal, 0, 128);
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	4a2f      	ldr	r2, [pc, #188]	; (8000dac <main+0x36c>)
 8000cf0:	461c      	mov	r4, r3
 8000cf2:	4615      	mov	r5, r2
 8000cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cfc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	TaskN04Handle = osThreadCreate(osThread(TaskN04), (void*) 3);
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2103      	movs	r1, #3
 8000d04:	4618      	mov	r0, r3
 8000d06:	f005 fd38 	bl	800677a <osThreadCreate>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4a28      	ldr	r2, [pc, #160]	; (8000db0 <main+0x370>)
 8000d0e:	6013      	str	r3, [r2, #0]
#endif

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d10:	f005 fd2c 	bl	800676c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <main+0x2d4>
 8000d16:	bf00      	nop
 8000d18:	20000280 	.word	0x20000280
 8000d1c:	20001240 	.word	0x20001240
 8000d20:	20001243 	.word	0x20001243
 8000d24:	08009124 	.word	0x08009124
 8000d28:	20000fe8 	.word	0x20000fe8
 8000d2c:	20001080 	.word	0x20001080
 8000d30:	08009148 	.word	0x08009148
 8000d34:	20001118 	.word	0x20001118
 8000d38:	08009164 	.word	0x08009164
 8000d3c:	20000fe4 	.word	0x20000fe4
 8000d40:	08009180 	.word	0x08009180
 8000d44:	200011fc 	.word	0x200011fc
 8000d48:	0800919c 	.word	0x0800919c
 8000d4c:	20001084 	.word	0x20001084
 8000d50:	080091b8 	.word	0x080091b8
 8000d54:	20001204 	.word	0x20001204
 8000d58:	2000111c 	.word	0x2000111c
 8000d5c:	08009130 	.word	0x08009130
 8000d60:	20001127 	.word	0x20001127
 8000d64:	08009138 	.word	0x08009138
 8000d68:	20001135 	.word	0x20001135
 8000d6c:	08009140 	.word	0x08009140
 8000d70:	080091d4 	.word	0x080091d4
 8000d74:	2000102c 	.word	0x2000102c
 8000d78:	20001154 	.word	0x20001154
 8000d7c:	2000115f 	.word	0x2000115f
 8000d80:	2000116d 	.word	0x2000116d
 8000d84:	080091f0 	.word	0x080091f0
 8000d88:	20001088 	.word	0x20001088
 8000d8c:	2000118c 	.word	0x2000118c
 8000d90:	20001197 	.word	0x20001197
 8000d94:	200011a5 	.word	0x200011a5
 8000d98:	0800920c 	.word	0x0800920c
 8000d9c:	20001250 	.word	0x20001250
 8000da0:	200011c4 	.word	0x200011c4
 8000da4:	200011cf 	.word	0x200011cf
 8000da8:	200011dd 	.word	0x200011dd
 8000dac:	08009228 	.word	0x08009228
 8000db0:	20001200 	.word	0x20001200

08000db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b09e      	sub	sp, #120	; 0x78
 8000db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dbe:	2228      	movs	r2, #40	; 0x28
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f008 f974 	bl	80090b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd8:	463b      	mov	r3, r7
 8000dda:	223c      	movs	r2, #60	; 0x3c
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f008 f966 	bl	80090b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000de4:	2303      	movs	r3, #3
 8000de6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000de8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000dec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df2:	2301      	movs	r3, #1
 8000df4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df6:	2310      	movs	r3, #16
 8000df8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e02:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000e04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e08:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f003 fe86 	bl	8004b20 <HAL_RCC_OscConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e1a:	f000 fc79 	bl	8001710 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1e:	230f      	movs	r3, #15
 8000e20:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e22:	2302      	movs	r3, #2
 8000e24:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e38:	2101      	movs	r1, #1
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f004 fd78 	bl	8005930 <HAL_RCC_ClockConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e46:	f000 fc63 	bl	8001710 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <SystemClock_Config+0xc4>)
 8000e4c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e5c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4618      	mov	r0, r3
 8000e62:	f004 ffab 	bl	8005dbc <HAL_RCCEx_PeriphCLKConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000e6c:	f000 fc50 	bl	8001710 <Error_Handler>
  }
}
 8000e70:	bf00      	nop
 8000e72:	3778      	adds	r7, #120	; 0x78
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	000200a0 	.word	0x000200a0

08000e7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
 8000e9c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e9e:	4b2e      	ldr	r3, [pc, #184]	; (8000f58 <MX_ADC1_Init+0xdc>)
 8000ea0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ea4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ea6:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <MX_ADC1_Init+0xdc>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eac:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <MX_ADC1_Init+0xdc>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eb2:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <MX_ADC1_Init+0xdc>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eb8:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <MX_ADC1_Init+0xdc>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ebe:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <MX_ADC1_Init+0xdc>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ec6:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <MX_ADC1_Init+0xdc>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ecc:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <MX_ADC1_Init+0xdc>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed2:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <MX_ADC1_Init+0xdc>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <MX_ADC1_Init+0xdc>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ede:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <MX_ADC1_Init+0xdc>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <MX_ADC1_Init+0xdc>)
 8000ee8:	2204      	movs	r2, #4
 8000eea:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <MX_ADC1_Init+0xdc>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <MX_ADC1_Init+0xdc>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ef8:	4817      	ldr	r0, [pc, #92]	; (8000f58 <MX_ADC1_Init+0xdc>)
 8000efa:	f000 fe37 	bl	8001b6c <HAL_ADC_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000f04:	f000 fc04 	bl	8001710 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	4811      	ldr	r0, [pc, #68]	; (8000f58 <MX_ADC1_Init+0xdc>)
 8000f14:	f001 fd52 	bl	80029bc <HAL_ADCEx_MultiModeConfigChannel>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000f1e:	f000 fbf7 	bl	8001710 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f26:	2301      	movs	r3, #1
 8000f28:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000f2e:	2305      	movs	r3, #5
 8000f30:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4806      	ldr	r0, [pc, #24]	; (8000f58 <MX_ADC1_Init+0xdc>)
 8000f40:	f001 fa50 	bl	80023e4 <HAL_ADC_ConfigChannel>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000f4a:	f000 fbe1 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	3728      	adds	r7, #40	; 0x28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200010c4 	.word	0x200010c4

08000f5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f62:	4a1c      	ldr	r2, [pc, #112]	; (8000fd4 <MX_I2C1_Init+0x78>)
 8000f64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000f66:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f68:	4a1b      	ldr	r2, [pc, #108]	; (8000fd8 <MX_I2C1_Init+0x7c>)
 8000f6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 2;
 8000f6c:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f6e:	2202      	movs	r2, #2
 8000f70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f96:	480e      	ldr	r0, [pc, #56]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f98:	f002 fa42 	bl	8003420 <HAL_I2C_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fa2:	f000 fbb5 	bl	8001710 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000faa:	f003 fc43 	bl	8004834 <HAL_I2CEx_ConfigAnalogFilter>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fb4:	f000 fbac 	bl	8001710 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000fbc:	f003 fc85 	bl	80048ca <HAL_I2CEx_ConfigDigitalFilter>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fc6:	f000 fba3 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20001034 	.word	0x20001034
 8000fd4:	40005400 	.word	0x40005400
 8000fd8:	2000090e 	.word	0x2000090e

08000fdc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <MX_USB_PCD_Init+0x3c>)
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <MX_USB_PCD_Init+0x40>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_USB_PCD_Init+0x3c>)
 8000fe8:	2208      	movs	r2, #8
 8000fea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <MX_USB_PCD_Init+0x3c>)
 8000fee:	2202      	movs	r2, #2
 8000ff0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_USB_PCD_Init+0x3c>)
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <MX_USB_PCD_Init+0x3c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_USB_PCD_Init+0x3c>)
 8001000:	2200      	movs	r2, #0
 8001002:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <MX_USB_PCD_Init+0x3c>)
 8001006:	f003 fcac 	bl	8004962 <HAL_PCD_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001010:	f000 fb7e 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20001290 	.word	0x20001290
 800101c:	40005c00 	.word	0x40005c00

08001020 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001036:	4b40      	ldr	r3, [pc, #256]	; (8001138 <MX_GPIO_Init+0x118>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	4a3f      	ldr	r2, [pc, #252]	; (8001138 <MX_GPIO_Init+0x118>)
 800103c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001040:	6153      	str	r3, [r2, #20]
 8001042:	4b3d      	ldr	r3, [pc, #244]	; (8001138 <MX_GPIO_Init+0x118>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	4b3a      	ldr	r3, [pc, #232]	; (8001138 <MX_GPIO_Init+0x118>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	4a39      	ldr	r2, [pc, #228]	; (8001138 <MX_GPIO_Init+0x118>)
 8001054:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001058:	6153      	str	r3, [r2, #20]
 800105a:	4b37      	ldr	r3, [pc, #220]	; (8001138 <MX_GPIO_Init+0x118>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001066:	4b34      	ldr	r3, [pc, #208]	; (8001138 <MX_GPIO_Init+0x118>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	4a33      	ldr	r2, [pc, #204]	; (8001138 <MX_GPIO_Init+0x118>)
 800106c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001070:	6153      	str	r3, [r2, #20]
 8001072:	4b31      	ldr	r3, [pc, #196]	; (8001138 <MX_GPIO_Init+0x118>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <MX_GPIO_Init+0x118>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	4a2d      	ldr	r2, [pc, #180]	; (8001138 <MX_GPIO_Init+0x118>)
 8001084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001088:	6153      	str	r3, [r2, #20]
 800108a:	4b2b      	ldr	r3, [pc, #172]	; (8001138 <MX_GPIO_Init+0x118>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	4b28      	ldr	r3, [pc, #160]	; (8001138 <MX_GPIO_Init+0x118>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	4a27      	ldr	r2, [pc, #156]	; (8001138 <MX_GPIO_Init+0x118>)
 800109c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a0:	6153      	str	r3, [r2, #20]
 80010a2:	4b25      	ldr	r3, [pc, #148]	; (8001138 <MX_GPIO_Init+0x118>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80010ae:	2200      	movs	r2, #0
 80010b0:	f64f 7108 	movw	r1, #65288	; 0xff08
 80010b4:	4821      	ldr	r0, [pc, #132]	; (800113c <MX_GPIO_Init+0x11c>)
 80010b6:	f002 f99b 	bl	80033f0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80010ba:	2337      	movs	r3, #55	; 0x37
 80010bc:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010be:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80010c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	481b      	ldr	r0, [pc, #108]	; (800113c <MX_GPIO_Init+0x11c>)
 80010d0:	f002 f814 	bl	80030fc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80010d4:	f64f 7308 	movw	r3, #65288	; 0xff08
 80010d8:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	4813      	ldr	r0, [pc, #76]	; (800113c <MX_GPIO_Init+0x11c>)
 80010ee:	f002 f805 	bl	80030fc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010f2:	2301      	movs	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001108:	f001 fff8 	bl	80030fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800110c:	23e0      	movs	r3, #224	; 0xe0
 800110e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800111c:	2305      	movs	r3, #5
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4619      	mov	r1, r3
 8001126:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112a:	f001 ffe7 	bl	80030fc <HAL_GPIO_Init>

}
 800112e:	bf00      	nop
 8001130:	3728      	adds	r7, #40	; 0x28
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40021000 	.word	0x40021000
 800113c:	48001000 	.word	0x48001000

08001140 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  //Sensor initialization
	strcpy(ExternalTemperatureSensor.Sensor_name,"SHT31-ARP-B");
 8001148:	4b31      	ldr	r3, [pc, #196]	; (8001210 <StartTask02+0xd0>)
 800114a:	4a32      	ldr	r2, [pc, #200]	; (8001214 <StartTask02+0xd4>)
 800114c:	ca07      	ldmia	r2, {r0, r1, r2}
 800114e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcpy(ExternalTemperatureSensor.Sensor_type,"Temperature");
 8001152:	4a31      	ldr	r2, [pc, #196]	; (8001218 <StartTask02+0xd8>)
 8001154:	4b31      	ldr	r3, [pc, #196]	; (800121c <StartTask02+0xdc>)
 8001156:	4614      	mov	r4, r2
 8001158:	cb07      	ldmia	r3!, {r0, r1, r2}
 800115a:	6020      	str	r0, [r4, #0]
 800115c:	6061      	str	r1, [r4, #4]
 800115e:	60a2      	str	r2, [r4, #8]
	strcpy(ExternalTemperatureSensor.Main_gas,"....");
 8001160:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <StartTask02+0xe0>)
 8001162:	4a30      	ldr	r2, [pc, #192]	; (8001224 <StartTask02+0xe4>)
 8001164:	6810      	ldr	r0, [r2, #0]
 8001166:	6018      	str	r0, [r3, #0]
 8001168:	7912      	ldrb	r2, [r2, #4]
 800116a:	711a      	strb	r2, [r3, #4]
	ExternalTemperatureSensor.Response_time=20;
 800116c:	4b28      	ldr	r3, [pc, #160]	; (8001210 <StartTask02+0xd0>)
 800116e:	2214      	movs	r2, #20
 8001170:	85da      	strh	r2, [r3, #46]	; 0x2e
  /* Infinite loop */
  for(;;)
  {
	/*use of the ADC with mutex, this so that only one task can use the ADC at a time*/
	osMutexWait(MutexADC1Handle, 100);
 8001172:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <StartTask02+0xe8>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2164      	movs	r1, #100	; 0x64
 8001178:	4618      	mov	r0, r3
 800117a:	f005 fb77 	bl	800686c <osMutexWait>
	sConfig2.Channel=ADC_CHANNEL_2;
 800117e:	4b2b      	ldr	r3, [pc, #172]	; (800122c <StartTask02+0xec>)
 8001180:	2202      	movs	r2, #2
 8001182:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig2) != HAL_OK){Error_Handler();}
 8001184:	4929      	ldr	r1, [pc, #164]	; (800122c <StartTask02+0xec>)
 8001186:	482a      	ldr	r0, [pc, #168]	; (8001230 <StartTask02+0xf0>)
 8001188:	f001 f92c 	bl	80023e4 <HAL_ADC_ConfigChannel>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <StartTask02+0x56>
 8001192:	f000 fabd 	bl	8001710 <Error_Handler>
	// Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 8001196:	4826      	ldr	r0, [pc, #152]	; (8001230 <StartTask02+0xf0>)
 8001198:	f000 fec8 	bl	8001f2c <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc1, 1);
 800119c:	2101      	movs	r1, #1
 800119e:	4824      	ldr	r0, [pc, #144]	; (8001230 <StartTask02+0xf0>)
 80011a0:	f001 f810 	bl	80021c4 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result
	uint32_t Vadc=HAL_ADC_GetValue(&hadc1);
 80011a4:	4822      	ldr	r0, [pc, #136]	; (8001230 <StartTask02+0xf0>)
 80011a6:	f001 f90f 	bl	80023c8 <HAL_ADC_GetValue>
 80011aa:	60f8      	str	r0, [r7, #12]
	// stop The ADC
	HAL_ADC_Stop(&hadc1);
 80011ac:	4820      	ldr	r0, [pc, #128]	; (8001230 <StartTask02+0xf0>)
 80011ae:	f000 ffd3 	bl	8002158 <HAL_ADC_Stop>
	osMutexRelease(MutexADC1Handle);
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <StartTask02+0xe8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f005 fba6 	bl	8006908 <osMutexRelease>
	//The temperature formula is T=-66.875 + 218.75*Vt/Vd
	//where Vd=3.3, Vt=adc*3.3/2^12
	//The temperature formula is T=-66.875 + 218.75*Vadc/4096
	ExternalTemperatureSensor.Data=-66.875+(53.40576172e-3*Vadc);
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	f7ff f949 	bl	8000454 <__aeabi_ui2d>
 80011c2:	a30f      	add	r3, pc, #60	; (adr r3, 8001200 <StartTask02+0xc0>)
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	f7ff f9be 	bl	8000548 <__aeabi_dmul>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	a30c      	add	r3, pc, #48	; (adr r3, 8001208 <StartTask02+0xc8>)
 80011d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011da:	f7fe fffd 	bl	80001d8 <__aeabi_dsub>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f7ff fbc1 	bl	800096c <__aeabi_d2f>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4a08      	ldr	r2, [pc, #32]	; (8001210 <StartTask02+0xd0>)
 80011ee:	6313      	str	r3, [r2, #48]	; 0x30
    osDelay(ExternalTemperatureSensor.Response_time);
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <StartTask02+0xd0>)
 80011f2:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80011f6:	4618      	mov	r0, r3
 80011f8:	f005 fb0b 	bl	8006812 <osDelay>
  {
 80011fc:	e7b9      	b.n	8001172 <StartTask02+0x32>
 80011fe:	bf00      	nop
 8001200:	0002bfb0 	.word	0x0002bfb0
 8001204:	3fab5800 	.word	0x3fab5800
 8001208:	00000000 	.word	0x00000000
 800120c:	4050b800 	.word	0x4050b800
 8001210:	20001258 	.word	0x20001258
 8001214:	08009244 	.word	0x08009244
 8001218:	20001263 	.word	0x20001263
 800121c:	08009250 	.word	0x08009250
 8001220:	20001271 	.word	0x20001271
 8001224:	0800925c 	.word	0x0800925c
 8001228:	20000fe8 	.word	0x20000fe8
 800122c:	20000280 	.word	0x20000280
 8001230:	200010c4 	.word	0x200010c4
 8001234:	00000000 	.word	0x00000000

08001238 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001238:	b5b0      	push	{r4, r5, r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  //Sensor initialization
	strcpy(InternalTemperatureSensor.Sensor_name,"Internal");
 8001240:	4b3f      	ldr	r3, [pc, #252]	; (8001340 <StartTask03+0x108>)
 8001242:	4a40      	ldr	r2, [pc, #256]	; (8001344 <StartTask03+0x10c>)
 8001244:	ca07      	ldmia	r2, {r0, r1, r2}
 8001246:	c303      	stmia	r3!, {r0, r1}
 8001248:	701a      	strb	r2, [r3, #0]
	strcpy(InternalTemperatureSensor.Sensor_type,"Micro-controller temperature ");
 800124a:	4a3f      	ldr	r2, [pc, #252]	; (8001348 <StartTask03+0x110>)
 800124c:	4b3f      	ldr	r3, [pc, #252]	; (800134c <StartTask03+0x114>)
 800124e:	4615      	mov	r5, r2
 8001250:	461c      	mov	r4, r3
 8001252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001254:	6028      	str	r0, [r5, #0]
 8001256:	6069      	str	r1, [r5, #4]
 8001258:	60aa      	str	r2, [r5, #8]
 800125a:	60eb      	str	r3, [r5, #12]
 800125c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800125e:	6128      	str	r0, [r5, #16]
 8001260:	6169      	str	r1, [r5, #20]
 8001262:	61aa      	str	r2, [r5, #24]
 8001264:	8823      	ldrh	r3, [r4, #0]
 8001266:	83ab      	strh	r3, [r5, #28]
	strcpy(InternalTemperatureSensor.Main_gas,"....");
 8001268:	4b39      	ldr	r3, [pc, #228]	; (8001350 <StartTask03+0x118>)
 800126a:	4a3a      	ldr	r2, [pc, #232]	; (8001354 <StartTask03+0x11c>)
 800126c:	6810      	ldr	r0, [r2, #0]
 800126e:	6018      	str	r0, [r3, #0]
 8001270:	7912      	ldrb	r2, [r2, #4]
 8001272:	711a      	strb	r2, [r3, #4]
	InternalTemperatureSensor.Response_time=10;
 8001274:	4b32      	ldr	r3, [pc, #200]	; (8001340 <StartTask03+0x108>)
 8001276:	220a      	movs	r2, #10
 8001278:	85da      	strh	r2, [r3, #46]	; 0x2e
  /* Infinite loop */
  for(;;)
  {
    /*use of the ADC with mutex, this so that only one task can use the ADC at a time*/
	osMutexWait(MutexADC1Handle, 100);
 800127a:	4b37      	ldr	r3, [pc, #220]	; (8001358 <StartTask03+0x120>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2164      	movs	r1, #100	; 0x64
 8001280:	4618      	mov	r0, r3
 8001282:	f005 faf3 	bl	800686c <osMutexWait>
	sConfig2.Channel=ADC_CHANNEL_TEMPSENSOR;
 8001286:	4b35      	ldr	r3, [pc, #212]	; (800135c <StartTask03+0x124>)
 8001288:	2210      	movs	r2, #16
 800128a:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig2) != HAL_OK){Error_Handler();}
 800128c:	4933      	ldr	r1, [pc, #204]	; (800135c <StartTask03+0x124>)
 800128e:	4834      	ldr	r0, [pc, #208]	; (8001360 <StartTask03+0x128>)
 8001290:	f001 f8a8 	bl	80023e4 <HAL_ADC_ConfigChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <StartTask03+0x66>
 800129a:	f000 fa39 	bl	8001710 <Error_Handler>
	// Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 800129e:	4830      	ldr	r0, [pc, #192]	; (8001360 <StartTask03+0x128>)
 80012a0:	f000 fe44 	bl	8001f2c <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc1, 1);
 80012a4:	2101      	movs	r1, #1
 80012a6:	482e      	ldr	r0, [pc, #184]	; (8001360 <StartTask03+0x128>)
 80012a8:	f000 ff8c 	bl	80021c4 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result
	uint32_t Vadc=HAL_ADC_GetValue(&hadc1);
 80012ac:	482c      	ldr	r0, [pc, #176]	; (8001360 <StartTask03+0x128>)
 80012ae:	f001 f88b 	bl	80023c8 <HAL_ADC_GetValue>
 80012b2:	60f8      	str	r0, [r7, #12]
	// stop The ADC
	HAL_ADC_Stop(&hadc1);
 80012b4:	482a      	ldr	r0, [pc, #168]	; (8001360 <StartTask03+0x128>)
 80012b6:	f000 ff4f 	bl	8002158 <HAL_ADC_Stop>
	osMutexRelease(MutexADC1Handle);
 80012ba:	4b27      	ldr	r3, [pc, #156]	; (8001358 <StartTask03+0x120>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f005 fb22 	bl	8006908 <osMutexRelease>
	//The formula is Temperature (in °C) = {(V25 – Vadc) / Avg_Slope} + 25
	//where V25=1.43, Avg_Slope=4.3, Vadc=adc*3.3/4096
	InternalTemperatureSensor.Data=((1.43 - (805.6640625e-6 * Vadc)) / 4.3) + 25;
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f7ff f8c5 	bl	8000454 <__aeabi_ui2d>
 80012ca:	a317      	add	r3, pc, #92	; (adr r3, 8001328 <StartTask03+0xf0>)
 80012cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d0:	f7ff f93a 	bl	8000548 <__aeabi_dmul>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	a115      	add	r1, pc, #84	; (adr r1, 8001330 <StartTask03+0xf8>)
 80012da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012de:	f7fe ff7b 	bl	80001d8 <__aeabi_dsub>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	a313      	add	r3, pc, #76	; (adr r3, 8001338 <StartTask03+0x100>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	f7ff fa54 	bl	800079c <__aeabi_ddiv>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <StartTask03+0x12c>)
 8001302:	f7fe ff6b 	bl	80001dc <__adddf3>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	f7ff fb2d 	bl	800096c <__aeabi_d2f>
 8001312:	4603      	mov	r3, r0
 8001314:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <StartTask03+0x108>)
 8001316:	6313      	str	r3, [r2, #48]	; 0x30
    osDelay(InternalTemperatureSensor.Response_time);
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <StartTask03+0x108>)
 800131a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800131e:	4618      	mov	r0, r3
 8001320:	f005 fa77 	bl	8006812 <osDelay>
  {
 8001324:	e7a9      	b.n	800127a <StartTask03+0x42>
 8001326:	bf00      	nop
 8001328:	66666666 	.word	0x66666666
 800132c:	3f4a6666 	.word	0x3f4a6666
 8001330:	ae147ae1 	.word	0xae147ae1
 8001334:	3ff6e147 	.word	0x3ff6e147
 8001338:	33333333 	.word	0x33333333
 800133c:	40113333 	.word	0x40113333
 8001340:	20001208 	.word	0x20001208
 8001344:	08009264 	.word	0x08009264
 8001348:	20001213 	.word	0x20001213
 800134c:	08009270 	.word	0x08009270
 8001350:	20001221 	.word	0x20001221
 8001354:	0800925c 	.word	0x0800925c
 8001358:	20000fe8 	.word	0x20000fe8
 800135c:	20000280 	.word	0x20000280
 8001360:	200010c4 	.word	0x200010c4
 8001364:	40390000 	.word	0x40390000

08001368 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  //Sensor initialization
	strcpy(HumiditySensor.Sensor_name,"SHT31-ARP-B");
 8001370:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <StartTask04+0xc8>)
 8001372:	4a30      	ldr	r2, [pc, #192]	; (8001434 <StartTask04+0xcc>)
 8001374:	ca07      	ldmia	r2, {r0, r1, r2}
 8001376:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcpy(HumiditySensor.Sensor_type,"Humidity:");
 800137a:	4a2f      	ldr	r2, [pc, #188]	; (8001438 <StartTask04+0xd0>)
 800137c:	4b2f      	ldr	r3, [pc, #188]	; (800143c <StartTask04+0xd4>)
 800137e:	cb03      	ldmia	r3!, {r0, r1}
 8001380:	6010      	str	r0, [r2, #0]
 8001382:	6051      	str	r1, [r2, #4]
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	8113      	strh	r3, [r2, #8]
	strcpy(HumiditySensor.Main_gas,"....");
 8001388:	4b2d      	ldr	r3, [pc, #180]	; (8001440 <StartTask04+0xd8>)
 800138a:	4a2e      	ldr	r2, [pc, #184]	; (8001444 <StartTask04+0xdc>)
 800138c:	6810      	ldr	r0, [r2, #0]
 800138e:	6018      	str	r0, [r3, #0]
 8001390:	7912      	ldrb	r2, [r2, #4]
 8001392:	711a      	strb	r2, [r3, #4]
	HumiditySensor.Response_time=200;
 8001394:	4b26      	ldr	r3, [pc, #152]	; (8001430 <StartTask04+0xc8>)
 8001396:	22c8      	movs	r2, #200	; 0xc8
 8001398:	85da      	strh	r2, [r3, #46]	; 0x2e
  /* Infinite loop */
  for(;;)
  {
    /*use of the ADC with mutex, this so that only one task can use the ADC at a time*/
	osMutexWait(MutexADC1Handle, 100);
 800139a:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <StartTask04+0xe0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2164      	movs	r1, #100	; 0x64
 80013a0:	4618      	mov	r0, r3
 80013a2:	f005 fa63 	bl	800686c <osMutexWait>
	sConfig2.Channel=ADC_CHANNEL_3;
 80013a6:	4b29      	ldr	r3, [pc, #164]	; (800144c <StartTask04+0xe4>)
 80013a8:	2203      	movs	r2, #3
 80013aa:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig2) != HAL_OK){Error_Handler();}
 80013ac:	4927      	ldr	r1, [pc, #156]	; (800144c <StartTask04+0xe4>)
 80013ae:	4828      	ldr	r0, [pc, #160]	; (8001450 <StartTask04+0xe8>)
 80013b0:	f001 f818 	bl	80023e4 <HAL_ADC_ConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <StartTask04+0x56>
 80013ba:	f000 f9a9 	bl	8001710 <Error_Handler>
	// Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 80013be:	4824      	ldr	r0, [pc, #144]	; (8001450 <StartTask04+0xe8>)
 80013c0:	f000 fdb4 	bl	8001f2c <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc1, 1);
 80013c4:	2101      	movs	r1, #1
 80013c6:	4822      	ldr	r0, [pc, #136]	; (8001450 <StartTask04+0xe8>)
 80013c8:	f000 fefc 	bl	80021c4 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result
	uint32_t Vadc=HAL_ADC_GetValue(&hadc1);
 80013cc:	4820      	ldr	r0, [pc, #128]	; (8001450 <StartTask04+0xe8>)
 80013ce:	f000 fffb 	bl	80023c8 <HAL_ADC_GetValue>
 80013d2:	60f8      	str	r0, [r7, #12]
	// stop The ADC
	HAL_ADC_Stop(&hadc1);
 80013d4:	481e      	ldr	r0, [pc, #120]	; (8001450 <StartTask04+0xe8>)
 80013d6:	f000 febf 	bl	8002158 <HAL_ADC_Stop>
	osMutexRelease(MutexADC1Handle);
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <StartTask04+0xe0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f005 fa92 	bl	8006908 <osMutexRelease>
	//The temperature formula is Rh=-12.5 + 125*Vt/Vd
	//where Vd=3.3, Vt=adc*3.3/2^12
	//The temperature formula is Rh=-12.5 + 125*Vadc/4096
    HumiditySensor.Data=-12.5 + (30.51757813e-3*Vadc);
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f7ff f835 	bl	8000454 <__aeabi_ui2d>
 80013ea:	a30f      	add	r3, pc, #60	; (adr r3, 8001428 <StartTask04+0xc0>)
 80013ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f0:	f7ff f8aa 	bl	8000548 <__aeabi_dmul>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <StartTask04+0xec>)
 8001402:	f7fe fee9 	bl	80001d8 <__aeabi_dsub>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f7ff faad 	bl	800096c <__aeabi_d2f>
 8001412:	4603      	mov	r3, r0
 8001414:	4a06      	ldr	r2, [pc, #24]	; (8001430 <StartTask04+0xc8>)
 8001416:	6313      	str	r3, [r2, #48]	; 0x30
    osDelay(HumiditySensor.Response_time);
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <StartTask04+0xc8>)
 800141a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800141e:	4618      	mov	r0, r3
 8001420:	f005 f9f7 	bl	8006812 <osDelay>
  {
 8001424:	e7b9      	b.n	800139a <StartTask04+0x32>
 8001426:	bf00      	nop
 8001428:	0015fd80 	.word	0x0015fd80
 800142c:	3f9f4000 	.word	0x3f9f4000
 8001430:	2000108c 	.word	0x2000108c
 8001434:	08009244 	.word	0x08009244
 8001438:	20001097 	.word	0x20001097
 800143c:	08009290 	.word	0x08009290
 8001440:	200010a5 	.word	0x200010a5
 8001444:	0800925c 	.word	0x0800925c
 8001448:	20000fe8 	.word	0x20000fe8
 800144c:	20000280 	.word	0x20000280
 8001450:	200010c4 	.word	0x200010c4
 8001454:	40290000 	.word	0x40290000

08001458 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  //Sensor initialization
	strcpy(PressureSensor.Sensor_name,"KP229-E2701-XTMA1");
 8001460:	4a35      	ldr	r2, [pc, #212]	; (8001538 <StartTask05+0xe0>)
 8001462:	4b36      	ldr	r3, [pc, #216]	; (800153c <StartTask05+0xe4>)
 8001464:	4614      	mov	r4, r2
 8001466:	461d      	mov	r5, r3
 8001468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800146c:	682b      	ldr	r3, [r5, #0]
 800146e:	8023      	strh	r3, [r4, #0]
	strcpy(PressureSensor.Sensor_type,"Absolute pressure");
 8001470:	4a33      	ldr	r2, [pc, #204]	; (8001540 <StartTask05+0xe8>)
 8001472:	4b34      	ldr	r3, [pc, #208]	; (8001544 <StartTask05+0xec>)
 8001474:	4615      	mov	r5, r2
 8001476:	461c      	mov	r4, r3
 8001478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147a:	6028      	str	r0, [r5, #0]
 800147c:	6069      	str	r1, [r5, #4]
 800147e:	60aa      	str	r2, [r5, #8]
 8001480:	60eb      	str	r3, [r5, #12]
 8001482:	8823      	ldrh	r3, [r4, #0]
 8001484:	822b      	strh	r3, [r5, #16]
	strcpy(PressureSensor.Main_gas,"....");
 8001486:	4b30      	ldr	r3, [pc, #192]	; (8001548 <StartTask05+0xf0>)
 8001488:	4a30      	ldr	r2, [pc, #192]	; (800154c <StartTask05+0xf4>)
 800148a:	6810      	ldr	r0, [r2, #0]
 800148c:	6018      	str	r0, [r3, #0]
 800148e:	7912      	ldrb	r2, [r2, #4]
 8001490:	711a      	strb	r2, [r3, #4]
	PressureSensor.Response_time=1;
 8001492:	4b29      	ldr	r3, [pc, #164]	; (8001538 <StartTask05+0xe0>)
 8001494:	2201      	movs	r2, #1
 8001496:	85da      	strh	r2, [r3, #46]	; 0x2e
  /* Infinite loop */
  for(;;)
  {
    /*use of the ADC with mutex, this so that only one task can use the ADC at a time*/
	osMutexWait(MutexADC1Handle, 100);
 8001498:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <StartTask05+0xf8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2164      	movs	r1, #100	; 0x64
 800149e:	4618      	mov	r0, r3
 80014a0:	f005 f9e4 	bl	800686c <osMutexWait>
	sConfig2.Channel=ADC_CHANNEL_4;
 80014a4:	4b2b      	ldr	r3, [pc, #172]	; (8001554 <StartTask05+0xfc>)
 80014a6:	2204      	movs	r2, #4
 80014a8:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig2) != HAL_OK){Error_Handler();}
 80014aa:	492a      	ldr	r1, [pc, #168]	; (8001554 <StartTask05+0xfc>)
 80014ac:	482a      	ldr	r0, [pc, #168]	; (8001558 <StartTask05+0x100>)
 80014ae:	f000 ff99 	bl	80023e4 <HAL_ADC_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <StartTask05+0x64>
 80014b8:	f000 f92a 	bl	8001710 <Error_Handler>
	// Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 80014bc:	4826      	ldr	r0, [pc, #152]	; (8001558 <StartTask05+0x100>)
 80014be:	f000 fd35 	bl	8001f2c <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc1, 1);
 80014c2:	2101      	movs	r1, #1
 80014c4:	4824      	ldr	r0, [pc, #144]	; (8001558 <StartTask05+0x100>)
 80014c6:	f000 fe7d 	bl	80021c4 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result
	uint32_t Vadc=HAL_ADC_GetValue(&hadc1);
 80014ca:	4823      	ldr	r0, [pc, #140]	; (8001558 <StartTask05+0x100>)
 80014cc:	f000 ff7c 	bl	80023c8 <HAL_ADC_GetValue>
 80014d0:	60f8      	str	r0, [r7, #12]
	// stop The ADC
	HAL_ADC_Stop(&hadc1);
 80014d2:	4821      	ldr	r0, [pc, #132]	; (8001558 <StartTask05+0x100>)
 80014d4:	f000 fe40 	bl	8002158 <HAL_ADC_Stop>
	osMutexRelease(MutexADC1Handle);
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <StartTask05+0xf8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f005 fa13 	bl	8006908 <osMutexRelease>
	//The temperature formula is P=(Vp/Vdd-b)/a
	//where Vp=adc*3.3/2^12, Vdd=3.3, b=0.05069, a=0.00293.
	//The temperature formula is P=-b/a+adc/a/4096=-17.3003413+83.32444539e-3*adc
	PressureSensor.Data=-17.3003413 + (83.32444539e-3*Vadc);
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f7fe ffb6 	bl	8000454 <__aeabi_ui2d>
 80014e8:	a30f      	add	r3, pc, #60	; (adr r3, 8001528 <StartTask05+0xd0>)
 80014ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ee:	f7ff f82b 	bl	8000548 <__aeabi_dmul>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	a30d      	add	r3, pc, #52	; (adr r3, 8001530 <StartTask05+0xd8>)
 80014fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001500:	f7fe fe6a 	bl	80001d8 <__aeabi_dsub>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	f7ff fa2e 	bl	800096c <__aeabi_d2f>
 8001510:	4603      	mov	r3, r0
 8001512:	4a09      	ldr	r2, [pc, #36]	; (8001538 <StartTask05+0xe0>)
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
    osDelay(PressureSensor.Response_time);
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <StartTask05+0xe0>)
 8001518:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800151c:	4618      	mov	r0, r3
 800151e:	f005 f978 	bl	8006812 <osDelay>
  {
 8001522:	e7b9      	b.n	8001498 <StartTask05+0x40>
 8001524:	f3af 8000 	nop.w
 8001528:	37e84a94 	.word	0x37e84a94
 800152c:	3fb554c0 	.word	0x3fb554c0
 8001530:	2add235c 	.word	0x2add235c
 8001534:	40314ce3 	.word	0x40314ce3
 8001538:	20000ff4 	.word	0x20000ff4
 800153c:	0800929c 	.word	0x0800929c
 8001540:	20000fff 	.word	0x20000fff
 8001544:	080092b0 	.word	0x080092b0
 8001548:	2000100d 	.word	0x2000100d
 800154c:	0800925c 	.word	0x0800925c
 8001550:	20000fe8 	.word	0x20000fe8
 8001554:	20000280 	.word	0x20000280
 8001558:	200010c4 	.word	0x200010c4
 800155c:	00000000 	.word	0x00000000

08001560 <StartTaskN>:
*
* @retval None
*/
/* USER CODE END Header_StartTaskN */
void StartTaskN(void const * argument)
{
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
    /*use of the ADC with mutex, this so that only one task can use the ADC at a time*/
	osMutexWait(MutexADC1Handle, 100);
 8001568:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <StartTaskN+0xc0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2164      	movs	r1, #100	; 0x64
 800156e:	4618      	mov	r0, r3
 8001570:	f005 f97c 	bl	800686c <osMutexWait>
	sConfig2.Channel=MatrizSensor[(int)argument].channel;
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	492b      	ldr	r1, [pc, #172]	; (8001624 <StartTaskN+0xc4>)
 8001578:	4613      	mov	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	1a9b      	subs	r3, r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	440b      	add	r3, r1
 8001582:	3334      	adds	r3, #52	; 0x34
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a28      	ldr	r2, [pc, #160]	; (8001628 <StartTaskN+0xc8>)
 8001588:	6013      	str	r3, [r2, #0]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig2) != HAL_OK){Error_Handler();}
 800158a:	4927      	ldr	r1, [pc, #156]	; (8001628 <StartTaskN+0xc8>)
 800158c:	4827      	ldr	r0, [pc, #156]	; (800162c <StartTaskN+0xcc>)
 800158e:	f000 ff29 	bl	80023e4 <HAL_ADC_ConfigChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <StartTaskN+0x3c>
 8001598:	f000 f8ba 	bl	8001710 <Error_Handler>
	// Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 800159c:	4823      	ldr	r0, [pc, #140]	; (800162c <StartTaskN+0xcc>)
 800159e:	f000 fcc5 	bl	8001f2c <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc1, 1);
 80015a2:	2101      	movs	r1, #1
 80015a4:	4821      	ldr	r0, [pc, #132]	; (800162c <StartTaskN+0xcc>)
 80015a6:	f000 fe0d 	bl	80021c4 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result
	uint32_t Vadc=HAL_ADC_GetValue(&hadc1);
 80015aa:	4820      	ldr	r0, [pc, #128]	; (800162c <StartTaskN+0xcc>)
 80015ac:	f000 ff0c 	bl	80023c8 <HAL_ADC_GetValue>
 80015b0:	60f8      	str	r0, [r7, #12]
	// stop The ADC
	HAL_ADC_Stop(&hadc1);
 80015b2:	481e      	ldr	r0, [pc, #120]	; (800162c <StartTaskN+0xcc>)
 80015b4:	f000 fdd0 	bl	8002158 <HAL_ADC_Stop>
	osMutexRelease(MutexADC1Handle);
 80015b8:	4b19      	ldr	r3, [pc, #100]	; (8001620 <StartTaskN+0xc0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f005 f9a3 	bl	8006908 <osMutexRelease>
	//The voltage value in miliVolts is Vadc=adc*3300/4096
	MatrizSensor[(int)argument].Data=805.6640625e-3*Vadc;
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f7fe ff46 	bl	8000454 <__aeabi_ui2d>
 80015c8:	a313      	add	r3, pc, #76	; (adr r3, 8001618 <StartTaskN+0xb8>)
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	f7fe ffbb 	bl	8000548 <__aeabi_dmul>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	687c      	ldr	r4, [r7, #4]
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f7ff f9c6 	bl	800096c <__aeabi_d2f>
 80015e0:	4602      	mov	r2, r0
 80015e2:	4910      	ldr	r1, [pc, #64]	; (8001624 <StartTaskN+0xc4>)
 80015e4:	4623      	mov	r3, r4
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	1b1b      	subs	r3, r3, r4
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	440b      	add	r3, r1
 80015ee:	3330      	adds	r3, #48	; 0x30
 80015f0:	601a      	str	r2, [r3, #0]
    osDelay(MatrizSensor[(int)argument].Response_time*1000);
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	490b      	ldr	r1, [pc, #44]	; (8001624 <StartTaskN+0xc4>)
 80015f6:	4613      	mov	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	1a9b      	subs	r3, r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	440b      	add	r3, r1
 8001600:	332e      	adds	r3, #46	; 0x2e
 8001602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001606:	461a      	mov	r2, r3
 8001608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160c:	fb03 f302 	mul.w	r3, r3, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f005 f8fe 	bl	8006812 <osDelay>
  {
 8001616:	e7a7      	b.n	8001568 <StartTaskN+0x8>
 8001618:	00000000 	.word	0x00000000
 800161c:	3fe9c800 	.word	0x3fe9c800
 8001620:	20000fe8 	.word	0x20000fe8
 8001624:	2000111c 	.word	0x2000111c
 8001628:	20000280 	.word	0x20000280
 800162c:	200010c4 	.word	0x200010c4

08001630 <StartTask01_I2C>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01_I2C */
void StartTask01_I2C(void const * argument)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t pRecognized=0;
 8001638:	2300      	movs	r3, #0
 800163a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Slave_Transmit_IT(&hi2c1,(uint8_t*)&pRecognized, 1);
 800163c:	f107 030f 	add.w	r3, r7, #15
 8001640:	2201      	movs	r2, #1
 8001642:	4619      	mov	r1, r3
 8001644:	4825      	ldr	r0, [pc, #148]	; (80016dc <StartTask01_I2C+0xac>)
 8001646:	f001 ff7b 	bl	8003540 <HAL_I2C_Slave_Transmit_IT>
	osSemaphoreWait(SemI2CHandle, 0xFFFFFFFF);
 800164a:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <StartTask01_I2C+0xb0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f04f 31ff 	mov.w	r1, #4294967295
 8001652:	4618      	mov	r0, r3
 8001654:	f005 f9c0 	bl	80069d8 <osSemaphoreWait>
  /* Infinite loop */
  for(;;)
  {
	uint16_t pFuncion=0;
 8001658:	2300      	movs	r3, #0
 800165a:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Slave_Receive_IT(&hi2c1,(uint8_t*)&pFuncion, 2);
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	2202      	movs	r2, #2
 8001662:	4619      	mov	r1, r3
 8001664:	481d      	ldr	r0, [pc, #116]	; (80016dc <StartTask01_I2C+0xac>)
 8001666:	f001 ffbb 	bl	80035e0 <HAL_I2C_Slave_Receive_IT>
    osSemaphoreWait(SemI2CHandle, 0xFFFFFFFF);
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <StartTask01_I2C+0xb0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f04f 31ff 	mov.w	r1, #4294967295
 8001672:	4618      	mov	r0, r3
 8001674:	f005 f9b0 	bl	80069d8 <osSemaphoreWait>
    if(pFuncion==1){
 8001678:	89bb      	ldrh	r3, [r7, #12]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d10e      	bne.n	800169c <StartTask01_I2C+0x6c>
    	HAL_I2C_Slave_Transmit_IT(&hi2c1,(uint8_t*)&pRecognized, 1);
 800167e:	f107 030f 	add.w	r3, r7, #15
 8001682:	2201      	movs	r2, #1
 8001684:	4619      	mov	r1, r3
 8001686:	4815      	ldr	r0, [pc, #84]	; (80016dc <StartTask01_I2C+0xac>)
 8001688:	f001 ff5a 	bl	8003540 <HAL_I2C_Slave_Transmit_IT>
    	osSemaphoreWait(SemI2CHandle, 0xFFFFFFFF);
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <StartTask01_I2C+0xb0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f04f 31ff 	mov.w	r1, #4294967295
 8001694:	4618      	mov	r0, r3
 8001696:	f005 f99f 	bl	80069d8 <osSemaphoreWait>
 800169a:	e7dd      	b.n	8001658 <StartTask01_I2C+0x28>
    }
    else if(pFuncion==2){
 800169c:	89bb      	ldrh	r3, [r7, #12]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d10c      	bne.n	80016bc <StartTask01_I2C+0x8c>
    	HAL_I2C_Slave_Transmit_IT(&hi2c1,(uint8_t*)&pcb, 14);
 80016a2:	220e      	movs	r2, #14
 80016a4:	490f      	ldr	r1, [pc, #60]	; (80016e4 <StartTask01_I2C+0xb4>)
 80016a6:	480d      	ldr	r0, [pc, #52]	; (80016dc <StartTask01_I2C+0xac>)
 80016a8:	f001 ff4a 	bl	8003540 <HAL_I2C_Slave_Transmit_IT>
		osSemaphoreWait(SemI2CHandle, 0xFFFFFFFF);
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <StartTask01_I2C+0xb0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f04f 31ff 	mov.w	r1, #4294967295
 80016b4:	4618      	mov	r0, r3
 80016b6:	f005 f98f 	bl	80069d8 <osSemaphoreWait>
 80016ba:	e7cd      	b.n	8001658 <StartTask01_I2C+0x28>
    }
    else if(pFuncion==3){
 80016bc:	89bb      	ldrh	r3, [r7, #12]
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d1ca      	bne.n	8001658 <StartTask01_I2C+0x28>
    	HAL_I2C_Slave_Transmit_IT(&hi2c1,(uint8_t*)&MatrizSensor, 47*Numberofsensors);
 80016c2:	22bc      	movs	r2, #188	; 0xbc
 80016c4:	4908      	ldr	r1, [pc, #32]	; (80016e8 <StartTask01_I2C+0xb8>)
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <StartTask01_I2C+0xac>)
 80016c8:	f001 ff3a 	bl	8003540 <HAL_I2C_Slave_Transmit_IT>
		osSemaphoreWait(SemI2CHandle, 0xFFFFFFFF);
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <StartTask01_I2C+0xb0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295
 80016d4:	4618      	mov	r0, r3
 80016d6:	f005 f97f 	bl	80069d8 <osSemaphoreWait>
  {
 80016da:	e7bd      	b.n	8001658 <StartTask01_I2C+0x28>
 80016dc:	20001034 	.word	0x20001034
 80016e0:	20001080 	.word	0x20001080
 80016e4:	20001240 	.word	0x20001240
 80016e8:	2000111c 	.word	0x2000111c

080016ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d101      	bne.n	8001702 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016fe:	f000 fa15 	bl	8001b2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40001000 	.word	0x40001000

08001710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001714:	b672      	cpsid	i
}
 8001716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001718:	e7fe      	b.n	8001718 <Error_Handler+0x8>
	...

0800171c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_MspInit+0x4c>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	4a10      	ldr	r2, [pc, #64]	; (8001768 <HAL_MspInit+0x4c>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6193      	str	r3, [r2, #24]
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_MspInit+0x4c>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_MspInit+0x4c>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <HAL_MspInit+0x4c>)
 8001740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001744:	61d3      	str	r3, [r2, #28]
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <HAL_MspInit+0x4c>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	210f      	movs	r1, #15
 8001756:	f06f 0001 	mvn.w	r0, #1
 800175a:	f001 fc59 	bl	8003010 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000

0800176c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800178c:	d154      	bne.n	8001838 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800178e:	4b2c      	ldr	r3, [pc, #176]	; (8001840 <HAL_ADC_MspInit+0xd4>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	4a2b      	ldr	r2, [pc, #172]	; (8001840 <HAL_ADC_MspInit+0xd4>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	6153      	str	r3, [r2, #20]
 800179a:	4b29      	ldr	r3, [pc, #164]	; (8001840 <HAL_ADC_MspInit+0xd4>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	61bb      	str	r3, [r7, #24]
 80017a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	4b26      	ldr	r3, [pc, #152]	; (8001840 <HAL_ADC_MspInit+0xd4>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	4a25      	ldr	r2, [pc, #148]	; (8001840 <HAL_ADC_MspInit+0xd4>)
 80017ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017b0:	6153      	str	r3, [r2, #20]
 80017b2:	4b23      	ldr	r3, [pc, #140]	; (8001840 <HAL_ADC_MspInit+0xd4>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	4b20      	ldr	r3, [pc, #128]	; (8001840 <HAL_ADC_MspInit+0xd4>)
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	4a1f      	ldr	r2, [pc, #124]	; (8001840 <HAL_ADC_MspInit+0xd4>)
 80017c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c8:	6153      	str	r3, [r2, #20]
 80017ca:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <HAL_ADC_MspInit+0xd4>)
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017d6:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <HAL_ADC_MspInit+0xd4>)
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	4a19      	ldr	r2, [pc, #100]	; (8001840 <HAL_ADC_MspInit+0xd4>)
 80017dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017e0:	6153      	str	r3, [r2, #20]
 80017e2:	4b17      	ldr	r3, [pc, #92]	; (8001840 <HAL_ADC_MspInit+0xd4>)
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80017ee:	230f      	movs	r3, #15
 80017f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f2:	2303      	movs	r3, #3
 80017f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	4619      	mov	r1, r3
 8001800:	4810      	ldr	r0, [pc, #64]	; (8001844 <HAL_ADC_MspInit+0xd8>)
 8001802:	f001 fc7b 	bl	80030fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001806:	230e      	movs	r3, #14
 8001808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180a:	2303      	movs	r3, #3
 800180c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	4619      	mov	r1, r3
 8001818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181c:	f001 fc6e 	bl	80030fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001820:	2310      	movs	r3, #16
 8001822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001824:	2303      	movs	r3, #3
 8001826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	4619      	mov	r1, r3
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <HAL_ADC_MspInit+0xdc>)
 8001834:	f001 fc62 	bl	80030fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001838:	bf00      	nop
 800183a:	3730      	adds	r7, #48	; 0x30
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000
 8001844:	48000800 	.word	0x48000800
 8001848:	48001400 	.word	0x48001400

0800184c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	; 0x28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a1b      	ldr	r2, [pc, #108]	; (80018d8 <HAL_I2C_MspInit+0x8c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d12f      	bne.n	80018ce <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <HAL_I2C_MspInit+0x90>)
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	4a1a      	ldr	r2, [pc, #104]	; (80018dc <HAL_I2C_MspInit+0x90>)
 8001874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001878:	6153      	str	r3, [r2, #20]
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <HAL_I2C_MspInit+0x90>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001886:	23c0      	movs	r3, #192	; 0xc0
 8001888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800188a:	2312      	movs	r3, #18
 800188c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188e:	2301      	movs	r3, #1
 8001890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001896:	2304      	movs	r3, #4
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4619      	mov	r1, r3
 80018a0:	480f      	ldr	r0, [pc, #60]	; (80018e0 <HAL_I2C_MspInit+0x94>)
 80018a2:	f001 fc2b 	bl	80030fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018a6:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <HAL_I2C_MspInit+0x90>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	4a0c      	ldr	r2, [pc, #48]	; (80018dc <HAL_I2C_MspInit+0x90>)
 80018ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018b0:	61d3      	str	r3, [r2, #28]
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_I2C_MspInit+0x90>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2105      	movs	r1, #5
 80018c2:	201f      	movs	r0, #31
 80018c4:	f001 fba4 	bl	8003010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80018c8:	201f      	movs	r0, #31
 80018ca:	f001 fbbd 	bl	8003048 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018ce:	bf00      	nop
 80018d0:	3728      	adds	r7, #40	; 0x28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40005400 	.word	0x40005400
 80018dc:	40021000 	.word	0x40021000
 80018e0:	48000400 	.word	0x48000400

080018e4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a18      	ldr	r2, [pc, #96]	; (8001964 <HAL_PCD_MspInit+0x80>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d129      	bne.n	800195a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	4b18      	ldr	r3, [pc, #96]	; (8001968 <HAL_PCD_MspInit+0x84>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	4a17      	ldr	r2, [pc, #92]	; (8001968 <HAL_PCD_MspInit+0x84>)
 800190c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001910:	6153      	str	r3, [r2, #20]
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_PCD_MspInit+0x84>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800191e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001930:	230e      	movs	r3, #14
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800193e:	f001 fbdd 	bl	80030fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_PCD_MspInit+0x84>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	4a08      	ldr	r2, [pc, #32]	; (8001968 <HAL_PCD_MspInit+0x84>)
 8001948:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800194c:	61d3      	str	r3, [r2, #28]
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_PCD_MspInit+0x84>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800195a:	bf00      	nop
 800195c:	3728      	adds	r7, #40	; 0x28
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40005c00 	.word	0x40005c00
 8001968:	40021000 	.word	0x40021000

0800196c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08c      	sub	sp, #48	; 0x30
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800197c:	2200      	movs	r2, #0
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	2036      	movs	r0, #54	; 0x36
 8001982:	f001 fb45 	bl	8003010 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001986:	2036      	movs	r0, #54	; 0x36
 8001988:	f001 fb5e 	bl	8003048 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800198c:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <HAL_InitTick+0xa0>)
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	4a1e      	ldr	r2, [pc, #120]	; (8001a0c <HAL_InitTick+0xa0>)
 8001992:	f043 0310 	orr.w	r3, r3, #16
 8001996:	61d3      	str	r3, [r2, #28]
 8001998:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <HAL_InitTick+0xa0>)
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	f003 0310 	and.w	r3, r3, #16
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019a4:	f107 0210 	add.w	r2, r7, #16
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	4611      	mov	r1, r2
 80019ae:	4618      	mov	r0, r3
 80019b0:	f004 f9d2 	bl	8005d58 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80019b4:	f004 f9ae 	bl	8005d14 <HAL_RCC_GetPCLK1Freq>
 80019b8:	4603      	mov	r3, r0
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c0:	4a13      	ldr	r2, [pc, #76]	; (8001a10 <HAL_InitTick+0xa4>)
 80019c2:	fba2 2303 	umull	r2, r3, r2, r3
 80019c6:	0c9b      	lsrs	r3, r3, #18
 80019c8:	3b01      	subs	r3, #1
 80019ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <HAL_InitTick+0xa8>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <HAL_InitTick+0xac>)
 80019d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <HAL_InitTick+0xa8>)
 80019d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019d8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80019da:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <HAL_InitTick+0xa8>)
 80019dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019de:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <HAL_InitTick+0xa8>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_InitTick+0xa8>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80019ec:	4809      	ldr	r0, [pc, #36]	; (8001a14 <HAL_InitTick+0xa8>)
 80019ee:	f004 fb95 	bl	800611c <HAL_TIM_Base_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d104      	bne.n	8001a02 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80019f8:	4806      	ldr	r0, [pc, #24]	; (8001a14 <HAL_InitTick+0xa8>)
 80019fa:	f004 fbf1 	bl	80061e0 <HAL_TIM_Base_Start_IT>
 80019fe:	4603      	mov	r3, r0
 8001a00:	e000      	b.n	8001a04 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3730      	adds	r7, #48	; 0x30
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	431bde83 	.word	0x431bde83
 8001a14:	20001580 	.word	0x20001580
 8001a18:	40001000 	.word	0x40001000

08001a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <NMI_Handler+0x4>

08001a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a26:	e7fe      	b.n	8001a26 <HardFault_Handler+0x4>

08001a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <MemManage_Handler+0x4>

08001a2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a32:	e7fe      	b.n	8001a32 <BusFault_Handler+0x4>

08001a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <UsageFault_Handler+0x4>

08001a3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	if(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY){
 8001a4c:	4807      	ldr	r0, [pc, #28]	; (8001a6c <I2C1_EV_IRQHandler+0x24>)
 8001a4e:	f001 fe99 	bl	8003784 <HAL_I2C_GetState>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b20      	cmp	r3, #32
 8001a56:	d104      	bne.n	8001a62 <I2C1_EV_IRQHandler+0x1a>
		osSemaphoreRelease(SemI2CHandle);
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <I2C1_EV_IRQHandler+0x28>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f005 f809 	bl	8006a74 <osSemaphoreRelease>
	}
  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a62:	4802      	ldr	r0, [pc, #8]	; (8001a6c <I2C1_EV_IRQHandler+0x24>)
 8001a64:	f001 fe0c 	bl	8003680 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20001034 	.word	0x20001034
 8001a70:	20001080 	.word	0x20001080

08001a74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <TIM6_DAC_IRQHandler+0x10>)
 8001a7a:	f004 fc1b 	bl	80062b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20001580 	.word	0x20001580

08001a88 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <SystemInit+0x20>)
 8001a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <SystemInit+0x20>)
 8001a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ae4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab0:	480d      	ldr	r0, [pc, #52]	; (8001ae8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ab2:	490e      	ldr	r1, [pc, #56]	; (8001aec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ab4:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <LoopForever+0xe>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab8:	e002      	b.n	8001ac0 <LoopCopyDataInit>

08001aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001abe:	3304      	adds	r3, #4

08001ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac4:	d3f9      	bcc.n	8001aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac6:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ac8:	4c0b      	ldr	r4, [pc, #44]	; (8001af8 <LoopForever+0x16>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001acc:	e001      	b.n	8001ad2 <LoopFillZerobss>

08001ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad0:	3204      	adds	r2, #4

08001ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad4:	d3fb      	bcc.n	8001ace <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ad6:	f7ff ffd7 	bl	8001a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ada:	f007 fab7 	bl	800904c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ade:	f7fe ffaf 	bl	8000a40 <main>

08001ae2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ae2:	e7fe      	b.n	8001ae2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ae4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001af0:	0800930c 	.word	0x0800930c
  ldr r2, =_sbss
 8001af4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001af8:	200015d0 	.word	0x200015d0

08001afc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001afc:	e7fe      	b.n	8001afc <ADC1_2_IRQHandler>
	...

08001b00 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <HAL_Init+0x28>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a07      	ldr	r2, [pc, #28]	; (8001b28 <HAL_Init+0x28>)
 8001b0a:	f043 0310 	orr.w	r3, r3, #16
 8001b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b10:	2003      	movs	r0, #3
 8001b12:	f001 fa72 	bl	8002ffa <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b16:	200f      	movs	r0, #15
 8001b18:	f7ff ff28 	bl	800196c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b1c:	f7ff fdfe 	bl	800171c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40022000 	.word	0x40022000

08001b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_IncTick+0x20>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_IncTick+0x24>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <HAL_IncTick+0x24>)
 8001b3e:	6013      	str	r3, [r2, #0]
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000008 	.word	0x20000008
 8001b50:	200015cc 	.word	0x200015cc

08001b54 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <HAL_GetTick+0x14>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	200015cc 	.word	0x200015cc

08001b6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b09a      	sub	sp, #104	; 0x68
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e1c9      	b.n	8001f20 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d176      	bne.n	8001c8c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d152      	bne.n	8001c4c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff fdd3 	bl	800176c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d13b      	bne.n	8001c4c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f001 f847 	bl	8002c68 <ADC_Disable>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	f003 0310 	and.w	r3, r3, #16
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d12f      	bne.n	8001c4c <HAL_ADC_Init+0xe0>
 8001bec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d12b      	bne.n	8001c4c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bfc:	f023 0302 	bic.w	r3, r3, #2
 8001c00:	f043 0202 	orr.w	r2, r3, #2
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c16:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c26:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c28:	4b86      	ldr	r3, [pc, #536]	; (8001e44 <HAL_ADC_Init+0x2d8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a86      	ldr	r2, [pc, #536]	; (8001e48 <HAL_ADC_Init+0x2dc>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	0c9a      	lsrs	r2, r3, #18
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c3e:	e002      	b.n	8001c46 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1f9      	bne.n	8001c40 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d007      	beq.n	8001c6a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c68:	d110      	bne.n	8001c8c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f023 0312 	bic.w	r3, r3, #18
 8001c72:	f043 0210 	orr.w	r2, r3, #16
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f043 0201 	orr.w	r2, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f040 8136 	bne.w	8001f06 <HAL_ADC_Init+0x39a>
 8001c9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f040 8131 	bne.w	8001f06 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f040 8129 	bne.w	8001f06 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cbc:	f043 0202 	orr.w	r2, r3, #2
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ccc:	d004      	beq.n	8001cd8 <HAL_ADC_Init+0x16c>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a5e      	ldr	r2, [pc, #376]	; (8001e4c <HAL_ADC_Init+0x2e0>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d101      	bne.n	8001cdc <HAL_ADC_Init+0x170>
 8001cd8:	4b5d      	ldr	r3, [pc, #372]	; (8001e50 <HAL_ADC_Init+0x2e4>)
 8001cda:	e000      	b.n	8001cde <HAL_ADC_Init+0x172>
 8001cdc:	4b5d      	ldr	r3, [pc, #372]	; (8001e54 <HAL_ADC_Init+0x2e8>)
 8001cde:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ce8:	d102      	bne.n	8001cf0 <HAL_ADC_Init+0x184>
 8001cea:	4b58      	ldr	r3, [pc, #352]	; (8001e4c <HAL_ADC_Init+0x2e0>)
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	e01a      	b.n	8001d26 <HAL_ADC_Init+0x1ba>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a55      	ldr	r2, [pc, #340]	; (8001e4c <HAL_ADC_Init+0x2e0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d103      	bne.n	8001d02 <HAL_ADC_Init+0x196>
 8001cfa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	e011      	b.n	8001d26 <HAL_ADC_Init+0x1ba>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a54      	ldr	r2, [pc, #336]	; (8001e58 <HAL_ADC_Init+0x2ec>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d102      	bne.n	8001d12 <HAL_ADC_Init+0x1a6>
 8001d0c:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <HAL_ADC_Init+0x2f0>)
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	e009      	b.n	8001d26 <HAL_ADC_Init+0x1ba>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a51      	ldr	r2, [pc, #324]	; (8001e5c <HAL_ADC_Init+0x2f0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d102      	bne.n	8001d22 <HAL_ADC_Init+0x1b6>
 8001d1c:	4b4e      	ldr	r3, [pc, #312]	; (8001e58 <HAL_ADC_Init+0x2ec>)
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	e001      	b.n	8001d26 <HAL_ADC_Init+0x1ba>
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d108      	bne.n	8001d46 <HAL_ADC_Init+0x1da>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <HAL_ADC_Init+0x1da>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <HAL_ADC_Init+0x1dc>
 8001d46:	2300      	movs	r3, #0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d11c      	bne.n	8001d86 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d010      	beq.n	8001d74 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d107      	bne.n	8001d6e <HAL_ADC_Init+0x202>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d101      	bne.n	8001d6e <HAL_ADC_Init+0x202>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_ADC_Init+0x204>
 8001d6e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d108      	bne.n	8001d86 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001d74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	431a      	orrs	r2, r3
 8001d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d84:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	7e5b      	ldrb	r3, [r3, #25]
 8001d8a:	035b      	lsls	r3, r3, #13
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d90:	2a01      	cmp	r2, #1
 8001d92:	d002      	beq.n	8001d9a <HAL_ADC_Init+0x22e>
 8001d94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d98:	e000      	b.n	8001d9c <HAL_ADC_Init+0x230>
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001dac:	4313      	orrs	r3, r2
 8001dae:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d11b      	bne.n	8001df2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	7e5b      	ldrb	r3, [r3, #25]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d109      	bne.n	8001dd6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	045a      	lsls	r2, r3, #17
 8001dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd2:	663b      	str	r3, [r7, #96]	; 0x60
 8001dd4:	e00d      	b.n	8001df2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001dde:	f043 0220 	orr.w	r2, r3, #32
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	f043 0201 	orr.w	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d03a      	beq.n	8001e70 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a16      	ldr	r2, [pc, #88]	; (8001e58 <HAL_ADC_Init+0x2ec>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d004      	beq.n	8001e0e <HAL_ADC_Init+0x2a2>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a14      	ldr	r2, [pc, #80]	; (8001e5c <HAL_ADC_Init+0x2f0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d128      	bne.n	8001e60 <HAL_ADC_Init+0x2f4>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e12:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001e16:	d012      	beq.n	8001e3e <HAL_ADC_Init+0x2d2>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e20:	d00a      	beq.n	8001e38 <HAL_ADC_Init+0x2cc>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001e2a:	d002      	beq.n	8001e32 <HAL_ADC_Init+0x2c6>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e30:	e018      	b.n	8001e64 <HAL_ADC_Init+0x2f8>
 8001e32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e36:	e015      	b.n	8001e64 <HAL_ADC_Init+0x2f8>
 8001e38:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001e3c:	e012      	b.n	8001e64 <HAL_ADC_Init+0x2f8>
 8001e3e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001e42:	e00f      	b.n	8001e64 <HAL_ADC_Init+0x2f8>
 8001e44:	20000000 	.word	0x20000000
 8001e48:	431bde83 	.word	0x431bde83
 8001e4c:	50000100 	.word	0x50000100
 8001e50:	50000300 	.word	0x50000300
 8001e54:	50000700 	.word	0x50000700
 8001e58:	50000400 	.word	0x50000400
 8001e5c:	50000500 	.word	0x50000500
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d114      	bne.n	8001ea8 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e8c:	f023 0302 	bic.w	r3, r3, #2
 8001e90:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	7e1b      	ldrb	r3, [r3, #24]
 8001e96:	039a      	lsls	r2, r3, #14
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <HAL_ADC_Init+0x3bc>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6812      	ldr	r2, [r2, #0]
 8001eb6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d10c      	bne.n	8001ede <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f023 010f 	bic.w	r1, r3, #15
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	1e5a      	subs	r2, r3, #1
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
 8001edc:	e007      	b.n	8001eee <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 020f 	bic.w	r2, r2, #15
 8001eec:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f023 0303 	bic.w	r3, r3, #3
 8001efc:	f043 0201 	orr.w	r2, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	641a      	str	r2, [r3, #64]	; 0x40
 8001f04:	e00a      	b.n	8001f1c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f023 0312 	bic.w	r3, r3, #18
 8001f0e:	f043 0210 	orr.w	r2, r3, #16
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001f16:	2301      	movs	r3, #1
 8001f18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001f1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3768      	adds	r7, #104	; 0x68
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	fff0c007 	.word	0xfff0c007

08001f2c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f040 80f9 	bne.w	800213a <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_ADC_Start+0x2a>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e0f4      	b.n	8002140 <HAL_ADC_Start+0x214>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 fe1e 	bl	8002ba0 <ADC_Enable>
 8001f64:	4603      	mov	r3, r0
 8001f66:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f040 80e0 	bne.w	8002130 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f8c:	d004      	beq.n	8001f98 <HAL_ADC_Start+0x6c>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a6d      	ldr	r2, [pc, #436]	; (8002148 <HAL_ADC_Start+0x21c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d106      	bne.n	8001fa6 <HAL_ADC_Start+0x7a>
 8001f98:	4b6c      	ldr	r3, [pc, #432]	; (800214c <HAL_ADC_Start+0x220>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 031f 	and.w	r3, r3, #31
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d010      	beq.n	8001fc6 <HAL_ADC_Start+0x9a>
 8001fa4:	e005      	b.n	8001fb2 <HAL_ADC_Start+0x86>
 8001fa6:	4b6a      	ldr	r3, [pc, #424]	; (8002150 <HAL_ADC_Start+0x224>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 031f 	and.w	r3, r3, #31
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d009      	beq.n	8001fc6 <HAL_ADC_Start+0x9a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fba:	d004      	beq.n	8001fc6 <HAL_ADC_Start+0x9a>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a64      	ldr	r2, [pc, #400]	; (8002154 <HAL_ADC_Start+0x228>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d115      	bne.n	8001ff2 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d036      	beq.n	800204e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fe8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001ff0:	e02d      	b.n	800204e <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002006:	d004      	beq.n	8002012 <HAL_ADC_Start+0xe6>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a4e      	ldr	r2, [pc, #312]	; (8002148 <HAL_ADC_Start+0x21c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d10a      	bne.n	8002028 <HAL_ADC_Start+0xfc>
 8002012:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	bf14      	ite	ne
 8002020:	2301      	movne	r3, #1
 8002022:	2300      	moveq	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	e008      	b.n	800203a <HAL_ADC_Start+0x10e>
 8002028:	4b4a      	ldr	r3, [pc, #296]	; (8002154 <HAL_ADC_Start+0x228>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	bf14      	ite	ne
 8002034:	2301      	movne	r3, #1
 8002036:	2300      	moveq	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d007      	beq.n	800204e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002046:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800205a:	d106      	bne.n	800206a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002060:	f023 0206 	bic.w	r2, r3, #6
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	645a      	str	r2, [r3, #68]	; 0x44
 8002068:	e002      	b.n	8002070 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	221c      	movs	r2, #28
 800207e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002088:	d004      	beq.n	8002094 <HAL_ADC_Start+0x168>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a2e      	ldr	r2, [pc, #184]	; (8002148 <HAL_ADC_Start+0x21c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d106      	bne.n	80020a2 <HAL_ADC_Start+0x176>
 8002094:	4b2d      	ldr	r3, [pc, #180]	; (800214c <HAL_ADC_Start+0x220>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	2b00      	cmp	r3, #0
 800209e:	d03e      	beq.n	800211e <HAL_ADC_Start+0x1f2>
 80020a0:	e005      	b.n	80020ae <HAL_ADC_Start+0x182>
 80020a2:	4b2b      	ldr	r3, [pc, #172]	; (8002150 <HAL_ADC_Start+0x224>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d037      	beq.n	800211e <HAL_ADC_Start+0x1f2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020b6:	d004      	beq.n	80020c2 <HAL_ADC_Start+0x196>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a22      	ldr	r2, [pc, #136]	; (8002148 <HAL_ADC_Start+0x21c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d106      	bne.n	80020d0 <HAL_ADC_Start+0x1a4>
 80020c2:	4b22      	ldr	r3, [pc, #136]	; (800214c <HAL_ADC_Start+0x220>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 031f 	and.w	r3, r3, #31
 80020ca:	2b05      	cmp	r3, #5
 80020cc:	d027      	beq.n	800211e <HAL_ADC_Start+0x1f2>
 80020ce:	e005      	b.n	80020dc <HAL_ADC_Start+0x1b0>
 80020d0:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <HAL_ADC_Start+0x224>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 031f 	and.w	r3, r3, #31
 80020d8:	2b05      	cmp	r3, #5
 80020da:	d020      	beq.n	800211e <HAL_ADC_Start+0x1f2>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020e4:	d004      	beq.n	80020f0 <HAL_ADC_Start+0x1c4>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a17      	ldr	r2, [pc, #92]	; (8002148 <HAL_ADC_Start+0x21c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d106      	bne.n	80020fe <HAL_ADC_Start+0x1d2>
 80020f0:	4b16      	ldr	r3, [pc, #88]	; (800214c <HAL_ADC_Start+0x220>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	2b09      	cmp	r3, #9
 80020fa:	d010      	beq.n	800211e <HAL_ADC_Start+0x1f2>
 80020fc:	e005      	b.n	800210a <HAL_ADC_Start+0x1de>
 80020fe:	4b14      	ldr	r3, [pc, #80]	; (8002150 <HAL_ADC_Start+0x224>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 031f 	and.w	r3, r3, #31
 8002106:	2b09      	cmp	r3, #9
 8002108:	d009      	beq.n	800211e <HAL_ADC_Start+0x1f2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002112:	d004      	beq.n	800211e <HAL_ADC_Start+0x1f2>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0e      	ldr	r2, [pc, #56]	; (8002154 <HAL_ADC_Start+0x228>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d10f      	bne.n	800213e <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 0204 	orr.w	r2, r2, #4
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	e006      	b.n	800213e <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002138:	e001      	b.n	800213e <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800213a:	2302      	movs	r3, #2
 800213c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800213e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	50000100 	.word	0x50000100
 800214c:	50000300 	.word	0x50000300
 8002150:	50000700 	.word	0x50000700
 8002154:	50000400 	.word	0x50000400

08002158 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_ADC_Stop+0x1a>
 800216e:	2302      	movs	r3, #2
 8002170:	e023      	b.n	80021ba <HAL_ADC_Stop+0x62>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800217a:	216c      	movs	r1, #108	; 0x6c
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 fdd9 	bl	8002d34 <ADC_ConversionStop>
 8002182:	4603      	mov	r3, r0
 8002184:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d111      	bne.n	80021b0 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 fd6b 	bl	8002c68 <ADC_Disable>
 8002192:	4603      	mov	r3, r0
 8002194:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d109      	bne.n	80021b0 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021a4:	f023 0301 	bic.w	r3, r3, #1
 80021a8:	f043 0201 	orr.w	r2, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d102      	bne.n	80021e0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80021da:	2308      	movs	r3, #8
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	e03a      	b.n	8002256 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021e8:	d004      	beq.n	80021f4 <HAL_ADC_PollForConversion+0x30>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a72      	ldr	r2, [pc, #456]	; (80023b8 <HAL_ADC_PollForConversion+0x1f4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d101      	bne.n	80021f8 <HAL_ADC_PollForConversion+0x34>
 80021f4:	4b71      	ldr	r3, [pc, #452]	; (80023bc <HAL_ADC_PollForConversion+0x1f8>)
 80021f6:	e000      	b.n	80021fa <HAL_ADC_PollForConversion+0x36>
 80021f8:	4b71      	ldr	r3, [pc, #452]	; (80023c0 <HAL_ADC_PollForConversion+0x1fc>)
 80021fa:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	2b00      	cmp	r3, #0
 8002206:	d112      	bne.n	800222e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b01      	cmp	r3, #1
 8002214:	d11d      	bne.n	8002252 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f043 0220 	orr.w	r2, r3, #32
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e0bf      	b.n	80023ae <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00b      	beq.n	8002252 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f043 0220 	orr.w	r2, r3, #32
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e0ad      	b.n	80023ae <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002252:	230c      	movs	r3, #12
 8002254:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800225e:	d004      	beq.n	800226a <HAL_ADC_PollForConversion+0xa6>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a54      	ldr	r2, [pc, #336]	; (80023b8 <HAL_ADC_PollForConversion+0x1f4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d106      	bne.n	8002278 <HAL_ADC_PollForConversion+0xb4>
 800226a:	4b54      	ldr	r3, [pc, #336]	; (80023bc <HAL_ADC_PollForConversion+0x1f8>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	2b00      	cmp	r3, #0
 8002274:	d010      	beq.n	8002298 <HAL_ADC_PollForConversion+0xd4>
 8002276:	e005      	b.n	8002284 <HAL_ADC_PollForConversion+0xc0>
 8002278:	4b51      	ldr	r3, [pc, #324]	; (80023c0 <HAL_ADC_PollForConversion+0x1fc>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	2b00      	cmp	r3, #0
 8002282:	d009      	beq.n	8002298 <HAL_ADC_PollForConversion+0xd4>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800228c:	d004      	beq.n	8002298 <HAL_ADC_PollForConversion+0xd4>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a4c      	ldr	r2, [pc, #304]	; (80023c4 <HAL_ADC_PollForConversion+0x200>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d104      	bne.n	80022a2 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	e00f      	b.n	80022c2 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022aa:	d004      	beq.n	80022b6 <HAL_ADC_PollForConversion+0xf2>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a41      	ldr	r2, [pc, #260]	; (80023b8 <HAL_ADC_PollForConversion+0x1f4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d102      	bne.n	80022bc <HAL_ADC_PollForConversion+0xf8>
 80022b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022ba:	e000      	b.n	80022be <HAL_ADC_PollForConversion+0xfa>
 80022bc:	4b41      	ldr	r3, [pc, #260]	; (80023c4 <HAL_ADC_PollForConversion+0x200>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80022c2:	f7ff fc47 	bl	8001b54 <HAL_GetTick>
 80022c6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80022c8:	e021      	b.n	800230e <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d0:	d01d      	beq.n	800230e <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d007      	beq.n	80022e8 <HAL_ADC_PollForConversion+0x124>
 80022d8:	f7ff fc3c 	bl	8001b54 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d212      	bcs.n	800230e <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10b      	bne.n	800230e <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f043 0204 	orr.w	r2, r3, #4
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e04f      	b.n	80023ae <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	4013      	ands	r3, r2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0d6      	beq.n	80022ca <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002332:	2b00      	cmp	r3, #0
 8002334:	d131      	bne.n	800239a <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800233c:	2b00      	cmp	r3, #0
 800233e:	d12c      	bne.n	800239a <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b08      	cmp	r3, #8
 800234c:	d125      	bne.n	800239a <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d112      	bne.n	8002382 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d112      	bne.n	800239a <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	f043 0201 	orr.w	r2, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	641a      	str	r2, [r3, #64]	; 0x40
 8002380:	e00b      	b.n	800239a <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f043 0220 	orr.w	r2, r3, #32
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	f043 0201 	orr.w	r2, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d103      	bne.n	80023ac <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	50000100 	.word	0x50000100
 80023bc:	50000300 	.word	0x50000300
 80023c0:	50000700 	.word	0x50000700
 80023c4:	50000400 	.word	0x50000400

080023c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b09b      	sub	sp, #108	; 0x6c
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x22>
 8002402:	2302      	movs	r3, #2
 8002404:	e2cb      	b.n	800299e <HAL_ADC_ConfigChannel+0x5ba>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	f040 82af 	bne.w	800297c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b04      	cmp	r3, #4
 8002424:	d81c      	bhi.n	8002460 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	4413      	add	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	461a      	mov	r2, r3
 800243a:	231f      	movs	r3, #31
 800243c:	4093      	lsls	r3, r2
 800243e:	43db      	mvns	r3, r3
 8002440:	4019      	ands	r1, r3
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4413      	add	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	fa00 f203 	lsl.w	r2, r0, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	631a      	str	r2, [r3, #48]	; 0x30
 800245e:	e063      	b.n	8002528 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b09      	cmp	r3, #9
 8002466:	d81e      	bhi.n	80024a6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	4413      	add	r3, r2
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	3b1e      	subs	r3, #30
 800247c:	221f      	movs	r2, #31
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	4019      	ands	r1, r3
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4413      	add	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	3b1e      	subs	r3, #30
 8002498:	fa00 f203 	lsl.w	r2, r0, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	635a      	str	r2, [r3, #52]	; 0x34
 80024a4:	e040      	b.n	8002528 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b0e      	cmp	r3, #14
 80024ac:	d81e      	bhi.n	80024ec <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	3b3c      	subs	r3, #60	; 0x3c
 80024c2:	221f      	movs	r2, #31
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	4019      	ands	r1, r3
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	3b3c      	subs	r3, #60	; 0x3c
 80024de:	fa00 f203 	lsl.w	r2, r0, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	639a      	str	r2, [r3, #56]	; 0x38
 80024ea:	e01d      	b.n	8002528 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	4413      	add	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	3b5a      	subs	r3, #90	; 0x5a
 8002500:	221f      	movs	r2, #31
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	4019      	ands	r1, r3
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4413      	add	r3, r2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	3b5a      	subs	r3, #90	; 0x5a
 800251c:	fa00 f203 	lsl.w	r2, r0, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b00      	cmp	r3, #0
 8002534:	f040 80e5 	bne.w	8002702 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b09      	cmp	r3, #9
 800253e:	d91c      	bls.n	800257a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6999      	ldr	r1, [r3, #24]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	4613      	mov	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	4413      	add	r3, r2
 8002550:	3b1e      	subs	r3, #30
 8002552:	2207      	movs	r2, #7
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	4019      	ands	r1, r3
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	6898      	ldr	r0, [r3, #8]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4613      	mov	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4413      	add	r3, r2
 800256a:	3b1e      	subs	r3, #30
 800256c:	fa00 f203 	lsl.w	r2, r0, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	619a      	str	r2, [r3, #24]
 8002578:	e019      	b.n	80025ae <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6959      	ldr	r1, [r3, #20]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	2207      	movs	r2, #7
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	4019      	ands	r1, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	6898      	ldr	r0, [r3, #8]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4613      	mov	r3, r2
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	4413      	add	r3, r2
 80025a2:	fa00 f203 	lsl.w	r2, r0, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	08db      	lsrs	r3, r3, #3
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d84f      	bhi.n	8002670 <HAL_ADC_ConfigChannel+0x28c>
 80025d0:	a201      	add	r2, pc, #4	; (adr r2, 80025d8 <HAL_ADC_ConfigChannel+0x1f4>)
 80025d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d6:	bf00      	nop
 80025d8:	080025e9 	.word	0x080025e9
 80025dc:	0800260b 	.word	0x0800260b
 80025e0:	0800262d 	.word	0x0800262d
 80025e4:	0800264f 	.word	0x0800264f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025ee:	4b9f      	ldr	r3, [pc, #636]	; (800286c <HAL_ADC_ConfigChannel+0x488>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	0691      	lsls	r1, r2, #26
 80025f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025fa:	430a      	orrs	r2, r1
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002606:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002608:	e07e      	b.n	8002708 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002610:	4b96      	ldr	r3, [pc, #600]	; (800286c <HAL_ADC_ConfigChannel+0x488>)
 8002612:	4013      	ands	r3, r2
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	0691      	lsls	r1, r2, #26
 800261a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800261c:	430a      	orrs	r2, r1
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002628:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800262a:	e06d      	b.n	8002708 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002632:	4b8e      	ldr	r3, [pc, #568]	; (800286c <HAL_ADC_ConfigChannel+0x488>)
 8002634:	4013      	ands	r3, r2
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	0691      	lsls	r1, r2, #26
 800263c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800263e:	430a      	orrs	r2, r1
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800264a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800264c:	e05c      	b.n	8002708 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002654:	4b85      	ldr	r3, [pc, #532]	; (800286c <HAL_ADC_ConfigChannel+0x488>)
 8002656:	4013      	ands	r3, r2
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	0691      	lsls	r1, r2, #26
 800265e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002660:	430a      	orrs	r2, r1
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800266c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800266e:	e04b      	b.n	8002708 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002676:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	069b      	lsls	r3, r3, #26
 8002680:	429a      	cmp	r2, r3
 8002682:	d107      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002692:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800269a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	069b      	lsls	r3, r3, #26
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d107      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026b6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	069b      	lsls	r3, r3, #26
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d107      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026da:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	069b      	lsls	r3, r3, #26
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d10a      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026fe:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002700:	e001      	b.n	8002706 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002702:	bf00      	nop
 8002704:	e000      	b.n	8002708 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002706:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	2b01      	cmp	r3, #1
 8002714:	d108      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x344>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x344>
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <HAL_ADC_ConfigChannel+0x346>
 8002728:	2300      	movs	r3, #0
 800272a:	2b00      	cmp	r3, #0
 800272c:	f040 8131 	bne.w	8002992 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d00f      	beq.n	8002758 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2201      	movs	r2, #1
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43da      	mvns	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	400a      	ands	r2, r1
 8002752:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002756:	e049      	b.n	80027ec <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2201      	movs	r2, #1
 8002766:	409a      	lsls	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b09      	cmp	r3, #9
 8002778:	d91c      	bls.n	80027b4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6999      	ldr	r1, [r3, #24]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4613      	mov	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4413      	add	r3, r2
 800278a:	3b1b      	subs	r3, #27
 800278c:	2207      	movs	r2, #7
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	4019      	ands	r1, r3
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6898      	ldr	r0, [r3, #8]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4613      	mov	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	3b1b      	subs	r3, #27
 80027a6:	fa00 f203 	lsl.w	r2, r0, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	619a      	str	r2, [r3, #24]
 80027b2:	e01b      	b.n	80027ec <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6959      	ldr	r1, [r3, #20]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	4613      	mov	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	2207      	movs	r2, #7
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	4019      	ands	r1, r3
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	6898      	ldr	r0, [r3, #8]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	4613      	mov	r3, r2
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	4413      	add	r3, r2
 80027e0:	fa00 f203 	lsl.w	r2, r0, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027f4:	d004      	beq.n	8002800 <HAL_ADC_ConfigChannel+0x41c>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1d      	ldr	r2, [pc, #116]	; (8002870 <HAL_ADC_ConfigChannel+0x48c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d101      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x420>
 8002800:	4b1c      	ldr	r3, [pc, #112]	; (8002874 <HAL_ADC_ConfigChannel+0x490>)
 8002802:	e000      	b.n	8002806 <HAL_ADC_ConfigChannel+0x422>
 8002804:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <HAL_ADC_ConfigChannel+0x494>)
 8002806:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b10      	cmp	r3, #16
 800280e:	d105      	bne.n	800281c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002818:	2b00      	cmp	r3, #0
 800281a:	d015      	beq.n	8002848 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002820:	2b11      	cmp	r3, #17
 8002822:	d105      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00b      	beq.n	8002848 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002834:	2b12      	cmp	r3, #18
 8002836:	f040 80ac 	bne.w	8002992 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800283a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002842:	2b00      	cmp	r3, #0
 8002844:	f040 80a5 	bne.w	8002992 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002850:	d102      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x474>
 8002852:	4b07      	ldr	r3, [pc, #28]	; (8002870 <HAL_ADC_ConfigChannel+0x48c>)
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	e023      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x4bc>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a04      	ldr	r2, [pc, #16]	; (8002870 <HAL_ADC_ConfigChannel+0x48c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d10c      	bne.n	800287c <HAL_ADC_ConfigChannel+0x498>
 8002862:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	e01a      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x4bc>
 800286a:	bf00      	nop
 800286c:	83fff000 	.word	0x83fff000
 8002870:	50000100 	.word	0x50000100
 8002874:	50000300 	.word	0x50000300
 8002878:	50000700 	.word	0x50000700
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a4a      	ldr	r2, [pc, #296]	; (80029ac <HAL_ADC_ConfigChannel+0x5c8>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d102      	bne.n	800288c <HAL_ADC_ConfigChannel+0x4a8>
 8002886:	4b4a      	ldr	r3, [pc, #296]	; (80029b0 <HAL_ADC_ConfigChannel+0x5cc>)
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	e009      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x4bc>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a47      	ldr	r2, [pc, #284]	; (80029b0 <HAL_ADC_ConfigChannel+0x5cc>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d102      	bne.n	800289c <HAL_ADC_ConfigChannel+0x4b8>
 8002896:	4b45      	ldr	r3, [pc, #276]	; (80029ac <HAL_ADC_ConfigChannel+0x5c8>)
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	e001      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x4bc>
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d108      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x4dc>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x4dc>
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x4de>
 80028c0:	2300      	movs	r3, #0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d150      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80028c6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d010      	beq.n	80028ee <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d107      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x504>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x504>
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <HAL_ADC_ConfigChannel+0x506>
 80028e8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d13c      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b10      	cmp	r3, #16
 80028f4:	d11d      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x54e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028fe:	d118      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002908:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800290a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800290c:	4b29      	ldr	r3, [pc, #164]	; (80029b4 <HAL_ADC_ConfigChannel+0x5d0>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a29      	ldr	r2, [pc, #164]	; (80029b8 <HAL_ADC_ConfigChannel+0x5d4>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	0c9a      	lsrs	r2, r3, #18
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002922:	e002      	b.n	800292a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	3b01      	subs	r3, #1
 8002928:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1f9      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002930:	e02e      	b.n	8002990 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b11      	cmp	r3, #17
 8002938:	d10b      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x56e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002942:	d106      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800294c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800294e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002950:	e01e      	b.n	8002990 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b12      	cmp	r3, #18
 8002958:	d11a      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800295a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002964:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002966:	e013      	b.n	8002990 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	f043 0220 	orr.w	r2, r3, #32
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800297a:	e00a      	b.n	8002992 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	f043 0220 	orr.w	r2, r3, #32
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800298e:	e000      	b.n	8002992 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002990:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800299a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800299e:	4618      	mov	r0, r3
 80029a0:	376c      	adds	r7, #108	; 0x6c
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	50000400 	.word	0x50000400
 80029b0:	50000500 	.word	0x50000500
 80029b4:	20000000 	.word	0x20000000
 80029b8:	431bde83 	.word	0x431bde83

080029bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80029bc:	b480      	push	{r7}
 80029be:	b099      	sub	sp, #100	; 0x64
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029d4:	d102      	bne.n	80029dc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80029d6:	4b6d      	ldr	r3, [pc, #436]	; (8002b8c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	e01a      	b.n	8002a12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a6a      	ldr	r2, [pc, #424]	; (8002b8c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d103      	bne.n	80029ee <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80029e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	e011      	b.n	8002a12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a67      	ldr	r2, [pc, #412]	; (8002b90 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d102      	bne.n	80029fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80029f8:	4b66      	ldr	r3, [pc, #408]	; (8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	e009      	b.n	8002a12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a64      	ldr	r2, [pc, #400]	; (8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d102      	bne.n	8002a0e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002a08:	4b61      	ldr	r3, [pc, #388]	; (8002b90 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	e001      	b.n	8002a12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0b0      	b.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e0a9      	b.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f040 808d 	bne.w	8002b5c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f040 8086 	bne.w	8002b5c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a58:	d004      	beq.n	8002a64 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a4b      	ldr	r2, [pc, #300]	; (8002b8c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d101      	bne.n	8002a68 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002a64:	4b4c      	ldr	r3, [pc, #304]	; (8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002a66:	e000      	b.n	8002a6a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002a68:	4b4c      	ldr	r3, [pc, #304]	; (8002b9c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002a6a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d040      	beq.n	8002af6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002a74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	6859      	ldr	r1, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a86:	035b      	lsls	r3, r3, #13
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a8e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d108      	bne.n	8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d15c      	bne.n	8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d107      	bne.n	8002ad2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002ad2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d14b      	bne.n	8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002ad8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ae0:	f023 030f 	bic.w	r3, r3, #15
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	6811      	ldr	r1, [r2, #0]
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	6892      	ldr	r2, [r2, #8]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	431a      	orrs	r2, r3
 8002af0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002af2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002af4:	e03c      	b.n	8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002af6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002afe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b00:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d108      	bne.n	8002b22 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002b22:	2300      	movs	r3, #0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d123      	bne.n	8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d107      	bne.n	8002b44 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002b44:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d112      	bne.n	8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b52:	f023 030f 	bic.w	r3, r3, #15
 8002b56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b58:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b5a:	e009      	b.n	8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	f043 0220 	orr.w	r2, r3, #32
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002b6e:	e000      	b.n	8002b72 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b70:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002b7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3764      	adds	r7, #100	; 0x64
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	50000100 	.word	0x50000100
 8002b90:	50000400 	.word	0x50000400
 8002b94:	50000500 	.word	0x50000500
 8002b98:	50000300 	.word	0x50000300
 8002b9c:	50000700 	.word	0x50000700

08002ba0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d108      	bne.n	8002bcc <ADC_Enable+0x2c>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <ADC_Enable+0x2c>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e000      	b.n	8002bce <ADC_Enable+0x2e>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d143      	bne.n	8002c5a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	4b22      	ldr	r3, [pc, #136]	; (8002c64 <ADC_Enable+0xc4>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00d      	beq.n	8002bfc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f043 0210 	orr.w	r2, r3, #16
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf0:	f043 0201 	orr.w	r2, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e02f      	b.n	8002c5c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002c0c:	f7fe ffa2 	bl	8001b54 <HAL_GetTick>
 8002c10:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002c12:	e01b      	b.n	8002c4c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c14:	f7fe ff9e 	bl	8001b54 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d914      	bls.n	8002c4c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d00d      	beq.n	8002c4c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	f043 0210 	orr.w	r2, r3, #16
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c40:	f043 0201 	orr.w	r2, r3, #1
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e007      	b.n	8002c5c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d1dc      	bne.n	8002c14 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	8000003f 	.word	0x8000003f

08002c68 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d108      	bne.n	8002c94 <ADC_Disable+0x2c>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d101      	bne.n	8002c94 <ADC_Disable+0x2c>
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <ADC_Disable+0x2e>
 8002c94:	2300      	movs	r3, #0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d047      	beq.n	8002d2a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 030d 	and.w	r3, r3, #13
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d10f      	bne.n	8002cc8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0202 	orr.w	r2, r2, #2
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002cc0:	f7fe ff48 	bl	8001b54 <HAL_GetTick>
 8002cc4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002cc6:	e029      	b.n	8002d1c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	f043 0210 	orr.w	r2, r3, #16
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd8:	f043 0201 	orr.w	r2, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e023      	b.n	8002d2c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ce4:	f7fe ff36 	bl	8001b54 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d914      	bls.n	8002d1c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d10d      	bne.n	8002d1c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	f043 0210 	orr.w	r2, r3, #16
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d10:	f043 0201 	orr.w	r2, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e007      	b.n	8002d2c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d0dc      	beq.n	8002ce4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 809b 	beq.w	8002e90 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d68:	d12a      	bne.n	8002dc0 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d126      	bne.n	8002dc0 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d122      	bne.n	8002dc0 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002d7a:	230c      	movs	r3, #12
 8002d7c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002d7e:	e014      	b.n	8002daa <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4a46      	ldr	r2, [pc, #280]	; (8002e9c <ADC_ConversionStop+0x168>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d90d      	bls.n	8002da4 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	f043 0210 	orr.w	r2, r3, #16
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d98:	f043 0201 	orr.w	r2, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e076      	b.n	8002e92 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	3301      	adds	r3, #1
 8002da8:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db4:	2b40      	cmp	r3, #64	; 0x40
 8002db6:	d1e3      	bne.n	8002d80 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2240      	movs	r2, #64	; 0x40
 8002dbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	2b60      	cmp	r3, #96	; 0x60
 8002dc4:	d015      	beq.n	8002df2 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d10e      	bne.n	8002df2 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d107      	bne.n	8002df2 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0210 	orr.w	r2, r2, #16
 8002df0:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b0c      	cmp	r3, #12
 8002df6:	d015      	beq.n	8002e24 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d10e      	bne.n	8002e24 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d107      	bne.n	8002e24 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0220 	orr.w	r2, r2, #32
 8002e22:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2b60      	cmp	r3, #96	; 0x60
 8002e28:	d005      	beq.n	8002e36 <ADC_ConversionStop+0x102>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b6c      	cmp	r3, #108	; 0x6c
 8002e2e:	d105      	bne.n	8002e3c <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002e30:	230c      	movs	r3, #12
 8002e32:	617b      	str	r3, [r7, #20]
        break;
 8002e34:	e005      	b.n	8002e42 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002e36:	2308      	movs	r3, #8
 8002e38:	617b      	str	r3, [r7, #20]
        break;
 8002e3a:	e002      	b.n	8002e42 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002e3c:	2304      	movs	r3, #4
 8002e3e:	617b      	str	r3, [r7, #20]
        break;
 8002e40:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002e42:	f7fe fe87 	bl	8001b54 <HAL_GetTick>
 8002e46:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002e48:	e01b      	b.n	8002e82 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002e4a:	f7fe fe83 	bl	8001b54 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b0b      	cmp	r3, #11
 8002e56:	d914      	bls.n	8002e82 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00d      	beq.n	8002e82 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f043 0210 	orr.w	r2, r3, #16
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	f043 0201 	orr.w	r2, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e007      	b.n	8002e92 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1dc      	bne.n	8002e4a <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	000993ff 	.word	0x000993ff

08002ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ed2:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	60d3      	str	r3, [r2, #12]
}
 8002ed8:	bf00      	nop
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eec:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <__NVIC_GetPriorityGrouping+0x18>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	0a1b      	lsrs	r3, r3, #8
 8002ef2:	f003 0307 	and.w	r3, r3, #7
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	db0b      	blt.n	8002f2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	f003 021f 	and.w	r2, r3, #31
 8002f1c:	4907      	ldr	r1, [pc, #28]	; (8002f3c <__NVIC_EnableIRQ+0x38>)
 8002f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	2001      	movs	r0, #1
 8002f26:	fa00 f202 	lsl.w	r2, r0, r2
 8002f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	e000e100 	.word	0xe000e100

08002f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	6039      	str	r1, [r7, #0]
 8002f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	db0a      	blt.n	8002f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	490c      	ldr	r1, [pc, #48]	; (8002f8c <__NVIC_SetPriority+0x4c>)
 8002f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5e:	0112      	lsls	r2, r2, #4
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	440b      	add	r3, r1
 8002f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f68:	e00a      	b.n	8002f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	4908      	ldr	r1, [pc, #32]	; (8002f90 <__NVIC_SetPriority+0x50>)
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	3b04      	subs	r3, #4
 8002f78:	0112      	lsls	r2, r2, #4
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	761a      	strb	r2, [r3, #24]
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	e000e100 	.word	0xe000e100
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b089      	sub	sp, #36	; 0x24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f1c3 0307 	rsb	r3, r3, #7
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	bf28      	it	cs
 8002fb2:	2304      	movcs	r3, #4
 8002fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3304      	adds	r3, #4
 8002fba:	2b06      	cmp	r3, #6
 8002fbc:	d902      	bls.n	8002fc4 <NVIC_EncodePriority+0x30>
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3b03      	subs	r3, #3
 8002fc2:	e000      	b.n	8002fc6 <NVIC_EncodePriority+0x32>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43da      	mvns	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	401a      	ands	r2, r3
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe6:	43d9      	mvns	r1, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fec:	4313      	orrs	r3, r2
         );
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3724      	adds	r7, #36	; 0x24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff ff4c 	bl	8002ea0 <__NVIC_SetPriorityGrouping>
}
 8003008:	bf00      	nop
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003022:	f7ff ff61 	bl	8002ee8 <__NVIC_GetPriorityGrouping>
 8003026:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	6978      	ldr	r0, [r7, #20]
 800302e:	f7ff ffb1 	bl	8002f94 <NVIC_EncodePriority>
 8003032:	4602      	mov	r2, r0
 8003034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff ff80 	bl	8002f40 <__NVIC_SetPriority>
}
 8003040:	bf00      	nop
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff ff54 	bl	8002f04 <__NVIC_EnableIRQ>
}
 800305c:	bf00      	nop
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003076:	2b02      	cmp	r3, #2
 8003078:	d005      	beq.n	8003086 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2204      	movs	r2, #4
 800307e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
 8003084:	e027      	b.n	80030d6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 020e 	bic.w	r2, r2, #14
 8003094:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0201 	bic.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ae:	2101      	movs	r1, #1
 80030b0:	fa01 f202 	lsl.w	r2, r1, r2
 80030b4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	4798      	blx	r3
    } 
  }
  return status;
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
	...

080030fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800310a:	e154      	b.n	80033b6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	2101      	movs	r1, #1
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	fa01 f303 	lsl.w	r3, r1, r3
 8003118:	4013      	ands	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 8146 	beq.w	80033b0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 0303 	and.w	r3, r3, #3
 800312c:	2b01      	cmp	r3, #1
 800312e:	d005      	beq.n	800313c <HAL_GPIO_Init+0x40>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d130      	bne.n	800319e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	2203      	movs	r2, #3
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4013      	ands	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003172:	2201      	movs	r2, #1
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43db      	mvns	r3, r3
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4013      	ands	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	f003 0201 	and.w	r2, r3, #1
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d017      	beq.n	80031da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	2203      	movs	r2, #3
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43db      	mvns	r3, r3
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4013      	ands	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d123      	bne.n	800322e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	08da      	lsrs	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3208      	adds	r2, #8
 80031ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	220f      	movs	r2, #15
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4013      	ands	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	08da      	lsrs	r2, r3, #3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3208      	adds	r2, #8
 8003228:	6939      	ldr	r1, [r7, #16]
 800322a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	2203      	movs	r2, #3
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4013      	ands	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 0203 	and.w	r2, r3, #3
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 80a0 	beq.w	80033b0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003270:	4b58      	ldr	r3, [pc, #352]	; (80033d4 <HAL_GPIO_Init+0x2d8>)
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	4a57      	ldr	r2, [pc, #348]	; (80033d4 <HAL_GPIO_Init+0x2d8>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	6193      	str	r3, [r2, #24]
 800327c:	4b55      	ldr	r3, [pc, #340]	; (80033d4 <HAL_GPIO_Init+0x2d8>)
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003288:	4a53      	ldr	r2, [pc, #332]	; (80033d8 <HAL_GPIO_Init+0x2dc>)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	089b      	lsrs	r3, r3, #2
 800328e:	3302      	adds	r3, #2
 8003290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003294:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	220f      	movs	r2, #15
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4013      	ands	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032b2:	d019      	beq.n	80032e8 <HAL_GPIO_Init+0x1ec>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a49      	ldr	r2, [pc, #292]	; (80033dc <HAL_GPIO_Init+0x2e0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d013      	beq.n	80032e4 <HAL_GPIO_Init+0x1e8>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a48      	ldr	r2, [pc, #288]	; (80033e0 <HAL_GPIO_Init+0x2e4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00d      	beq.n	80032e0 <HAL_GPIO_Init+0x1e4>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a47      	ldr	r2, [pc, #284]	; (80033e4 <HAL_GPIO_Init+0x2e8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d007      	beq.n	80032dc <HAL_GPIO_Init+0x1e0>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a46      	ldr	r2, [pc, #280]	; (80033e8 <HAL_GPIO_Init+0x2ec>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d101      	bne.n	80032d8 <HAL_GPIO_Init+0x1dc>
 80032d4:	2304      	movs	r3, #4
 80032d6:	e008      	b.n	80032ea <HAL_GPIO_Init+0x1ee>
 80032d8:	2305      	movs	r3, #5
 80032da:	e006      	b.n	80032ea <HAL_GPIO_Init+0x1ee>
 80032dc:	2303      	movs	r3, #3
 80032de:	e004      	b.n	80032ea <HAL_GPIO_Init+0x1ee>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e002      	b.n	80032ea <HAL_GPIO_Init+0x1ee>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <HAL_GPIO_Init+0x1ee>
 80032e8:	2300      	movs	r3, #0
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	f002 0203 	and.w	r2, r2, #3
 80032f0:	0092      	lsls	r2, r2, #2
 80032f2:	4093      	lsls	r3, r2
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032fa:	4937      	ldr	r1, [pc, #220]	; (80033d8 <HAL_GPIO_Init+0x2dc>)
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	089b      	lsrs	r3, r3, #2
 8003300:	3302      	adds	r3, #2
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003308:	4b38      	ldr	r3, [pc, #224]	; (80033ec <HAL_GPIO_Init+0x2f0>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	43db      	mvns	r3, r3
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800332c:	4a2f      	ldr	r2, [pc, #188]	; (80033ec <HAL_GPIO_Init+0x2f0>)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003332:	4b2e      	ldr	r3, [pc, #184]	; (80033ec <HAL_GPIO_Init+0x2f0>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	43db      	mvns	r3, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4013      	ands	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003356:	4a25      	ldr	r2, [pc, #148]	; (80033ec <HAL_GPIO_Init+0x2f0>)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800335c:	4b23      	ldr	r3, [pc, #140]	; (80033ec <HAL_GPIO_Init+0x2f0>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	43db      	mvns	r3, r3
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4013      	ands	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003380:	4a1a      	ldr	r2, [pc, #104]	; (80033ec <HAL_GPIO_Init+0x2f0>)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003386:	4b19      	ldr	r3, [pc, #100]	; (80033ec <HAL_GPIO_Init+0x2f0>)
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	43db      	mvns	r3, r3
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4013      	ands	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80033aa:	4a10      	ldr	r2, [pc, #64]	; (80033ec <HAL_GPIO_Init+0x2f0>)
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	3301      	adds	r3, #1
 80033b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f47f aea3 	bne.w	800310c <HAL_GPIO_Init+0x10>
  }
}
 80033c6:	bf00      	nop
 80033c8:	bf00      	nop
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40010000 	.word	0x40010000
 80033dc:	48000400 	.word	0x48000400
 80033e0:	48000800 	.word	0x48000800
 80033e4:	48000c00 	.word	0x48000c00
 80033e8:	48001000 	.word	0x48001000
 80033ec:	40010400 	.word	0x40010400

080033f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	807b      	strh	r3, [r7, #2]
 80033fc:	4613      	mov	r3, r2
 80033fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003400:	787b      	ldrb	r3, [r7, #1]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003406:	887a      	ldrh	r2, [r7, #2]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800340c:	e002      	b.n	8003414 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800340e:	887a      	ldrh	r2, [r7, #2]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e081      	b.n	8003536 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7fe fa00 	bl	800184c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2224      	movs	r2, #36	; 0x24
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0201 	bic.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003470:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003480:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d107      	bne.n	800349a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	e006      	b.n	80034a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80034a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d104      	bne.n	80034ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691a      	ldr	r2, [r3, #16]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69d9      	ldr	r1, [r3, #28]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1a      	ldr	r2, [r3, #32]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	4613      	mov	r3, r2
 800354c:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b20      	cmp	r3, #32
 8003558:	d139      	bne.n	80035ce <HAL_I2C_Slave_Transmit_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_I2C_Slave_Transmit_IT+0x28>
 8003564:	2302      	movs	r3, #2
 8003566:	e033      	b.n	80035d0 <HAL_I2C_Slave_Transmit_IT+0x90>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2221      	movs	r2, #33	; 0x21
 8003574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003594:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	88fa      	ldrh	r2, [r7, #6]
 80035a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <HAL_I2C_Slave_Transmit_IT+0x98>)
 80035b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4a09      	ldr	r2, [pc, #36]	; (80035dc <HAL_I2C_Slave_Transmit_IT+0x9c>)
 80035b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80035c0:	f248 0101 	movw	r1, #32769	; 0x8001
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f001 f873 	bl	80046b0 <I2C_Enable_IRQ>

    return HAL_OK;
 80035ca:	2300      	movs	r3, #0
 80035cc:	e000      	b.n	80035d0 <HAL_I2C_Slave_Transmit_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 80035ce:	2302      	movs	r3, #2
  }
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	ffff0000 	.word	0xffff0000
 80035dc:	080037a1 	.word	0x080037a1

080035e0 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	4613      	mov	r3, r2
 80035ec:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b20      	cmp	r3, #32
 80035f8:	d139      	bne.n	800366e <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_I2C_Slave_Receive_IT+0x28>
 8003604:	2302      	movs	r3, #2
 8003606:	e033      	b.n	8003670 <HAL_I2C_Slave_Receive_IT+0x90>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2222      	movs	r2, #34	; 0x22
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003634:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	88fa      	ldrh	r2, [r7, #6]
 8003640:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <HAL_I2C_Slave_Receive_IT+0x98>)
 8003650:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4a09      	ldr	r2, [pc, #36]	; (800367c <HAL_I2C_Slave_Receive_IT+0x9c>)
 8003656:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8003660:	f248 0102 	movw	r1, #32770	; 0x8002
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f001 f823 	bl	80046b0 <I2C_Enable_IRQ>

    return HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	e000      	b.n	8003670 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 800366e:	2302      	movs	r3, #2
  }
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	ffff0000 	.word	0xffff0000
 800367c:	080037a1 	.word	0x080037a1

08003680 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	68f9      	ldr	r1, [r7, #12]
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	4798      	blx	r3
  }
}
 80036ac:	bf00      	nop
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	70fb      	strb	r3, [r7, #3]
 8003710:	4613      	mov	r3, r2
 8003712:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003792:	b2db      	uxtb	r3, r3
}
 8003794:	4618      	mov	r0, r3
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <I2C_Slave_ISR_IT+0x24>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e0ec      	b.n	800399e <I2C_Slave_ISR_IT+0x1fe>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d009      	beq.n	80037ec <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80037e4:	6939      	ldr	r1, [r7, #16]
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 fc9a 	bl	8004120 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d04d      	beq.n	8003894 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	091b      	lsrs	r3, r3, #4
 80037fc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003800:	2b00      	cmp	r3, #0
 8003802:	d047      	beq.n	8003894 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d128      	bne.n	8003860 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b28      	cmp	r3, #40	; 0x28
 8003818:	d108      	bne.n	800382c <I2C_Slave_ISR_IT+0x8c>
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003820:	d104      	bne.n	800382c <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003822:	6939      	ldr	r1, [r7, #16]
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 fd85 	bl	8004334 <I2C_ITListenCplt>
 800382a:	e032      	b.n	8003892 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b29      	cmp	r3, #41	; 0x29
 8003836:	d10e      	bne.n	8003856 <I2C_Slave_ISR_IT+0xb6>
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800383e:	d00a      	beq.n	8003856 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2210      	movs	r2, #16
 8003846:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 fec0 	bl	80045ce <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 fb3d 	bl	8003ece <I2C_ITSlaveSeqCplt>
 8003854:	e01d      	b.n	8003892 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2210      	movs	r2, #16
 800385c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800385e:	e096      	b.n	800398e <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2210      	movs	r2, #16
 8003866:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386c:	f043 0204 	orr.w	r2, r3, #4
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d004      	beq.n	8003884 <I2C_Slave_ISR_IT+0xe4>
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003880:	f040 8085 	bne.w	800398e <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003888:	4619      	mov	r1, r3
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 fda8 	bl	80043e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003890:	e07d      	b.n	800398e <I2C_Slave_ISR_IT+0x1ee>
 8003892:	e07c      	b.n	800398e <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	089b      	lsrs	r3, r3, #2
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d030      	beq.n	8003902 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	089b      	lsrs	r3, r3, #2
 80038a4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d02a      	beq.n	8003902 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d018      	beq.n	80038e8 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d14f      	bne.n	8003992 <I2C_Slave_ISR_IT+0x1f2>
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038f8:	d04b      	beq.n	8003992 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 fae7 	bl	8003ece <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003900:	e047      	b.n	8003992 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	08db      	lsrs	r3, r3, #3
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	08db      	lsrs	r3, r3, #3
 8003912:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003916:	2b00      	cmp	r3, #0
 8003918:	d004      	beq.n	8003924 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800391a:	6939      	ldr	r1, [r7, #16]
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 fa15 	bl	8003d4c <I2C_ITAddrCplt>
 8003922:	e037      	b.n	8003994 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	085b      	lsrs	r3, r3, #1
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d031      	beq.n	8003994 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	085b      	lsrs	r3, r3, #1
 8003934:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003938:	2b00      	cmp	r3, #0
 800393a:	d02b      	beq.n	8003994 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d018      	beq.n	8003978 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	781a      	ldrb	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396e:	3b01      	subs	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	851a      	strh	r2, [r3, #40]	; 0x28
 8003976:	e00d      	b.n	8003994 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800397e:	d002      	beq.n	8003986 <I2C_Slave_ISR_IT+0x1e6>
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 faa1 	bl	8003ece <I2C_ITSlaveSeqCplt>
 800398c:	e002      	b.n	8003994 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800398e:	bf00      	nop
 8003990:	e000      	b.n	8003994 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003992:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3718      	adds	r7, #24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b088      	sub	sp, #32
 80039aa:	af02      	add	r7, sp, #8
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <I2C_Master_ISR_DMA+0x1a>
 80039bc:	2302      	movs	r3, #2
 80039be:	e0e1      	b.n	8003b84 <I2C_Master_ISR_DMA+0x1de>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	091b      	lsrs	r3, r3, #4
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d017      	beq.n	8003a04 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	091b      	lsrs	r3, r3, #4
 80039d8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d011      	beq.n	8003a04 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2210      	movs	r2, #16
 80039e6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ec:	f043 0204 	orr.w	r2, r3, #4
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80039f4:	2120      	movs	r1, #32
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 fe5a 	bl	80046b0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fde6 	bl	80045ce <I2C_Flush_TXDR>
 8003a02:	e0ba      	b.n	8003b7a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	09db      	lsrs	r3, r3, #7
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d072      	beq.n	8003af6 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	099b      	lsrs	r3, r3, #6
 8003a14:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d06c      	beq.n	8003af6 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a2a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d04e      	beq.n	8003ad4 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a42:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2bff      	cmp	r3, #255	; 0xff
 8003a4c:	d906      	bls.n	8003a5c <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	22ff      	movs	r2, #255	; 0xff
 8003a52:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003a54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	e010      	b.n	8003a7e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a6e:	d003      	beq.n	8003a78 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	e002      	b.n	8003a7e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003a78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a7c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	8a79      	ldrh	r1, [r7, #18]
 8003a86:	2300      	movs	r3, #0
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 fde1 	bl	8004654 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b22      	cmp	r3, #34	; 0x22
 8003aae:	d108      	bne.n	8003ac2 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003abe:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003ac0:	e05b      	b.n	8003b7a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ad0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003ad2:	e052      	b.n	8003b7a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ade:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ae2:	d003      	beq.n	8003aec <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 f9b5 	bl	8003e54 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003aea:	e046      	b.n	8003b7a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003aec:	2140      	movs	r1, #64	; 0x40
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 fc76 	bl	80043e0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003af4:	e041      	b.n	8003b7a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	099b      	lsrs	r3, r3, #6
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d029      	beq.n	8003b56 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	099b      	lsrs	r3, r3, #6
 8003b06:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d023      	beq.n	8003b56 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d119      	bne.n	8003b4c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b26:	d027      	beq.n	8003b78 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b30:	d108      	bne.n	8003b44 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b40:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003b42:	e019      	b.n	8003b78 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 f985 	bl	8003e54 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003b4a:	e015      	b.n	8003b78 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003b4c:	2140      	movs	r1, #64	; 0x40
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fc46 	bl	80043e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003b54:	e010      	b.n	8003b78 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	095b      	lsrs	r3, r3, #5
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00b      	beq.n	8003b7a <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003b6e:	68b9      	ldr	r1, [r7, #8]
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 fa0b 	bl	8003f8c <I2C_ITMasterCplt>
 8003b76:	e000      	b.n	8003b7a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003b78:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <I2C_Slave_ISR_DMA+0x24>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e0c9      	b.n	8003d44 <I2C_Slave_ISR_DMA+0x1b8>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d009      	beq.n	8003bd8 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003bd0:	68b9      	ldr	r1, [r7, #8]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 faa4 	bl	8004120 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	091b      	lsrs	r3, r3, #4
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 809a 	beq.w	8003d1a <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 8093 	beq.w	8003d1a <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	0b9b      	lsrs	r3, r3, #14
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d105      	bne.n	8003c0c <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	0bdb      	lsrs	r3, r3, #15
 8003c04:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d07f      	beq.n	8003d0c <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00d      	beq.n	8003c30 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	0bdb      	lsrs	r3, r3, #15
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d007      	beq.n	8003c30 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00d      	beq.n	8003c54 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	0b9b      	lsrs	r3, r3, #14
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8003c50:	2301      	movs	r3, #1
 8003c52:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d128      	bne.n	8003cac <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b28      	cmp	r3, #40	; 0x28
 8003c64:	d108      	bne.n	8003c78 <I2C_Slave_ISR_DMA+0xec>
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c6c:	d104      	bne.n	8003c78 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 fb5f 	bl	8004334 <I2C_ITListenCplt>
 8003c76:	e048      	b.n	8003d0a <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b29      	cmp	r3, #41	; 0x29
 8003c82:	d10e      	bne.n	8003ca2 <I2C_Slave_ISR_DMA+0x116>
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c8a:	d00a      	beq.n	8003ca2 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2210      	movs	r2, #16
 8003c92:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 fc9a 	bl	80045ce <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 f917 	bl	8003ece <I2C_ITSlaveSeqCplt>
 8003ca0:	e033      	b.n	8003d0a <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2210      	movs	r2, #16
 8003ca8:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003caa:	e034      	b.n	8003d16 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2210      	movs	r2, #16
 8003cb2:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb8:	f043 0204 	orr.w	r2, r3, #4
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cc6:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <I2C_Slave_ISR_DMA+0x14a>
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cd4:	d11f      	bne.n	8003d16 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003cd6:	7dfb      	ldrb	r3, [r7, #23]
 8003cd8:	2b21      	cmp	r3, #33	; 0x21
 8003cda:	d002      	beq.n	8003ce2 <I2C_Slave_ISR_DMA+0x156>
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
 8003cde:	2b29      	cmp	r3, #41	; 0x29
 8003ce0:	d103      	bne.n	8003cea <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2221      	movs	r2, #33	; 0x21
 8003ce6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ce8:	e008      	b.n	8003cfc <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003cea:	7dfb      	ldrb	r3, [r7, #23]
 8003cec:	2b22      	cmp	r3, #34	; 0x22
 8003cee:	d002      	beq.n	8003cf6 <I2C_Slave_ISR_DMA+0x16a>
 8003cf0:	7dfb      	ldrb	r3, [r7, #23]
 8003cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8003cf4:	d102      	bne.n	8003cfc <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2222      	movs	r2, #34	; 0x22
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d00:	4619      	mov	r1, r3
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 fb6c 	bl	80043e0 <I2C_ITError>
      if (treatdmanack == 1U)
 8003d08:	e005      	b.n	8003d16 <I2C_Slave_ISR_DMA+0x18a>
 8003d0a:	e004      	b.n	8003d16 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2210      	movs	r2, #16
 8003d12:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003d14:	e011      	b.n	8003d3a <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8003d16:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003d18:	e00f      	b.n	8003d3a <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	08db      	lsrs	r3, r3, #3
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	08db      	lsrs	r3, r3, #3
 8003d2a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 f809 	bl	8003d4c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3720      	adds	r7, #32
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d62:	2b28      	cmp	r3, #40	; 0x28
 8003d64:	d16a      	bne.n	8003e3c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	0c1b      	lsrs	r3, r3, #16
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	0c1b      	lsrs	r3, r3, #16
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003d84:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d92:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003da0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d138      	bne.n	8003e1c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003daa:	897b      	ldrh	r3, [r7, #10]
 8003dac:	09db      	lsrs	r3, r3, #7
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	89bb      	ldrh	r3, [r7, #12]
 8003db2:	4053      	eors	r3, r2
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	f003 0306 	and.w	r3, r3, #6
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d11c      	bne.n	8003df8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003dbe:	897b      	ldrh	r3, [r7, #10]
 8003dc0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d13b      	bne.n	8003e4c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2208      	movs	r2, #8
 8003de0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003dea:	89ba      	ldrh	r2, [r7, #12]
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	4619      	mov	r1, r3
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff fc87 	bl	8003704 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003df6:	e029      	b.n	8003e4c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003df8:	893b      	ldrh	r3, [r7, #8]
 8003dfa:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003dfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fcb9 	bl	8004778 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e0e:	89ba      	ldrh	r2, [r7, #12]
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	4619      	mov	r1, r3
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7ff fc75 	bl	8003704 <HAL_I2C_AddrCallback>
}
 8003e1a:	e017      	b.n	8003e4c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003e1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 fca9 	bl	8004778 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e2e:	89ba      	ldrh	r2, [r7, #12]
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	4619      	mov	r1, r3
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7ff fc65 	bl	8003704 <HAL_I2C_AddrCallback>
}
 8003e3a:	e007      	b.n	8003e4c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2208      	movs	r2, #8
 8003e42:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003e4c:	bf00      	nop
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b21      	cmp	r3, #33	; 0x21
 8003e6e:	d115      	bne.n	8003e9c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2211      	movs	r2, #17
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003e84:	2101      	movs	r1, #1
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fc76 	bl	8004778 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff fc0d 	bl	80036b4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e9a:	e014      	b.n	8003ec6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2212      	movs	r2, #18
 8003ea8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fc60 	bl	8004778 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff fc01 	bl	80036c8 <HAL_I2C_MasterRxCpltCallback>
}
 8003ec6:	bf00      	nop
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	0b9b      	lsrs	r3, r3, #14
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d008      	beq.n	8003f04 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	e00d      	b.n	8003f20 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	0bdb      	lsrs	r3, r3, #15
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d007      	beq.n	8003f20 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f1e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b29      	cmp	r3, #41	; 0x29
 8003f2a:	d112      	bne.n	8003f52 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2228      	movs	r2, #40	; 0x28
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2221      	movs	r2, #33	; 0x21
 8003f38:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 fc1b 	bl	8004778 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff fbc6 	bl	80036dc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f50:	e017      	b.n	8003f82 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b2a      	cmp	r3, #42	; 0x2a
 8003f5c:	d111      	bne.n	8003f82 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2228      	movs	r2, #40	; 0x28
 8003f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2222      	movs	r2, #34	; 0x22
 8003f6a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003f6c:	2102      	movs	r1, #2
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fc02 	bl	8004778 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff fbb7 	bl	80036f0 <HAL_I2C_SlaveRxCpltCallback>
}
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b21      	cmp	r3, #33	; 0x21
 8003fac:	d107      	bne.n	8003fbe <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003fae:	2101      	movs	r1, #1
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 fbe1 	bl	8004778 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2211      	movs	r2, #17
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30
 8003fbc:	e00c      	b.n	8003fd8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b22      	cmp	r3, #34	; 0x22
 8003fc8:	d106      	bne.n	8003fd8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003fca:	2102      	movs	r1, #2
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fbd3 	bl	8004778 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2212      	movs	r2, #18
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6859      	ldr	r1, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	4b4d      	ldr	r3, [pc, #308]	; (8004118 <I2C_ITMasterCplt+0x18c>)
 8003fe4:	400b      	ands	r3, r1
 8003fe6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a4a      	ldr	r2, [pc, #296]	; (800411c <I2C_ITMasterCplt+0x190>)
 8003ff2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	091b      	lsrs	r3, r3, #4
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d009      	beq.n	8004014 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2210      	movs	r2, #16
 8004006:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400c:	f043 0204 	orr.w	r2, r3, #4
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b60      	cmp	r3, #96	; 0x60
 800401e:	d10b      	bne.n	8004038 <I2C_ITMasterCplt+0xac>
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	089b      	lsrs	r3, r3, #2
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	b2db      	uxtb	r3, r3
 8004034:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004036:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 fac8 	bl	80045ce <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b60      	cmp	r3, #96	; 0x60
 800404e:	d002      	beq.n	8004056 <I2C_ITMasterCplt+0xca>
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d006      	beq.n	8004064 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405a:	4619      	mov	r1, r3
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f9bf 	bl	80043e0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004062:	e054      	b.n	800410e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b21      	cmp	r3, #33	; 0x21
 800406e:	d124      	bne.n	80040ba <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b40      	cmp	r3, #64	; 0x40
 8004088:	d10b      	bne.n	80040a2 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff fb4a 	bl	8003734 <HAL_I2C_MemTxCpltCallback>
}
 80040a0:	e035      	b.n	800410e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7ff fafe 	bl	80036b4 <HAL_I2C_MasterTxCpltCallback>
}
 80040b8:	e029      	b.n	800410e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b22      	cmp	r3, #34	; 0x22
 80040c4:	d123      	bne.n	800410e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b40      	cmp	r3, #64	; 0x40
 80040de:	d10b      	bne.n	80040f8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7ff fb29 	bl	8003748 <HAL_I2C_MemRxCpltCallback>
}
 80040f6:	e00a      	b.n	800410e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff fadd 	bl	80036c8 <HAL_I2C_MasterRxCpltCallback>
}
 800410e:	bf00      	nop
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	fe00e800 	.word	0xfe00e800
 800411c:	ffff0000 	.word	0xffff0000

08004120 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800413c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2220      	movs	r2, #32
 8004144:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004146:	7bfb      	ldrb	r3, [r7, #15]
 8004148:	2b21      	cmp	r3, #33	; 0x21
 800414a:	d002      	beq.n	8004152 <I2C_ITSlaveCplt+0x32>
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	2b29      	cmp	r3, #41	; 0x29
 8004150:	d108      	bne.n	8004164 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004152:	f248 0101 	movw	r1, #32769	; 0x8001
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fb0e 	bl	8004778 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2221      	movs	r2, #33	; 0x21
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
 8004162:	e00d      	b.n	8004180 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004164:	7bfb      	ldrb	r3, [r7, #15]
 8004166:	2b22      	cmp	r3, #34	; 0x22
 8004168:	d002      	beq.n	8004170 <I2C_ITSlaveCplt+0x50>
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	2b2a      	cmp	r3, #42	; 0x2a
 800416e:	d107      	bne.n	8004180 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004170:	f248 0102 	movw	r1, #32770	; 0x8002
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 faff 	bl	8004778 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2222      	movs	r2, #34	; 0x22
 800417e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800418e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6859      	ldr	r1, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	4b64      	ldr	r3, [pc, #400]	; (800432c <I2C_ITSlaveCplt+0x20c>)
 800419c:	400b      	ands	r3, r1
 800419e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 fa14 	bl	80045ce <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	0b9b      	lsrs	r3, r3, #14
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d013      	beq.n	80041da <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041c0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d020      	beq.n	800420c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041d8:	e018      	b.n	800420c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	0bdb      	lsrs	r3, r3, #15
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d012      	beq.n	800420c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041f4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d006      	beq.n	800420c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	b29a      	uxth	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	089b      	lsrs	r3, r3, #2
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d020      	beq.n	800425a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f023 0304 	bic.w	r3, r3, #4
 800421e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00c      	beq.n	800425a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004250:	b29b      	uxth	r3, r3
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425e:	b29b      	uxth	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004268:	f043 0204 	orr.w	r2, r3, #4
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004282:	2b00      	cmp	r3, #0
 8004284:	d010      	beq.n	80042a8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428a:	4619      	mov	r1, r3
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f8a7 	bl	80043e0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b28      	cmp	r3, #40	; 0x28
 800429c:	d141      	bne.n	8004322 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800429e:	6979      	ldr	r1, [r7, #20]
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f847 	bl	8004334 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80042a6:	e03c      	b.n	8004322 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042b0:	d014      	beq.n	80042dc <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff fe0b 	bl	8003ece <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a1d      	ldr	r2, [pc, #116]	; (8004330 <I2C_ITSlaveCplt+0x210>)
 80042bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff fa23 	bl	8003720 <HAL_I2C_ListenCpltCallback>
}
 80042da:	e022      	b.n	8004322 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b22      	cmp	r3, #34	; 0x22
 80042e6:	d10e      	bne.n	8004306 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7ff f9f6 	bl	80036f0 <HAL_I2C_SlaveRxCpltCallback>
}
 8004304:	e00d      	b.n	8004322 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7ff f9dd 	bl	80036dc <HAL_I2C_SlaveTxCpltCallback>
}
 8004322:	bf00      	nop
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	fe00e800 	.word	0xfe00e800
 8004330:	ffff0000 	.word	0xffff0000

08004334 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a26      	ldr	r2, [pc, #152]	; (80043dc <I2C_ITListenCplt+0xa8>)
 8004342:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	089b      	lsrs	r3, r3, #2
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d022      	beq.n	80043b2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004388:	2b00      	cmp	r3, #0
 800438a:	d012      	beq.n	80043b2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439c:	b29b      	uxth	r3, r3
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043aa:	f043 0204 	orr.w	r2, r3, #4
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80043b2:	f248 0103 	movw	r1, #32771	; 0x8003
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f9de 	bl	8004778 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2210      	movs	r2, #16
 80043c2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7ff f9a7 	bl	8003720 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80043d2:	bf00      	nop
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	ffff0000 	.word	0xffff0000

080043e0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a5d      	ldr	r2, [pc, #372]	; (8004574 <I2C_ITError+0x194>)
 80043fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	2b28      	cmp	r3, #40	; 0x28
 8004416:	d005      	beq.n	8004424 <I2C_ITError+0x44>
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	2b29      	cmp	r3, #41	; 0x29
 800441c:	d002      	beq.n	8004424 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800441e:	7bfb      	ldrb	r3, [r7, #15]
 8004420:	2b2a      	cmp	r3, #42	; 0x2a
 8004422:	d10b      	bne.n	800443c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004424:	2103      	movs	r1, #3
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f9a6 	bl	8004778 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2228      	movs	r2, #40	; 0x28
 8004430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a50      	ldr	r2, [pc, #320]	; (8004578 <I2C_ITError+0x198>)
 8004438:	635a      	str	r2, [r3, #52]	; 0x34
 800443a:	e011      	b.n	8004460 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800443c:	f248 0103 	movw	r1, #32771	; 0x8003
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f999 	bl	8004778 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b60      	cmp	r3, #96	; 0x60
 8004450:	d003      	beq.n	800445a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446a:	2b00      	cmp	r3, #0
 800446c:	d039      	beq.n	80044e2 <I2C_ITError+0x102>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b11      	cmp	r3, #17
 8004472:	d002      	beq.n	800447a <I2C_ITError+0x9a>
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2b21      	cmp	r3, #33	; 0x21
 8004478:	d133      	bne.n	80044e2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004488:	d107      	bne.n	800449a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004498:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fe fe1e 	bl	80030e0 <HAL_DMA_GetState>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d017      	beq.n	80044da <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ae:	4a33      	ldr	r2, [pc, #204]	; (800457c <I2C_ITError+0x19c>)
 80044b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fe fdd0 	bl	8003064 <HAL_DMA_Abort_IT>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d04d      	beq.n	8004566 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044d4:	4610      	mov	r0, r2
 80044d6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80044d8:	e045      	b.n	8004566 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f850 	bl	8004580 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80044e0:	e041      	b.n	8004566 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d039      	beq.n	800455e <I2C_ITError+0x17e>
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b12      	cmp	r3, #18
 80044ee:	d002      	beq.n	80044f6 <I2C_ITError+0x116>
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b22      	cmp	r3, #34	; 0x22
 80044f4:	d133      	bne.n	800455e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004504:	d107      	bne.n	8004516 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004514:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451a:	4618      	mov	r0, r3
 800451c:	f7fe fde0 	bl	80030e0 <HAL_DMA_GetState>
 8004520:	4603      	mov	r3, r0
 8004522:	2b01      	cmp	r3, #1
 8004524:	d017      	beq.n	8004556 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452a:	4a14      	ldr	r2, [pc, #80]	; (800457c <I2C_ITError+0x19c>)
 800452c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453a:	4618      	mov	r0, r3
 800453c:	f7fe fd92 	bl	8003064 <HAL_DMA_Abort_IT>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d011      	beq.n	800456a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004550:	4610      	mov	r0, r2
 8004552:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004554:	e009      	b.n	800456a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f812 	bl	8004580 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800455c:	e005      	b.n	800456a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f80e 	bl	8004580 <I2C_TreatErrorCallback>
  }
}
 8004564:	e002      	b.n	800456c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004566:	bf00      	nop
 8004568:	e000      	b.n	800456c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800456a:	bf00      	nop
}
 800456c:	bf00      	nop
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	ffff0000 	.word	0xffff0000
 8004578:	080037a1 	.word	0x080037a1
 800457c:	08004617 	.word	0x08004617

08004580 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b60      	cmp	r3, #96	; 0x60
 8004592:	d10e      	bne.n	80045b2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7ff f8e0 	bl	8003770 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045b0:	e009      	b.n	80045c6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f7ff f8cb 	bl	800375c <HAL_I2C_ErrorCallback>
}
 80045c6:	bf00      	nop
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b083      	sub	sp, #12
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d103      	bne.n	80045ec <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2200      	movs	r2, #0
 80045ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d007      	beq.n	800460a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699a      	ldr	r2, [r3, #24]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0201 	orr.w	r2, r2, #1
 8004608:	619a      	str	r2, [r3, #24]
  }
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b084      	sub	sp, #16
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004630:	2200      	movs	r2, #0
 8004632:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004640:	2200      	movs	r2, #0
 8004642:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f7ff ff9b 	bl	8004580 <I2C_TreatErrorCallback>
}
 800464a:	bf00      	nop
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	607b      	str	r3, [r7, #4]
 800465e:	460b      	mov	r3, r1
 8004660:	817b      	strh	r3, [r7, #10]
 8004662:	4613      	mov	r3, r2
 8004664:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	0d5b      	lsrs	r3, r3, #21
 8004670:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004674:	4b0d      	ldr	r3, [pc, #52]	; (80046ac <I2C_TransferConfig+0x58>)
 8004676:	430b      	orrs	r3, r1
 8004678:	43db      	mvns	r3, r3
 800467a:	ea02 0103 	and.w	r1, r2, r3
 800467e:	897b      	ldrh	r3, [r7, #10]
 8004680:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004684:	7a7b      	ldrb	r3, [r7, #9]
 8004686:	041b      	lsls	r3, r3, #16
 8004688:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	431a      	orrs	r2, r3
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	431a      	orrs	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800469e:	bf00      	nop
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	03ff63ff 	.word	0x03ff63ff

080046b0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c4:	4a2a      	ldr	r2, [pc, #168]	; (8004770 <I2C_Enable_IRQ+0xc0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d004      	beq.n	80046d4 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80046ce:	4a29      	ldr	r2, [pc, #164]	; (8004774 <I2C_Enable_IRQ+0xc4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d11d      	bne.n	8004710 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80046d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	da03      	bge.n	80046e4 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80046e2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80046e4:	887b      	ldrh	r3, [r7, #2]
 80046e6:	2b10      	cmp	r3, #16
 80046e8:	d103      	bne.n	80046f2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80046f0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80046f2:	887b      	ldrh	r3, [r7, #2]
 80046f4:	2b20      	cmp	r3, #32
 80046f6:	d103      	bne.n	8004700 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80046fe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004700:	887b      	ldrh	r3, [r7, #2]
 8004702:	2b40      	cmp	r3, #64	; 0x40
 8004704:	d125      	bne.n	8004752 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800470c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800470e:	e020      	b.n	8004752 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004710:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004714:	2b00      	cmp	r3, #0
 8004716:	da03      	bge.n	8004720 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800471e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004720:	887b      	ldrh	r3, [r7, #2]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004730:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004732:	887b      	ldrh	r3, [r7, #2]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004742:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004744:	887b      	ldrh	r3, [r7, #2]
 8004746:	2b20      	cmp	r3, #32
 8004748:	d103      	bne.n	8004752 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f043 0320 	orr.w	r3, r3, #32
 8004750:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6819      	ldr	r1, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	430a      	orrs	r2, r1
 8004760:	601a      	str	r2, [r3, #0]
}
 8004762:	bf00      	nop
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	080039a7 	.word	0x080039a7
 8004774:	08003b8d 	.word	0x08003b8d

08004778 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004788:	887b      	ldrh	r3, [r7, #2]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00f      	beq.n	80047b2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004798:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047a6:	2b28      	cmp	r3, #40	; 0x28
 80047a8:	d003      	beq.n	80047b2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80047b0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80047b2:	887b      	ldrh	r3, [r7, #2]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00f      	beq.n	80047dc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80047c2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047d0:	2b28      	cmp	r3, #40	; 0x28
 80047d2:	d003      	beq.n	80047dc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80047da:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80047dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	da03      	bge.n	80047ec <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80047ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80047ec:	887b      	ldrh	r3, [r7, #2]
 80047ee:	2b10      	cmp	r3, #16
 80047f0:	d103      	bne.n	80047fa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80047f8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80047fa:	887b      	ldrh	r3, [r7, #2]
 80047fc:	2b20      	cmp	r3, #32
 80047fe:	d103      	bne.n	8004808 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f043 0320 	orr.w	r3, r3, #32
 8004806:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004808:	887b      	ldrh	r3, [r7, #2]
 800480a:	2b40      	cmp	r3, #64	; 0x40
 800480c:	d103      	bne.n	8004816 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004814:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6819      	ldr	r1, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	43da      	mvns	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	400a      	ands	r2, r1
 8004826:	601a      	str	r2, [r3, #0]
}
 8004828:	bf00      	nop
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b20      	cmp	r3, #32
 8004848:	d138      	bne.n	80048bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004854:	2302      	movs	r3, #2
 8004856:	e032      	b.n	80048be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2224      	movs	r2, #36	; 0x24
 8004864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0201 	bic.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004886:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6819      	ldr	r1, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0201 	orr.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048b8:	2300      	movs	r3, #0
 80048ba:	e000      	b.n	80048be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048bc:	2302      	movs	r3, #2
  }
}
 80048be:	4618      	mov	r0, r3
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b085      	sub	sp, #20
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b20      	cmp	r3, #32
 80048de:	d139      	bne.n	8004954 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e033      	b.n	8004956 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2224      	movs	r2, #36	; 0x24
 80048fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0201 	bic.w	r2, r2, #1
 800490c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800491c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	021b      	lsls	r3, r3, #8
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	4313      	orrs	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0201 	orr.w	r2, r2, #1
 800493e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004950:	2300      	movs	r3, #0
 8004952:	e000      	b.n	8004956 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004954:	2302      	movs	r3, #2
  }
}
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004962:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004964:	b08b      	sub	sp, #44	; 0x2c
 8004966:	af06      	add	r7, sp, #24
 8004968:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e0d0      	b.n	8004b16 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d106      	bne.n	800498e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7fc ffab 	bl	80018e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2203      	movs	r2, #3
 8004992:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f001 fe80 	bl	80066a0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049a0:	2300      	movs	r3, #0
 80049a2:	73fb      	strb	r3, [r7, #15]
 80049a4:	e04c      	b.n	8004a40 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	440b      	add	r3, r1
 80049b6:	3301      	adds	r3, #1
 80049b8:	2201      	movs	r2, #1
 80049ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	6879      	ldr	r1, [r7, #4]
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	4613      	mov	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	440b      	add	r3, r1
 80049cc:	7bfa      	ldrb	r2, [r7, #15]
 80049ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80049d0:	7bfa      	ldrb	r2, [r7, #15]
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
 80049d4:	b298      	uxth	r0, r3
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	440b      	add	r3, r1
 80049e2:	3336      	adds	r3, #54	; 0x36
 80049e4:	4602      	mov	r2, r0
 80049e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	4613      	mov	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	440b      	add	r3, r1
 80049f8:	3303      	adds	r3, #3
 80049fa:	2200      	movs	r2, #0
 80049fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049fe:	7bfa      	ldrb	r2, [r7, #15]
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	440b      	add	r3, r1
 8004a0c:	3338      	adds	r3, #56	; 0x38
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a12:	7bfa      	ldrb	r2, [r7, #15]
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	440b      	add	r3, r1
 8004a20:	333c      	adds	r3, #60	; 0x3c
 8004a22:	2200      	movs	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a26:	7bfa      	ldrb	r2, [r7, #15]
 8004a28:	6879      	ldr	r1, [r7, #4]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	440b      	add	r3, r1
 8004a34:	3340      	adds	r3, #64	; 0x40
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	73fb      	strb	r3, [r7, #15]
 8004a40:	7bfa      	ldrb	r2, [r7, #15]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d3ad      	bcc.n	80049a6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	73fb      	strb	r3, [r7, #15]
 8004a4e:	e044      	b.n	8004ada <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a50:	7bfa      	ldrb	r2, [r7, #15]
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	440b      	add	r3, r1
 8004a5e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004a62:	2200      	movs	r2, #0
 8004a64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a66:	7bfa      	ldrb	r2, [r7, #15]
 8004a68:	6879      	ldr	r1, [r7, #4]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	440b      	add	r3, r1
 8004a74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a78:	7bfa      	ldrb	r2, [r7, #15]
 8004a7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a7c:	7bfa      	ldrb	r2, [r7, #15]
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	4613      	mov	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	440b      	add	r3, r1
 8004a8a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004a8e:	2200      	movs	r2, #0
 8004a90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a92:	7bfa      	ldrb	r2, [r7, #15]
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	440b      	add	r3, r1
 8004aa0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004aa8:	7bfa      	ldrb	r2, [r7, #15]
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	440b      	add	r3, r1
 8004ab6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004abe:	7bfa      	ldrb	r2, [r7, #15]
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	440b      	add	r3, r1
 8004acc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	73fb      	strb	r3, [r7, #15]
 8004ada:	7bfa      	ldrb	r2, [r7, #15]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d3b5      	bcc.n	8004a50 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	603b      	str	r3, [r7, #0]
 8004aea:	687e      	ldr	r6, [r7, #4]
 8004aec:	466d      	mov	r5, sp
 8004aee:	f106 0410 	add.w	r4, r6, #16
 8004af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	602b      	str	r3, [r5, #0]
 8004afa:	1d33      	adds	r3, r6, #4
 8004afc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004afe:	6838      	ldr	r0, [r7, #0]
 8004b00:	f001 fde9 	bl	80066d6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004b20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	1d3b      	adds	r3, r7, #4
 8004b2a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b2c:	1d3b      	adds	r3, r7, #4
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d102      	bne.n	8004b3a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	f000 bef4 	b.w	8005922 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b3a:	1d3b      	adds	r3, r7, #4
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 816a 	beq.w	8004e1e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004b4a:	4bb3      	ldr	r3, [pc, #716]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f003 030c 	and.w	r3, r3, #12
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d00c      	beq.n	8004b70 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b56:	4bb0      	ldr	r3, [pc, #704]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f003 030c 	and.w	r3, r3, #12
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d159      	bne.n	8004c16 <HAL_RCC_OscConfig+0xf6>
 8004b62:	4bad      	ldr	r3, [pc, #692]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b6e:	d152      	bne.n	8004c16 <HAL_RCC_OscConfig+0xf6>
 8004b70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b74:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b78:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004b7c:	fa93 f3a3 	rbit	r3, r3
 8004b80:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004b84:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b88:	fab3 f383 	clz	r3, r3
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	f043 0301 	orr.w	r3, r3, #1
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d102      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x82>
 8004b9c:	4b9e      	ldr	r3, [pc, #632]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	e015      	b.n	8004bce <HAL_RCC_OscConfig+0xae>
 8004ba2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ba6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004baa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004bae:	fa93 f3a3 	rbit	r3, r3
 8004bb2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004bb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bba:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004bbe:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004bc2:	fa93 f3a3 	rbit	r3, r3
 8004bc6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004bca:	4b93      	ldr	r3, [pc, #588]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004bd2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004bd6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004bda:	fa92 f2a2 	rbit	r2, r2
 8004bde:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004be2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004be6:	fab2 f282 	clz	r2, r2
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	f042 0220 	orr.w	r2, r2, #32
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	f002 021f 	and.w	r2, r2, #31
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 810c 	beq.w	8004e1c <HAL_RCC_OscConfig+0x2fc>
 8004c04:	1d3b      	adds	r3, r7, #4
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f040 8106 	bne.w	8004e1c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	f000 be86 	b.w	8005922 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c16:	1d3b      	adds	r3, r7, #4
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c20:	d106      	bne.n	8004c30 <HAL_RCC_OscConfig+0x110>
 8004c22:	4b7d      	ldr	r3, [pc, #500]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a7c      	ldr	r2, [pc, #496]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	e030      	b.n	8004c92 <HAL_RCC_OscConfig+0x172>
 8004c30:	1d3b      	adds	r3, r7, #4
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10c      	bne.n	8004c54 <HAL_RCC_OscConfig+0x134>
 8004c3a:	4b77      	ldr	r3, [pc, #476]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a76      	ldr	r2, [pc, #472]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	4b74      	ldr	r3, [pc, #464]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a73      	ldr	r2, [pc, #460]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004c4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	e01e      	b.n	8004c92 <HAL_RCC_OscConfig+0x172>
 8004c54:	1d3b      	adds	r3, r7, #4
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c5e:	d10c      	bne.n	8004c7a <HAL_RCC_OscConfig+0x15a>
 8004c60:	4b6d      	ldr	r3, [pc, #436]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a6c      	ldr	r2, [pc, #432]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004c66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	4b6a      	ldr	r3, [pc, #424]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a69      	ldr	r2, [pc, #420]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c76:	6013      	str	r3, [r2, #0]
 8004c78:	e00b      	b.n	8004c92 <HAL_RCC_OscConfig+0x172>
 8004c7a:	4b67      	ldr	r3, [pc, #412]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a66      	ldr	r2, [pc, #408]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	4b64      	ldr	r3, [pc, #400]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a63      	ldr	r2, [pc, #396]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004c8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c90:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c92:	4b61      	ldr	r3, [pc, #388]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	f023 020f 	bic.w	r2, r3, #15
 8004c9a:	1d3b      	adds	r3, r7, #4
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	495d      	ldr	r1, [pc, #372]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ca6:	1d3b      	adds	r3, r7, #4
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d059      	beq.n	8004d64 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb0:	f7fc ff50 	bl	8001b54 <HAL_GetTick>
 8004cb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cb8:	e00a      	b.n	8004cd0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cba:	f7fc ff4b 	bl	8001b54 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b64      	cmp	r3, #100	; 0x64
 8004cc8:	d902      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	f000 be29 	b.w	8005922 <HAL_RCC_OscConfig+0xe02>
 8004cd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cd4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004cdc:	fa93 f3a3 	rbit	r3, r3
 8004ce0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004ce4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce8:	fab3 f383 	clz	r3, r3
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d102      	bne.n	8004d02 <HAL_RCC_OscConfig+0x1e2>
 8004cfc:	4b46      	ldr	r3, [pc, #280]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	e015      	b.n	8004d2e <HAL_RCC_OscConfig+0x20e>
 8004d02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d06:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004d0e:	fa93 f3a3 	rbit	r3, r3
 8004d12:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004d16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d1a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004d1e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004d22:	fa93 f3a3 	rbit	r3, r3
 8004d26:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004d2a:	4b3b      	ldr	r3, [pc, #236]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d32:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004d36:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004d3a:	fa92 f2a2 	rbit	r2, r2
 8004d3e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004d42:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004d46:	fab2 f282 	clz	r2, r2
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	f042 0220 	orr.w	r2, r2, #32
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	f002 021f 	and.w	r2, r2, #31
 8004d56:	2101      	movs	r1, #1
 8004d58:	fa01 f202 	lsl.w	r2, r1, r2
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0ab      	beq.n	8004cba <HAL_RCC_OscConfig+0x19a>
 8004d62:	e05c      	b.n	8004e1e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d64:	f7fc fef6 	bl	8001b54 <HAL_GetTick>
 8004d68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d6c:	e00a      	b.n	8004d84 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d6e:	f7fc fef1 	bl	8001b54 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b64      	cmp	r3, #100	; 0x64
 8004d7c:	d902      	bls.n	8004d84 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	f000 bdcf 	b.w	8005922 <HAL_RCC_OscConfig+0xe02>
 8004d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d88:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004d90:	fa93 f3a3 	rbit	r3, r3
 8004d94:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004d98:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d9c:	fab3 f383 	clz	r3, r3
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	f043 0301 	orr.w	r3, r3, #1
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d102      	bne.n	8004db6 <HAL_RCC_OscConfig+0x296>
 8004db0:	4b19      	ldr	r3, [pc, #100]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	e015      	b.n	8004de2 <HAL_RCC_OscConfig+0x2c2>
 8004db6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dba:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dbe:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004dc2:	fa93 f3a3 	rbit	r3, r3
 8004dc6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004dca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dce:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004dd2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004dd6:	fa93 f3a3 	rbit	r3, r3
 8004dda:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004dde:	4b0e      	ldr	r3, [pc, #56]	; (8004e18 <HAL_RCC_OscConfig+0x2f8>)
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004de6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004dea:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004dee:	fa92 f2a2 	rbit	r2, r2
 8004df2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004df6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004dfa:	fab2 f282 	clz	r2, r2
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	f042 0220 	orr.w	r2, r2, #32
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	f002 021f 	and.w	r2, r2, #31
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e10:	4013      	ands	r3, r2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1ab      	bne.n	8004d6e <HAL_RCC_OscConfig+0x24e>
 8004e16:	e002      	b.n	8004e1e <HAL_RCC_OscConfig+0x2fe>
 8004e18:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e1e:	1d3b      	adds	r3, r7, #4
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 816f 	beq.w	800510c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004e2e:	4bd0      	ldr	r3, [pc, #832]	; (8005170 <HAL_RCC_OscConfig+0x650>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f003 030c 	and.w	r3, r3, #12
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00b      	beq.n	8004e52 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004e3a:	4bcd      	ldr	r3, [pc, #820]	; (8005170 <HAL_RCC_OscConfig+0x650>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f003 030c 	and.w	r3, r3, #12
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d16c      	bne.n	8004f20 <HAL_RCC_OscConfig+0x400>
 8004e46:	4bca      	ldr	r3, [pc, #808]	; (8005170 <HAL_RCC_OscConfig+0x650>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d166      	bne.n	8004f20 <HAL_RCC_OscConfig+0x400>
 8004e52:	2302      	movs	r3, #2
 8004e54:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e58:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004e5c:	fa93 f3a3 	rbit	r3, r3
 8004e60:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004e64:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e68:	fab3 f383 	clz	r3, r3
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	095b      	lsrs	r3, r3, #5
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	f043 0301 	orr.w	r3, r3, #1
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d102      	bne.n	8004e82 <HAL_RCC_OscConfig+0x362>
 8004e7c:	4bbc      	ldr	r3, [pc, #752]	; (8005170 <HAL_RCC_OscConfig+0x650>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	e013      	b.n	8004eaa <HAL_RCC_OscConfig+0x38a>
 8004e82:	2302      	movs	r3, #2
 8004e84:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e88:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004e8c:	fa93 f3a3 	rbit	r3, r3
 8004e90:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004e94:	2302      	movs	r3, #2
 8004e96:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004e9a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004e9e:	fa93 f3a3 	rbit	r3, r3
 8004ea2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004ea6:	4bb2      	ldr	r3, [pc, #712]	; (8005170 <HAL_RCC_OscConfig+0x650>)
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004eb0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004eb4:	fa92 f2a2 	rbit	r2, r2
 8004eb8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004ebc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004ec0:	fab2 f282 	clz	r2, r2
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	f042 0220 	orr.w	r2, r2, #32
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	f002 021f 	and.w	r2, r2, #31
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d007      	beq.n	8004eec <HAL_RCC_OscConfig+0x3cc>
 8004edc:	1d3b      	adds	r3, r7, #4
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d002      	beq.n	8004eec <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	f000 bd1b 	b.w	8005922 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eec:	4ba0      	ldr	r3, [pc, #640]	; (8005170 <HAL_RCC_OscConfig+0x650>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ef4:	1d3b      	adds	r3, r7, #4
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	21f8      	movs	r1, #248	; 0xf8
 8004efc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f00:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004f04:	fa91 f1a1 	rbit	r1, r1
 8004f08:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004f0c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004f10:	fab1 f181 	clz	r1, r1
 8004f14:	b2c9      	uxtb	r1, r1
 8004f16:	408b      	lsls	r3, r1
 8004f18:	4995      	ldr	r1, [pc, #596]	; (8005170 <HAL_RCC_OscConfig+0x650>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f1e:	e0f5      	b.n	800510c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f20:	1d3b      	adds	r3, r7, #4
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 8085 	beq.w	8005036 <HAL_RCC_OscConfig+0x516>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f32:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004f36:	fa93 f3a3 	rbit	r3, r3
 8004f3a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004f3e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f42:	fab3 f383 	clz	r3, r3
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	461a      	mov	r2, r3
 8004f54:	2301      	movs	r3, #1
 8004f56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f58:	f7fc fdfc 	bl	8001b54 <HAL_GetTick>
 8004f5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f60:	e00a      	b.n	8004f78 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f62:	f7fc fdf7 	bl	8001b54 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d902      	bls.n	8004f78 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	f000 bcd5 	b.w	8005922 <HAL_RCC_OscConfig+0xe02>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004f82:	fa93 f3a3 	rbit	r3, r3
 8004f86:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004f8a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f8e:	fab3 f383 	clz	r3, r3
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	095b      	lsrs	r3, r3, #5
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	f043 0301 	orr.w	r3, r3, #1
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d102      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x488>
 8004fa2:	4b73      	ldr	r3, [pc, #460]	; (8005170 <HAL_RCC_OscConfig+0x650>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	e013      	b.n	8004fd0 <HAL_RCC_OscConfig+0x4b0>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004fb2:	fa93 f3a3 	rbit	r3, r3
 8004fb6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004fba:	2302      	movs	r3, #2
 8004fbc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004fc0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004fc4:	fa93 f3a3 	rbit	r3, r3
 8004fc8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004fcc:	4b68      	ldr	r3, [pc, #416]	; (8005170 <HAL_RCC_OscConfig+0x650>)
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004fd6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004fda:	fa92 f2a2 	rbit	r2, r2
 8004fde:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004fe2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004fe6:	fab2 f282 	clz	r2, r2
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	f042 0220 	orr.w	r2, r2, #32
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	f002 021f 	and.w	r2, r2, #31
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0af      	beq.n	8004f62 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005002:	4b5b      	ldr	r3, [pc, #364]	; (8005170 <HAL_RCC_OscConfig+0x650>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800500a:	1d3b      	adds	r3, r7, #4
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	21f8      	movs	r1, #248	; 0xf8
 8005012:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005016:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800501a:	fa91 f1a1 	rbit	r1, r1
 800501e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005022:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005026:	fab1 f181 	clz	r1, r1
 800502a:	b2c9      	uxtb	r1, r1
 800502c:	408b      	lsls	r3, r1
 800502e:	4950      	ldr	r1, [pc, #320]	; (8005170 <HAL_RCC_OscConfig+0x650>)
 8005030:	4313      	orrs	r3, r2
 8005032:	600b      	str	r3, [r1, #0]
 8005034:	e06a      	b.n	800510c <HAL_RCC_OscConfig+0x5ec>
 8005036:	2301      	movs	r3, #1
 8005038:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800503c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005040:	fa93 f3a3 	rbit	r3, r3
 8005044:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005048:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800504c:	fab3 f383 	clz	r3, r3
 8005050:	b2db      	uxtb	r3, r3
 8005052:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005056:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	461a      	mov	r2, r3
 800505e:	2300      	movs	r3, #0
 8005060:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005062:	f7fc fd77 	bl	8001b54 <HAL_GetTick>
 8005066:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800506a:	e00a      	b.n	8005082 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800506c:	f7fc fd72 	bl	8001b54 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d902      	bls.n	8005082 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	f000 bc50 	b.w	8005922 <HAL_RCC_OscConfig+0xe02>
 8005082:	2302      	movs	r3, #2
 8005084:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005088:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800508c:	fa93 f3a3 	rbit	r3, r3
 8005090:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005098:	fab3 f383 	clz	r3, r3
 800509c:	b2db      	uxtb	r3, r3
 800509e:	095b      	lsrs	r3, r3, #5
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d102      	bne.n	80050b2 <HAL_RCC_OscConfig+0x592>
 80050ac:	4b30      	ldr	r3, [pc, #192]	; (8005170 <HAL_RCC_OscConfig+0x650>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	e013      	b.n	80050da <HAL_RCC_OscConfig+0x5ba>
 80050b2:	2302      	movs	r3, #2
 80050b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050bc:	fa93 f3a3 	rbit	r3, r3
 80050c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80050c4:	2302      	movs	r3, #2
 80050c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80050ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80050ce:	fa93 f3a3 	rbit	r3, r3
 80050d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050d6:	4b26      	ldr	r3, [pc, #152]	; (8005170 <HAL_RCC_OscConfig+0x650>)
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	2202      	movs	r2, #2
 80050dc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80050e0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80050e4:	fa92 f2a2 	rbit	r2, r2
 80050e8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80050ec:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80050f0:	fab2 f282 	clz	r2, r2
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	f042 0220 	orr.w	r2, r2, #32
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	f002 021f 	and.w	r2, r2, #31
 8005100:	2101      	movs	r1, #1
 8005102:	fa01 f202 	lsl.w	r2, r1, r2
 8005106:	4013      	ands	r3, r2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1af      	bne.n	800506c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800510c:	1d3b      	adds	r3, r7, #4
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 80da 	beq.w	80052d0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800511c:	1d3b      	adds	r3, r7, #4
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d069      	beq.n	80051fa <HAL_RCC_OscConfig+0x6da>
 8005126:	2301      	movs	r3, #1
 8005128:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005130:	fa93 f3a3 	rbit	r3, r3
 8005134:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005138:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800513c:	fab3 f383 	clz	r3, r3
 8005140:	b2db      	uxtb	r3, r3
 8005142:	461a      	mov	r2, r3
 8005144:	4b0b      	ldr	r3, [pc, #44]	; (8005174 <HAL_RCC_OscConfig+0x654>)
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	461a      	mov	r2, r3
 800514c:	2301      	movs	r3, #1
 800514e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005150:	f7fc fd00 	bl	8001b54 <HAL_GetTick>
 8005154:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005158:	e00e      	b.n	8005178 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800515a:	f7fc fcfb 	bl	8001b54 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d906      	bls.n	8005178 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e3d9      	b.n	8005922 <HAL_RCC_OscConfig+0xe02>
 800516e:	bf00      	nop
 8005170:	40021000 	.word	0x40021000
 8005174:	10908120 	.word	0x10908120
 8005178:	2302      	movs	r3, #2
 800517a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005182:	fa93 f3a3 	rbit	r3, r3
 8005186:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800518a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800518e:	2202      	movs	r2, #2
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	fa93 f2a3 	rbit	r2, r3
 800519c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80051a6:	2202      	movs	r2, #2
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	fa93 f2a3 	rbit	r2, r3
 80051b4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80051b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ba:	4ba5      	ldr	r3, [pc, #660]	; (8005450 <HAL_RCC_OscConfig+0x930>)
 80051bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051be:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80051c2:	2102      	movs	r1, #2
 80051c4:	6019      	str	r1, [r3, #0]
 80051c6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	fa93 f1a3 	rbit	r1, r3
 80051d0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80051d4:	6019      	str	r1, [r3, #0]
  return result;
 80051d6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	fab3 f383 	clz	r3, r3
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	f003 031f 	and.w	r3, r3, #31
 80051ec:	2101      	movs	r1, #1
 80051ee:	fa01 f303 	lsl.w	r3, r1, r3
 80051f2:	4013      	ands	r3, r2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0b0      	beq.n	800515a <HAL_RCC_OscConfig+0x63a>
 80051f8:	e06a      	b.n	80052d0 <HAL_RCC_OscConfig+0x7b0>
 80051fa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80051fe:	2201      	movs	r2, #1
 8005200:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005202:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	fa93 f2a3 	rbit	r2, r3
 800520c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005210:	601a      	str	r2, [r3, #0]
  return result;
 8005212:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005216:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005218:	fab3 f383 	clz	r3, r3
 800521c:	b2db      	uxtb	r3, r3
 800521e:	461a      	mov	r2, r3
 8005220:	4b8c      	ldr	r3, [pc, #560]	; (8005454 <HAL_RCC_OscConfig+0x934>)
 8005222:	4413      	add	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	461a      	mov	r2, r3
 8005228:	2300      	movs	r3, #0
 800522a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800522c:	f7fc fc92 	bl	8001b54 <HAL_GetTick>
 8005230:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005234:	e009      	b.n	800524a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005236:	f7fc fc8d 	bl	8001b54 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e36b      	b.n	8005922 <HAL_RCC_OscConfig+0xe02>
 800524a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800524e:	2202      	movs	r2, #2
 8005250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005252:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	fa93 f2a3 	rbit	r2, r3
 800525c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005266:	2202      	movs	r2, #2
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	fa93 f2a3 	rbit	r2, r3
 8005274:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800527e:	2202      	movs	r2, #2
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	fa93 f2a3 	rbit	r2, r3
 800528c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005290:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005292:	4b6f      	ldr	r3, [pc, #444]	; (8005450 <HAL_RCC_OscConfig+0x930>)
 8005294:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005296:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800529a:	2102      	movs	r1, #2
 800529c:	6019      	str	r1, [r3, #0]
 800529e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	fa93 f1a3 	rbit	r1, r3
 80052a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80052ac:	6019      	str	r1, [r3, #0]
  return result;
 80052ae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	fab3 f383 	clz	r3, r3
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	f003 031f 	and.w	r3, r3, #31
 80052c4:	2101      	movs	r1, #1
 80052c6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1b2      	bne.n	8005236 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052d0:	1d3b      	adds	r3, r7, #4
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 8158 	beq.w	8005590 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052e0:	2300      	movs	r3, #0
 80052e2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052e6:	4b5a      	ldr	r3, [pc, #360]	; (8005450 <HAL_RCC_OscConfig+0x930>)
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d112      	bne.n	8005318 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052f2:	4b57      	ldr	r3, [pc, #348]	; (8005450 <HAL_RCC_OscConfig+0x930>)
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	4a56      	ldr	r2, [pc, #344]	; (8005450 <HAL_RCC_OscConfig+0x930>)
 80052f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052fc:	61d3      	str	r3, [r2, #28]
 80052fe:	4b54      	ldr	r3, [pc, #336]	; (8005450 <HAL_RCC_OscConfig+0x930>)
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005306:	f107 0308 	add.w	r3, r7, #8
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	f107 0308 	add.w	r3, r7, #8
 8005310:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005312:	2301      	movs	r3, #1
 8005314:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005318:	4b4f      	ldr	r3, [pc, #316]	; (8005458 <HAL_RCC_OscConfig+0x938>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d11a      	bne.n	800535a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005324:	4b4c      	ldr	r3, [pc, #304]	; (8005458 <HAL_RCC_OscConfig+0x938>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a4b      	ldr	r2, [pc, #300]	; (8005458 <HAL_RCC_OscConfig+0x938>)
 800532a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800532e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005330:	f7fc fc10 	bl	8001b54 <HAL_GetTick>
 8005334:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005338:	e009      	b.n	800534e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800533a:	f7fc fc0b 	bl	8001b54 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b64      	cmp	r3, #100	; 0x64
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e2e9      	b.n	8005922 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800534e:	4b42      	ldr	r3, [pc, #264]	; (8005458 <HAL_RCC_OscConfig+0x938>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0ef      	beq.n	800533a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800535a:	1d3b      	adds	r3, r7, #4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d106      	bne.n	8005372 <HAL_RCC_OscConfig+0x852>
 8005364:	4b3a      	ldr	r3, [pc, #232]	; (8005450 <HAL_RCC_OscConfig+0x930>)
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	4a39      	ldr	r2, [pc, #228]	; (8005450 <HAL_RCC_OscConfig+0x930>)
 800536a:	f043 0301 	orr.w	r3, r3, #1
 800536e:	6213      	str	r3, [r2, #32]
 8005370:	e02f      	b.n	80053d2 <HAL_RCC_OscConfig+0x8b2>
 8005372:	1d3b      	adds	r3, r7, #4
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10c      	bne.n	8005396 <HAL_RCC_OscConfig+0x876>
 800537c:	4b34      	ldr	r3, [pc, #208]	; (8005450 <HAL_RCC_OscConfig+0x930>)
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	4a33      	ldr	r2, [pc, #204]	; (8005450 <HAL_RCC_OscConfig+0x930>)
 8005382:	f023 0301 	bic.w	r3, r3, #1
 8005386:	6213      	str	r3, [r2, #32]
 8005388:	4b31      	ldr	r3, [pc, #196]	; (8005450 <HAL_RCC_OscConfig+0x930>)
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	4a30      	ldr	r2, [pc, #192]	; (8005450 <HAL_RCC_OscConfig+0x930>)
 800538e:	f023 0304 	bic.w	r3, r3, #4
 8005392:	6213      	str	r3, [r2, #32]
 8005394:	e01d      	b.n	80053d2 <HAL_RCC_OscConfig+0x8b2>
 8005396:	1d3b      	adds	r3, r7, #4
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	2b05      	cmp	r3, #5
 800539e:	d10c      	bne.n	80053ba <HAL_RCC_OscConfig+0x89a>
 80053a0:	4b2b      	ldr	r3, [pc, #172]	; (8005450 <HAL_RCC_OscConfig+0x930>)
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	4a2a      	ldr	r2, [pc, #168]	; (8005450 <HAL_RCC_OscConfig+0x930>)
 80053a6:	f043 0304 	orr.w	r3, r3, #4
 80053aa:	6213      	str	r3, [r2, #32]
 80053ac:	4b28      	ldr	r3, [pc, #160]	; (8005450 <HAL_RCC_OscConfig+0x930>)
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	4a27      	ldr	r2, [pc, #156]	; (8005450 <HAL_RCC_OscConfig+0x930>)
 80053b2:	f043 0301 	orr.w	r3, r3, #1
 80053b6:	6213      	str	r3, [r2, #32]
 80053b8:	e00b      	b.n	80053d2 <HAL_RCC_OscConfig+0x8b2>
 80053ba:	4b25      	ldr	r3, [pc, #148]	; (8005450 <HAL_RCC_OscConfig+0x930>)
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	4a24      	ldr	r2, [pc, #144]	; (8005450 <HAL_RCC_OscConfig+0x930>)
 80053c0:	f023 0301 	bic.w	r3, r3, #1
 80053c4:	6213      	str	r3, [r2, #32]
 80053c6:	4b22      	ldr	r3, [pc, #136]	; (8005450 <HAL_RCC_OscConfig+0x930>)
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	4a21      	ldr	r2, [pc, #132]	; (8005450 <HAL_RCC_OscConfig+0x930>)
 80053cc:	f023 0304 	bic.w	r3, r3, #4
 80053d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053d2:	1d3b      	adds	r3, r7, #4
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d06b      	beq.n	80054b4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053dc:	f7fc fbba 	bl	8001b54 <HAL_GetTick>
 80053e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e4:	e00b      	b.n	80053fe <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053e6:	f7fc fbb5 	bl	8001b54 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e291      	b.n	8005922 <HAL_RCC_OscConfig+0xe02>
 80053fe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005402:	2202      	movs	r2, #2
 8005404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005406:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	fa93 f2a3 	rbit	r2, r3
 8005410:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800541a:	2202      	movs	r2, #2
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	fa93 f2a3 	rbit	r2, r3
 8005428:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800542c:	601a      	str	r2, [r3, #0]
  return result;
 800542e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005432:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005434:	fab3 f383 	clz	r3, r3
 8005438:	b2db      	uxtb	r3, r3
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	b2db      	uxtb	r3, r3
 800543e:	f043 0302 	orr.w	r3, r3, #2
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d109      	bne.n	800545c <HAL_RCC_OscConfig+0x93c>
 8005448:	4b01      	ldr	r3, [pc, #4]	; (8005450 <HAL_RCC_OscConfig+0x930>)
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	e014      	b.n	8005478 <HAL_RCC_OscConfig+0x958>
 800544e:	bf00      	nop
 8005450:	40021000 	.word	0x40021000
 8005454:	10908120 	.word	0x10908120
 8005458:	40007000 	.word	0x40007000
 800545c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005460:	2202      	movs	r2, #2
 8005462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005464:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	fa93 f2a3 	rbit	r2, r3
 800546e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	4bbb      	ldr	r3, [pc, #748]	; (8005764 <HAL_RCC_OscConfig+0xc44>)
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800547c:	2102      	movs	r1, #2
 800547e:	6011      	str	r1, [r2, #0]
 8005480:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005484:	6812      	ldr	r2, [r2, #0]
 8005486:	fa92 f1a2 	rbit	r1, r2
 800548a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800548e:	6011      	str	r1, [r2, #0]
  return result;
 8005490:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005494:	6812      	ldr	r2, [r2, #0]
 8005496:	fab2 f282 	clz	r2, r2
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054a0:	b2d2      	uxtb	r2, r2
 80054a2:	f002 021f 	and.w	r2, r2, #31
 80054a6:	2101      	movs	r1, #1
 80054a8:	fa01 f202 	lsl.w	r2, r1, r2
 80054ac:	4013      	ands	r3, r2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d099      	beq.n	80053e6 <HAL_RCC_OscConfig+0x8c6>
 80054b2:	e063      	b.n	800557c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054b4:	f7fc fb4e 	bl	8001b54 <HAL_GetTick>
 80054b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054bc:	e00b      	b.n	80054d6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054be:	f7fc fb49 	bl	8001b54 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e225      	b.n	8005922 <HAL_RCC_OscConfig+0xe02>
 80054d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80054da:	2202      	movs	r2, #2
 80054dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	fa93 f2a3 	rbit	r2, r3
 80054e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80054f2:	2202      	movs	r2, #2
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	fa93 f2a3 	rbit	r2, r3
 8005500:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005504:	601a      	str	r2, [r3, #0]
  return result;
 8005506:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800550a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800550c:	fab3 f383 	clz	r3, r3
 8005510:	b2db      	uxtb	r3, r3
 8005512:	095b      	lsrs	r3, r3, #5
 8005514:	b2db      	uxtb	r3, r3
 8005516:	f043 0302 	orr.w	r3, r3, #2
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d102      	bne.n	8005526 <HAL_RCC_OscConfig+0xa06>
 8005520:	4b90      	ldr	r3, [pc, #576]	; (8005764 <HAL_RCC_OscConfig+0xc44>)
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	e00d      	b.n	8005542 <HAL_RCC_OscConfig+0xa22>
 8005526:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800552a:	2202      	movs	r2, #2
 800552c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	fa93 f2a3 	rbit	r2, r3
 8005538:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	4b89      	ldr	r3, [pc, #548]	; (8005764 <HAL_RCC_OscConfig+0xc44>)
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005546:	2102      	movs	r1, #2
 8005548:	6011      	str	r1, [r2, #0]
 800554a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800554e:	6812      	ldr	r2, [r2, #0]
 8005550:	fa92 f1a2 	rbit	r1, r2
 8005554:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005558:	6011      	str	r1, [r2, #0]
  return result;
 800555a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800555e:	6812      	ldr	r2, [r2, #0]
 8005560:	fab2 f282 	clz	r2, r2
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	f002 021f 	and.w	r2, r2, #31
 8005570:	2101      	movs	r1, #1
 8005572:	fa01 f202 	lsl.w	r2, r1, r2
 8005576:	4013      	ands	r3, r2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1a0      	bne.n	80054be <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800557c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005580:	2b01      	cmp	r3, #1
 8005582:	d105      	bne.n	8005590 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005584:	4b77      	ldr	r3, [pc, #476]	; (8005764 <HAL_RCC_OscConfig+0xc44>)
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	4a76      	ldr	r2, [pc, #472]	; (8005764 <HAL_RCC_OscConfig+0xc44>)
 800558a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800558e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005590:	1d3b      	adds	r3, r7, #4
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 81c2 	beq.w	8005920 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800559c:	4b71      	ldr	r3, [pc, #452]	; (8005764 <HAL_RCC_OscConfig+0xc44>)
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f003 030c 	and.w	r3, r3, #12
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	f000 819c 	beq.w	80058e2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055aa:	1d3b      	adds	r3, r7, #4
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	f040 8114 	bne.w	80057de <HAL_RCC_OscConfig+0xcbe>
 80055b6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80055ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	fa93 f2a3 	rbit	r2, r3
 80055ca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80055ce:	601a      	str	r2, [r3, #0]
  return result;
 80055d0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80055d4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055d6:	fab3 f383 	clz	r3, r3
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80055e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	461a      	mov	r2, r3
 80055e8:	2300      	movs	r3, #0
 80055ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ec:	f7fc fab2 	bl	8001b54 <HAL_GetTick>
 80055f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055f4:	e009      	b.n	800560a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055f6:	f7fc faad 	bl	8001b54 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e18b      	b.n	8005922 <HAL_RCC_OscConfig+0xe02>
 800560a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800560e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005612:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005614:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	fa93 f2a3 	rbit	r2, r3
 800561e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005622:	601a      	str	r2, [r3, #0]
  return result;
 8005624:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005628:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800562a:	fab3 f383 	clz	r3, r3
 800562e:	b2db      	uxtb	r3, r3
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	b2db      	uxtb	r3, r3
 8005634:	f043 0301 	orr.w	r3, r3, #1
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b01      	cmp	r3, #1
 800563c:	d102      	bne.n	8005644 <HAL_RCC_OscConfig+0xb24>
 800563e:	4b49      	ldr	r3, [pc, #292]	; (8005764 <HAL_RCC_OscConfig+0xc44>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	e01b      	b.n	800567c <HAL_RCC_OscConfig+0xb5c>
 8005644:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005648:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800564c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800564e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	fa93 f2a3 	rbit	r2, r3
 8005658:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005662:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	fa93 f2a3 	rbit	r2, r3
 8005672:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	4b3a      	ldr	r3, [pc, #232]	; (8005764 <HAL_RCC_OscConfig+0xc44>)
 800567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005680:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005684:	6011      	str	r1, [r2, #0]
 8005686:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800568a:	6812      	ldr	r2, [r2, #0]
 800568c:	fa92 f1a2 	rbit	r1, r2
 8005690:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005694:	6011      	str	r1, [r2, #0]
  return result;
 8005696:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800569a:	6812      	ldr	r2, [r2, #0]
 800569c:	fab2 f282 	clz	r2, r2
 80056a0:	b2d2      	uxtb	r2, r2
 80056a2:	f042 0220 	orr.w	r2, r2, #32
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	f002 021f 	and.w	r2, r2, #31
 80056ac:	2101      	movs	r1, #1
 80056ae:	fa01 f202 	lsl.w	r2, r1, r2
 80056b2:	4013      	ands	r3, r2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d19e      	bne.n	80055f6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056b8:	4b2a      	ldr	r3, [pc, #168]	; (8005764 <HAL_RCC_OscConfig+0xc44>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80056c0:	1d3b      	adds	r3, r7, #4
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80056c6:	1d3b      	adds	r3, r7, #4
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	430b      	orrs	r3, r1
 80056ce:	4925      	ldr	r1, [pc, #148]	; (8005764 <HAL_RCC_OscConfig+0xc44>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	604b      	str	r3, [r1, #4]
 80056d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80056d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	fa93 f2a3 	rbit	r2, r3
 80056e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80056ec:	601a      	str	r2, [r3, #0]
  return result;
 80056ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80056f2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056f4:	fab3 f383 	clz	r3, r3
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80056fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	461a      	mov	r2, r3
 8005706:	2301      	movs	r3, #1
 8005708:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800570a:	f7fc fa23 	bl	8001b54 <HAL_GetTick>
 800570e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005712:	e009      	b.n	8005728 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005714:	f7fc fa1e 	bl	8001b54 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d901      	bls.n	8005728 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e0fc      	b.n	8005922 <HAL_RCC_OscConfig+0xe02>
 8005728:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800572c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005730:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005732:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	fa93 f2a3 	rbit	r2, r3
 800573c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005740:	601a      	str	r2, [r3, #0]
  return result;
 8005742:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005746:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005748:	fab3 f383 	clz	r3, r3
 800574c:	b2db      	uxtb	r3, r3
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	b2db      	uxtb	r3, r3
 8005752:	f043 0301 	orr.w	r3, r3, #1
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b01      	cmp	r3, #1
 800575a:	d105      	bne.n	8005768 <HAL_RCC_OscConfig+0xc48>
 800575c:	4b01      	ldr	r3, [pc, #4]	; (8005764 <HAL_RCC_OscConfig+0xc44>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	e01e      	b.n	80057a0 <HAL_RCC_OscConfig+0xc80>
 8005762:	bf00      	nop
 8005764:	40021000 	.word	0x40021000
 8005768:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800576c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005770:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005772:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	fa93 f2a3 	rbit	r2, r3
 800577c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005786:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	fa93 f2a3 	rbit	r2, r3
 8005796:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	4b63      	ldr	r3, [pc, #396]	; (800592c <HAL_RCC_OscConfig+0xe0c>)
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80057a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80057a8:	6011      	str	r1, [r2, #0]
 80057aa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80057ae:	6812      	ldr	r2, [r2, #0]
 80057b0:	fa92 f1a2 	rbit	r1, r2
 80057b4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80057b8:	6011      	str	r1, [r2, #0]
  return result;
 80057ba:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80057be:	6812      	ldr	r2, [r2, #0]
 80057c0:	fab2 f282 	clz	r2, r2
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	f042 0220 	orr.w	r2, r2, #32
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	f002 021f 	and.w	r2, r2, #31
 80057d0:	2101      	movs	r1, #1
 80057d2:	fa01 f202 	lsl.w	r2, r1, r2
 80057d6:	4013      	ands	r3, r2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d09b      	beq.n	8005714 <HAL_RCC_OscConfig+0xbf4>
 80057dc:	e0a0      	b.n	8005920 <HAL_RCC_OscConfig+0xe00>
 80057de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	fa93 f2a3 	rbit	r2, r3
 80057f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057f6:	601a      	str	r2, [r3, #0]
  return result;
 80057f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057fc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057fe:	fab3 f383 	clz	r3, r3
 8005802:	b2db      	uxtb	r3, r3
 8005804:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005808:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	461a      	mov	r2, r3
 8005810:	2300      	movs	r3, #0
 8005812:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005814:	f7fc f99e 	bl	8001b54 <HAL_GetTick>
 8005818:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800581c:	e009      	b.n	8005832 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800581e:	f7fc f999 	bl	8001b54 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e077      	b.n	8005922 <HAL_RCC_OscConfig+0xe02>
 8005832:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005836:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800583a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800583c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	fa93 f2a3 	rbit	r2, r3
 8005846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800584a:	601a      	str	r2, [r3, #0]
  return result;
 800584c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005850:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005852:	fab3 f383 	clz	r3, r3
 8005856:	b2db      	uxtb	r3, r3
 8005858:	095b      	lsrs	r3, r3, #5
 800585a:	b2db      	uxtb	r3, r3
 800585c:	f043 0301 	orr.w	r3, r3, #1
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b01      	cmp	r3, #1
 8005864:	d102      	bne.n	800586c <HAL_RCC_OscConfig+0xd4c>
 8005866:	4b31      	ldr	r3, [pc, #196]	; (800592c <HAL_RCC_OscConfig+0xe0c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	e01b      	b.n	80058a4 <HAL_RCC_OscConfig+0xd84>
 800586c:	f107 0320 	add.w	r3, r7, #32
 8005870:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005874:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005876:	f107 0320 	add.w	r3, r7, #32
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	fa93 f2a3 	rbit	r2, r3
 8005880:	f107 031c 	add.w	r3, r7, #28
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	f107 0318 	add.w	r3, r7, #24
 800588a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	f107 0318 	add.w	r3, r7, #24
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	fa93 f2a3 	rbit	r2, r3
 800589a:	f107 0314 	add.w	r3, r7, #20
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	4b22      	ldr	r3, [pc, #136]	; (800592c <HAL_RCC_OscConfig+0xe0c>)
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	f107 0210 	add.w	r2, r7, #16
 80058a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80058ac:	6011      	str	r1, [r2, #0]
 80058ae:	f107 0210 	add.w	r2, r7, #16
 80058b2:	6812      	ldr	r2, [r2, #0]
 80058b4:	fa92 f1a2 	rbit	r1, r2
 80058b8:	f107 020c 	add.w	r2, r7, #12
 80058bc:	6011      	str	r1, [r2, #0]
  return result;
 80058be:	f107 020c 	add.w	r2, r7, #12
 80058c2:	6812      	ldr	r2, [r2, #0]
 80058c4:	fab2 f282 	clz	r2, r2
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	f042 0220 	orr.w	r2, r2, #32
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	f002 021f 	and.w	r2, r2, #31
 80058d4:	2101      	movs	r1, #1
 80058d6:	fa01 f202 	lsl.w	r2, r1, r2
 80058da:	4013      	ands	r3, r2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d19e      	bne.n	800581e <HAL_RCC_OscConfig+0xcfe>
 80058e0:	e01e      	b.n	8005920 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058e2:	1d3b      	adds	r3, r7, #4
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e018      	b.n	8005922 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80058f0:	4b0e      	ldr	r3, [pc, #56]	; (800592c <HAL_RCC_OscConfig+0xe0c>)
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80058f8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80058fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005900:	1d3b      	adds	r3, r7, #4
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	429a      	cmp	r2, r3
 8005908:	d108      	bne.n	800591c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800590a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800590e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005912:	1d3b      	adds	r3, r7, #4
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005918:	429a      	cmp	r2, r3
 800591a:	d001      	beq.n	8005920 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e000      	b.n	8005922 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40021000 	.word	0x40021000

08005930 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b09e      	sub	sp, #120	; 0x78
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e162      	b.n	8005c0e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005948:	4b90      	ldr	r3, [pc, #576]	; (8005b8c <HAL_RCC_ClockConfig+0x25c>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0307 	and.w	r3, r3, #7
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d910      	bls.n	8005978 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005956:	4b8d      	ldr	r3, [pc, #564]	; (8005b8c <HAL_RCC_ClockConfig+0x25c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f023 0207 	bic.w	r2, r3, #7
 800595e:	498b      	ldr	r1, [pc, #556]	; (8005b8c <HAL_RCC_ClockConfig+0x25c>)
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	4313      	orrs	r3, r2
 8005964:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005966:	4b89      	ldr	r3, [pc, #548]	; (8005b8c <HAL_RCC_ClockConfig+0x25c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d001      	beq.n	8005978 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e14a      	b.n	8005c0e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d008      	beq.n	8005996 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005984:	4b82      	ldr	r3, [pc, #520]	; (8005b90 <HAL_RCC_ClockConfig+0x260>)
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	497f      	ldr	r1, [pc, #508]	; (8005b90 <HAL_RCC_ClockConfig+0x260>)
 8005992:	4313      	orrs	r3, r2
 8005994:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 80dc 	beq.w	8005b5c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d13c      	bne.n	8005a26 <HAL_RCC_ClockConfig+0xf6>
 80059ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059b4:	fa93 f3a3 	rbit	r3, r3
 80059b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80059ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059bc:	fab3 f383 	clz	r3, r3
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	095b      	lsrs	r3, r3, #5
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	f043 0301 	orr.w	r3, r3, #1
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d102      	bne.n	80059d6 <HAL_RCC_ClockConfig+0xa6>
 80059d0:	4b6f      	ldr	r3, [pc, #444]	; (8005b90 <HAL_RCC_ClockConfig+0x260>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	e00f      	b.n	80059f6 <HAL_RCC_ClockConfig+0xc6>
 80059d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059de:	fa93 f3a3 	rbit	r3, r3
 80059e2:	667b      	str	r3, [r7, #100]	; 0x64
 80059e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059e8:	663b      	str	r3, [r7, #96]	; 0x60
 80059ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059ec:	fa93 f3a3 	rbit	r3, r3
 80059f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059f2:	4b67      	ldr	r3, [pc, #412]	; (8005b90 <HAL_RCC_ClockConfig+0x260>)
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80059fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80059fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059fe:	fa92 f2a2 	rbit	r2, r2
 8005a02:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005a04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a06:	fab2 f282 	clz	r2, r2
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	f042 0220 	orr.w	r2, r2, #32
 8005a10:	b2d2      	uxtb	r2, r2
 8005a12:	f002 021f 	and.w	r2, r2, #31
 8005a16:	2101      	movs	r1, #1
 8005a18:	fa01 f202 	lsl.w	r2, r1, r2
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d17b      	bne.n	8005b1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e0f3      	b.n	8005c0e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d13c      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x178>
 8005a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a36:	fa93 f3a3 	rbit	r3, r3
 8005a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a3e:	fab3 f383 	clz	r3, r3
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	095b      	lsrs	r3, r3, #5
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	f043 0301 	orr.w	r3, r3, #1
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d102      	bne.n	8005a58 <HAL_RCC_ClockConfig+0x128>
 8005a52:	4b4f      	ldr	r3, [pc, #316]	; (8005b90 <HAL_RCC_ClockConfig+0x260>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	e00f      	b.n	8005a78 <HAL_RCC_ClockConfig+0x148>
 8005a58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a5c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a60:	fa93 f3a3 	rbit	r3, r3
 8005a64:	647b      	str	r3, [r7, #68]	; 0x44
 8005a66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a6a:	643b      	str	r3, [r7, #64]	; 0x40
 8005a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a6e:	fa93 f3a3 	rbit	r3, r3
 8005a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a74:	4b46      	ldr	r3, [pc, #280]	; (8005b90 <HAL_RCC_ClockConfig+0x260>)
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a7c:	63ba      	str	r2, [r7, #56]	; 0x38
 8005a7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a80:	fa92 f2a2 	rbit	r2, r2
 8005a84:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a88:	fab2 f282 	clz	r2, r2
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	f042 0220 	orr.w	r2, r2, #32
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	f002 021f 	and.w	r2, r2, #31
 8005a98:	2101      	movs	r1, #1
 8005a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d13a      	bne.n	8005b1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e0b2      	b.n	8005c0e <HAL_RCC_ClockConfig+0x2de>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	fa93 f3a3 	rbit	r3, r3
 8005ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ab6:	fab3 f383 	clz	r3, r3
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	095b      	lsrs	r3, r3, #5
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	f043 0301 	orr.w	r3, r3, #1
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d102      	bne.n	8005ad0 <HAL_RCC_ClockConfig+0x1a0>
 8005aca:	4b31      	ldr	r3, [pc, #196]	; (8005b90 <HAL_RCC_ClockConfig+0x260>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	e00d      	b.n	8005aec <HAL_RCC_ClockConfig+0x1bc>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad6:	fa93 f3a3 	rbit	r3, r3
 8005ada:	627b      	str	r3, [r7, #36]	; 0x24
 8005adc:	2302      	movs	r3, #2
 8005ade:	623b      	str	r3, [r7, #32]
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	fa93 f3a3 	rbit	r3, r3
 8005ae6:	61fb      	str	r3, [r7, #28]
 8005ae8:	4b29      	ldr	r3, [pc, #164]	; (8005b90 <HAL_RCC_ClockConfig+0x260>)
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	2202      	movs	r2, #2
 8005aee:	61ba      	str	r2, [r7, #24]
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	fa92 f2a2 	rbit	r2, r2
 8005af6:	617a      	str	r2, [r7, #20]
  return result;
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	fab2 f282 	clz	r2, r2
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	f042 0220 	orr.w	r2, r2, #32
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	f002 021f 	and.w	r2, r2, #31
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b10:	4013      	ands	r3, r2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e079      	b.n	8005c0e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b1a:	4b1d      	ldr	r3, [pc, #116]	; (8005b90 <HAL_RCC_ClockConfig+0x260>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f023 0203 	bic.w	r2, r3, #3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	491a      	ldr	r1, [pc, #104]	; (8005b90 <HAL_RCC_ClockConfig+0x260>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b2c:	f7fc f812 	bl	8001b54 <HAL_GetTick>
 8005b30:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b32:	e00a      	b.n	8005b4a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b34:	f7fc f80e 	bl	8001b54 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e061      	b.n	8005c0e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b4a:	4b11      	ldr	r3, [pc, #68]	; (8005b90 <HAL_RCC_ClockConfig+0x260>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f003 020c 	and.w	r2, r3, #12
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d1eb      	bne.n	8005b34 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b5c:	4b0b      	ldr	r3, [pc, #44]	; (8005b8c <HAL_RCC_ClockConfig+0x25c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d214      	bcs.n	8005b94 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b6a:	4b08      	ldr	r3, [pc, #32]	; (8005b8c <HAL_RCC_ClockConfig+0x25c>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f023 0207 	bic.w	r2, r3, #7
 8005b72:	4906      	ldr	r1, [pc, #24]	; (8005b8c <HAL_RCC_ClockConfig+0x25c>)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b7a:	4b04      	ldr	r3, [pc, #16]	; (8005b8c <HAL_RCC_ClockConfig+0x25c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d005      	beq.n	8005b94 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e040      	b.n	8005c0e <HAL_RCC_ClockConfig+0x2de>
 8005b8c:	40022000 	.word	0x40022000
 8005b90:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d008      	beq.n	8005bb2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ba0:	4b1d      	ldr	r3, [pc, #116]	; (8005c18 <HAL_RCC_ClockConfig+0x2e8>)
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	491a      	ldr	r1, [pc, #104]	; (8005c18 <HAL_RCC_ClockConfig+0x2e8>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0308 	and.w	r3, r3, #8
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d009      	beq.n	8005bd2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bbe:	4b16      	ldr	r3, [pc, #88]	; (8005c18 <HAL_RCC_ClockConfig+0x2e8>)
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	4912      	ldr	r1, [pc, #72]	; (8005c18 <HAL_RCC_ClockConfig+0x2e8>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005bd2:	f000 f829 	bl	8005c28 <HAL_RCC_GetSysClockFreq>
 8005bd6:	4601      	mov	r1, r0
 8005bd8:	4b0f      	ldr	r3, [pc, #60]	; (8005c18 <HAL_RCC_ClockConfig+0x2e8>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005be0:	22f0      	movs	r2, #240	; 0xf0
 8005be2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	fa92 f2a2 	rbit	r2, r2
 8005bea:	60fa      	str	r2, [r7, #12]
  return result;
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	fab2 f282 	clz	r2, r2
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	40d3      	lsrs	r3, r2
 8005bf6:	4a09      	ldr	r2, [pc, #36]	; (8005c1c <HAL_RCC_ClockConfig+0x2ec>)
 8005bf8:	5cd3      	ldrb	r3, [r2, r3]
 8005bfa:	fa21 f303 	lsr.w	r3, r1, r3
 8005bfe:	4a08      	ldr	r2, [pc, #32]	; (8005c20 <HAL_RCC_ClockConfig+0x2f0>)
 8005c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005c02:	4b08      	ldr	r3, [pc, #32]	; (8005c24 <HAL_RCC_ClockConfig+0x2f4>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fb feb0 	bl	800196c <HAL_InitTick>
  
  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3778      	adds	r7, #120	; 0x78
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	080092cc 	.word	0x080092cc
 8005c20:	20000000 	.word	0x20000000
 8005c24:	20000004 	.word	0x20000004

08005c28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b08b      	sub	sp, #44	; 0x2c
 8005c2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	61fb      	str	r3, [r7, #28]
 8005c32:	2300      	movs	r3, #0
 8005c34:	61bb      	str	r3, [r7, #24]
 8005c36:	2300      	movs	r3, #0
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005c42:	4b29      	ldr	r3, [pc, #164]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	f003 030c 	and.w	r3, r3, #12
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	d002      	beq.n	8005c58 <HAL_RCC_GetSysClockFreq+0x30>
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d003      	beq.n	8005c5e <HAL_RCC_GetSysClockFreq+0x36>
 8005c56:	e03c      	b.n	8005cd2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c58:	4b24      	ldr	r3, [pc, #144]	; (8005cec <HAL_RCC_GetSysClockFreq+0xc4>)
 8005c5a:	623b      	str	r3, [r7, #32]
      break;
 8005c5c:	e03c      	b.n	8005cd8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005c64:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005c68:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	fa92 f2a2 	rbit	r2, r2
 8005c70:	607a      	str	r2, [r7, #4]
  return result;
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	fab2 f282 	clz	r2, r2
 8005c78:	b2d2      	uxtb	r2, r2
 8005c7a:	40d3      	lsrs	r3, r2
 8005c7c:	4a1c      	ldr	r2, [pc, #112]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005c7e:	5cd3      	ldrb	r3, [r2, r3]
 8005c80:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005c82:	4b19      	ldr	r3, [pc, #100]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c86:	f003 030f 	and.w	r3, r3, #15
 8005c8a:	220f      	movs	r2, #15
 8005c8c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	fa92 f2a2 	rbit	r2, r2
 8005c94:	60fa      	str	r2, [r7, #12]
  return result;
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	fab2 f282 	clz	r2, r2
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	40d3      	lsrs	r3, r2
 8005ca0:	4a14      	ldr	r2, [pc, #80]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005ca2:	5cd3      	ldrb	r3, [r2, r3]
 8005ca4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d008      	beq.n	8005cc2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005cb0:	4a0e      	ldr	r2, [pc, #56]	; (8005cec <HAL_RCC_GetSysClockFreq+0xc4>)
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	fb02 f303 	mul.w	r3, r2, r3
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc0:	e004      	b.n	8005ccc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	4a0c      	ldr	r2, [pc, #48]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005cc6:	fb02 f303 	mul.w	r3, r2, r3
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	623b      	str	r3, [r7, #32]
      break;
 8005cd0:	e002      	b.n	8005cd8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005cd2:	4b06      	ldr	r3, [pc, #24]	; (8005cec <HAL_RCC_GetSysClockFreq+0xc4>)
 8005cd4:	623b      	str	r3, [r7, #32]
      break;
 8005cd6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	372c      	adds	r7, #44	; 0x2c
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	40021000 	.word	0x40021000
 8005cec:	007a1200 	.word	0x007a1200
 8005cf0:	080092e4 	.word	0x080092e4
 8005cf4:	080092f4 	.word	0x080092f4
 8005cf8:	003d0900 	.word	0x003d0900

08005cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d00:	4b03      	ldr	r3, [pc, #12]	; (8005d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d02:	681b      	ldr	r3, [r3, #0]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	20000000 	.word	0x20000000

08005d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005d1a:	f7ff ffef 	bl	8005cfc <HAL_RCC_GetHCLKFreq>
 8005d1e:	4601      	mov	r1, r0
 8005d20:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d28:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005d2c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	fa92 f2a2 	rbit	r2, r2
 8005d34:	603a      	str	r2, [r7, #0]
  return result;
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	fab2 f282 	clz	r2, r2
 8005d3c:	b2d2      	uxtb	r2, r2
 8005d3e:	40d3      	lsrs	r3, r2
 8005d40:	4a04      	ldr	r2, [pc, #16]	; (8005d54 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005d42:	5cd3      	ldrb	r3, [r2, r3]
 8005d44:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	40021000 	.word	0x40021000
 8005d54:	080092dc 	.word	0x080092dc

08005d58 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	220f      	movs	r2, #15
 8005d66:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d68:	4b12      	ldr	r3, [pc, #72]	; (8005db4 <HAL_RCC_GetClockConfig+0x5c>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f003 0203 	and.w	r2, r3, #3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005d74:	4b0f      	ldr	r3, [pc, #60]	; (8005db4 <HAL_RCC_GetClockConfig+0x5c>)
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005d80:	4b0c      	ldr	r3, [pc, #48]	; (8005db4 <HAL_RCC_GetClockConfig+0x5c>)
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005d8c:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <HAL_RCC_GetClockConfig+0x5c>)
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	08db      	lsrs	r3, r3, #3
 8005d92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8005d9a:	4b07      	ldr	r3, [pc, #28]	; (8005db8 <HAL_RCC_GetClockConfig+0x60>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0207 	and.w	r2, r3, #7
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	601a      	str	r2, [r3, #0]
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	40021000 	.word	0x40021000
 8005db8:	40022000 	.word	0x40022000

08005dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b092      	sub	sp, #72	; 0x48
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 80d4 	beq.w	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005de0:	4b4e      	ldr	r3, [pc, #312]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10e      	bne.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dec:	4b4b      	ldr	r3, [pc, #300]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	4a4a      	ldr	r2, [pc, #296]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005df6:	61d3      	str	r3, [r2, #28]
 8005df8:	4b48      	ldr	r3, [pc, #288]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e00:	60bb      	str	r3, [r7, #8]
 8005e02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e04:	2301      	movs	r3, #1
 8005e06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e0a:	4b45      	ldr	r3, [pc, #276]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d118      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e16:	4b42      	ldr	r3, [pc, #264]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a41      	ldr	r2, [pc, #260]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e20:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e22:	f7fb fe97 	bl	8001b54 <HAL_GetTick>
 8005e26:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e28:	e008      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e2a:	f7fb fe93 	bl	8001b54 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b64      	cmp	r3, #100	; 0x64
 8005e36:	d901      	bls.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e169      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e3c:	4b38      	ldr	r3, [pc, #224]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d0f0      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e48:	4b34      	ldr	r3, [pc, #208]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e50:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 8084 	beq.w	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d07c      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e68:	4b2c      	ldr	r3, [pc, #176]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7a:	fa93 f3a3 	rbit	r3, r3
 8005e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e82:	fab3 f383 	clz	r3, r3
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	4b26      	ldr	r3, [pc, #152]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e8c:	4413      	add	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	461a      	mov	r2, r3
 8005e92:	2301      	movs	r3, #1
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9e:	fa93 f3a3 	rbit	r3, r3
 8005ea2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ea6:	fab3 f383 	clz	r3, r3
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	4b1d      	ldr	r3, [pc, #116]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005eb0:	4413      	add	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005eba:	4a18      	ldr	r2, [pc, #96]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ebe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d04b      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eca:	f7fb fe43 	bl	8001b54 <HAL_GetTick>
 8005ece:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ed0:	e00a      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ed2:	f7fb fe3f 	bl	8001b54 <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d901      	bls.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e113      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eee:	fa93 f3a3 	rbit	r3, r3
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	623b      	str	r3, [r7, #32]
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	fa93 f3a3 	rbit	r3, r3
 8005efe:	61fb      	str	r3, [r7, #28]
  return result;
 8005f00:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f02:	fab3 f383 	clz	r3, r3
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	095b      	lsrs	r3, r3, #5
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	f043 0302 	orr.w	r3, r3, #2
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d108      	bne.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005f16:	4b01      	ldr	r3, [pc, #4]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	e00d      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	40007000 	.word	0x40007000
 8005f24:	10908100 	.word	0x10908100
 8005f28:	2302      	movs	r3, #2
 8005f2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	fa93 f3a3 	rbit	r3, r3
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	4b78      	ldr	r3, [pc, #480]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	2202      	movs	r2, #2
 8005f3a:	613a      	str	r2, [r7, #16]
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	fa92 f2a2 	rbit	r2, r2
 8005f42:	60fa      	str	r2, [r7, #12]
  return result;
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	fab2 f282 	clz	r2, r2
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	f002 021f 	and.w	r2, r2, #31
 8005f56:	2101      	movs	r1, #1
 8005f58:	fa01 f202 	lsl.w	r2, r1, r2
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0b7      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005f62:	4b6d      	ldr	r3, [pc, #436]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	496a      	ldr	r1, [pc, #424]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d105      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f7c:	4b66      	ldr	r3, [pc, #408]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f7e:	69db      	ldr	r3, [r3, #28]
 8005f80:	4a65      	ldr	r2, [pc, #404]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d008      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f94:	4b60      	ldr	r3, [pc, #384]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f98:	f023 0203 	bic.w	r2, r3, #3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	495d      	ldr	r1, [pc, #372]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d008      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fb2:	4b59      	ldr	r3, [pc, #356]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	4956      	ldr	r1, [pc, #344]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d008      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fd0:	4b51      	ldr	r3, [pc, #324]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	494e      	ldr	r1, [pc, #312]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0320 	and.w	r3, r3, #32
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d008      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fee:	4b4a      	ldr	r3, [pc, #296]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff2:	f023 0210 	bic.w	r2, r3, #16
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	4947      	ldr	r1, [pc, #284]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d008      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800600c:	4b42      	ldr	r3, [pc, #264]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006018:	493f      	ldr	r1, [pc, #252]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800601a:	4313      	orrs	r3, r2
 800601c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006026:	2b00      	cmp	r3, #0
 8006028:	d008      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800602a:	4b3b      	ldr	r3, [pc, #236]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800602c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602e:	f023 0220 	bic.w	r2, r3, #32
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	4938      	ldr	r1, [pc, #224]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006038:	4313      	orrs	r3, r2
 800603a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0308 	and.w	r3, r3, #8
 8006044:	2b00      	cmp	r3, #0
 8006046:	d008      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006048:	4b33      	ldr	r3, [pc, #204]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800604a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	4930      	ldr	r1, [pc, #192]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006056:	4313      	orrs	r3, r2
 8006058:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0310 	and.w	r3, r3, #16
 8006062:	2b00      	cmp	r3, #0
 8006064:	d008      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006066:	4b2c      	ldr	r3, [pc, #176]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	4929      	ldr	r1, [pc, #164]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006074:	4313      	orrs	r3, r2
 8006076:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006080:	2b00      	cmp	r3, #0
 8006082:	d008      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006084:	4b24      	ldr	r3, [pc, #144]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	4921      	ldr	r1, [pc, #132]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006092:	4313      	orrs	r3, r2
 8006094:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d008      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80060a2:	4b1d      	ldr	r3, [pc, #116]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	491a      	ldr	r1, [pc, #104]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d008      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80060c0:	4b15      	ldr	r3, [pc, #84]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060cc:	4912      	ldr	r1, [pc, #72]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d008      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80060de:	4b0e      	ldr	r3, [pc, #56]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ea:	490b      	ldr	r1, [pc, #44]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d008      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80060fc:	4b06      	ldr	r3, [pc, #24]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006100:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006108:	4903      	ldr	r1, [pc, #12]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800610a:	4313      	orrs	r3, r2
 800610c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3748      	adds	r7, #72	; 0x48
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	40021000 	.word	0x40021000

0800611c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e049      	b.n	80061c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d106      	bne.n	8006148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f841 	bl	80061ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3304      	adds	r3, #4
 8006158:	4619      	mov	r1, r3
 800615a:	4610      	mov	r0, r2
 800615c:	f000 f9f2 	bl	8006544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
	...

080061e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d001      	beq.n	80061f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e04a      	b.n	800628e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0201 	orr.w	r2, r2, #1
 800620e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a21      	ldr	r2, [pc, #132]	; (800629c <HAL_TIM_Base_Start_IT+0xbc>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d018      	beq.n	800624c <HAL_TIM_Base_Start_IT+0x6c>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006222:	d013      	beq.n	800624c <HAL_TIM_Base_Start_IT+0x6c>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a1d      	ldr	r2, [pc, #116]	; (80062a0 <HAL_TIM_Base_Start_IT+0xc0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d00e      	beq.n	800624c <HAL_TIM_Base_Start_IT+0x6c>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a1c      	ldr	r2, [pc, #112]	; (80062a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d009      	beq.n	800624c <HAL_TIM_Base_Start_IT+0x6c>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a1a      	ldr	r2, [pc, #104]	; (80062a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d004      	beq.n	800624c <HAL_TIM_Base_Start_IT+0x6c>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a19      	ldr	r2, [pc, #100]	; (80062ac <HAL_TIM_Base_Start_IT+0xcc>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d115      	bne.n	8006278 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	4b17      	ldr	r3, [pc, #92]	; (80062b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006254:	4013      	ands	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b06      	cmp	r3, #6
 800625c:	d015      	beq.n	800628a <HAL_TIM_Base_Start_IT+0xaa>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006264:	d011      	beq.n	800628a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f042 0201 	orr.w	r2, r2, #1
 8006274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006276:	e008      	b.n	800628a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f042 0201 	orr.w	r2, r2, #1
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	e000      	b.n	800628c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800628a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	40012c00 	.word	0x40012c00
 80062a0:	40000400 	.word	0x40000400
 80062a4:	40000800 	.word	0x40000800
 80062a8:	40013400 	.word	0x40013400
 80062ac:	40014000 	.word	0x40014000
 80062b0:	00010007 	.word	0x00010007

080062b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d122      	bne.n	8006310 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d11b      	bne.n	8006310 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f06f 0202 	mvn.w	r2, #2
 80062e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	f003 0303 	and.w	r3, r3, #3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f905 	bl	8006506 <HAL_TIM_IC_CaptureCallback>
 80062fc:	e005      	b.n	800630a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f8f7 	bl	80064f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f908 	bl	800651a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f003 0304 	and.w	r3, r3, #4
 800631a:	2b04      	cmp	r3, #4
 800631c:	d122      	bne.n	8006364 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f003 0304 	and.w	r3, r3, #4
 8006328:	2b04      	cmp	r3, #4
 800632a:	d11b      	bne.n	8006364 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f06f 0204 	mvn.w	r2, #4
 8006334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2202      	movs	r2, #2
 800633a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f8db 	bl	8006506 <HAL_TIM_IC_CaptureCallback>
 8006350:	e005      	b.n	800635e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f8cd 	bl	80064f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f8de 	bl	800651a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	f003 0308 	and.w	r3, r3, #8
 800636e:	2b08      	cmp	r3, #8
 8006370:	d122      	bne.n	80063b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f003 0308 	and.w	r3, r3, #8
 800637c:	2b08      	cmp	r3, #8
 800637e:	d11b      	bne.n	80063b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f06f 0208 	mvn.w	r2, #8
 8006388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2204      	movs	r2, #4
 800638e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f8b1 	bl	8006506 <HAL_TIM_IC_CaptureCallback>
 80063a4:	e005      	b.n	80063b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f8a3 	bl	80064f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f8b4 	bl	800651a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f003 0310 	and.w	r3, r3, #16
 80063c2:	2b10      	cmp	r3, #16
 80063c4:	d122      	bne.n	800640c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f003 0310 	and.w	r3, r3, #16
 80063d0:	2b10      	cmp	r3, #16
 80063d2:	d11b      	bne.n	800640c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f06f 0210 	mvn.w	r2, #16
 80063dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2208      	movs	r2, #8
 80063e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f887 	bl	8006506 <HAL_TIM_IC_CaptureCallback>
 80063f8:	e005      	b.n	8006406 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f879 	bl	80064f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f88a 	bl	800651a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b01      	cmp	r3, #1
 8006418:	d10e      	bne.n	8006438 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	2b01      	cmp	r3, #1
 8006426:	d107      	bne.n	8006438 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f06f 0201 	mvn.w	r2, #1
 8006430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fb f95a 	bl	80016ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006442:	2b80      	cmp	r3, #128	; 0x80
 8006444:	d10e      	bne.n	8006464 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006450:	2b80      	cmp	r3, #128	; 0x80
 8006452:	d107      	bne.n	8006464 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800645c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f90a 	bl	8006678 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800646e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006472:	d10e      	bne.n	8006492 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800647e:	2b80      	cmp	r3, #128	; 0x80
 8006480:	d107      	bne.n	8006492 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800648a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f8fd 	bl	800668c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649c:	2b40      	cmp	r3, #64	; 0x40
 800649e:	d10e      	bne.n	80064be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064aa:	2b40      	cmp	r3, #64	; 0x40
 80064ac:	d107      	bne.n	80064be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f838 	bl	800652e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	f003 0320 	and.w	r3, r3, #32
 80064c8:	2b20      	cmp	r3, #32
 80064ca:	d10e      	bne.n	80064ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	f003 0320 	and.w	r3, r3, #32
 80064d6:	2b20      	cmp	r3, #32
 80064d8:	d107      	bne.n	80064ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f06f 0220 	mvn.w	r2, #32
 80064e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f8bd 	bl	8006664 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064ea:	bf00      	nop
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b083      	sub	sp, #12
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064fa:	bf00      	nop
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800650e:	bf00      	nop
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800651a:	b480      	push	{r7}
 800651c:	b083      	sub	sp, #12
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006522:	bf00      	nop
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800652e:	b480      	push	{r7}
 8006530:	b083      	sub	sp, #12
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006536:	bf00      	nop
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
	...

08006544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a3c      	ldr	r2, [pc, #240]	; (8006648 <TIM_Base_SetConfig+0x104>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d00f      	beq.n	800657c <TIM_Base_SetConfig+0x38>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006562:	d00b      	beq.n	800657c <TIM_Base_SetConfig+0x38>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a39      	ldr	r2, [pc, #228]	; (800664c <TIM_Base_SetConfig+0x108>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d007      	beq.n	800657c <TIM_Base_SetConfig+0x38>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a38      	ldr	r2, [pc, #224]	; (8006650 <TIM_Base_SetConfig+0x10c>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d003      	beq.n	800657c <TIM_Base_SetConfig+0x38>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a37      	ldr	r2, [pc, #220]	; (8006654 <TIM_Base_SetConfig+0x110>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d108      	bne.n	800658e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	4313      	orrs	r3, r2
 800658c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a2d      	ldr	r2, [pc, #180]	; (8006648 <TIM_Base_SetConfig+0x104>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d01b      	beq.n	80065ce <TIM_Base_SetConfig+0x8a>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800659c:	d017      	beq.n	80065ce <TIM_Base_SetConfig+0x8a>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a2a      	ldr	r2, [pc, #168]	; (800664c <TIM_Base_SetConfig+0x108>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d013      	beq.n	80065ce <TIM_Base_SetConfig+0x8a>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a29      	ldr	r2, [pc, #164]	; (8006650 <TIM_Base_SetConfig+0x10c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00f      	beq.n	80065ce <TIM_Base_SetConfig+0x8a>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a28      	ldr	r2, [pc, #160]	; (8006654 <TIM_Base_SetConfig+0x110>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d00b      	beq.n	80065ce <TIM_Base_SetConfig+0x8a>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a27      	ldr	r2, [pc, #156]	; (8006658 <TIM_Base_SetConfig+0x114>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d007      	beq.n	80065ce <TIM_Base_SetConfig+0x8a>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a26      	ldr	r2, [pc, #152]	; (800665c <TIM_Base_SetConfig+0x118>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d003      	beq.n	80065ce <TIM_Base_SetConfig+0x8a>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a25      	ldr	r2, [pc, #148]	; (8006660 <TIM_Base_SetConfig+0x11c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d108      	bne.n	80065e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a10      	ldr	r2, [pc, #64]	; (8006648 <TIM_Base_SetConfig+0x104>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d00f      	beq.n	800662c <TIM_Base_SetConfig+0xe8>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a11      	ldr	r2, [pc, #68]	; (8006654 <TIM_Base_SetConfig+0x110>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00b      	beq.n	800662c <TIM_Base_SetConfig+0xe8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a10      	ldr	r2, [pc, #64]	; (8006658 <TIM_Base_SetConfig+0x114>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d007      	beq.n	800662c <TIM_Base_SetConfig+0xe8>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a0f      	ldr	r2, [pc, #60]	; (800665c <TIM_Base_SetConfig+0x118>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d003      	beq.n	800662c <TIM_Base_SetConfig+0xe8>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a0e      	ldr	r2, [pc, #56]	; (8006660 <TIM_Base_SetConfig+0x11c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d103      	bne.n	8006634 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	691a      	ldr	r2, [r3, #16]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	615a      	str	r2, [r3, #20]
}
 800663a:	bf00      	nop
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	40012c00 	.word	0x40012c00
 800664c:	40000400 	.word	0x40000400
 8006650:	40000800 	.word	0x40000800
 8006654:	40013400 	.word	0x40013400
 8006658:	40014000 	.word	0x40014000
 800665c:	40014400 	.word	0x40014400
 8006660:	40014800 	.word	0x40014800

08006664 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80066a8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80066ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	43db      	mvns	r3, r3
 80066bc:	b29b      	uxth	r3, r3
 80066be:	4013      	ands	r3, r2
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80066d6:	b084      	sub	sp, #16
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	f107 0014 	add.w	r0, r7, #20
 80066e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	b004      	add	sp, #16
 8006716:	4770      	bx	lr

08006718 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	4603      	mov	r3, r0
 8006720:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006722:	2300      	movs	r3, #0
 8006724:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800672a:	2b84      	cmp	r3, #132	; 0x84
 800672c:	d005      	beq.n	800673a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800672e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4413      	add	r3, r2
 8006736:	3303      	adds	r3, #3
 8006738:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800673a:	68fb      	ldr	r3, [r7, #12]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800674e:	f3ef 8305 	mrs	r3, IPSR
 8006752:	607b      	str	r3, [r7, #4]
  return(result);
 8006754:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006756:	2b00      	cmp	r3, #0
 8006758:	bf14      	ite	ne
 800675a:	2301      	movne	r3, #1
 800675c:	2300      	moveq	r3, #0
 800675e:	b2db      	uxtb	r3, r3
}
 8006760:	4618      	mov	r0, r3
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006770:	f001 f9f2 	bl	8007b58 <vTaskStartScheduler>
  
  return osOK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	bd80      	pop	{r7, pc}

0800677a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800677a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800677c:	b089      	sub	sp, #36	; 0x24
 800677e:	af04      	add	r7, sp, #16
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d020      	beq.n	80067ce <osThreadCreate+0x54>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d01c      	beq.n	80067ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685c      	ldr	r4, [r3, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681d      	ldr	r5, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	691e      	ldr	r6, [r3, #16]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff ffb6 	bl	8006718 <makeFreeRtosPriority>
 80067ac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067b6:	9202      	str	r2, [sp, #8]
 80067b8:	9301      	str	r3, [sp, #4]
 80067ba:	9100      	str	r1, [sp, #0]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	4632      	mov	r2, r6
 80067c0:	4629      	mov	r1, r5
 80067c2:	4620      	mov	r0, r4
 80067c4:	f001 f80a 	bl	80077dc <xTaskCreateStatic>
 80067c8:	4603      	mov	r3, r0
 80067ca:	60fb      	str	r3, [r7, #12]
 80067cc:	e01c      	b.n	8006808 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685c      	ldr	r4, [r3, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067da:	b29e      	uxth	r6, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7ff ff98 	bl	8006718 <makeFreeRtosPriority>
 80067e8:	4602      	mov	r2, r0
 80067ea:	f107 030c 	add.w	r3, r7, #12
 80067ee:	9301      	str	r3, [sp, #4]
 80067f0:	9200      	str	r2, [sp, #0]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	4632      	mov	r2, r6
 80067f6:	4629      	mov	r1, r5
 80067f8:	4620      	mov	r0, r4
 80067fa:	f001 f84b 	bl	8007894 <xTaskCreate>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b01      	cmp	r3, #1
 8006802:	d001      	beq.n	8006808 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006804:	2300      	movs	r3, #0
 8006806:	e000      	b.n	800680a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006808:	68fb      	ldr	r3, [r7, #12]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006812 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b084      	sub	sp, #16
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <osDelay+0x16>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	e000      	b.n	800682a <osDelay+0x18>
 8006828:	2301      	movs	r3, #1
 800682a:	4618      	mov	r0, r3
 800682c:	f001 f960 	bl	8007af0 <vTaskDelay>
  
  return osOK;
 8006830:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b082      	sub	sp, #8
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d007      	beq.n	800685a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	4619      	mov	r1, r3
 8006850:	2001      	movs	r0, #1
 8006852:	f000 fb67 	bl	8006f24 <xQueueCreateMutexStatic>
 8006856:	4603      	mov	r3, r0
 8006858:	e003      	b.n	8006862 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800685a:	2001      	movs	r0, #1
 800685c:	f000 fb4a 	bl	8006ef4 <xQueueCreateMutex>
 8006860:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006862:	4618      	mov	r0, r3
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
	...

0800686c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006876:	2300      	movs	r3, #0
 8006878:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <osMutexWait+0x18>
    return osErrorParameter;
 8006880:	2380      	movs	r3, #128	; 0x80
 8006882:	e03a      	b.n	80068fa <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006884:	2300      	movs	r3, #0
 8006886:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688e:	d103      	bne.n	8006898 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006890:	f04f 33ff 	mov.w	r3, #4294967295
 8006894:	60fb      	str	r3, [r7, #12]
 8006896:	e009      	b.n	80068ac <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d006      	beq.n	80068ac <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <osMutexWait+0x40>
      ticks = 1;
 80068a8:	2301      	movs	r3, #1
 80068aa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80068ac:	f7ff ff4c 	bl	8006748 <inHandlerMode>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d017      	beq.n	80068e6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80068b6:	f107 0308 	add.w	r3, r7, #8
 80068ba:	461a      	mov	r2, r3
 80068bc:	2100      	movs	r1, #0
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fde4 	bl	800748c <xQueueReceiveFromISR>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d001      	beq.n	80068ce <osMutexWait+0x62>
      return osErrorOS;
 80068ca:	23ff      	movs	r3, #255	; 0xff
 80068cc:	e015      	b.n	80068fa <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d011      	beq.n	80068f8 <osMutexWait+0x8c>
 80068d4:	4b0b      	ldr	r3, [pc, #44]	; (8006904 <osMutexWait+0x98>)
 80068d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	e008      	b.n	80068f8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80068e6:	68f9      	ldr	r1, [r7, #12]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fcc3 	bl	8007274 <xQueueSemaphoreTake>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d001      	beq.n	80068f8 <osMutexWait+0x8c>
    return osErrorOS;
 80068f4:	23ff      	movs	r3, #255	; 0xff
 80068f6:	e000      	b.n	80068fa <osMutexWait+0x8e>
  }
  
  return osOK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	e000ed04 	.word	0xe000ed04

08006908 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006910:	2300      	movs	r3, #0
 8006912:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006914:	2300      	movs	r3, #0
 8006916:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006918:	f7ff ff16 	bl	8006748 <inHandlerMode>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d016      	beq.n	8006950 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006922:	f107 0308 	add.w	r3, r7, #8
 8006926:	4619      	mov	r1, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fc15 	bl	8007158 <xQueueGiveFromISR>
 800692e:	4603      	mov	r3, r0
 8006930:	2b01      	cmp	r3, #1
 8006932:	d001      	beq.n	8006938 <osMutexRelease+0x30>
      return osErrorOS;
 8006934:	23ff      	movs	r3, #255	; 0xff
 8006936:	e017      	b.n	8006968 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d013      	beq.n	8006966 <osMutexRelease+0x5e>
 800693e:	4b0c      	ldr	r3, [pc, #48]	; (8006970 <osMutexRelease+0x68>)
 8006940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	e00a      	b.n	8006966 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006950:	2300      	movs	r3, #0
 8006952:	2200      	movs	r2, #0
 8006954:	2100      	movs	r1, #0
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fb00 	bl	8006f5c <xQueueGenericSend>
 800695c:	4603      	mov	r3, r0
 800695e:	2b01      	cmp	r3, #1
 8006960:	d001      	beq.n	8006966 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006962:	23ff      	movs	r3, #255	; 0xff
 8006964:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006966:	68fb      	ldr	r3, [r7, #12]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	e000ed04 	.word	0xe000ed04

08006974 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af02      	add	r7, sp, #8
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00f      	beq.n	80069a6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d10a      	bne.n	80069a2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	2203      	movs	r2, #3
 8006992:	9200      	str	r2, [sp, #0]
 8006994:	2200      	movs	r2, #0
 8006996:	2100      	movs	r1, #0
 8006998:	2001      	movs	r0, #1
 800699a:	f000 f9bd 	bl	8006d18 <xQueueGenericCreateStatic>
 800699e:	4603      	mov	r3, r0
 80069a0:	e016      	b.n	80069d0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	e014      	b.n	80069d0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d110      	bne.n	80069ce <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80069ac:	2203      	movs	r2, #3
 80069ae:	2100      	movs	r1, #0
 80069b0:	2001      	movs	r0, #1
 80069b2:	f000 fa28 	bl	8006e06 <xQueueGenericCreate>
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d005      	beq.n	80069ca <osSemaphoreCreate+0x56>
 80069be:	2300      	movs	r3, #0
 80069c0:	2200      	movs	r2, #0
 80069c2:	2100      	movs	r1, #0
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f000 fac9 	bl	8006f5c <xQueueGenericSend>
      return sema;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	e000      	b.n	80069d0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80069ce:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80069e2:	2300      	movs	r3, #0
 80069e4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80069ec:	2380      	movs	r3, #128	; 0x80
 80069ee:	e03a      	b.n	8006a66 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80069f0:	2300      	movs	r3, #0
 80069f2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fa:	d103      	bne.n	8006a04 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80069fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006a00:	60fb      	str	r3, [r7, #12]
 8006a02:	e009      	b.n	8006a18 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d006      	beq.n	8006a18 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <osSemaphoreWait+0x40>
      ticks = 1;
 8006a14:	2301      	movs	r3, #1
 8006a16:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006a18:	f7ff fe96 	bl	8006748 <inHandlerMode>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d017      	beq.n	8006a52 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006a22:	f107 0308 	add.w	r3, r7, #8
 8006a26:	461a      	mov	r2, r3
 8006a28:	2100      	movs	r1, #0
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fd2e 	bl	800748c <xQueueReceiveFromISR>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d001      	beq.n	8006a3a <osSemaphoreWait+0x62>
      return osErrorOS;
 8006a36:	23ff      	movs	r3, #255	; 0xff
 8006a38:	e015      	b.n	8006a66 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d011      	beq.n	8006a64 <osSemaphoreWait+0x8c>
 8006a40:	4b0b      	ldr	r3, [pc, #44]	; (8006a70 <osSemaphoreWait+0x98>)
 8006a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	e008      	b.n	8006a64 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006a52:	68f9      	ldr	r1, [r7, #12]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fc0d 	bl	8007274 <xQueueSemaphoreTake>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d001      	beq.n	8006a64 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006a60:	23ff      	movs	r3, #255	; 0xff
 8006a62:	e000      	b.n	8006a66 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	e000ed04 	.word	0xe000ed04

08006a74 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006a80:	2300      	movs	r3, #0
 8006a82:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006a84:	f7ff fe60 	bl	8006748 <inHandlerMode>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d016      	beq.n	8006abc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006a8e:	f107 0308 	add.w	r3, r7, #8
 8006a92:	4619      	mov	r1, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fb5f 	bl	8007158 <xQueueGiveFromISR>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d001      	beq.n	8006aa4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006aa0:	23ff      	movs	r3, #255	; 0xff
 8006aa2:	e017      	b.n	8006ad4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d013      	beq.n	8006ad2 <osSemaphoreRelease+0x5e>
 8006aaa:	4b0c      	ldr	r3, [pc, #48]	; (8006adc <osSemaphoreRelease+0x68>)
 8006aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab0:	601a      	str	r2, [r3, #0]
 8006ab2:	f3bf 8f4f 	dsb	sy
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	e00a      	b.n	8006ad2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006abc:	2300      	movs	r3, #0
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fa4a 	bl	8006f5c <xQueueGenericSend>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d001      	beq.n	8006ad2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006ace:	23ff      	movs	r3, #255	; 0xff
 8006ad0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	e000ed04 	.word	0xe000ed04

08006ae0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f103 0208 	add.w	r2, r3, #8
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f04f 32ff 	mov.w	r2, #4294967295
 8006af8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f103 0208 	add.w	r2, r3, #8
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f103 0208 	add.w	r2, r3, #8
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b2e:	bf00      	nop
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b085      	sub	sp, #20
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	689a      	ldr	r2, [r3, #8]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	1c5a      	adds	r2, r3, #1
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	601a      	str	r2, [r3, #0]
}
 8006b76:	bf00      	nop
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b82:	b480      	push	{r7}
 8006b84:	b085      	sub	sp, #20
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b98:	d103      	bne.n	8006ba2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	e00c      	b.n	8006bbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	3308      	adds	r3, #8
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	e002      	b.n	8006bb0 <vListInsert+0x2e>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d2f6      	bcs.n	8006baa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	683a      	ldr	r2, [r7, #0]
 8006bca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	1c5a      	adds	r2, r3, #1
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	601a      	str	r2, [r3, #0]
}
 8006be8:	bf00      	nop
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	6892      	ldr	r2, [r2, #8]
 8006c0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	6852      	ldr	r2, [r2, #4]
 8006c14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d103      	bne.n	8006c28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689a      	ldr	r2, [r3, #8]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	1e5a      	subs	r2, r3, #1
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10a      	bne.n	8006c72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c6e:	bf00      	nop
 8006c70:	e7fe      	b.n	8006c70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006c72:	f001 feef 	bl	8008a54 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c7e:	68f9      	ldr	r1, [r7, #12]
 8006c80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c82:	fb01 f303 	mul.w	r3, r1, r3
 8006c86:	441a      	add	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	68f9      	ldr	r1, [r7, #12]
 8006ca6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ca8:	fb01 f303 	mul.w	r3, r1, r3
 8006cac:	441a      	add	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	22ff      	movs	r2, #255	; 0xff
 8006cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	22ff      	movs	r2, #255	; 0xff
 8006cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d114      	bne.n	8006cf2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d01a      	beq.n	8006d06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	3310      	adds	r3, #16
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f001 f987 	bl	8007fe8 <xTaskRemoveFromEventList>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d012      	beq.n	8006d06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ce0:	4b0c      	ldr	r3, [pc, #48]	; (8006d14 <xQueueGenericReset+0xcc>)
 8006ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce6:	601a      	str	r2, [r3, #0]
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	e009      	b.n	8006d06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	3310      	adds	r3, #16
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7ff fef2 	bl	8006ae0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3324      	adds	r3, #36	; 0x24
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7ff feed 	bl	8006ae0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d06:	f001 fed5 	bl	8008ab4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d0a:	2301      	movs	r3, #1
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	e000ed04 	.word	0xe000ed04

08006d18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08e      	sub	sp, #56	; 0x38
 8006d1c:	af02      	add	r7, sp, #8
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
 8006d24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10a      	bne.n	8006d42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d3e:	bf00      	nop
 8006d40:	e7fe      	b.n	8006d40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10a      	bne.n	8006d5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4c:	f383 8811 	msr	BASEPRI, r3
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	f3bf 8f4f 	dsb	sy
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d5a:	bf00      	nop
 8006d5c:	e7fe      	b.n	8006d5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <xQueueGenericCreateStatic+0x52>
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <xQueueGenericCreateStatic+0x56>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e000      	b.n	8006d70 <xQueueGenericCreateStatic+0x58>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d78:	f383 8811 	msr	BASEPRI, r3
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	623b      	str	r3, [r7, #32]
}
 8006d86:	bf00      	nop
 8006d88:	e7fe      	b.n	8006d88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d102      	bne.n	8006d96 <xQueueGenericCreateStatic+0x7e>
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <xQueueGenericCreateStatic+0x82>
 8006d96:	2301      	movs	r3, #1
 8006d98:	e000      	b.n	8006d9c <xQueueGenericCreateStatic+0x84>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10a      	bne.n	8006db6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	61fb      	str	r3, [r7, #28]
}
 8006db2:	bf00      	nop
 8006db4:	e7fe      	b.n	8006db4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006db6:	2348      	movs	r3, #72	; 0x48
 8006db8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2b48      	cmp	r3, #72	; 0x48
 8006dbe:	d00a      	beq.n	8006dd6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	61bb      	str	r3, [r7, #24]
}
 8006dd2:	bf00      	nop
 8006dd4:	e7fe      	b.n	8006dd4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00d      	beq.n	8006dfc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006de8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	4613      	mov	r3, r2
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	68b9      	ldr	r1, [r7, #8]
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 f843 	bl	8006e82 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3730      	adds	r7, #48	; 0x30
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b08a      	sub	sp, #40	; 0x28
 8006e0a:	af02      	add	r7, sp, #8
 8006e0c:	60f8      	str	r0, [r7, #12]
 8006e0e:	60b9      	str	r1, [r7, #8]
 8006e10:	4613      	mov	r3, r2
 8006e12:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10a      	bne.n	8006e30 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	613b      	str	r3, [r7, #16]
}
 8006e2c:	bf00      	nop
 8006e2e:	e7fe      	b.n	8006e2e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d102      	bne.n	8006e3c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006e36:	2300      	movs	r3, #0
 8006e38:	61fb      	str	r3, [r7, #28]
 8006e3a:	e004      	b.n	8006e46 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	fb02 f303 	mul.w	r3, r2, r3
 8006e44:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	3348      	adds	r3, #72	; 0x48
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f001 ff24 	bl	8008c98 <pvPortMalloc>
 8006e50:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00f      	beq.n	8006e78 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	3348      	adds	r3, #72	; 0x48
 8006e5c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e66:	79fa      	ldrb	r2, [r7, #7]
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	68b9      	ldr	r1, [r7, #8]
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 f805 	bl	8006e82 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006e78:	69bb      	ldr	r3, [r7, #24]
	}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3720      	adds	r7, #32
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	60f8      	str	r0, [r7, #12]
 8006e8a:	60b9      	str	r1, [r7, #8]
 8006e8c:	607a      	str	r2, [r7, #4]
 8006e8e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d103      	bne.n	8006e9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	601a      	str	r2, [r3, #0]
 8006e9c:	e002      	b.n	8006ea4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006eb0:	2101      	movs	r1, #1
 8006eb2:	69b8      	ldr	r0, [r7, #24]
 8006eb4:	f7ff fec8 	bl	8006c48 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006eb8:	bf00      	nop
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00e      	beq.n	8006eec <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f838 	bl	8006f5c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006eec:	bf00      	nop
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	4603      	mov	r3, r0
 8006efc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006efe:	2301      	movs	r3, #1
 8006f00:	617b      	str	r3, [r7, #20]
 8006f02:	2300      	movs	r3, #0
 8006f04:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006f06:	79fb      	ldrb	r3, [r7, #7]
 8006f08:	461a      	mov	r2, r3
 8006f0a:	6939      	ldr	r1, [r7, #16]
 8006f0c:	6978      	ldr	r0, [r7, #20]
 8006f0e:	f7ff ff7a 	bl	8006e06 <xQueueGenericCreate>
 8006f12:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f7ff ffd3 	bl	8006ec0 <prvInitialiseMutex>

		return pxNewQueue;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
	}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3718      	adds	r7, #24
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b088      	sub	sp, #32
 8006f28:	af02      	add	r7, sp, #8
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	6039      	str	r1, [r7, #0]
 8006f2e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006f30:	2301      	movs	r3, #1
 8006f32:	617b      	str	r3, [r7, #20]
 8006f34:	2300      	movs	r3, #0
 8006f36:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006f38:	79fb      	ldrb	r3, [r7, #7]
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	6939      	ldr	r1, [r7, #16]
 8006f42:	6978      	ldr	r0, [r7, #20]
 8006f44:	f7ff fee8 	bl	8006d18 <xQueueGenericCreateStatic>
 8006f48:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f7ff ffb8 	bl	8006ec0 <prvInitialiseMutex>

		return pxNewQueue;
 8006f50:	68fb      	ldr	r3, [r7, #12]
	}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3718      	adds	r7, #24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
	...

08006f5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b08e      	sub	sp, #56	; 0x38
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
 8006f68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10a      	bne.n	8006f8e <xQueueGenericSend+0x32>
	__asm volatile
 8006f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f8a:	bf00      	nop
 8006f8c:	e7fe      	b.n	8006f8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d103      	bne.n	8006f9c <xQueueGenericSend+0x40>
 8006f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <xQueueGenericSend+0x44>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e000      	b.n	8006fa2 <xQueueGenericSend+0x46>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10a      	bne.n	8006fbc <xQueueGenericSend+0x60>
	__asm volatile
 8006fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006fb8:	bf00      	nop
 8006fba:	e7fe      	b.n	8006fba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d103      	bne.n	8006fca <xQueueGenericSend+0x6e>
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d101      	bne.n	8006fce <xQueueGenericSend+0x72>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e000      	b.n	8006fd0 <xQueueGenericSend+0x74>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10a      	bne.n	8006fea <xQueueGenericSend+0x8e>
	__asm volatile
 8006fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	623b      	str	r3, [r7, #32]
}
 8006fe6:	bf00      	nop
 8006fe8:	e7fe      	b.n	8006fe8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fea:	f001 f9bf 	bl	800836c <xTaskGetSchedulerState>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d102      	bne.n	8006ffa <xQueueGenericSend+0x9e>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <xQueueGenericSend+0xa2>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e000      	b.n	8007000 <xQueueGenericSend+0xa4>
 8006ffe:	2300      	movs	r3, #0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10a      	bne.n	800701a <xQueueGenericSend+0xbe>
	__asm volatile
 8007004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007008:	f383 8811 	msr	BASEPRI, r3
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	61fb      	str	r3, [r7, #28]
}
 8007016:	bf00      	nop
 8007018:	e7fe      	b.n	8007018 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800701a:	f001 fd1b 	bl	8008a54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007026:	429a      	cmp	r2, r3
 8007028:	d302      	bcc.n	8007030 <xQueueGenericSend+0xd4>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b02      	cmp	r3, #2
 800702e:	d129      	bne.n	8007084 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	68b9      	ldr	r1, [r7, #8]
 8007034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007036:	f000 fac1 	bl	80075bc <prvCopyDataToQueue>
 800703a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800703c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007040:	2b00      	cmp	r3, #0
 8007042:	d010      	beq.n	8007066 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007046:	3324      	adds	r3, #36	; 0x24
 8007048:	4618      	mov	r0, r3
 800704a:	f000 ffcd 	bl	8007fe8 <xTaskRemoveFromEventList>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d013      	beq.n	800707c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007054:	4b3f      	ldr	r3, [pc, #252]	; (8007154 <xQueueGenericSend+0x1f8>)
 8007056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800705a:	601a      	str	r2, [r3, #0]
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	e00a      	b.n	800707c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007068:	2b00      	cmp	r3, #0
 800706a:	d007      	beq.n	800707c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800706c:	4b39      	ldr	r3, [pc, #228]	; (8007154 <xQueueGenericSend+0x1f8>)
 800706e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800707c:	f001 fd1a 	bl	8008ab4 <vPortExitCritical>
				return pdPASS;
 8007080:	2301      	movs	r3, #1
 8007082:	e063      	b.n	800714c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d103      	bne.n	8007092 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800708a:	f001 fd13 	bl	8008ab4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800708e:	2300      	movs	r3, #0
 8007090:	e05c      	b.n	800714c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007094:	2b00      	cmp	r3, #0
 8007096:	d106      	bne.n	80070a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007098:	f107 0314 	add.w	r3, r7, #20
 800709c:	4618      	mov	r0, r3
 800709e:	f001 f805 	bl	80080ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070a2:	2301      	movs	r3, #1
 80070a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070a6:	f001 fd05 	bl	8008ab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070aa:	f000 fdb5 	bl	8007c18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070ae:	f001 fcd1 	bl	8008a54 <vPortEnterCritical>
 80070b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070b8:	b25b      	sxtb	r3, r3
 80070ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070be:	d103      	bne.n	80070c8 <xQueueGenericSend+0x16c>
 80070c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070ce:	b25b      	sxtb	r3, r3
 80070d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d4:	d103      	bne.n	80070de <xQueueGenericSend+0x182>
 80070d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070de:	f001 fce9 	bl	8008ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070e2:	1d3a      	adds	r2, r7, #4
 80070e4:	f107 0314 	add.w	r3, r7, #20
 80070e8:	4611      	mov	r1, r2
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 fff4 	bl	80080d8 <xTaskCheckForTimeOut>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d124      	bne.n	8007140 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80070f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070f8:	f000 fb58 	bl	80077ac <prvIsQueueFull>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d018      	beq.n	8007134 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007104:	3310      	adds	r3, #16
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	4611      	mov	r1, r2
 800710a:	4618      	mov	r0, r3
 800710c:	f000 ff48 	bl	8007fa0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007112:	f000 fae3 	bl	80076dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007116:	f000 fd8d 	bl	8007c34 <xTaskResumeAll>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	f47f af7c 	bne.w	800701a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007122:	4b0c      	ldr	r3, [pc, #48]	; (8007154 <xQueueGenericSend+0x1f8>)
 8007124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	e772      	b.n	800701a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007136:	f000 fad1 	bl	80076dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800713a:	f000 fd7b 	bl	8007c34 <xTaskResumeAll>
 800713e:	e76c      	b.n	800701a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007142:	f000 facb 	bl	80076dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007146:	f000 fd75 	bl	8007c34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800714a:	2300      	movs	r3, #0
		}
	}
}
 800714c:	4618      	mov	r0, r3
 800714e:	3738      	adds	r7, #56	; 0x38
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	e000ed04 	.word	0xe000ed04

08007158 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08e      	sub	sp, #56	; 0x38
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10a      	bne.n	8007182 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	623b      	str	r3, [r7, #32]
}
 800717e:	bf00      	nop
 8007180:	e7fe      	b.n	8007180 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <xQueueGiveFromISR+0x48>
	__asm volatile
 800718a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	61fb      	str	r3, [r7, #28]
}
 800719c:	bf00      	nop
 800719e:	e7fe      	b.n	800719e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d103      	bne.n	80071b0 <xQueueGiveFromISR+0x58>
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <xQueueGiveFromISR+0x5c>
 80071b0:	2301      	movs	r3, #1
 80071b2:	e000      	b.n	80071b6 <xQueueGiveFromISR+0x5e>
 80071b4:	2300      	movs	r3, #0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10a      	bne.n	80071d0 <xQueueGiveFromISR+0x78>
	__asm volatile
 80071ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	61bb      	str	r3, [r7, #24]
}
 80071cc:	bf00      	nop
 80071ce:	e7fe      	b.n	80071ce <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071d0:	f001 fd22 	bl	8008c18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80071d4:	f3ef 8211 	mrs	r2, BASEPRI
 80071d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071dc:	f383 8811 	msr	BASEPRI, r3
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	617a      	str	r2, [r7, #20]
 80071ea:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80071ec:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80071f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d22b      	bcs.n	8007258 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007202:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800720a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720c:	1c5a      	adds	r2, r3, #1
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007212:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721a:	d112      	bne.n	8007242 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800721c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007220:	2b00      	cmp	r3, #0
 8007222:	d016      	beq.n	8007252 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007226:	3324      	adds	r3, #36	; 0x24
 8007228:	4618      	mov	r0, r3
 800722a:	f000 fedd 	bl	8007fe8 <xTaskRemoveFromEventList>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00e      	beq.n	8007252 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00b      	beq.n	8007252 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2201      	movs	r2, #1
 800723e:	601a      	str	r2, [r3, #0]
 8007240:	e007      	b.n	8007252 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007242:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007246:	3301      	adds	r3, #1
 8007248:	b2db      	uxtb	r3, r3
 800724a:	b25a      	sxtb	r2, r3
 800724c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007252:	2301      	movs	r3, #1
 8007254:	637b      	str	r3, [r7, #52]	; 0x34
 8007256:	e001      	b.n	800725c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007258:	2300      	movs	r3, #0
 800725a:	637b      	str	r3, [r7, #52]	; 0x34
 800725c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007266:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800726a:	4618      	mov	r0, r3
 800726c:	3738      	adds	r7, #56	; 0x38
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
	...

08007274 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08e      	sub	sp, #56	; 0x38
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800727e:	2300      	movs	r3, #0
 8007280:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007286:	2300      	movs	r3, #0
 8007288:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800728a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10a      	bne.n	80072a6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	623b      	str	r3, [r7, #32]
}
 80072a2:	bf00      	nop
 80072a4:	e7fe      	b.n	80072a4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80072a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00a      	beq.n	80072c4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	61fb      	str	r3, [r7, #28]
}
 80072c0:	bf00      	nop
 80072c2:	e7fe      	b.n	80072c2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072c4:	f001 f852 	bl	800836c <xTaskGetSchedulerState>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d102      	bne.n	80072d4 <xQueueSemaphoreTake+0x60>
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d101      	bne.n	80072d8 <xQueueSemaphoreTake+0x64>
 80072d4:	2301      	movs	r3, #1
 80072d6:	e000      	b.n	80072da <xQueueSemaphoreTake+0x66>
 80072d8:	2300      	movs	r3, #0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10a      	bne.n	80072f4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80072de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e2:	f383 8811 	msr	BASEPRI, r3
 80072e6:	f3bf 8f6f 	isb	sy
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	61bb      	str	r3, [r7, #24]
}
 80072f0:	bf00      	nop
 80072f2:	e7fe      	b.n	80072f2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80072f4:	f001 fbae 	bl	8008a54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80072f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80072fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007300:	2b00      	cmp	r3, #0
 8007302:	d024      	beq.n	800734e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007306:	1e5a      	subs	r2, r3, #1
 8007308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d104      	bne.n	800731e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007314:	f001 f9f4 	bl	8008700 <pvTaskIncrementMutexHeldCount>
 8007318:	4602      	mov	r2, r0
 800731a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800731e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00f      	beq.n	8007346 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007328:	3310      	adds	r3, #16
 800732a:	4618      	mov	r0, r3
 800732c:	f000 fe5c 	bl	8007fe8 <xTaskRemoveFromEventList>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d007      	beq.n	8007346 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007336:	4b54      	ldr	r3, [pc, #336]	; (8007488 <xQueueSemaphoreTake+0x214>)
 8007338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007346:	f001 fbb5 	bl	8008ab4 <vPortExitCritical>
				return pdPASS;
 800734a:	2301      	movs	r3, #1
 800734c:	e097      	b.n	800747e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d111      	bne.n	8007378 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00a      	beq.n	8007370 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800735a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	617b      	str	r3, [r7, #20]
}
 800736c:	bf00      	nop
 800736e:	e7fe      	b.n	800736e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007370:	f001 fba0 	bl	8008ab4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007374:	2300      	movs	r3, #0
 8007376:	e082      	b.n	800747e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737a:	2b00      	cmp	r3, #0
 800737c:	d106      	bne.n	800738c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800737e:	f107 030c 	add.w	r3, r7, #12
 8007382:	4618      	mov	r0, r3
 8007384:	f000 fe92 	bl	80080ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007388:	2301      	movs	r3, #1
 800738a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800738c:	f001 fb92 	bl	8008ab4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007390:	f000 fc42 	bl	8007c18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007394:	f001 fb5e 	bl	8008a54 <vPortEnterCritical>
 8007398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800739e:	b25b      	sxtb	r3, r3
 80073a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a4:	d103      	bne.n	80073ae <xQueueSemaphoreTake+0x13a>
 80073a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073b4:	b25b      	sxtb	r3, r3
 80073b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ba:	d103      	bne.n	80073c4 <xQueueSemaphoreTake+0x150>
 80073bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073c4:	f001 fb76 	bl	8008ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073c8:	463a      	mov	r2, r7
 80073ca:	f107 030c 	add.w	r3, r7, #12
 80073ce:	4611      	mov	r1, r2
 80073d0:	4618      	mov	r0, r3
 80073d2:	f000 fe81 	bl	80080d8 <xTaskCheckForTimeOut>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d132      	bne.n	8007442 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073de:	f000 f9cf 	bl	8007780 <prvIsQueueEmpty>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d026      	beq.n	8007436 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d109      	bne.n	8007404 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80073f0:	f001 fb30 	bl	8008a54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80073f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 ffd5 	bl	80083a8 <xTaskPriorityInherit>
 80073fe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007400:	f001 fb58 	bl	8008ab4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007406:	3324      	adds	r3, #36	; 0x24
 8007408:	683a      	ldr	r2, [r7, #0]
 800740a:	4611      	mov	r1, r2
 800740c:	4618      	mov	r0, r3
 800740e:	f000 fdc7 	bl	8007fa0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007412:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007414:	f000 f962 	bl	80076dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007418:	f000 fc0c 	bl	8007c34 <xTaskResumeAll>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	f47f af68 	bne.w	80072f4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007424:	4b18      	ldr	r3, [pc, #96]	; (8007488 <xQueueSemaphoreTake+0x214>)
 8007426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800742a:	601a      	str	r2, [r3, #0]
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	e75e      	b.n	80072f4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007436:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007438:	f000 f950 	bl	80076dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800743c:	f000 fbfa 	bl	8007c34 <xTaskResumeAll>
 8007440:	e758      	b.n	80072f4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007442:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007444:	f000 f94a 	bl	80076dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007448:	f000 fbf4 	bl	8007c34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800744c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800744e:	f000 f997 	bl	8007780 <prvIsQueueEmpty>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	f43f af4d 	beq.w	80072f4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800745a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00d      	beq.n	800747c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007460:	f001 faf8 	bl	8008a54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007464:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007466:	f000 f891 	bl	800758c <prvGetDisinheritPriorityAfterTimeout>
 800746a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800746c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007472:	4618      	mov	r0, r3
 8007474:	f001 f8a4 	bl	80085c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007478:	f001 fb1c 	bl	8008ab4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800747c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800747e:	4618      	mov	r0, r3
 8007480:	3738      	adds	r7, #56	; 0x38
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	e000ed04 	.word	0xe000ed04

0800748c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b08e      	sub	sp, #56	; 0x38
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800749c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10a      	bne.n	80074b8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	623b      	str	r3, [r7, #32]
}
 80074b4:	bf00      	nop
 80074b6:	e7fe      	b.n	80074b6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d103      	bne.n	80074c6 <xQueueReceiveFromISR+0x3a>
 80074be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <xQueueReceiveFromISR+0x3e>
 80074c6:	2301      	movs	r3, #1
 80074c8:	e000      	b.n	80074cc <xQueueReceiveFromISR+0x40>
 80074ca:	2300      	movs	r3, #0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10a      	bne.n	80074e6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	61fb      	str	r3, [r7, #28]
}
 80074e2:	bf00      	nop
 80074e4:	e7fe      	b.n	80074e4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074e6:	f001 fb97 	bl	8008c18 <vPortValidateInterruptPriority>
	__asm volatile
 80074ea:	f3ef 8211 	mrs	r2, BASEPRI
 80074ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	61ba      	str	r2, [r7, #24]
 8007500:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007502:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007504:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800750c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750e:	2b00      	cmp	r3, #0
 8007510:	d02f      	beq.n	8007572 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007514:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800751c:	68b9      	ldr	r1, [r7, #8]
 800751e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007520:	f000 f8b6 	bl	8007690 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007526:	1e5a      	subs	r2, r3, #1
 8007528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800752c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007534:	d112      	bne.n	800755c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d016      	beq.n	800756c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800753e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007540:	3310      	adds	r3, #16
 8007542:	4618      	mov	r0, r3
 8007544:	f000 fd50 	bl	8007fe8 <xTaskRemoveFromEventList>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00e      	beq.n	800756c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00b      	beq.n	800756c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	601a      	str	r2, [r3, #0]
 800755a:	e007      	b.n	800756c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800755c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007560:	3301      	adds	r3, #1
 8007562:	b2db      	uxtb	r3, r3
 8007564:	b25a      	sxtb	r2, r3
 8007566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800756c:	2301      	movs	r3, #1
 800756e:	637b      	str	r3, [r7, #52]	; 0x34
 8007570:	e001      	b.n	8007576 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007572:	2300      	movs	r3, #0
 8007574:	637b      	str	r3, [r7, #52]	; 0x34
 8007576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007578:	613b      	str	r3, [r7, #16]
	__asm volatile
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	f383 8811 	msr	BASEPRI, r3
}
 8007580:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007584:	4618      	mov	r0, r3
 8007586:	3738      	adds	r7, #56	; 0x38
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	2b00      	cmp	r3, #0
 800759a:	d006      	beq.n	80075aa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f1c3 0307 	rsb	r3, r3, #7
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	e001      	b.n	80075ae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80075aa:	2300      	movs	r3, #0
 80075ac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80075ae:	68fb      	ldr	r3, [r7, #12]
	}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80075c8:	2300      	movs	r3, #0
 80075ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10d      	bne.n	80075f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d14d      	bne.n	800767e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 ff64 	bl	80084b4 <xTaskPriorityDisinherit>
 80075ec:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	605a      	str	r2, [r3, #4]
 80075f4:	e043      	b.n	800767e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d119      	bne.n	8007630 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6898      	ldr	r0, [r3, #8]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007604:	461a      	mov	r2, r3
 8007606:	68b9      	ldr	r1, [r7, #8]
 8007608:	f001 fd44 	bl	8009094 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	689a      	ldr	r2, [r3, #8]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007614:	441a      	add	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	689a      	ldr	r2, [r3, #8]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	429a      	cmp	r2, r3
 8007624:	d32b      	bcc.n	800767e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	609a      	str	r2, [r3, #8]
 800762e:	e026      	b.n	800767e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	68d8      	ldr	r0, [r3, #12]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007638:	461a      	mov	r2, r3
 800763a:	68b9      	ldr	r1, [r7, #8]
 800763c:	f001 fd2a 	bl	8009094 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	68da      	ldr	r2, [r3, #12]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007648:	425b      	negs	r3, r3
 800764a:	441a      	add	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	68da      	ldr	r2, [r3, #12]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	429a      	cmp	r2, r3
 800765a:	d207      	bcs.n	800766c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007664:	425b      	negs	r3, r3
 8007666:	441a      	add	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b02      	cmp	r3, #2
 8007670:	d105      	bne.n	800767e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d002      	beq.n	800767e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	3b01      	subs	r3, #1
 800767c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	1c5a      	adds	r2, r3, #1
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007686:	697b      	ldr	r3, [r7, #20]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3718      	adds	r7, #24
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d018      	beq.n	80076d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68da      	ldr	r2, [r3, #12]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076aa:	441a      	add	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	68da      	ldr	r2, [r3, #12]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d303      	bcc.n	80076c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68d9      	ldr	r1, [r3, #12]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076cc:	461a      	mov	r2, r3
 80076ce:	6838      	ldr	r0, [r7, #0]
 80076d0:	f001 fce0 	bl	8009094 <memcpy>
	}
}
 80076d4:	bf00      	nop
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076e4:	f001 f9b6 	bl	8008a54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076f0:	e011      	b.n	8007716 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d012      	beq.n	8007720 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	3324      	adds	r3, #36	; 0x24
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 fc72 	bl	8007fe8 <xTaskRemoveFromEventList>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800770a:	f000 fd47 	bl	800819c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800770e:	7bfb      	ldrb	r3, [r7, #15]
 8007710:	3b01      	subs	r3, #1
 8007712:	b2db      	uxtb	r3, r3
 8007714:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800771a:	2b00      	cmp	r3, #0
 800771c:	dce9      	bgt.n	80076f2 <prvUnlockQueue+0x16>
 800771e:	e000      	b.n	8007722 <prvUnlockQueue+0x46>
					break;
 8007720:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	22ff      	movs	r2, #255	; 0xff
 8007726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800772a:	f001 f9c3 	bl	8008ab4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800772e:	f001 f991 	bl	8008a54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007738:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800773a:	e011      	b.n	8007760 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d012      	beq.n	800776a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	3310      	adds	r3, #16
 8007748:	4618      	mov	r0, r3
 800774a:	f000 fc4d 	bl	8007fe8 <xTaskRemoveFromEventList>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007754:	f000 fd22 	bl	800819c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007758:	7bbb      	ldrb	r3, [r7, #14]
 800775a:	3b01      	subs	r3, #1
 800775c:	b2db      	uxtb	r3, r3
 800775e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007764:	2b00      	cmp	r3, #0
 8007766:	dce9      	bgt.n	800773c <prvUnlockQueue+0x60>
 8007768:	e000      	b.n	800776c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800776a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	22ff      	movs	r2, #255	; 0xff
 8007770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007774:	f001 f99e 	bl	8008ab4 <vPortExitCritical>
}
 8007778:	bf00      	nop
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007788:	f001 f964 	bl	8008a54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007790:	2b00      	cmp	r3, #0
 8007792:	d102      	bne.n	800779a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007794:	2301      	movs	r3, #1
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	e001      	b.n	800779e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800779a:	2300      	movs	r3, #0
 800779c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800779e:	f001 f989 	bl	8008ab4 <vPortExitCritical>

	return xReturn;
 80077a2:	68fb      	ldr	r3, [r7, #12]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077b4:	f001 f94e 	bl	8008a54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d102      	bne.n	80077ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80077c4:	2301      	movs	r3, #1
 80077c6:	60fb      	str	r3, [r7, #12]
 80077c8:	e001      	b.n	80077ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077ce:	f001 f971 	bl	8008ab4 <vPortExitCritical>

	return xReturn;
 80077d2:	68fb      	ldr	r3, [r7, #12]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08e      	sub	sp, #56	; 0x38
 80077e0:	af04      	add	r7, sp, #16
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
 80077e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80077ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10a      	bne.n	8007806 <xTaskCreateStatic+0x2a>
	__asm volatile
 80077f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	623b      	str	r3, [r7, #32]
}
 8007802:	bf00      	nop
 8007804:	e7fe      	b.n	8007804 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10a      	bne.n	8007822 <xTaskCreateStatic+0x46>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	61fb      	str	r3, [r7, #28]
}
 800781e:	bf00      	nop
 8007820:	e7fe      	b.n	8007820 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007822:	2354      	movs	r3, #84	; 0x54
 8007824:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	2b54      	cmp	r3, #84	; 0x54
 800782a:	d00a      	beq.n	8007842 <xTaskCreateStatic+0x66>
	__asm volatile
 800782c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007830:	f383 8811 	msr	BASEPRI, r3
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	61bb      	str	r3, [r7, #24]
}
 800783e:	bf00      	nop
 8007840:	e7fe      	b.n	8007840 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007844:	2b00      	cmp	r3, #0
 8007846:	d01e      	beq.n	8007886 <xTaskCreateStatic+0xaa>
 8007848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800784a:	2b00      	cmp	r3, #0
 800784c:	d01b      	beq.n	8007886 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800784e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007850:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007856:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	2202      	movs	r2, #2
 800785c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007860:	2300      	movs	r3, #0
 8007862:	9303      	str	r3, [sp, #12]
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	9302      	str	r3, [sp, #8]
 8007868:	f107 0314 	add.w	r3, r7, #20
 800786c:	9301      	str	r3, [sp, #4]
 800786e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	68b9      	ldr	r1, [r7, #8]
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f000 f850 	bl	800791e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800787e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007880:	f000 f8cc 	bl	8007a1c <prvAddNewTaskToReadyList>
 8007884:	e001      	b.n	800788a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007886:	2300      	movs	r3, #0
 8007888:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800788a:	697b      	ldr	r3, [r7, #20]
	}
 800788c:	4618      	mov	r0, r3
 800788e:	3728      	adds	r7, #40	; 0x28
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007894:	b580      	push	{r7, lr}
 8007896:	b08c      	sub	sp, #48	; 0x30
 8007898:	af04      	add	r7, sp, #16
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	603b      	str	r3, [r7, #0]
 80078a0:	4613      	mov	r3, r2
 80078a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078a4:	88fb      	ldrh	r3, [r7, #6]
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4618      	mov	r0, r3
 80078aa:	f001 f9f5 	bl	8008c98 <pvPortMalloc>
 80078ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00e      	beq.n	80078d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80078b6:	2054      	movs	r0, #84	; 0x54
 80078b8:	f001 f9ee 	bl	8008c98 <pvPortMalloc>
 80078bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d003      	beq.n	80078cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	631a      	str	r2, [r3, #48]	; 0x30
 80078ca:	e005      	b.n	80078d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80078cc:	6978      	ldr	r0, [r7, #20]
 80078ce:	f001 faa7 	bl	8008e20 <vPortFree>
 80078d2:	e001      	b.n	80078d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80078d4:	2300      	movs	r3, #0
 80078d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d017      	beq.n	800790e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80078e6:	88fa      	ldrh	r2, [r7, #6]
 80078e8:	2300      	movs	r3, #0
 80078ea:	9303      	str	r3, [sp, #12]
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	9302      	str	r3, [sp, #8]
 80078f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f2:	9301      	str	r3, [sp, #4]
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	68b9      	ldr	r1, [r7, #8]
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 f80e 	bl	800791e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007902:	69f8      	ldr	r0, [r7, #28]
 8007904:	f000 f88a 	bl	8007a1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007908:	2301      	movs	r3, #1
 800790a:	61bb      	str	r3, [r7, #24]
 800790c:	e002      	b.n	8007914 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800790e:	f04f 33ff 	mov.w	r3, #4294967295
 8007912:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007914:	69bb      	ldr	r3, [r7, #24]
	}
 8007916:	4618      	mov	r0, r3
 8007918:	3720      	adds	r7, #32
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b088      	sub	sp, #32
 8007922:	af00      	add	r7, sp, #0
 8007924:	60f8      	str	r0, [r7, #12]
 8007926:	60b9      	str	r1, [r7, #8]
 8007928:	607a      	str	r2, [r7, #4]
 800792a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800792c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007936:	3b01      	subs	r3, #1
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4413      	add	r3, r2
 800793c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	f023 0307 	bic.w	r3, r3, #7
 8007944:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	f003 0307 	and.w	r3, r3, #7
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00a      	beq.n	8007966 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	617b      	str	r3, [r7, #20]
}
 8007962:	bf00      	nop
 8007964:	e7fe      	b.n	8007964 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007966:	2300      	movs	r3, #0
 8007968:	61fb      	str	r3, [r7, #28]
 800796a:	e012      	b.n	8007992 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	4413      	add	r3, r2
 8007972:	7819      	ldrb	r1, [r3, #0]
 8007974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	4413      	add	r3, r2
 800797a:	3334      	adds	r3, #52	; 0x34
 800797c:	460a      	mov	r2, r1
 800797e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	4413      	add	r3, r2
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d006      	beq.n	800799a <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	3301      	adds	r3, #1
 8007990:	61fb      	str	r3, [r7, #28]
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	2b0f      	cmp	r3, #15
 8007996:	d9e9      	bls.n	800796c <prvInitialiseNewTask+0x4e>
 8007998:	e000      	b.n	800799c <prvInitialiseNewTask+0x7e>
		{
			break;
 800799a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800799c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	2b06      	cmp	r3, #6
 80079a8:	d901      	bls.n	80079ae <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80079aa:	2306      	movs	r3, #6
 80079ac:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80079ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079b2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80079b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079b8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80079ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079bc:	2200      	movs	r2, #0
 80079be:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80079c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c2:	3304      	adds	r3, #4
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7ff f8ab 	bl	8006b20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80079ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079cc:	3318      	adds	r3, #24
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7ff f8a6 	bl	8006b20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80079d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079dc:	f1c3 0207 	rsb	r2, r3, #7
 80079e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80079e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079e8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	2200      	movs	r2, #0
 80079ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	68f9      	ldr	r1, [r7, #12]
 80079fc:	69b8      	ldr	r0, [r7, #24]
 80079fe:	f000 fef9 	bl	80087f4 <pxPortInitialiseStack>
 8007a02:	4602      	mov	r2, r0
 8007a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a06:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d002      	beq.n	8007a14 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a14:	bf00      	nop
 8007a16:	3720      	adds	r7, #32
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a24:	f001 f816 	bl	8008a54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a28:	4b2a      	ldr	r3, [pc, #168]	; (8007ad4 <prvAddNewTaskToReadyList+0xb8>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	4a29      	ldr	r2, [pc, #164]	; (8007ad4 <prvAddNewTaskToReadyList+0xb8>)
 8007a30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a32:	4b29      	ldr	r3, [pc, #164]	; (8007ad8 <prvAddNewTaskToReadyList+0xbc>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d109      	bne.n	8007a4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a3a:	4a27      	ldr	r2, [pc, #156]	; (8007ad8 <prvAddNewTaskToReadyList+0xbc>)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a40:	4b24      	ldr	r3, [pc, #144]	; (8007ad4 <prvAddNewTaskToReadyList+0xb8>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d110      	bne.n	8007a6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a48:	f000 fbcc 	bl	80081e4 <prvInitialiseTaskLists>
 8007a4c:	e00d      	b.n	8007a6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a4e:	4b23      	ldr	r3, [pc, #140]	; (8007adc <prvAddNewTaskToReadyList+0xc0>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d109      	bne.n	8007a6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a56:	4b20      	ldr	r3, [pc, #128]	; (8007ad8 <prvAddNewTaskToReadyList+0xbc>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d802      	bhi.n	8007a6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a64:	4a1c      	ldr	r2, [pc, #112]	; (8007ad8 <prvAddNewTaskToReadyList+0xbc>)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a6a:	4b1d      	ldr	r3, [pc, #116]	; (8007ae0 <prvAddNewTaskToReadyList+0xc4>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	4a1b      	ldr	r2, [pc, #108]	; (8007ae0 <prvAddNewTaskToReadyList+0xc4>)
 8007a72:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a78:	2201      	movs	r2, #1
 8007a7a:	409a      	lsls	r2, r3
 8007a7c:	4b19      	ldr	r3, [pc, #100]	; (8007ae4 <prvAddNewTaskToReadyList+0xc8>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	4a18      	ldr	r2, [pc, #96]	; (8007ae4 <prvAddNewTaskToReadyList+0xc8>)
 8007a84:	6013      	str	r3, [r2, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4413      	add	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4a15      	ldr	r2, [pc, #84]	; (8007ae8 <prvAddNewTaskToReadyList+0xcc>)
 8007a94:	441a      	add	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	3304      	adds	r3, #4
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	f7ff f84c 	bl	8006b3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007aa2:	f001 f807 	bl	8008ab4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007aa6:	4b0d      	ldr	r3, [pc, #52]	; (8007adc <prvAddNewTaskToReadyList+0xc0>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00e      	beq.n	8007acc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007aae:	4b0a      	ldr	r3, [pc, #40]	; (8007ad8 <prvAddNewTaskToReadyList+0xbc>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d207      	bcs.n	8007acc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007abc:	4b0b      	ldr	r3, [pc, #44]	; (8007aec <prvAddNewTaskToReadyList+0xd0>)
 8007abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007acc:	bf00      	nop
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	20000398 	.word	0x20000398
 8007ad8:	20000298 	.word	0x20000298
 8007adc:	200003a4 	.word	0x200003a4
 8007ae0:	200003b4 	.word	0x200003b4
 8007ae4:	200003a0 	.word	0x200003a0
 8007ae8:	2000029c 	.word	0x2000029c
 8007aec:	e000ed04 	.word	0xe000ed04

08007af0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007af8:	2300      	movs	r3, #0
 8007afa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d017      	beq.n	8007b32 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b02:	4b13      	ldr	r3, [pc, #76]	; (8007b50 <vTaskDelay+0x60>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00a      	beq.n	8007b20 <vTaskDelay+0x30>
	__asm volatile
 8007b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0e:	f383 8811 	msr	BASEPRI, r3
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	60bb      	str	r3, [r7, #8]
}
 8007b1c:	bf00      	nop
 8007b1e:	e7fe      	b.n	8007b1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007b20:	f000 f87a 	bl	8007c18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b24:	2100      	movs	r1, #0
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fdfe 	bl	8008728 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b2c:	f000 f882 	bl	8007c34 <xTaskResumeAll>
 8007b30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d107      	bne.n	8007b48 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007b38:	4b06      	ldr	r3, [pc, #24]	; (8007b54 <vTaskDelay+0x64>)
 8007b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b3e:	601a      	str	r2, [r3, #0]
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b48:	bf00      	nop
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	200003c0 	.word	0x200003c0
 8007b54:	e000ed04 	.word	0xe000ed04

08007b58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b08a      	sub	sp, #40	; 0x28
 8007b5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b62:	2300      	movs	r3, #0
 8007b64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b66:	463a      	mov	r2, r7
 8007b68:	1d39      	adds	r1, r7, #4
 8007b6a:	f107 0308 	add.w	r3, r7, #8
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7f8 ff4c 	bl	8000a0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	9202      	str	r2, [sp, #8]
 8007b7c:	9301      	str	r3, [sp, #4]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	2300      	movs	r3, #0
 8007b84:	460a      	mov	r2, r1
 8007b86:	491e      	ldr	r1, [pc, #120]	; (8007c00 <vTaskStartScheduler+0xa8>)
 8007b88:	481e      	ldr	r0, [pc, #120]	; (8007c04 <vTaskStartScheduler+0xac>)
 8007b8a:	f7ff fe27 	bl	80077dc <xTaskCreateStatic>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	4a1d      	ldr	r2, [pc, #116]	; (8007c08 <vTaskStartScheduler+0xb0>)
 8007b92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b94:	4b1c      	ldr	r3, [pc, #112]	; (8007c08 <vTaskStartScheduler+0xb0>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d002      	beq.n	8007ba2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	617b      	str	r3, [r7, #20]
 8007ba0:	e001      	b.n	8007ba6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d116      	bne.n	8007bda <vTaskStartScheduler+0x82>
	__asm volatile
 8007bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	613b      	str	r3, [r7, #16]
}
 8007bbe:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007bc0:	4b12      	ldr	r3, [pc, #72]	; (8007c0c <vTaskStartScheduler+0xb4>)
 8007bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007bc8:	4b11      	ldr	r3, [pc, #68]	; (8007c10 <vTaskStartScheduler+0xb8>)
 8007bca:	2201      	movs	r2, #1
 8007bcc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007bce:	4b11      	ldr	r3, [pc, #68]	; (8007c14 <vTaskStartScheduler+0xbc>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007bd4:	f000 fe9c 	bl	8008910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007bd8:	e00e      	b.n	8007bf8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be0:	d10a      	bne.n	8007bf8 <vTaskStartScheduler+0xa0>
	__asm volatile
 8007be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	60fb      	str	r3, [r7, #12]
}
 8007bf4:	bf00      	nop
 8007bf6:	e7fe      	b.n	8007bf6 <vTaskStartScheduler+0x9e>
}
 8007bf8:	bf00      	nop
 8007bfa:	3718      	adds	r7, #24
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	080092c4 	.word	0x080092c4
 8007c04:	080081b5 	.word	0x080081b5
 8007c08:	200003bc 	.word	0x200003bc
 8007c0c:	200003b8 	.word	0x200003b8
 8007c10:	200003a4 	.word	0x200003a4
 8007c14:	2000039c 	.word	0x2000039c

08007c18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c18:	b480      	push	{r7}
 8007c1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007c1c:	4b04      	ldr	r3, [pc, #16]	; (8007c30 <vTaskSuspendAll+0x18>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	3301      	adds	r3, #1
 8007c22:	4a03      	ldr	r2, [pc, #12]	; (8007c30 <vTaskSuspendAll+0x18>)
 8007c24:	6013      	str	r3, [r2, #0]
}
 8007c26:	bf00      	nop
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	200003c0 	.word	0x200003c0

08007c34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c42:	4b41      	ldr	r3, [pc, #260]	; (8007d48 <xTaskResumeAll+0x114>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10a      	bne.n	8007c60 <xTaskResumeAll+0x2c>
	__asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	603b      	str	r3, [r7, #0]
}
 8007c5c:	bf00      	nop
 8007c5e:	e7fe      	b.n	8007c5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c60:	f000 fef8 	bl	8008a54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c64:	4b38      	ldr	r3, [pc, #224]	; (8007d48 <xTaskResumeAll+0x114>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	4a37      	ldr	r2, [pc, #220]	; (8007d48 <xTaskResumeAll+0x114>)
 8007c6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c6e:	4b36      	ldr	r3, [pc, #216]	; (8007d48 <xTaskResumeAll+0x114>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d161      	bne.n	8007d3a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c76:	4b35      	ldr	r3, [pc, #212]	; (8007d4c <xTaskResumeAll+0x118>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d05d      	beq.n	8007d3a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c7e:	e02e      	b.n	8007cde <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007c80:	4b33      	ldr	r3, [pc, #204]	; (8007d50 <xTaskResumeAll+0x11c>)
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	3318      	adds	r3, #24
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fe ffb1 	bl	8006bf4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	3304      	adds	r3, #4
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fe ffac 	bl	8006bf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	409a      	lsls	r2, r3
 8007ca4:	4b2b      	ldr	r3, [pc, #172]	; (8007d54 <xTaskResumeAll+0x120>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	4a2a      	ldr	r2, [pc, #168]	; (8007d54 <xTaskResumeAll+0x120>)
 8007cac:	6013      	str	r3, [r2, #0]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4a27      	ldr	r2, [pc, #156]	; (8007d58 <xTaskResumeAll+0x124>)
 8007cbc:	441a      	add	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	f7fe ff38 	bl	8006b3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cce:	4b23      	ldr	r3, [pc, #140]	; (8007d5c <xTaskResumeAll+0x128>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d302      	bcc.n	8007cde <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007cd8:	4b21      	ldr	r3, [pc, #132]	; (8007d60 <xTaskResumeAll+0x12c>)
 8007cda:	2201      	movs	r2, #1
 8007cdc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cde:	4b1c      	ldr	r3, [pc, #112]	; (8007d50 <xTaskResumeAll+0x11c>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1cc      	bne.n	8007c80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007cec:	f000 fb18 	bl	8008320 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007cf0:	4b1c      	ldr	r3, [pc, #112]	; (8007d64 <xTaskResumeAll+0x130>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d010      	beq.n	8007d1e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007cfc:	f000 f836 	bl	8007d6c <xTaskIncrementTick>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d002      	beq.n	8007d0c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007d06:	4b16      	ldr	r3, [pc, #88]	; (8007d60 <xTaskResumeAll+0x12c>)
 8007d08:	2201      	movs	r2, #1
 8007d0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1f1      	bne.n	8007cfc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007d18:	4b12      	ldr	r3, [pc, #72]	; (8007d64 <xTaskResumeAll+0x130>)
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d1e:	4b10      	ldr	r3, [pc, #64]	; (8007d60 <xTaskResumeAll+0x12c>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d009      	beq.n	8007d3a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d26:	2301      	movs	r3, #1
 8007d28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d2a:	4b0f      	ldr	r3, [pc, #60]	; (8007d68 <xTaskResumeAll+0x134>)
 8007d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d3a:	f000 febb 	bl	8008ab4 <vPortExitCritical>

	return xAlreadyYielded;
 8007d3e:	68bb      	ldr	r3, [r7, #8]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	200003c0 	.word	0x200003c0
 8007d4c:	20000398 	.word	0x20000398
 8007d50:	20000358 	.word	0x20000358
 8007d54:	200003a0 	.word	0x200003a0
 8007d58:	2000029c 	.word	0x2000029c
 8007d5c:	20000298 	.word	0x20000298
 8007d60:	200003ac 	.word	0x200003ac
 8007d64:	200003a8 	.word	0x200003a8
 8007d68:	e000ed04 	.word	0xe000ed04

08007d6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d72:	2300      	movs	r3, #0
 8007d74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d76:	4b51      	ldr	r3, [pc, #324]	; (8007ebc <xTaskIncrementTick+0x150>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f040 808d 	bne.w	8007e9a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d80:	4b4f      	ldr	r3, [pc, #316]	; (8007ec0 <xTaskIncrementTick+0x154>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3301      	adds	r3, #1
 8007d86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d88:	4a4d      	ldr	r2, [pc, #308]	; (8007ec0 <xTaskIncrementTick+0x154>)
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d120      	bne.n	8007dd6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d94:	4b4b      	ldr	r3, [pc, #300]	; (8007ec4 <xTaskIncrementTick+0x158>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00a      	beq.n	8007db4 <xTaskIncrementTick+0x48>
	__asm volatile
 8007d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	603b      	str	r3, [r7, #0]
}
 8007db0:	bf00      	nop
 8007db2:	e7fe      	b.n	8007db2 <xTaskIncrementTick+0x46>
 8007db4:	4b43      	ldr	r3, [pc, #268]	; (8007ec4 <xTaskIncrementTick+0x158>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	60fb      	str	r3, [r7, #12]
 8007dba:	4b43      	ldr	r3, [pc, #268]	; (8007ec8 <xTaskIncrementTick+0x15c>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a41      	ldr	r2, [pc, #260]	; (8007ec4 <xTaskIncrementTick+0x158>)
 8007dc0:	6013      	str	r3, [r2, #0]
 8007dc2:	4a41      	ldr	r2, [pc, #260]	; (8007ec8 <xTaskIncrementTick+0x15c>)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6013      	str	r3, [r2, #0]
 8007dc8:	4b40      	ldr	r3, [pc, #256]	; (8007ecc <xTaskIncrementTick+0x160>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	4a3f      	ldr	r2, [pc, #252]	; (8007ecc <xTaskIncrementTick+0x160>)
 8007dd0:	6013      	str	r3, [r2, #0]
 8007dd2:	f000 faa5 	bl	8008320 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007dd6:	4b3e      	ldr	r3, [pc, #248]	; (8007ed0 <xTaskIncrementTick+0x164>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d34d      	bcc.n	8007e7c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007de0:	4b38      	ldr	r3, [pc, #224]	; (8007ec4 <xTaskIncrementTick+0x158>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d101      	bne.n	8007dee <xTaskIncrementTick+0x82>
 8007dea:	2301      	movs	r3, #1
 8007dec:	e000      	b.n	8007df0 <xTaskIncrementTick+0x84>
 8007dee:	2300      	movs	r3, #0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d004      	beq.n	8007dfe <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007df4:	4b36      	ldr	r3, [pc, #216]	; (8007ed0 <xTaskIncrementTick+0x164>)
 8007df6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dfa:	601a      	str	r2, [r3, #0]
					break;
 8007dfc:	e03e      	b.n	8007e7c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007dfe:	4b31      	ldr	r3, [pc, #196]	; (8007ec4 <xTaskIncrementTick+0x158>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d203      	bcs.n	8007e1e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e16:	4a2e      	ldr	r2, [pc, #184]	; (8007ed0 <xTaskIncrementTick+0x164>)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6013      	str	r3, [r2, #0]
						break;
 8007e1c:	e02e      	b.n	8007e7c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	3304      	adds	r3, #4
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7fe fee6 	bl	8006bf4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d004      	beq.n	8007e3a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	3318      	adds	r3, #24
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fe fedd 	bl	8006bf4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3e:	2201      	movs	r2, #1
 8007e40:	409a      	lsls	r2, r3
 8007e42:	4b24      	ldr	r3, [pc, #144]	; (8007ed4 <xTaskIncrementTick+0x168>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	4a22      	ldr	r2, [pc, #136]	; (8007ed4 <xTaskIncrementTick+0x168>)
 8007e4a:	6013      	str	r3, [r2, #0]
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e50:	4613      	mov	r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4413      	add	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4a1f      	ldr	r2, [pc, #124]	; (8007ed8 <xTaskIncrementTick+0x16c>)
 8007e5a:	441a      	add	r2, r3
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	3304      	adds	r3, #4
 8007e60:	4619      	mov	r1, r3
 8007e62:	4610      	mov	r0, r2
 8007e64:	f7fe fe69 	bl	8006b3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e6c:	4b1b      	ldr	r3, [pc, #108]	; (8007edc <xTaskIncrementTick+0x170>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d3b4      	bcc.n	8007de0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007e76:	2301      	movs	r3, #1
 8007e78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e7a:	e7b1      	b.n	8007de0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e7c:	4b17      	ldr	r3, [pc, #92]	; (8007edc <xTaskIncrementTick+0x170>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e82:	4915      	ldr	r1, [pc, #84]	; (8007ed8 <xTaskIncrementTick+0x16c>)
 8007e84:	4613      	mov	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4413      	add	r3, r2
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	440b      	add	r3, r1
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d907      	bls.n	8007ea4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007e94:	2301      	movs	r3, #1
 8007e96:	617b      	str	r3, [r7, #20]
 8007e98:	e004      	b.n	8007ea4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007e9a:	4b11      	ldr	r3, [pc, #68]	; (8007ee0 <xTaskIncrementTick+0x174>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	4a0f      	ldr	r2, [pc, #60]	; (8007ee0 <xTaskIncrementTick+0x174>)
 8007ea2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007ea4:	4b0f      	ldr	r3, [pc, #60]	; (8007ee4 <xTaskIncrementTick+0x178>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d001      	beq.n	8007eb0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007eac:	2301      	movs	r3, #1
 8007eae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007eb0:	697b      	ldr	r3, [r7, #20]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3718      	adds	r7, #24
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	200003c0 	.word	0x200003c0
 8007ec0:	2000039c 	.word	0x2000039c
 8007ec4:	20000350 	.word	0x20000350
 8007ec8:	20000354 	.word	0x20000354
 8007ecc:	200003b0 	.word	0x200003b0
 8007ed0:	200003b8 	.word	0x200003b8
 8007ed4:	200003a0 	.word	0x200003a0
 8007ed8:	2000029c 	.word	0x2000029c
 8007edc:	20000298 	.word	0x20000298
 8007ee0:	200003a8 	.word	0x200003a8
 8007ee4:	200003ac 	.word	0x200003ac

08007ee8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b087      	sub	sp, #28
 8007eec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007eee:	4b27      	ldr	r3, [pc, #156]	; (8007f8c <vTaskSwitchContext+0xa4>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007ef6:	4b26      	ldr	r3, [pc, #152]	; (8007f90 <vTaskSwitchContext+0xa8>)
 8007ef8:	2201      	movs	r2, #1
 8007efa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007efc:	e03f      	b.n	8007f7e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007efe:	4b24      	ldr	r3, [pc, #144]	; (8007f90 <vTaskSwitchContext+0xa8>)
 8007f00:	2200      	movs	r2, #0
 8007f02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007f04:	4b23      	ldr	r3, [pc, #140]	; (8007f94 <vTaskSwitchContext+0xac>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	fab3 f383 	clz	r3, r3
 8007f10:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007f12:	7afb      	ldrb	r3, [r7, #11]
 8007f14:	f1c3 031f 	rsb	r3, r3, #31
 8007f18:	617b      	str	r3, [r7, #20]
 8007f1a:	491f      	ldr	r1, [pc, #124]	; (8007f98 <vTaskSwitchContext+0xb0>)
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	4613      	mov	r3, r2
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	4413      	add	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	440b      	add	r3, r1
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10a      	bne.n	8007f44 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	607b      	str	r3, [r7, #4]
}
 8007f40:	bf00      	nop
 8007f42:	e7fe      	b.n	8007f42 <vTaskSwitchContext+0x5a>
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	4613      	mov	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4a12      	ldr	r2, [pc, #72]	; (8007f98 <vTaskSwitchContext+0xb0>)
 8007f50:	4413      	add	r3, r2
 8007f52:	613b      	str	r3, [r7, #16]
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	685a      	ldr	r2, [r3, #4]
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	605a      	str	r2, [r3, #4]
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	685a      	ldr	r2, [r3, #4]
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	3308      	adds	r3, #8
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d104      	bne.n	8007f74 <vTaskSwitchContext+0x8c>
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	605a      	str	r2, [r3, #4]
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	4a08      	ldr	r2, [pc, #32]	; (8007f9c <vTaskSwitchContext+0xb4>)
 8007f7c:	6013      	str	r3, [r2, #0]
}
 8007f7e:	bf00      	nop
 8007f80:	371c      	adds	r7, #28
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	200003c0 	.word	0x200003c0
 8007f90:	200003ac 	.word	0x200003ac
 8007f94:	200003a0 	.word	0x200003a0
 8007f98:	2000029c 	.word	0x2000029c
 8007f9c:	20000298 	.word	0x20000298

08007fa0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10a      	bne.n	8007fc6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	60fb      	str	r3, [r7, #12]
}
 8007fc2:	bf00      	nop
 8007fc4:	e7fe      	b.n	8007fc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007fc6:	4b07      	ldr	r3, [pc, #28]	; (8007fe4 <vTaskPlaceOnEventList+0x44>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	3318      	adds	r3, #24
 8007fcc:	4619      	mov	r1, r3
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f7fe fdd7 	bl	8006b82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007fd4:	2101      	movs	r1, #1
 8007fd6:	6838      	ldr	r0, [r7, #0]
 8007fd8:	f000 fba6 	bl	8008728 <prvAddCurrentTaskToDelayedList>
}
 8007fdc:	bf00      	nop
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	20000298 	.word	0x20000298

08007fe8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10a      	bne.n	8008014 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	60fb      	str	r3, [r7, #12]
}
 8008010:	bf00      	nop
 8008012:	e7fe      	b.n	8008012 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	3318      	adds	r3, #24
 8008018:	4618      	mov	r0, r3
 800801a:	f7fe fdeb 	bl	8006bf4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800801e:	4b1d      	ldr	r3, [pc, #116]	; (8008094 <xTaskRemoveFromEventList+0xac>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d11c      	bne.n	8008060 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	3304      	adds	r3, #4
 800802a:	4618      	mov	r0, r3
 800802c:	f7fe fde2 	bl	8006bf4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008034:	2201      	movs	r2, #1
 8008036:	409a      	lsls	r2, r3
 8008038:	4b17      	ldr	r3, [pc, #92]	; (8008098 <xTaskRemoveFromEventList+0xb0>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4313      	orrs	r3, r2
 800803e:	4a16      	ldr	r2, [pc, #88]	; (8008098 <xTaskRemoveFromEventList+0xb0>)
 8008040:	6013      	str	r3, [r2, #0]
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008046:	4613      	mov	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4413      	add	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4a13      	ldr	r2, [pc, #76]	; (800809c <xTaskRemoveFromEventList+0xb4>)
 8008050:	441a      	add	r2, r3
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	3304      	adds	r3, #4
 8008056:	4619      	mov	r1, r3
 8008058:	4610      	mov	r0, r2
 800805a:	f7fe fd6e 	bl	8006b3a <vListInsertEnd>
 800805e:	e005      	b.n	800806c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	3318      	adds	r3, #24
 8008064:	4619      	mov	r1, r3
 8008066:	480e      	ldr	r0, [pc, #56]	; (80080a0 <xTaskRemoveFromEventList+0xb8>)
 8008068:	f7fe fd67 	bl	8006b3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008070:	4b0c      	ldr	r3, [pc, #48]	; (80080a4 <xTaskRemoveFromEventList+0xbc>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008076:	429a      	cmp	r2, r3
 8008078:	d905      	bls.n	8008086 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800807a:	2301      	movs	r3, #1
 800807c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800807e:	4b0a      	ldr	r3, [pc, #40]	; (80080a8 <xTaskRemoveFromEventList+0xc0>)
 8008080:	2201      	movs	r2, #1
 8008082:	601a      	str	r2, [r3, #0]
 8008084:	e001      	b.n	800808a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008086:	2300      	movs	r3, #0
 8008088:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800808a:	697b      	ldr	r3, [r7, #20]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3718      	adds	r7, #24
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	200003c0 	.word	0x200003c0
 8008098:	200003a0 	.word	0x200003a0
 800809c:	2000029c 	.word	0x2000029c
 80080a0:	20000358 	.word	0x20000358
 80080a4:	20000298 	.word	0x20000298
 80080a8:	200003ac 	.word	0x200003ac

080080ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80080b4:	4b06      	ldr	r3, [pc, #24]	; (80080d0 <vTaskInternalSetTimeOutState+0x24>)
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80080bc:	4b05      	ldr	r3, [pc, #20]	; (80080d4 <vTaskInternalSetTimeOutState+0x28>)
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	605a      	str	r2, [r3, #4]
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	200003b0 	.word	0x200003b0
 80080d4:	2000039c 	.word	0x2000039c

080080d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b088      	sub	sp, #32
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10a      	bne.n	80080fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80080e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ec:	f383 8811 	msr	BASEPRI, r3
 80080f0:	f3bf 8f6f 	isb	sy
 80080f4:	f3bf 8f4f 	dsb	sy
 80080f8:	613b      	str	r3, [r7, #16]
}
 80080fa:	bf00      	nop
 80080fc:	e7fe      	b.n	80080fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10a      	bne.n	800811a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	60fb      	str	r3, [r7, #12]
}
 8008116:	bf00      	nop
 8008118:	e7fe      	b.n	8008118 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800811a:	f000 fc9b 	bl	8008a54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800811e:	4b1d      	ldr	r3, [pc, #116]	; (8008194 <xTaskCheckForTimeOut+0xbc>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008136:	d102      	bne.n	800813e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008138:	2300      	movs	r3, #0
 800813a:	61fb      	str	r3, [r7, #28]
 800813c:	e023      	b.n	8008186 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	4b15      	ldr	r3, [pc, #84]	; (8008198 <xTaskCheckForTimeOut+0xc0>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	429a      	cmp	r2, r3
 8008148:	d007      	beq.n	800815a <xTaskCheckForTimeOut+0x82>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	429a      	cmp	r2, r3
 8008152:	d302      	bcc.n	800815a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008154:	2301      	movs	r3, #1
 8008156:	61fb      	str	r3, [r7, #28]
 8008158:	e015      	b.n	8008186 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	429a      	cmp	r2, r3
 8008162:	d20b      	bcs.n	800817c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	1ad2      	subs	r2, r2, r3
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7ff ff9b 	bl	80080ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008176:	2300      	movs	r3, #0
 8008178:	61fb      	str	r3, [r7, #28]
 800817a:	e004      	b.n	8008186 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	2200      	movs	r2, #0
 8008180:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008182:	2301      	movs	r3, #1
 8008184:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008186:	f000 fc95 	bl	8008ab4 <vPortExitCritical>

	return xReturn;
 800818a:	69fb      	ldr	r3, [r7, #28]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3720      	adds	r7, #32
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	2000039c 	.word	0x2000039c
 8008198:	200003b0 	.word	0x200003b0

0800819c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800819c:	b480      	push	{r7}
 800819e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80081a0:	4b03      	ldr	r3, [pc, #12]	; (80081b0 <vTaskMissedYield+0x14>)
 80081a2:	2201      	movs	r2, #1
 80081a4:	601a      	str	r2, [r3, #0]
}
 80081a6:	bf00      	nop
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr
 80081b0:	200003ac 	.word	0x200003ac

080081b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80081bc:	f000 f852 	bl	8008264 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80081c0:	4b06      	ldr	r3, [pc, #24]	; (80081dc <prvIdleTask+0x28>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d9f9      	bls.n	80081bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80081c8:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <prvIdleTask+0x2c>)
 80081ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80081d8:	e7f0      	b.n	80081bc <prvIdleTask+0x8>
 80081da:	bf00      	nop
 80081dc:	2000029c 	.word	0x2000029c
 80081e0:	e000ed04 	.word	0xe000ed04

080081e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081ea:	2300      	movs	r3, #0
 80081ec:	607b      	str	r3, [r7, #4]
 80081ee:	e00c      	b.n	800820a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	4613      	mov	r3, r2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4a12      	ldr	r2, [pc, #72]	; (8008244 <prvInitialiseTaskLists+0x60>)
 80081fc:	4413      	add	r3, r2
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fe fc6e 	bl	8006ae0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	3301      	adds	r3, #1
 8008208:	607b      	str	r3, [r7, #4]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b06      	cmp	r3, #6
 800820e:	d9ef      	bls.n	80081f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008210:	480d      	ldr	r0, [pc, #52]	; (8008248 <prvInitialiseTaskLists+0x64>)
 8008212:	f7fe fc65 	bl	8006ae0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008216:	480d      	ldr	r0, [pc, #52]	; (800824c <prvInitialiseTaskLists+0x68>)
 8008218:	f7fe fc62 	bl	8006ae0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800821c:	480c      	ldr	r0, [pc, #48]	; (8008250 <prvInitialiseTaskLists+0x6c>)
 800821e:	f7fe fc5f 	bl	8006ae0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008222:	480c      	ldr	r0, [pc, #48]	; (8008254 <prvInitialiseTaskLists+0x70>)
 8008224:	f7fe fc5c 	bl	8006ae0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008228:	480b      	ldr	r0, [pc, #44]	; (8008258 <prvInitialiseTaskLists+0x74>)
 800822a:	f7fe fc59 	bl	8006ae0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800822e:	4b0b      	ldr	r3, [pc, #44]	; (800825c <prvInitialiseTaskLists+0x78>)
 8008230:	4a05      	ldr	r2, [pc, #20]	; (8008248 <prvInitialiseTaskLists+0x64>)
 8008232:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008234:	4b0a      	ldr	r3, [pc, #40]	; (8008260 <prvInitialiseTaskLists+0x7c>)
 8008236:	4a05      	ldr	r2, [pc, #20]	; (800824c <prvInitialiseTaskLists+0x68>)
 8008238:	601a      	str	r2, [r3, #0]
}
 800823a:	bf00      	nop
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	2000029c 	.word	0x2000029c
 8008248:	20000328 	.word	0x20000328
 800824c:	2000033c 	.word	0x2000033c
 8008250:	20000358 	.word	0x20000358
 8008254:	2000036c 	.word	0x2000036c
 8008258:	20000384 	.word	0x20000384
 800825c:	20000350 	.word	0x20000350
 8008260:	20000354 	.word	0x20000354

08008264 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800826a:	e019      	b.n	80082a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800826c:	f000 fbf2 	bl	8008a54 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008270:	4b10      	ldr	r3, [pc, #64]	; (80082b4 <prvCheckTasksWaitingTermination+0x50>)
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	3304      	adds	r3, #4
 800827c:	4618      	mov	r0, r3
 800827e:	f7fe fcb9 	bl	8006bf4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008282:	4b0d      	ldr	r3, [pc, #52]	; (80082b8 <prvCheckTasksWaitingTermination+0x54>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3b01      	subs	r3, #1
 8008288:	4a0b      	ldr	r2, [pc, #44]	; (80082b8 <prvCheckTasksWaitingTermination+0x54>)
 800828a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800828c:	4b0b      	ldr	r3, [pc, #44]	; (80082bc <prvCheckTasksWaitingTermination+0x58>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3b01      	subs	r3, #1
 8008292:	4a0a      	ldr	r2, [pc, #40]	; (80082bc <prvCheckTasksWaitingTermination+0x58>)
 8008294:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008296:	f000 fc0d 	bl	8008ab4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f810 	bl	80082c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082a0:	4b06      	ldr	r3, [pc, #24]	; (80082bc <prvCheckTasksWaitingTermination+0x58>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1e1      	bne.n	800826c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80082a8:	bf00      	nop
 80082aa:	bf00      	nop
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	2000036c 	.word	0x2000036c
 80082b8:	20000398 	.word	0x20000398
 80082bc:	20000380 	.word	0x20000380

080082c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d108      	bne.n	80082e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 fda2 	bl	8008e20 <vPortFree>
				vPortFree( pxTCB );
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fd9f 	bl	8008e20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80082e2:	e018      	b.n	8008316 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d103      	bne.n	80082f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fd96 	bl	8008e20 <vPortFree>
	}
 80082f4:	e00f      	b.n	8008316 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d00a      	beq.n	8008316 <prvDeleteTCB+0x56>
	__asm volatile
 8008300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008304:	f383 8811 	msr	BASEPRI, r3
 8008308:	f3bf 8f6f 	isb	sy
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	60fb      	str	r3, [r7, #12]
}
 8008312:	bf00      	nop
 8008314:	e7fe      	b.n	8008314 <prvDeleteTCB+0x54>
	}
 8008316:	bf00      	nop
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
	...

08008320 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008326:	4b0f      	ldr	r3, [pc, #60]	; (8008364 <prvResetNextTaskUnblockTime+0x44>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <prvResetNextTaskUnblockTime+0x14>
 8008330:	2301      	movs	r3, #1
 8008332:	e000      	b.n	8008336 <prvResetNextTaskUnblockTime+0x16>
 8008334:	2300      	movs	r3, #0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d004      	beq.n	8008344 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800833a:	4b0b      	ldr	r3, [pc, #44]	; (8008368 <prvResetNextTaskUnblockTime+0x48>)
 800833c:	f04f 32ff 	mov.w	r2, #4294967295
 8008340:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008342:	e008      	b.n	8008356 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008344:	4b07      	ldr	r3, [pc, #28]	; (8008364 <prvResetNextTaskUnblockTime+0x44>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	4a05      	ldr	r2, [pc, #20]	; (8008368 <prvResetNextTaskUnblockTime+0x48>)
 8008354:	6013      	str	r3, [r2, #0]
}
 8008356:	bf00      	nop
 8008358:	370c      	adds	r7, #12
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	20000350 	.word	0x20000350
 8008368:	200003b8 	.word	0x200003b8

0800836c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008372:	4b0b      	ldr	r3, [pc, #44]	; (80083a0 <xTaskGetSchedulerState+0x34>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d102      	bne.n	8008380 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800837a:	2301      	movs	r3, #1
 800837c:	607b      	str	r3, [r7, #4]
 800837e:	e008      	b.n	8008392 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008380:	4b08      	ldr	r3, [pc, #32]	; (80083a4 <xTaskGetSchedulerState+0x38>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d102      	bne.n	800838e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008388:	2302      	movs	r3, #2
 800838a:	607b      	str	r3, [r7, #4]
 800838c:	e001      	b.n	8008392 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800838e:	2300      	movs	r3, #0
 8008390:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008392:	687b      	ldr	r3, [r7, #4]
	}
 8008394:	4618      	mov	r0, r3
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr
 80083a0:	200003a4 	.word	0x200003a4
 80083a4:	200003c0 	.word	0x200003c0

080083a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80083b4:	2300      	movs	r3, #0
 80083b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d06e      	beq.n	800849c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083c2:	4b39      	ldr	r3, [pc, #228]	; (80084a8 <xTaskPriorityInherit+0x100>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d25e      	bcs.n	800848a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	db06      	blt.n	80083e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083d4:	4b34      	ldr	r3, [pc, #208]	; (80084a8 <xTaskPriorityInherit+0x100>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083da:	f1c3 0207 	rsb	r2, r3, #7
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	6959      	ldr	r1, [r3, #20]
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ea:	4613      	mov	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	4a2e      	ldr	r2, [pc, #184]	; (80084ac <xTaskPriorityInherit+0x104>)
 80083f4:	4413      	add	r3, r2
 80083f6:	4299      	cmp	r1, r3
 80083f8:	d101      	bne.n	80083fe <xTaskPriorityInherit+0x56>
 80083fa:	2301      	movs	r3, #1
 80083fc:	e000      	b.n	8008400 <xTaskPriorityInherit+0x58>
 80083fe:	2300      	movs	r3, #0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d03a      	beq.n	800847a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	3304      	adds	r3, #4
 8008408:	4618      	mov	r0, r3
 800840a:	f7fe fbf3 	bl	8006bf4 <uxListRemove>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d115      	bne.n	8008440 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008418:	4924      	ldr	r1, [pc, #144]	; (80084ac <xTaskPriorityInherit+0x104>)
 800841a:	4613      	mov	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4413      	add	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	440b      	add	r3, r1
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10a      	bne.n	8008440 <xTaskPriorityInherit+0x98>
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842e:	2201      	movs	r2, #1
 8008430:	fa02 f303 	lsl.w	r3, r2, r3
 8008434:	43da      	mvns	r2, r3
 8008436:	4b1e      	ldr	r3, [pc, #120]	; (80084b0 <xTaskPriorityInherit+0x108>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4013      	ands	r3, r2
 800843c:	4a1c      	ldr	r2, [pc, #112]	; (80084b0 <xTaskPriorityInherit+0x108>)
 800843e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008440:	4b19      	ldr	r3, [pc, #100]	; (80084a8 <xTaskPriorityInherit+0x100>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844e:	2201      	movs	r2, #1
 8008450:	409a      	lsls	r2, r3
 8008452:	4b17      	ldr	r3, [pc, #92]	; (80084b0 <xTaskPriorityInherit+0x108>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4313      	orrs	r3, r2
 8008458:	4a15      	ldr	r2, [pc, #84]	; (80084b0 <xTaskPriorityInherit+0x108>)
 800845a:	6013      	str	r3, [r2, #0]
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008460:	4613      	mov	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	4413      	add	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4a10      	ldr	r2, [pc, #64]	; (80084ac <xTaskPriorityInherit+0x104>)
 800846a:	441a      	add	r2, r3
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	3304      	adds	r3, #4
 8008470:	4619      	mov	r1, r3
 8008472:	4610      	mov	r0, r2
 8008474:	f7fe fb61 	bl	8006b3a <vListInsertEnd>
 8008478:	e004      	b.n	8008484 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800847a:	4b0b      	ldr	r3, [pc, #44]	; (80084a8 <xTaskPriorityInherit+0x100>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008484:	2301      	movs	r3, #1
 8008486:	60fb      	str	r3, [r7, #12]
 8008488:	e008      	b.n	800849c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800848e:	4b06      	ldr	r3, [pc, #24]	; (80084a8 <xTaskPriorityInherit+0x100>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008494:	429a      	cmp	r2, r3
 8008496:	d201      	bcs.n	800849c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008498:	2301      	movs	r3, #1
 800849a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800849c:	68fb      	ldr	r3, [r7, #12]
	}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20000298 	.word	0x20000298
 80084ac:	2000029c 	.word	0x2000029c
 80084b0:	200003a0 	.word	0x200003a0

080084b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80084c0:	2300      	movs	r3, #0
 80084c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d06e      	beq.n	80085a8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80084ca:	4b3a      	ldr	r3, [pc, #232]	; (80085b4 <xTaskPriorityDisinherit+0x100>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	693a      	ldr	r2, [r7, #16]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d00a      	beq.n	80084ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80084d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d8:	f383 8811 	msr	BASEPRI, r3
 80084dc:	f3bf 8f6f 	isb	sy
 80084e0:	f3bf 8f4f 	dsb	sy
 80084e4:	60fb      	str	r3, [r7, #12]
}
 80084e6:	bf00      	nop
 80084e8:	e7fe      	b.n	80084e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10a      	bne.n	8008508 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80084f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	60bb      	str	r3, [r7, #8]
}
 8008504:	bf00      	nop
 8008506:	e7fe      	b.n	8008506 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800850c:	1e5a      	subs	r2, r3, #1
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800851a:	429a      	cmp	r2, r3
 800851c:	d044      	beq.n	80085a8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008522:	2b00      	cmp	r3, #0
 8008524:	d140      	bne.n	80085a8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	3304      	adds	r3, #4
 800852a:	4618      	mov	r0, r3
 800852c:	f7fe fb62 	bl	8006bf4 <uxListRemove>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d115      	bne.n	8008562 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800853a:	491f      	ldr	r1, [pc, #124]	; (80085b8 <xTaskPriorityDisinherit+0x104>)
 800853c:	4613      	mov	r3, r2
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	4413      	add	r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	440b      	add	r3, r1
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10a      	bne.n	8008562 <xTaskPriorityDisinherit+0xae>
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008550:	2201      	movs	r2, #1
 8008552:	fa02 f303 	lsl.w	r3, r2, r3
 8008556:	43da      	mvns	r2, r3
 8008558:	4b18      	ldr	r3, [pc, #96]	; (80085bc <xTaskPriorityDisinherit+0x108>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4013      	ands	r3, r2
 800855e:	4a17      	ldr	r2, [pc, #92]	; (80085bc <xTaskPriorityDisinherit+0x108>)
 8008560:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856e:	f1c3 0207 	rsb	r2, r3, #7
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857a:	2201      	movs	r2, #1
 800857c:	409a      	lsls	r2, r3
 800857e:	4b0f      	ldr	r3, [pc, #60]	; (80085bc <xTaskPriorityDisinherit+0x108>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4313      	orrs	r3, r2
 8008584:	4a0d      	ldr	r2, [pc, #52]	; (80085bc <xTaskPriorityDisinherit+0x108>)
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858c:	4613      	mov	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4413      	add	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4a08      	ldr	r2, [pc, #32]	; (80085b8 <xTaskPriorityDisinherit+0x104>)
 8008596:	441a      	add	r2, r3
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	3304      	adds	r3, #4
 800859c:	4619      	mov	r1, r3
 800859e:	4610      	mov	r0, r2
 80085a0:	f7fe facb 	bl	8006b3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80085a4:	2301      	movs	r3, #1
 80085a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80085a8:	697b      	ldr	r3, [r7, #20]
	}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3718      	adds	r7, #24
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	20000298 	.word	0x20000298
 80085b8:	2000029c 	.word	0x2000029c
 80085bc:	200003a0 	.word	0x200003a0

080085c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b088      	sub	sp, #32
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80085ce:	2301      	movs	r3, #1
 80085d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f000 8088 	beq.w	80086ea <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10a      	bne.n	80085f8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80085e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	60fb      	str	r3, [r7, #12]
}
 80085f4:	bf00      	nop
 80085f6:	e7fe      	b.n	80085f6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d902      	bls.n	8008608 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	61fb      	str	r3, [r7, #28]
 8008606:	e002      	b.n	800860e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800860c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008612:	69fa      	ldr	r2, [r7, #28]
 8008614:	429a      	cmp	r2, r3
 8008616:	d068      	beq.n	80086ea <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800861c:	697a      	ldr	r2, [r7, #20]
 800861e:	429a      	cmp	r2, r3
 8008620:	d163      	bne.n	80086ea <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008622:	4b34      	ldr	r3, [pc, #208]	; (80086f4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	69ba      	ldr	r2, [r7, #24]
 8008628:	429a      	cmp	r2, r3
 800862a:	d10a      	bne.n	8008642 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800862c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008630:	f383 8811 	msr	BASEPRI, r3
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	60bb      	str	r3, [r7, #8]
}
 800863e:	bf00      	nop
 8008640:	e7fe      	b.n	8008640 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008646:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	69fa      	ldr	r2, [r7, #28]
 800864c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	2b00      	cmp	r3, #0
 8008654:	db04      	blt.n	8008660 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	f1c3 0207 	rsb	r2, r3, #7
 800865c:	69bb      	ldr	r3, [r7, #24]
 800865e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	6959      	ldr	r1, [r3, #20]
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	4613      	mov	r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	4413      	add	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4a22      	ldr	r2, [pc, #136]	; (80086f8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008670:	4413      	add	r3, r2
 8008672:	4299      	cmp	r1, r3
 8008674:	d101      	bne.n	800867a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8008676:	2301      	movs	r3, #1
 8008678:	e000      	b.n	800867c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800867a:	2300      	movs	r3, #0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d034      	beq.n	80086ea <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	3304      	adds	r3, #4
 8008684:	4618      	mov	r0, r3
 8008686:	f7fe fab5 	bl	8006bf4 <uxListRemove>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d115      	bne.n	80086bc <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008694:	4918      	ldr	r1, [pc, #96]	; (80086f8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008696:	4613      	mov	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	440b      	add	r3, r1
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d10a      	bne.n	80086bc <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086aa:	2201      	movs	r2, #1
 80086ac:	fa02 f303 	lsl.w	r3, r2, r3
 80086b0:	43da      	mvns	r2, r3
 80086b2:	4b12      	ldr	r3, [pc, #72]	; (80086fc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4013      	ands	r3, r2
 80086b8:	4a10      	ldr	r2, [pc, #64]	; (80086fc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80086ba:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c0:	2201      	movs	r2, #1
 80086c2:	409a      	lsls	r2, r3
 80086c4:	4b0d      	ldr	r3, [pc, #52]	; (80086fc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	4a0c      	ldr	r2, [pc, #48]	; (80086fc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80086cc:	6013      	str	r3, [r2, #0]
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d2:	4613      	mov	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4413      	add	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4a07      	ldr	r2, [pc, #28]	; (80086f8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80086dc:	441a      	add	r2, r3
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	3304      	adds	r3, #4
 80086e2:	4619      	mov	r1, r3
 80086e4:	4610      	mov	r0, r2
 80086e6:	f7fe fa28 	bl	8006b3a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80086ea:	bf00      	nop
 80086ec:	3720      	adds	r7, #32
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	20000298 	.word	0x20000298
 80086f8:	2000029c 	.word	0x2000029c
 80086fc:	200003a0 	.word	0x200003a0

08008700 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008700:	b480      	push	{r7}
 8008702:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008704:	4b07      	ldr	r3, [pc, #28]	; (8008724 <pvTaskIncrementMutexHeldCount+0x24>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d004      	beq.n	8008716 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800870c:	4b05      	ldr	r3, [pc, #20]	; (8008724 <pvTaskIncrementMutexHeldCount+0x24>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008712:	3201      	adds	r2, #1
 8008714:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008716:	4b03      	ldr	r3, [pc, #12]	; (8008724 <pvTaskIncrementMutexHeldCount+0x24>)
 8008718:	681b      	ldr	r3, [r3, #0]
	}
 800871a:	4618      	mov	r0, r3
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr
 8008724:	20000298 	.word	0x20000298

08008728 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008732:	4b29      	ldr	r3, [pc, #164]	; (80087d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008738:	4b28      	ldr	r3, [pc, #160]	; (80087dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	3304      	adds	r3, #4
 800873e:	4618      	mov	r0, r3
 8008740:	f7fe fa58 	bl	8006bf4 <uxListRemove>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10b      	bne.n	8008762 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800874a:	4b24      	ldr	r3, [pc, #144]	; (80087dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008750:	2201      	movs	r2, #1
 8008752:	fa02 f303 	lsl.w	r3, r2, r3
 8008756:	43da      	mvns	r2, r3
 8008758:	4b21      	ldr	r3, [pc, #132]	; (80087e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4013      	ands	r3, r2
 800875e:	4a20      	ldr	r2, [pc, #128]	; (80087e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008760:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008768:	d10a      	bne.n	8008780 <prvAddCurrentTaskToDelayedList+0x58>
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d007      	beq.n	8008780 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008770:	4b1a      	ldr	r3, [pc, #104]	; (80087dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	3304      	adds	r3, #4
 8008776:	4619      	mov	r1, r3
 8008778:	481a      	ldr	r0, [pc, #104]	; (80087e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800877a:	f7fe f9de 	bl	8006b3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800877e:	e026      	b.n	80087ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4413      	add	r3, r2
 8008786:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008788:	4b14      	ldr	r3, [pc, #80]	; (80087dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	429a      	cmp	r2, r3
 8008796:	d209      	bcs.n	80087ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008798:	4b13      	ldr	r3, [pc, #76]	; (80087e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	4b0f      	ldr	r3, [pc, #60]	; (80087dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	3304      	adds	r3, #4
 80087a2:	4619      	mov	r1, r3
 80087a4:	4610      	mov	r0, r2
 80087a6:	f7fe f9ec 	bl	8006b82 <vListInsert>
}
 80087aa:	e010      	b.n	80087ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087ac:	4b0f      	ldr	r3, [pc, #60]	; (80087ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	4b0a      	ldr	r3, [pc, #40]	; (80087dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	3304      	adds	r3, #4
 80087b6:	4619      	mov	r1, r3
 80087b8:	4610      	mov	r0, r2
 80087ba:	f7fe f9e2 	bl	8006b82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80087be:	4b0c      	ldr	r3, [pc, #48]	; (80087f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d202      	bcs.n	80087ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80087c8:	4a09      	ldr	r2, [pc, #36]	; (80087f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	6013      	str	r3, [r2, #0]
}
 80087ce:	bf00      	nop
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	2000039c 	.word	0x2000039c
 80087dc:	20000298 	.word	0x20000298
 80087e0:	200003a0 	.word	0x200003a0
 80087e4:	20000384 	.word	0x20000384
 80087e8:	20000354 	.word	0x20000354
 80087ec:	20000350 	.word	0x20000350
 80087f0:	200003b8 	.word	0x200003b8

080087f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	3b04      	subs	r3, #4
 8008804:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800880c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	3b04      	subs	r3, #4
 8008812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	f023 0201 	bic.w	r2, r3, #1
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	3b04      	subs	r3, #4
 8008822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008824:	4a0c      	ldr	r2, [pc, #48]	; (8008858 <pxPortInitialiseStack+0x64>)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	3b14      	subs	r3, #20
 800882e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	3b04      	subs	r3, #4
 800883a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f06f 0202 	mvn.w	r2, #2
 8008842:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	3b20      	subs	r3, #32
 8008848:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800884a:	68fb      	ldr	r3, [r7, #12]
}
 800884c:	4618      	mov	r0, r3
 800884e:	3714      	adds	r7, #20
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr
 8008858:	0800885d 	.word	0x0800885d

0800885c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008862:	2300      	movs	r3, #0
 8008864:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008866:	4b12      	ldr	r3, [pc, #72]	; (80088b0 <prvTaskExitError+0x54>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800886e:	d00a      	beq.n	8008886 <prvTaskExitError+0x2a>
	__asm volatile
 8008870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008874:	f383 8811 	msr	BASEPRI, r3
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	60fb      	str	r3, [r7, #12]
}
 8008882:	bf00      	nop
 8008884:	e7fe      	b.n	8008884 <prvTaskExitError+0x28>
	__asm volatile
 8008886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	60bb      	str	r3, [r7, #8]
}
 8008898:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800889a:	bf00      	nop
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d0fc      	beq.n	800889c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80088a2:	bf00      	nop
 80088a4:	bf00      	nop
 80088a6:	3714      	adds	r7, #20
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr
 80088b0:	2000000c 	.word	0x2000000c
	...

080088c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80088c0:	4b07      	ldr	r3, [pc, #28]	; (80088e0 <pxCurrentTCBConst2>)
 80088c2:	6819      	ldr	r1, [r3, #0]
 80088c4:	6808      	ldr	r0, [r1, #0]
 80088c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ca:	f380 8809 	msr	PSP, r0
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f04f 0000 	mov.w	r0, #0
 80088d6:	f380 8811 	msr	BASEPRI, r0
 80088da:	4770      	bx	lr
 80088dc:	f3af 8000 	nop.w

080088e0 <pxCurrentTCBConst2>:
 80088e0:	20000298 	.word	0x20000298
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80088e4:	bf00      	nop
 80088e6:	bf00      	nop

080088e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80088e8:	4808      	ldr	r0, [pc, #32]	; (800890c <prvPortStartFirstTask+0x24>)
 80088ea:	6800      	ldr	r0, [r0, #0]
 80088ec:	6800      	ldr	r0, [r0, #0]
 80088ee:	f380 8808 	msr	MSP, r0
 80088f2:	f04f 0000 	mov.w	r0, #0
 80088f6:	f380 8814 	msr	CONTROL, r0
 80088fa:	b662      	cpsie	i
 80088fc:	b661      	cpsie	f
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	df00      	svc	0
 8008908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800890a:	bf00      	nop
 800890c:	e000ed08 	.word	0xe000ed08

08008910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008916:	4b46      	ldr	r3, [pc, #280]	; (8008a30 <xPortStartScheduler+0x120>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a46      	ldr	r2, [pc, #280]	; (8008a34 <xPortStartScheduler+0x124>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d10a      	bne.n	8008936 <xPortStartScheduler+0x26>
	__asm volatile
 8008920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008924:	f383 8811 	msr	BASEPRI, r3
 8008928:	f3bf 8f6f 	isb	sy
 800892c:	f3bf 8f4f 	dsb	sy
 8008930:	613b      	str	r3, [r7, #16]
}
 8008932:	bf00      	nop
 8008934:	e7fe      	b.n	8008934 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008936:	4b3e      	ldr	r3, [pc, #248]	; (8008a30 <xPortStartScheduler+0x120>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a3f      	ldr	r2, [pc, #252]	; (8008a38 <xPortStartScheduler+0x128>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d10a      	bne.n	8008956 <xPortStartScheduler+0x46>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	60fb      	str	r3, [r7, #12]
}
 8008952:	bf00      	nop
 8008954:	e7fe      	b.n	8008954 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008956:	4b39      	ldr	r3, [pc, #228]	; (8008a3c <xPortStartScheduler+0x12c>)
 8008958:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	b2db      	uxtb	r3, r3
 8008960:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	22ff      	movs	r2, #255	; 0xff
 8008966:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008970:	78fb      	ldrb	r3, [r7, #3]
 8008972:	b2db      	uxtb	r3, r3
 8008974:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008978:	b2da      	uxtb	r2, r3
 800897a:	4b31      	ldr	r3, [pc, #196]	; (8008a40 <xPortStartScheduler+0x130>)
 800897c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800897e:	4b31      	ldr	r3, [pc, #196]	; (8008a44 <xPortStartScheduler+0x134>)
 8008980:	2207      	movs	r2, #7
 8008982:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008984:	e009      	b.n	800899a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008986:	4b2f      	ldr	r3, [pc, #188]	; (8008a44 <xPortStartScheduler+0x134>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	3b01      	subs	r3, #1
 800898c:	4a2d      	ldr	r2, [pc, #180]	; (8008a44 <xPortStartScheduler+0x134>)
 800898e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008990:	78fb      	ldrb	r3, [r7, #3]
 8008992:	b2db      	uxtb	r3, r3
 8008994:	005b      	lsls	r3, r3, #1
 8008996:	b2db      	uxtb	r3, r3
 8008998:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800899a:	78fb      	ldrb	r3, [r7, #3]
 800899c:	b2db      	uxtb	r3, r3
 800899e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089a2:	2b80      	cmp	r3, #128	; 0x80
 80089a4:	d0ef      	beq.n	8008986 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80089a6:	4b27      	ldr	r3, [pc, #156]	; (8008a44 <xPortStartScheduler+0x134>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f1c3 0307 	rsb	r3, r3, #7
 80089ae:	2b04      	cmp	r3, #4
 80089b0:	d00a      	beq.n	80089c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80089b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b6:	f383 8811 	msr	BASEPRI, r3
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	60bb      	str	r3, [r7, #8]
}
 80089c4:	bf00      	nop
 80089c6:	e7fe      	b.n	80089c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80089c8:	4b1e      	ldr	r3, [pc, #120]	; (8008a44 <xPortStartScheduler+0x134>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	021b      	lsls	r3, r3, #8
 80089ce:	4a1d      	ldr	r2, [pc, #116]	; (8008a44 <xPortStartScheduler+0x134>)
 80089d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80089d2:	4b1c      	ldr	r3, [pc, #112]	; (8008a44 <xPortStartScheduler+0x134>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80089da:	4a1a      	ldr	r2, [pc, #104]	; (8008a44 <xPortStartScheduler+0x134>)
 80089dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	b2da      	uxtb	r2, r3
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80089e6:	4b18      	ldr	r3, [pc, #96]	; (8008a48 <xPortStartScheduler+0x138>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a17      	ldr	r2, [pc, #92]	; (8008a48 <xPortStartScheduler+0x138>)
 80089ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80089f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80089f2:	4b15      	ldr	r3, [pc, #84]	; (8008a48 <xPortStartScheduler+0x138>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a14      	ldr	r2, [pc, #80]	; (8008a48 <xPortStartScheduler+0x138>)
 80089f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80089fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80089fe:	f000 f8dd 	bl	8008bbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a02:	4b12      	ldr	r3, [pc, #72]	; (8008a4c <xPortStartScheduler+0x13c>)
 8008a04:	2200      	movs	r2, #0
 8008a06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a08:	f000 f8fc 	bl	8008c04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a0c:	4b10      	ldr	r3, [pc, #64]	; (8008a50 <xPortStartScheduler+0x140>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a0f      	ldr	r2, [pc, #60]	; (8008a50 <xPortStartScheduler+0x140>)
 8008a12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008a16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a18:	f7ff ff66 	bl	80088e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a1c:	f7ff fa64 	bl	8007ee8 <vTaskSwitchContext>
	prvTaskExitError();
 8008a20:	f7ff ff1c 	bl	800885c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3718      	adds	r7, #24
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	e000ed00 	.word	0xe000ed00
 8008a34:	410fc271 	.word	0x410fc271
 8008a38:	410fc270 	.word	0x410fc270
 8008a3c:	e000e400 	.word	0xe000e400
 8008a40:	200003c4 	.word	0x200003c4
 8008a44:	200003c8 	.word	0x200003c8
 8008a48:	e000ed20 	.word	0xe000ed20
 8008a4c:	2000000c 	.word	0x2000000c
 8008a50:	e000ef34 	.word	0xe000ef34

08008a54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
	__asm volatile
 8008a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5e:	f383 8811 	msr	BASEPRI, r3
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	f3bf 8f4f 	dsb	sy
 8008a6a:	607b      	str	r3, [r7, #4]
}
 8008a6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a6e:	4b0f      	ldr	r3, [pc, #60]	; (8008aac <vPortEnterCritical+0x58>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	3301      	adds	r3, #1
 8008a74:	4a0d      	ldr	r2, [pc, #52]	; (8008aac <vPortEnterCritical+0x58>)
 8008a76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a78:	4b0c      	ldr	r3, [pc, #48]	; (8008aac <vPortEnterCritical+0x58>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d10f      	bne.n	8008aa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a80:	4b0b      	ldr	r3, [pc, #44]	; (8008ab0 <vPortEnterCritical+0x5c>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00a      	beq.n	8008aa0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	603b      	str	r3, [r7, #0]
}
 8008a9c:	bf00      	nop
 8008a9e:	e7fe      	b.n	8008a9e <vPortEnterCritical+0x4a>
	}
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	2000000c 	.word	0x2000000c
 8008ab0:	e000ed04 	.word	0xe000ed04

08008ab4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008aba:	4b12      	ldr	r3, [pc, #72]	; (8008b04 <vPortExitCritical+0x50>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10a      	bne.n	8008ad8 <vPortExitCritical+0x24>
	__asm volatile
 8008ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac6:	f383 8811 	msr	BASEPRI, r3
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	607b      	str	r3, [r7, #4]
}
 8008ad4:	bf00      	nop
 8008ad6:	e7fe      	b.n	8008ad6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ad8:	4b0a      	ldr	r3, [pc, #40]	; (8008b04 <vPortExitCritical+0x50>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	3b01      	subs	r3, #1
 8008ade:	4a09      	ldr	r2, [pc, #36]	; (8008b04 <vPortExitCritical+0x50>)
 8008ae0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ae2:	4b08      	ldr	r3, [pc, #32]	; (8008b04 <vPortExitCritical+0x50>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d105      	bne.n	8008af6 <vPortExitCritical+0x42>
 8008aea:	2300      	movs	r3, #0
 8008aec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	f383 8811 	msr	BASEPRI, r3
}
 8008af4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008af6:	bf00      	nop
 8008af8:	370c      	adds	r7, #12
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop
 8008b04:	2000000c 	.word	0x2000000c
	...

08008b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b10:	f3ef 8009 	mrs	r0, PSP
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	4b15      	ldr	r3, [pc, #84]	; (8008b70 <pxCurrentTCBConst>)
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	f01e 0f10 	tst.w	lr, #16
 8008b20:	bf08      	it	eq
 8008b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b2a:	6010      	str	r0, [r2, #0]
 8008b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008b34:	f380 8811 	msr	BASEPRI, r0
 8008b38:	f3bf 8f4f 	dsb	sy
 8008b3c:	f3bf 8f6f 	isb	sy
 8008b40:	f7ff f9d2 	bl	8007ee8 <vTaskSwitchContext>
 8008b44:	f04f 0000 	mov.w	r0, #0
 8008b48:	f380 8811 	msr	BASEPRI, r0
 8008b4c:	bc09      	pop	{r0, r3}
 8008b4e:	6819      	ldr	r1, [r3, #0]
 8008b50:	6808      	ldr	r0, [r1, #0]
 8008b52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b56:	f01e 0f10 	tst.w	lr, #16
 8008b5a:	bf08      	it	eq
 8008b5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b60:	f380 8809 	msr	PSP, r0
 8008b64:	f3bf 8f6f 	isb	sy
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	f3af 8000 	nop.w

08008b70 <pxCurrentTCBConst>:
 8008b70:	20000298 	.word	0x20000298
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b74:	bf00      	nop
 8008b76:	bf00      	nop

08008b78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	607b      	str	r3, [r7, #4]
}
 8008b90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b92:	f7ff f8eb 	bl	8007d6c <xTaskIncrementTick>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d003      	beq.n	8008ba4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b9c:	4b06      	ldr	r3, [pc, #24]	; (8008bb8 <SysTick_Handler+0x40>)
 8008b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	f383 8811 	msr	BASEPRI, r3
}
 8008bae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008bb0:	bf00      	nop
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	e000ed04 	.word	0xe000ed04

08008bbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008bc0:	4b0b      	ldr	r3, [pc, #44]	; (8008bf0 <vPortSetupTimerInterrupt+0x34>)
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008bc6:	4b0b      	ldr	r3, [pc, #44]	; (8008bf4 <vPortSetupTimerInterrupt+0x38>)
 8008bc8:	2200      	movs	r2, #0
 8008bca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008bcc:	4b0a      	ldr	r3, [pc, #40]	; (8008bf8 <vPortSetupTimerInterrupt+0x3c>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a0a      	ldr	r2, [pc, #40]	; (8008bfc <vPortSetupTimerInterrupt+0x40>)
 8008bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bd6:	099b      	lsrs	r3, r3, #6
 8008bd8:	4a09      	ldr	r2, [pc, #36]	; (8008c00 <vPortSetupTimerInterrupt+0x44>)
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008bde:	4b04      	ldr	r3, [pc, #16]	; (8008bf0 <vPortSetupTimerInterrupt+0x34>)
 8008be0:	2207      	movs	r2, #7
 8008be2:	601a      	str	r2, [r3, #0]
}
 8008be4:	bf00      	nop
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	e000e010 	.word	0xe000e010
 8008bf4:	e000e018 	.word	0xe000e018
 8008bf8:	20000000 	.word	0x20000000
 8008bfc:	10624dd3 	.word	0x10624dd3
 8008c00:	e000e014 	.word	0xe000e014

08008c04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008c14 <vPortEnableVFP+0x10>
 8008c08:	6801      	ldr	r1, [r0, #0]
 8008c0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008c0e:	6001      	str	r1, [r0, #0]
 8008c10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c12:	bf00      	nop
 8008c14:	e000ed88 	.word	0xe000ed88

08008c18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c1e:	f3ef 8305 	mrs	r3, IPSR
 8008c22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2b0f      	cmp	r3, #15
 8008c28:	d914      	bls.n	8008c54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c2a:	4a17      	ldr	r2, [pc, #92]	; (8008c88 <vPortValidateInterruptPriority+0x70>)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	4413      	add	r3, r2
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c34:	4b15      	ldr	r3, [pc, #84]	; (8008c8c <vPortValidateInterruptPriority+0x74>)
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	7afa      	ldrb	r2, [r7, #11]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d20a      	bcs.n	8008c54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	607b      	str	r3, [r7, #4]
}
 8008c50:	bf00      	nop
 8008c52:	e7fe      	b.n	8008c52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c54:	4b0e      	ldr	r3, [pc, #56]	; (8008c90 <vPortValidateInterruptPriority+0x78>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008c5c:	4b0d      	ldr	r3, [pc, #52]	; (8008c94 <vPortValidateInterruptPriority+0x7c>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d90a      	bls.n	8008c7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c68:	f383 8811 	msr	BASEPRI, r3
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	603b      	str	r3, [r7, #0]
}
 8008c76:	bf00      	nop
 8008c78:	e7fe      	b.n	8008c78 <vPortValidateInterruptPriority+0x60>
	}
 8008c7a:	bf00      	nop
 8008c7c:	3714      	adds	r7, #20
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	e000e3f0 	.word	0xe000e3f0
 8008c8c:	200003c4 	.word	0x200003c4
 8008c90:	e000ed0c 	.word	0xe000ed0c
 8008c94:	200003c8 	.word	0x200003c8

08008c98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b08a      	sub	sp, #40	; 0x28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ca4:	f7fe ffb8 	bl	8007c18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ca8:	4b58      	ldr	r3, [pc, #352]	; (8008e0c <pvPortMalloc+0x174>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d101      	bne.n	8008cb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008cb0:	f000 f910 	bl	8008ed4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008cb4:	4b56      	ldr	r3, [pc, #344]	; (8008e10 <pvPortMalloc+0x178>)
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4013      	ands	r3, r2
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f040 808e 	bne.w	8008dde <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d01d      	beq.n	8008d04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008cc8:	2208      	movs	r2, #8
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4413      	add	r3, r2
 8008cce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f003 0307 	and.w	r3, r3, #7
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d014      	beq.n	8008d04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f023 0307 	bic.w	r3, r3, #7
 8008ce0:	3308      	adds	r3, #8
 8008ce2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f003 0307 	and.w	r3, r3, #7
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00a      	beq.n	8008d04 <pvPortMalloc+0x6c>
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	617b      	str	r3, [r7, #20]
}
 8008d00:	bf00      	nop
 8008d02:	e7fe      	b.n	8008d02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d069      	beq.n	8008dde <pvPortMalloc+0x146>
 8008d0a:	4b42      	ldr	r3, [pc, #264]	; (8008e14 <pvPortMalloc+0x17c>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d864      	bhi.n	8008dde <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d14:	4b40      	ldr	r3, [pc, #256]	; (8008e18 <pvPortMalloc+0x180>)
 8008d16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d18:	4b3f      	ldr	r3, [pc, #252]	; (8008e18 <pvPortMalloc+0x180>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d1e:	e004      	b.n	8008d2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d903      	bls.n	8008d3c <pvPortMalloc+0xa4>
 8008d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1f1      	bne.n	8008d20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d3c:	4b33      	ldr	r3, [pc, #204]	; (8008e0c <pvPortMalloc+0x174>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d04b      	beq.n	8008dde <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d46:	6a3b      	ldr	r3, [r7, #32]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2208      	movs	r2, #8
 8008d4c:	4413      	add	r3, r2
 8008d4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	1ad2      	subs	r2, r2, r3
 8008d60:	2308      	movs	r3, #8
 8008d62:	005b      	lsls	r3, r3, #1
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d91f      	bls.n	8008da8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	f003 0307 	and.w	r3, r3, #7
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00a      	beq.n	8008d90 <pvPortMalloc+0xf8>
	__asm volatile
 8008d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7e:	f383 8811 	msr	BASEPRI, r3
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	613b      	str	r3, [r7, #16]
}
 8008d8c:	bf00      	nop
 8008d8e:	e7fe      	b.n	8008d8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	685a      	ldr	r2, [r3, #4]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	1ad2      	subs	r2, r2, r3
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008da2:	69b8      	ldr	r0, [r7, #24]
 8008da4:	f000 f8f8 	bl	8008f98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008da8:	4b1a      	ldr	r3, [pc, #104]	; (8008e14 <pvPortMalloc+0x17c>)
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	4a18      	ldr	r2, [pc, #96]	; (8008e14 <pvPortMalloc+0x17c>)
 8008db4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008db6:	4b17      	ldr	r3, [pc, #92]	; (8008e14 <pvPortMalloc+0x17c>)
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	4b18      	ldr	r3, [pc, #96]	; (8008e1c <pvPortMalloc+0x184>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d203      	bcs.n	8008dca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008dc2:	4b14      	ldr	r3, [pc, #80]	; (8008e14 <pvPortMalloc+0x17c>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a15      	ldr	r2, [pc, #84]	; (8008e1c <pvPortMalloc+0x184>)
 8008dc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dcc:	685a      	ldr	r2, [r3, #4]
 8008dce:	4b10      	ldr	r3, [pc, #64]	; (8008e10 <pvPortMalloc+0x178>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	431a      	orrs	r2, r3
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dda:	2200      	movs	r2, #0
 8008ddc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008dde:	f7fe ff29 	bl	8007c34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	f003 0307 	and.w	r3, r3, #7
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00a      	beq.n	8008e02 <pvPortMalloc+0x16a>
	__asm volatile
 8008dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df0:	f383 8811 	msr	BASEPRI, r3
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	60fb      	str	r3, [r7, #12]
}
 8008dfe:	bf00      	nop
 8008e00:	e7fe      	b.n	8008e00 <pvPortMalloc+0x168>
	return pvReturn;
 8008e02:	69fb      	ldr	r3, [r7, #28]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3728      	adds	r7, #40	; 0x28
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	20000fd4 	.word	0x20000fd4
 8008e10:	20000fe0 	.word	0x20000fe0
 8008e14:	20000fd8 	.word	0x20000fd8
 8008e18:	20000fcc 	.word	0x20000fcc
 8008e1c:	20000fdc 	.word	0x20000fdc

08008e20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d048      	beq.n	8008ec4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e32:	2308      	movs	r3, #8
 8008e34:	425b      	negs	r3, r3
 8008e36:	697a      	ldr	r2, [r7, #20]
 8008e38:	4413      	add	r3, r2
 8008e3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	685a      	ldr	r2, [r3, #4]
 8008e44:	4b21      	ldr	r3, [pc, #132]	; (8008ecc <vPortFree+0xac>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4013      	ands	r3, r2
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d10a      	bne.n	8008e64 <vPortFree+0x44>
	__asm volatile
 8008e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e52:	f383 8811 	msr	BASEPRI, r3
 8008e56:	f3bf 8f6f 	isb	sy
 8008e5a:	f3bf 8f4f 	dsb	sy
 8008e5e:	60fb      	str	r3, [r7, #12]
}
 8008e60:	bf00      	nop
 8008e62:	e7fe      	b.n	8008e62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00a      	beq.n	8008e82 <vPortFree+0x62>
	__asm volatile
 8008e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e70:	f383 8811 	msr	BASEPRI, r3
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	60bb      	str	r3, [r7, #8]
}
 8008e7e:	bf00      	nop
 8008e80:	e7fe      	b.n	8008e80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	685a      	ldr	r2, [r3, #4]
 8008e86:	4b11      	ldr	r3, [pc, #68]	; (8008ecc <vPortFree+0xac>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d019      	beq.n	8008ec4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d115      	bne.n	8008ec4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	685a      	ldr	r2, [r3, #4]
 8008e9c:	4b0b      	ldr	r3, [pc, #44]	; (8008ecc <vPortFree+0xac>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	43db      	mvns	r3, r3
 8008ea2:	401a      	ands	r2, r3
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ea8:	f7fe feb6 	bl	8007c18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	685a      	ldr	r2, [r3, #4]
 8008eb0:	4b07      	ldr	r3, [pc, #28]	; (8008ed0 <vPortFree+0xb0>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	4a06      	ldr	r2, [pc, #24]	; (8008ed0 <vPortFree+0xb0>)
 8008eb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008eba:	6938      	ldr	r0, [r7, #16]
 8008ebc:	f000 f86c 	bl	8008f98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008ec0:	f7fe feb8 	bl	8007c34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ec4:	bf00      	nop
 8008ec6:	3718      	adds	r7, #24
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	20000fe0 	.word	0x20000fe0
 8008ed0:	20000fd8 	.word	0x20000fd8

08008ed4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008eda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008ede:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ee0:	4b27      	ldr	r3, [pc, #156]	; (8008f80 <prvHeapInit+0xac>)
 8008ee2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f003 0307 	and.w	r3, r3, #7
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00c      	beq.n	8008f08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	3307      	adds	r3, #7
 8008ef2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f023 0307 	bic.w	r3, r3, #7
 8008efa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	4a1f      	ldr	r2, [pc, #124]	; (8008f80 <prvHeapInit+0xac>)
 8008f04:	4413      	add	r3, r2
 8008f06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f0c:	4a1d      	ldr	r2, [pc, #116]	; (8008f84 <prvHeapInit+0xb0>)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f12:	4b1c      	ldr	r3, [pc, #112]	; (8008f84 <prvHeapInit+0xb0>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f20:	2208      	movs	r2, #8
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	1a9b      	subs	r3, r3, r2
 8008f26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f023 0307 	bic.w	r3, r3, #7
 8008f2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	4a15      	ldr	r2, [pc, #84]	; (8008f88 <prvHeapInit+0xb4>)
 8008f34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f36:	4b14      	ldr	r3, [pc, #80]	; (8008f88 <prvHeapInit+0xb4>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f3e:	4b12      	ldr	r3, [pc, #72]	; (8008f88 <prvHeapInit+0xb4>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2200      	movs	r2, #0
 8008f44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	1ad2      	subs	r2, r2, r3
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f54:	4b0c      	ldr	r3, [pc, #48]	; (8008f88 <prvHeapInit+0xb4>)
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	4a0a      	ldr	r2, [pc, #40]	; (8008f8c <prvHeapInit+0xb8>)
 8008f62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	4a09      	ldr	r2, [pc, #36]	; (8008f90 <prvHeapInit+0xbc>)
 8008f6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f6c:	4b09      	ldr	r3, [pc, #36]	; (8008f94 <prvHeapInit+0xc0>)
 8008f6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008f72:	601a      	str	r2, [r3, #0]
}
 8008f74:	bf00      	nop
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr
 8008f80:	200003cc 	.word	0x200003cc
 8008f84:	20000fcc 	.word	0x20000fcc
 8008f88:	20000fd4 	.word	0x20000fd4
 8008f8c:	20000fdc 	.word	0x20000fdc
 8008f90:	20000fd8 	.word	0x20000fd8
 8008f94:	20000fe0 	.word	0x20000fe0

08008f98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008fa0:	4b28      	ldr	r3, [pc, #160]	; (8009044 <prvInsertBlockIntoFreeList+0xac>)
 8008fa2:	60fb      	str	r3, [r7, #12]
 8008fa4:	e002      	b.n	8008fac <prvInsertBlockIntoFreeList+0x14>
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	60fb      	str	r3, [r7, #12]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d8f7      	bhi.n	8008fa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d108      	bne.n	8008fda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	441a      	add	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	441a      	add	r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d118      	bne.n	8009020 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	4b15      	ldr	r3, [pc, #84]	; (8009048 <prvInsertBlockIntoFreeList+0xb0>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d00d      	beq.n	8009016 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685a      	ldr	r2, [r3, #4]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	441a      	add	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	e008      	b.n	8009028 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009016:	4b0c      	ldr	r3, [pc, #48]	; (8009048 <prvInsertBlockIntoFreeList+0xb0>)
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	601a      	str	r2, [r3, #0]
 800901e:	e003      	b.n	8009028 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	429a      	cmp	r2, r3
 800902e:	d002      	beq.n	8009036 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009036:	bf00      	nop
 8009038:	3714      	adds	r7, #20
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	20000fcc 	.word	0x20000fcc
 8009048:	20000fd4 	.word	0x20000fd4

0800904c <__libc_init_array>:
 800904c:	b570      	push	{r4, r5, r6, lr}
 800904e:	4d0d      	ldr	r5, [pc, #52]	; (8009084 <__libc_init_array+0x38>)
 8009050:	4c0d      	ldr	r4, [pc, #52]	; (8009088 <__libc_init_array+0x3c>)
 8009052:	1b64      	subs	r4, r4, r5
 8009054:	10a4      	asrs	r4, r4, #2
 8009056:	2600      	movs	r6, #0
 8009058:	42a6      	cmp	r6, r4
 800905a:	d109      	bne.n	8009070 <__libc_init_array+0x24>
 800905c:	4d0b      	ldr	r5, [pc, #44]	; (800908c <__libc_init_array+0x40>)
 800905e:	4c0c      	ldr	r4, [pc, #48]	; (8009090 <__libc_init_array+0x44>)
 8009060:	f000 f82e 	bl	80090c0 <_init>
 8009064:	1b64      	subs	r4, r4, r5
 8009066:	10a4      	asrs	r4, r4, #2
 8009068:	2600      	movs	r6, #0
 800906a:	42a6      	cmp	r6, r4
 800906c:	d105      	bne.n	800907a <__libc_init_array+0x2e>
 800906e:	bd70      	pop	{r4, r5, r6, pc}
 8009070:	f855 3b04 	ldr.w	r3, [r5], #4
 8009074:	4798      	blx	r3
 8009076:	3601      	adds	r6, #1
 8009078:	e7ee      	b.n	8009058 <__libc_init_array+0xc>
 800907a:	f855 3b04 	ldr.w	r3, [r5], #4
 800907e:	4798      	blx	r3
 8009080:	3601      	adds	r6, #1
 8009082:	e7f2      	b.n	800906a <__libc_init_array+0x1e>
 8009084:	08009304 	.word	0x08009304
 8009088:	08009304 	.word	0x08009304
 800908c:	08009304 	.word	0x08009304
 8009090:	08009308 	.word	0x08009308

08009094 <memcpy>:
 8009094:	440a      	add	r2, r1
 8009096:	4291      	cmp	r1, r2
 8009098:	f100 33ff 	add.w	r3, r0, #4294967295
 800909c:	d100      	bne.n	80090a0 <memcpy+0xc>
 800909e:	4770      	bx	lr
 80090a0:	b510      	push	{r4, lr}
 80090a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090aa:	4291      	cmp	r1, r2
 80090ac:	d1f9      	bne.n	80090a2 <memcpy+0xe>
 80090ae:	bd10      	pop	{r4, pc}

080090b0 <memset>:
 80090b0:	4402      	add	r2, r0
 80090b2:	4603      	mov	r3, r0
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d100      	bne.n	80090ba <memset+0xa>
 80090b8:	4770      	bx	lr
 80090ba:	f803 1b01 	strb.w	r1, [r3], #1
 80090be:	e7f9      	b.n	80090b4 <memset+0x4>

080090c0 <_init>:
 80090c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c2:	bf00      	nop
 80090c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090c6:	bc08      	pop	{r3}
 80090c8:	469e      	mov	lr, r3
 80090ca:	4770      	bx	lr

080090cc <_fini>:
 80090cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ce:	bf00      	nop
 80090d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090d2:	bc08      	pop	{r3}
 80090d4:	469e      	mov	lr, r3
 80090d6:	4770      	bx	lr
