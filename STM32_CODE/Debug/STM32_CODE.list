
STM32_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800424c  0800424c  0001424c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043d0  080043d0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080043d0  080043d0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043d0  080043d0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043d0  080043d0  000143d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043d4  080043d4  000143d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080043d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000113c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000114c  2000114c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015221  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dd9  00000000  00000000  00035261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001168  00000000  00000000  00038040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001020  00000000  00000000  000391a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001efec  00000000  00000000  0003a1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001461f  00000000  00000000  000591b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb16e  00000000  00000000  0006d7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00128941  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004860  00000000  00000000  00128994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004234 	.word	0x08004234

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004234 	.word	0x08004234

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	20000080 	.word	0x20000080

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b5b0      	push	{r4, r5, r7, lr}
 8000206:	b0a8      	sub	sp, #160	; 0xa0
 8000208:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 fbf9 	bl	8000a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f891 	bl	8000334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f92b 	bl	800046c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000216:	f000 f8e9 	bl	80003ec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // PCB data initialization
  PCB pcb;
  pcb.PCBUniqueID=PCBuniqueID;
 800021a:	2328      	movs	r3, #40	; 0x28
 800021c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
  pcb.NumberOfSensors=Numberofsensors;
 8000220:	2302      	movs	r3, #2
 8000222:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
  strcpy(pcb.ManufacturingDate,Manufacturingdate);
 8000226:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800022a:	3303      	adds	r3, #3
 800022c:	4936      	ldr	r1, [pc, #216]	; (8000308 <main+0x104>)
 800022e:	461a      	mov	r2, r3
 8000230:	460b      	mov	r3, r1
 8000232:	cb03      	ldmia	r3!, {r0, r1}
 8000234:	6010      	str	r0, [r2, #0]
 8000236:	6051      	str	r1, [r2, #4]
 8000238:	8819      	ldrh	r1, [r3, #0]
 800023a:	789b      	ldrb	r3, [r3, #2]
 800023c:	8111      	strh	r1, [r2, #8]
 800023e:	7293      	strb	r3, [r2, #10]
  pcb.PCBCapabilities=temperature_degC*8 + temperaturePCB_degC*4 + humidity_percent*2 + absolutePressure_kPa;
 8000240:	230f      	movs	r3, #15
 8000242:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01_I2C */
  osThreadDef(Task01_I2C, StartTask01_I2C, osPriorityRealtime, 0, 128);
 8000246:	4b31      	ldr	r3, [pc, #196]	; (800030c <main+0x108>)
 8000248:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800024c:	461d      	mov	r5, r3
 800024e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000252:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000256:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01_I2CHandle = osThreadCreate(osThread(Task01_I2C), NULL);
 800025a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800025e:	2100      	movs	r1, #0
 8000260:	4618      	mov	r0, r3
 8000262:	f002 fd96 	bl	8002d92 <osThreadCreate>
 8000266:	4603      	mov	r3, r0
 8000268:	4a29      	ldr	r2, [pc, #164]	; (8000310 <main+0x10c>)
 800026a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  /* definition and creation of Task02 */
  if(temperature_degC){
	osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 128);
 800026c:	4b29      	ldr	r3, [pc, #164]	; (8000314 <main+0x110>)
 800026e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000272:	461d      	mov	r5, r3
 8000274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000278:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800027c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task02Handle = osThreadCreate(osThread(Task02), NULL);
 8000280:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f002 fd83 	bl	8002d92 <osThreadCreate>
 800028c:	4603      	mov	r3, r0
 800028e:	4a22      	ldr	r2, [pc, #136]	; (8000318 <main+0x114>)
 8000290:	6013      	str	r3, [r2, #0]
  }
  /* definition and creation of Task03 */
  if(temperaturePCB_degC){
	osThreadDef(Task03, StartTask03, osPriorityNormal, 0, 128);
 8000292:	4b22      	ldr	r3, [pc, #136]	; (800031c <main+0x118>)
 8000294:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000298:	461d      	mov	r5, r3
 800029a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800029c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800029e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task03Handle = osThreadCreate(osThread(Task03), NULL);
 80002a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002aa:	2100      	movs	r1, #0
 80002ac:	4618      	mov	r0, r3
 80002ae:	f002 fd70 	bl	8002d92 <osThreadCreate>
 80002b2:	4603      	mov	r3, r0
 80002b4:	4a1a      	ldr	r2, [pc, #104]	; (8000320 <main+0x11c>)
 80002b6:	6013      	str	r3, [r2, #0]
  }
  /* definition and creation of Task04 */
  if(humidity_percent){
	osThreadDef(Task04, StartTask04, osPriorityNormal, 0, 128);
 80002b8:	4b1a      	ldr	r3, [pc, #104]	; (8000324 <main+0x120>)
 80002ba:	f107 0420 	add.w	r4, r7, #32
 80002be:	461d      	mov	r5, r3
 80002c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task04Handle = osThreadCreate(osThread(Task04), NULL);
 80002cc:	f107 0320 	add.w	r3, r7, #32
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f002 fd5d 	bl	8002d92 <osThreadCreate>
 80002d8:	4603      	mov	r3, r0
 80002da:	4a13      	ldr	r2, [pc, #76]	; (8000328 <main+0x124>)
 80002dc:	6013      	str	r3, [r2, #0]
  }
  /* definition and creation of Task05 */
  if(absolutePressure_kPa){
	osThreadDef(Task05, StartTask05, osPriorityNormal, 0, 128);
 80002de:	4b13      	ldr	r3, [pc, #76]	; (800032c <main+0x128>)
 80002e0:	1d3c      	adds	r4, r7, #4
 80002e2:	461d      	mov	r5, r3
 80002e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task05Handle = osThreadCreate(osThread(Task05), NULL);
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2100      	movs	r1, #0
 80002f4:	4618      	mov	r0, r3
 80002f6:	f002 fd4c 	bl	8002d92 <osThreadCreate>
 80002fa:	4603      	mov	r3, r0
 80002fc:	4a0c      	ldr	r2, [pc, #48]	; (8000330 <main+0x12c>)
 80002fe:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000300:	f002 fd40 	bl	8002d84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000304:	e7fe      	b.n	8000304 <main+0x100>
 8000306:	bf00      	nop
 8000308:	08004278 	.word	0x08004278
 800030c:	08004284 	.word	0x08004284
 8000310:	20001088 	.word	0x20001088
 8000314:	080042a0 	.word	0x080042a0
 8000318:	20000fcc 	.word	0x20000fcc
 800031c:	080042bc 	.word	0x080042bc
 8000320:	2000108c 	.word	0x2000108c
 8000324:	080042d8 	.word	0x080042d8
 8000328:	20001050 	.word	0x20001050
 800032c:	080042f4 	.word	0x080042f4
 8000330:	20001090 	.word	0x20001090

08000334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b09e      	sub	sp, #120	; 0x78
 8000338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800033e:	2228      	movs	r2, #40	; 0x28
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f003 ff6e 	bl	8004224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000348:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
 8000350:	605a      	str	r2, [r3, #4]
 8000352:	609a      	str	r2, [r3, #8]
 8000354:	60da      	str	r2, [r3, #12]
 8000356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000358:	463b      	mov	r3, r7
 800035a:	223c      	movs	r2, #60	; 0x3c
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f003 ff60 	bl	8004224 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000364:	2303      	movs	r3, #3
 8000366:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000368:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800036c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000372:	2301      	movs	r3, #1
 8000374:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000376:	2310      	movs	r3, #16
 8000378:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037a:	2302      	movs	r3, #2
 800037c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800037e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000382:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000384:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000388:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800038e:	4618      	mov	r0, r3
 8000390:	f000 ff20 	bl	80011d4 <HAL_RCC_OscConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800039a:	f000 f9f9 	bl	8000790 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039e:	230f      	movs	r3, #15
 80003a0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a2:	2302      	movs	r3, #2
 80003a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003b8:	2101      	movs	r1, #1
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 fe12 	bl	8001fe4 <HAL_RCC_ClockConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003c6:	f000 f9e3 	bl	8000790 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003ca:	2320      	movs	r3, #32
 80003cc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d2:	463b      	mov	r3, r7
 80003d4:	4618      	mov	r0, r3
 80003d6:	f002 f84b 	bl	8002470 <HAL_RCCEx_PeriphCLKConfig>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80003e0:	f000 f9d6 	bl	8000790 <Error_Handler>
  }
}
 80003e4:	bf00      	nop
 80003e6:	3778      	adds	r7, #120	; 0x78
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003f0:	4b1b      	ldr	r3, [pc, #108]	; (8000460 <MX_I2C1_Init+0x74>)
 80003f2:	4a1c      	ldr	r2, [pc, #112]	; (8000464 <MX_I2C1_Init+0x78>)
 80003f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003f6:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <MX_I2C1_Init+0x74>)
 80003f8:	4a1b      	ldr	r2, [pc, #108]	; (8000468 <MX_I2C1_Init+0x7c>)
 80003fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 10;
 80003fc:	4b18      	ldr	r3, [pc, #96]	; (8000460 <MX_I2C1_Init+0x74>)
 80003fe:	220a      	movs	r2, #10
 8000400:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000402:	4b17      	ldr	r3, [pc, #92]	; (8000460 <MX_I2C1_Init+0x74>)
 8000404:	2201      	movs	r2, #1
 8000406:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000408:	4b15      	ldr	r3, [pc, #84]	; (8000460 <MX_I2C1_Init+0x74>)
 800040a:	2200      	movs	r2, #0
 800040c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800040e:	4b14      	ldr	r3, [pc, #80]	; (8000460 <MX_I2C1_Init+0x74>)
 8000410:	2200      	movs	r2, #0
 8000412:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000414:	4b12      	ldr	r3, [pc, #72]	; (8000460 <MX_I2C1_Init+0x74>)
 8000416:	2200      	movs	r2, #0
 8000418:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800041a:	4b11      	ldr	r3, [pc, #68]	; (8000460 <MX_I2C1_Init+0x74>)
 800041c:	2200      	movs	r2, #0
 800041e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000420:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <MX_I2C1_Init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000426:	480e      	ldr	r0, [pc, #56]	; (8000460 <MX_I2C1_Init+0x74>)
 8000428:	f000 fd94 	bl	8000f54 <HAL_I2C_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000432:	f000 f9ad 	bl	8000790 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000436:	2100      	movs	r1, #0
 8000438:	4809      	ldr	r0, [pc, #36]	; (8000460 <MX_I2C1_Init+0x74>)
 800043a:	f000 fe34 	bl	80010a6 <HAL_I2CEx_ConfigAnalogFilter>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000444:	f000 f9a4 	bl	8000790 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000448:	2100      	movs	r1, #0
 800044a:	4805      	ldr	r0, [pc, #20]	; (8000460 <MX_I2C1_Init+0x74>)
 800044c:	f000 fe76 	bl	800113c <HAL_I2CEx_ConfigDigitalFilter>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000456:	f000 f99b 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	20001004 	.word	0x20001004
 8000464:	40005400 	.word	0x40005400
 8000468:	2000090e 	.word	0x2000090e

0800046c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b08a      	sub	sp, #40	; 0x28
 8000470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000472:	f107 0314 	add.w	r3, r7, #20
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]
 8000480:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000482:	4b49      	ldr	r3, [pc, #292]	; (80005a8 <MX_GPIO_Init+0x13c>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a48      	ldr	r2, [pc, #288]	; (80005a8 <MX_GPIO_Init+0x13c>)
 8000488:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800048c:	6153      	str	r3, [r2, #20]
 800048e:	4b46      	ldr	r3, [pc, #280]	; (80005a8 <MX_GPIO_Init+0x13c>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000496:	613b      	str	r3, [r7, #16]
 8000498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049a:	4b43      	ldr	r3, [pc, #268]	; (80005a8 <MX_GPIO_Init+0x13c>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	4a42      	ldr	r2, [pc, #264]	; (80005a8 <MX_GPIO_Init+0x13c>)
 80004a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004a4:	6153      	str	r3, [r2, #20]
 80004a6:	4b40      	ldr	r3, [pc, #256]	; (80005a8 <MX_GPIO_Init+0x13c>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004b2:	4b3d      	ldr	r3, [pc, #244]	; (80005a8 <MX_GPIO_Init+0x13c>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a3c      	ldr	r2, [pc, #240]	; (80005a8 <MX_GPIO_Init+0x13c>)
 80004b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004bc:	6153      	str	r3, [r2, #20]
 80004be:	4b3a      	ldr	r3, [pc, #232]	; (80005a8 <MX_GPIO_Init+0x13c>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004c6:	60bb      	str	r3, [r7, #8]
 80004c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	4b37      	ldr	r3, [pc, #220]	; (80005a8 <MX_GPIO_Init+0x13c>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a36      	ldr	r2, [pc, #216]	; (80005a8 <MX_GPIO_Init+0x13c>)
 80004d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004d4:	6153      	str	r3, [r2, #20]
 80004d6:	4b34      	ldr	r3, [pc, #208]	; (80005a8 <MX_GPIO_Init+0x13c>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e2:	4b31      	ldr	r3, [pc, #196]	; (80005a8 <MX_GPIO_Init+0x13c>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a30      	ldr	r2, [pc, #192]	; (80005a8 <MX_GPIO_Init+0x13c>)
 80004e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004ec:	6153      	str	r3, [r2, #20]
 80004ee:	4b2e      	ldr	r3, [pc, #184]	; (80005a8 <MX_GPIO_Init+0x13c>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004fa:	2200      	movs	r2, #0
 80004fc:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000500:	482a      	ldr	r0, [pc, #168]	; (80005ac <MX_GPIO_Init+0x140>)
 8000502:	f000 fd0f 	bl	8000f24 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000506:	2337      	movs	r3, #55	; 0x37
 8000508:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800050a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800050e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	4619      	mov	r1, r3
 800051a:	4824      	ldr	r0, [pc, #144]	; (80005ac <MX_GPIO_Init+0x140>)
 800051c:	f000 fb88 	bl	8000c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000520:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000524:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000526:	2301      	movs	r3, #1
 8000528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052e:	2300      	movs	r3, #0
 8000530:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	4619      	mov	r1, r3
 8000538:	481c      	ldr	r0, [pc, #112]	; (80005ac <MX_GPIO_Init+0x140>)
 800053a:	f000 fb79 	bl	8000c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800053e:	2301      	movs	r3, #1
 8000540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000542:	2300      	movs	r3, #0
 8000544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	4619      	mov	r1, r3
 8000550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000554:	f000 fb6c 	bl	8000c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000558:	23e0      	movs	r3, #224	; 0xe0
 800055a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055c:	2302      	movs	r3, #2
 800055e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000564:	2303      	movs	r3, #3
 8000566:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000568:	2305      	movs	r3, #5
 800056a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	4619      	mov	r1, r3
 8000572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000576:	f000 fb5b 	bl	8000c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800057a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800057e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000580:	2302      	movs	r3, #2
 8000582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000588:	2303      	movs	r3, #3
 800058a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800058c:	230e      	movs	r3, #14
 800058e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	4619      	mov	r1, r3
 8000596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059a:	f000 fb49 	bl	8000c30 <HAL_GPIO_Init>

}
 800059e:	bf00      	nop
 80005a0:	3728      	adds	r7, #40	; 0x28
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000
 80005ac:	48001000 	.word	0x48001000

080005b0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  //Sensor initialization
	strcpy(ExternalTemperatureSensor.Sensor_name,"SHT31-ARP-B");
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <StartTask02+0x48>)
 80005ba:	4a10      	ldr	r2, [pc, #64]	; (80005fc <StartTask02+0x4c>)
 80005bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80005be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcpy(ExternalTemperatureSensor.Sensor_type,"Temperature");
 80005c2:	4a0f      	ldr	r2, [pc, #60]	; (8000600 <StartTask02+0x50>)
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <StartTask02+0x54>)
 80005c6:	4614      	mov	r4, r2
 80005c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80005ca:	6020      	str	r0, [r4, #0]
 80005cc:	6061      	str	r1, [r4, #4]
 80005ce:	60a2      	str	r2, [r4, #8]
	strcpy(ExternalTemperatureSensor.Main_gas,"....");
 80005d0:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <StartTask02+0x58>)
 80005d2:	4a0e      	ldr	r2, [pc, #56]	; (800060c <StartTask02+0x5c>)
 80005d4:	6810      	ldr	r0, [r2, #0]
 80005d6:	6018      	str	r0, [r3, #0]
 80005d8:	7912      	ldrb	r2, [r2, #4]
 80005da:	711a      	strb	r2, [r3, #4]
	ExternalTemperatureSensor.Response_time=1;
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <StartTask02+0x48>)
 80005de:	2201      	movs	r2, #1
 80005e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  /* Infinite loop */
  for(;;)
  {
	ExternalTemperatureSensor.Data=15.0;
 80005e2:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <StartTask02+0x48>)
 80005e4:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <StartTask02+0x60>)
 80005e6:	631a      	str	r2, [r3, #48]	; 0x30
    osDelay(ExternalTemperatureSensor.Response_time);
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <StartTask02+0x48>)
 80005ea:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 fc1b 	bl	8002e2a <osDelay>
	ExternalTemperatureSensor.Data=15.0;
 80005f4:	e7f5      	b.n	80005e2 <StartTask02+0x32>
 80005f6:	bf00      	nop
 80005f8:	200010c8 	.word	0x200010c8
 80005fc:	08004310 	.word	0x08004310
 8000600:	200010d3 	.word	0x200010d3
 8000604:	0800431c 	.word	0x0800431c
 8000608:	200010e1 	.word	0x200010e1
 800060c:	08004328 	.word	0x08004328
 8000610:	41700000 	.word	0x41700000

08000614 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000614:	b5b0      	push	{r4, r5, r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  //Sensor initialization
	strcpy(InternalTemperatureSensor.Sensor_name,"Internal");
 800061c:	4b13      	ldr	r3, [pc, #76]	; (800066c <StartTask03+0x58>)
 800061e:	4a14      	ldr	r2, [pc, #80]	; (8000670 <StartTask03+0x5c>)
 8000620:	ca07      	ldmia	r2, {r0, r1, r2}
 8000622:	c303      	stmia	r3!, {r0, r1}
 8000624:	701a      	strb	r2, [r3, #0]
	strcpy(InternalTemperatureSensor.Sensor_type,"Micro-controller temperature ");
 8000626:	4a13      	ldr	r2, [pc, #76]	; (8000674 <StartTask03+0x60>)
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <StartTask03+0x64>)
 800062a:	4615      	mov	r5, r2
 800062c:	461c      	mov	r4, r3
 800062e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000630:	6028      	str	r0, [r5, #0]
 8000632:	6069      	str	r1, [r5, #4]
 8000634:	60aa      	str	r2, [r5, #8]
 8000636:	60eb      	str	r3, [r5, #12]
 8000638:	cc07      	ldmia	r4!, {r0, r1, r2}
 800063a:	6128      	str	r0, [r5, #16]
 800063c:	6169      	str	r1, [r5, #20]
 800063e:	61aa      	str	r2, [r5, #24]
 8000640:	8823      	ldrh	r3, [r4, #0]
 8000642:	83ab      	strh	r3, [r5, #28]
	strcpy(InternalTemperatureSensor.Main_gas,"....");
 8000644:	4b0d      	ldr	r3, [pc, #52]	; (800067c <StartTask03+0x68>)
 8000646:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <StartTask03+0x6c>)
 8000648:	6810      	ldr	r0, [r2, #0]
 800064a:	6018      	str	r0, [r3, #0]
 800064c:	7912      	ldrb	r2, [r2, #4]
 800064e:	711a      	strb	r2, [r3, #4]
	InternalTemperatureSensor.Response_time=1;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <StartTask03+0x58>)
 8000652:	2201      	movs	r2, #1
 8000654:	85da      	strh	r2, [r3, #46]	; 0x2e
  /* Infinite loop */
  for(;;)
  {
	InternalTemperatureSensor.Data=15.0;
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <StartTask03+0x58>)
 8000658:	4a0a      	ldr	r2, [pc, #40]	; (8000684 <StartTask03+0x70>)
 800065a:	631a      	str	r2, [r3, #48]	; 0x30
    osDelay(InternalTemperatureSensor.Response_time);
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <StartTask03+0x58>)
 800065e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fbe1 	bl	8002e2a <osDelay>
	InternalTemperatureSensor.Data=15.0;
 8000668:	e7f5      	b.n	8000656 <StartTask03+0x42>
 800066a:	bf00      	nop
 800066c:	20001094 	.word	0x20001094
 8000670:	08004330 	.word	0x08004330
 8000674:	2000109f 	.word	0x2000109f
 8000678:	0800433c 	.word	0x0800433c
 800067c:	200010ad 	.word	0x200010ad
 8000680:	08004328 	.word	0x08004328
 8000684:	41700000 	.word	0x41700000

08000688 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  //Sensor initialization
	strcpy(HumiditySensor.Sensor_name,"SHT31-ARP-B");
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <StartTask04+0x48>)
 8000692:	4a10      	ldr	r2, [pc, #64]	; (80006d4 <StartTask04+0x4c>)
 8000694:	ca07      	ldmia	r2, {r0, r1, r2}
 8000696:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcpy(HumiditySensor.Sensor_type,"Humidity:");
 800069a:	4a0f      	ldr	r2, [pc, #60]	; (80006d8 <StartTask04+0x50>)
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <StartTask04+0x54>)
 800069e:	cb03      	ldmia	r3!, {r0, r1}
 80006a0:	6010      	str	r0, [r2, #0]
 80006a2:	6051      	str	r1, [r2, #4]
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	8113      	strh	r3, [r2, #8]
	strcpy(HumiditySensor.Main_gas,"....");
 80006a8:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <StartTask04+0x58>)
 80006aa:	4a0e      	ldr	r2, [pc, #56]	; (80006e4 <StartTask04+0x5c>)
 80006ac:	6810      	ldr	r0, [r2, #0]
 80006ae:	6018      	str	r0, [r3, #0]
 80006b0:	7912      	ldrb	r2, [r2, #4]
 80006b2:	711a      	strb	r2, [r3, #4]
	HumiditySensor.Response_time=1;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <StartTask04+0x48>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  /* Infinite loop */
  for(;;)
  {
	HumiditySensor.Data=15.0;
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <StartTask04+0x48>)
 80006bc:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <StartTask04+0x60>)
 80006be:	631a      	str	r2, [r3, #48]	; 0x30
    osDelay(HumiditySensor.Response_time);
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <StartTask04+0x48>)
 80006c2:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fbaf 	bl	8002e2a <osDelay>
	HumiditySensor.Data=15.0;
 80006cc:	e7f5      	b.n	80006ba <StartTask04+0x32>
 80006ce:	bf00      	nop
 80006d0:	20001054 	.word	0x20001054
 80006d4:	08004310 	.word	0x08004310
 80006d8:	2000105f 	.word	0x2000105f
 80006dc:	0800435c 	.word	0x0800435c
 80006e0:	2000106d 	.word	0x2000106d
 80006e4:	08004328 	.word	0x08004328
 80006e8:	41700000 	.word	0x41700000

080006ec <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 80006ec:	b5b0      	push	{r4, r5, r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  //Sensor initialization
	strcpy(PressureSensor.Sensor_name,"KP229-E2701-XTMA1");
 80006f4:	4a12      	ldr	r2, [pc, #72]	; (8000740 <StartTask05+0x54>)
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <StartTask05+0x58>)
 80006f8:	4614      	mov	r4, r2
 80006fa:	461d      	mov	r5, r3
 80006fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000700:	682b      	ldr	r3, [r5, #0]
 8000702:	8023      	strh	r3, [r4, #0]
	strcpy(PressureSensor.Sensor_type,"Absolute pressure");
 8000704:	4a10      	ldr	r2, [pc, #64]	; (8000748 <StartTask05+0x5c>)
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <StartTask05+0x60>)
 8000708:	4615      	mov	r5, r2
 800070a:	461c      	mov	r4, r3
 800070c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800070e:	6028      	str	r0, [r5, #0]
 8000710:	6069      	str	r1, [r5, #4]
 8000712:	60aa      	str	r2, [r5, #8]
 8000714:	60eb      	str	r3, [r5, #12]
 8000716:	8823      	ldrh	r3, [r4, #0]
 8000718:	822b      	strh	r3, [r5, #16]
	strcpy(PressureSensor.Main_gas,"....");
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <StartTask05+0x64>)
 800071c:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <StartTask05+0x68>)
 800071e:	6810      	ldr	r0, [r2, #0]
 8000720:	6018      	str	r0, [r3, #0]
 8000722:	7912      	ldrb	r2, [r2, #4]
 8000724:	711a      	strb	r2, [r3, #4]
	PressureSensor.Response_time=1;
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <StartTask05+0x54>)
 8000728:	2201      	movs	r2, #1
 800072a:	85da      	strh	r2, [r3, #46]	; 0x2e
  /* Infinite loop */
  for(;;)
  {
	PressureSensor.Data=15.0;
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <StartTask05+0x54>)
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <StartTask05+0x6c>)
 8000730:	631a      	str	r2, [r3, #48]	; 0x30
    osDelay(PressureSensor.Response_time);
 8000732:	4b03      	ldr	r3, [pc, #12]	; (8000740 <StartTask05+0x54>)
 8000734:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8000738:	4618      	mov	r0, r3
 800073a:	f002 fb76 	bl	8002e2a <osDelay>
	PressureSensor.Data=15.0;
 800073e:	e7f5      	b.n	800072c <StartTask05+0x40>
 8000740:	20000fd0 	.word	0x20000fd0
 8000744:	08004368 	.word	0x08004368
 8000748:	20000fdb 	.word	0x20000fdb
 800074c:	0800437c 	.word	0x0800437c
 8000750:	20000fe9 	.word	0x20000fe9
 8000754:	08004328 	.word	0x08004328
 8000758:	41700000 	.word	0x41700000

0800075c <StartTask01_I2C>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01_I2C */
void StartTask01_I2C(void const * argument)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000764:	2001      	movs	r0, #1
 8000766:	f002 fb60 	bl	8002e2a <osDelay>
 800076a:	e7fb      	b.n	8000764 <StartTask01_I2C+0x8>

0800076c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d101      	bne.n	8000782 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800077e:	f000 f955 	bl	8000a2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40001000 	.word	0x40001000

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	e7fe      	b.n	8000798 <Error_Handler+0x8>
	...

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <HAL_MspInit+0x4c>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	4a10      	ldr	r2, [pc, #64]	; (80007e8 <HAL_MspInit+0x4c>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6193      	str	r3, [r2, #24]
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <HAL_MspInit+0x4c>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <HAL_MspInit+0x4c>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <HAL_MspInit+0x4c>)
 80007c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c4:	61d3      	str	r3, [r2, #28]
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <HAL_MspInit+0x4c>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	210f      	movs	r1, #15
 80007d6:	f06f 0001 	mvn.w	r0, #1
 80007da:	f000 f9ff 	bl	8000bdc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000

080007ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a1b      	ldr	r2, [pc, #108]	; (8000878 <HAL_I2C_MspInit+0x8c>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d12f      	bne.n	800086e <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b1b      	ldr	r3, [pc, #108]	; (800087c <HAL_I2C_MspInit+0x90>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	4a1a      	ldr	r2, [pc, #104]	; (800087c <HAL_I2C_MspInit+0x90>)
 8000814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000818:	6153      	str	r3, [r2, #20]
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <HAL_I2C_MspInit+0x90>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000826:	23c0      	movs	r3, #192	; 0xc0
 8000828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800082a:	2312      	movs	r3, #18
 800082c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800082e:	2301      	movs	r3, #1
 8000830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000832:	2303      	movs	r3, #3
 8000834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000836:	2304      	movs	r3, #4
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	480f      	ldr	r0, [pc, #60]	; (8000880 <HAL_I2C_MspInit+0x94>)
 8000842:	f000 f9f5 	bl	8000c30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <HAL_I2C_MspInit+0x90>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	4a0c      	ldr	r2, [pc, #48]	; (800087c <HAL_I2C_MspInit+0x90>)
 800084c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000850:	61d3      	str	r3, [r2, #28]
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <HAL_I2C_MspInit+0x90>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2105      	movs	r1, #5
 8000862:	201f      	movs	r0, #31
 8000864:	f000 f9ba 	bl	8000bdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000868:	201f      	movs	r0, #31
 800086a:	f000 f9d3 	bl	8000c14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800086e:	bf00      	nop
 8000870:	3728      	adds	r7, #40	; 0x28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40005400 	.word	0x40005400
 800087c:	40021000 	.word	0x40021000
 8000880:	48000400 	.word	0x48000400

08000884 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	; 0x30
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000894:	2200      	movs	r2, #0
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	2036      	movs	r0, #54	; 0x36
 800089a:	f000 f99f 	bl	8000bdc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800089e:	2036      	movs	r0, #54	; 0x36
 80008a0:	f000 f9b8 	bl	8000c14 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <HAL_InitTick+0xa0>)
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	4a1e      	ldr	r2, [pc, #120]	; (8000924 <HAL_InitTick+0xa0>)
 80008aa:	f043 0310 	orr.w	r3, r3, #16
 80008ae:	61d3      	str	r3, [r2, #28]
 80008b0:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <HAL_InitTick+0xa0>)
 80008b2:	69db      	ldr	r3, [r3, #28]
 80008b4:	f003 0310 	and.w	r3, r3, #16
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008bc:	f107 0210 	add.w	r2, r7, #16
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4611      	mov	r1, r2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 fda0 	bl	800240c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80008cc:	f001 fd7c 	bl	80023c8 <HAL_RCC_GetPCLK1Freq>
 80008d0:	4603      	mov	r3, r0
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d8:	4a13      	ldr	r2, [pc, #76]	; (8000928 <HAL_InitTick+0xa4>)
 80008da:	fba2 2303 	umull	r2, r3, r2, r3
 80008de:	0c9b      	lsrs	r3, r3, #18
 80008e0:	3b01      	subs	r3, #1
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <HAL_InitTick+0xa8>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <HAL_InitTick+0xac>)
 80008e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <HAL_InitTick+0xa8>)
 80008ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008f0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <HAL_InitTick+0xa8>)
 80008f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <HAL_InitTick+0xa8>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <HAL_InitTick+0xa8>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000904:	4809      	ldr	r0, [pc, #36]	; (800092c <HAL_InitTick+0xa8>)
 8000906:	f001 ff63 	bl	80027d0 <HAL_TIM_Base_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d104      	bne.n	800091a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000910:	4806      	ldr	r0, [pc, #24]	; (800092c <HAL_InitTick+0xa8>)
 8000912:	f001 ffbf 	bl	8002894 <HAL_TIM_Base_Start_IT>
 8000916:	4603      	mov	r3, r0
 8000918:	e000      	b.n	800091c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
}
 800091c:	4618      	mov	r0, r3
 800091e:	3730      	adds	r7, #48	; 0x30
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40021000 	.word	0x40021000
 8000928:	431bde83 	.word	0x431bde83
 800092c:	200010fc 	.word	0x200010fc
 8000930:	40001000 	.word	0x40001000

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <NMI_Handler+0x4>

0800093a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <MemManage_Handler+0x4>

08000946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <UsageFault_Handler+0x4>

08000952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <I2C1_EV_IRQHandler+0x10>)
 8000966:	f000 fb84 	bl	8001072 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20001004 	.word	0x20001004

08000974 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <TIM6_DAC_IRQHandler+0x10>)
 800097a:	f001 fff5 	bl	8002968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200010fc 	.word	0x200010fc

08000988 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <SystemInit+0x20>)
 800098e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <SystemInit+0x20>)
 8000994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009e4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b0:	480d      	ldr	r0, [pc, #52]	; (80009e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009b2:	490e      	ldr	r1, [pc, #56]	; (80009ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b4:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <LoopForever+0xe>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0b      	ldr	r2, [pc, #44]	; (80009f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c8:	4c0b      	ldr	r4, [pc, #44]	; (80009f8 <LoopForever+0x16>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009d6:	f7ff ffd7 	bl	8000988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009da:	f003 fbff 	bl	80041dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009de:	f7ff fc11 	bl	8000204 <main>

080009e2 <LoopForever>:

LoopForever:
    b LoopForever
 80009e2:	e7fe      	b.n	80009e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009e4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80009e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009f0:	080043d8 	.word	0x080043d8
  ldr r2, =_sbss
 80009f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009f8:	2000114c 	.word	0x2000114c

080009fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009fc:	e7fe      	b.n	80009fc <ADC1_2_IRQHandler>
	...

08000a00 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <HAL_Init+0x28>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <HAL_Init+0x28>)
 8000a0a:	f043 0310 	orr.w	r3, r3, #16
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a10:	2003      	movs	r0, #3
 8000a12:	f000 f8d8 	bl	8000bc6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a16:	200f      	movs	r0, #15
 8000a18:	f7ff ff34 	bl	8000884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a1c:	f7ff febe 	bl	800079c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40022000 	.word	0x40022000

08000a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_IncTick+0x20>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_IncTick+0x24>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <HAL_IncTick+0x24>)
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	20001148 	.word	0x20001148

08000a54 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_GetTick+0x14>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20001148 	.word	0x20001148

08000a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9e:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	60d3      	str	r3, [r2, #12]
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <__NVIC_GetPriorityGrouping+0x18>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	0a1b      	lsrs	r3, r3, #8
 8000abe:	f003 0307 	and.w	r3, r3, #7
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	db0b      	blt.n	8000afa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	f003 021f 	and.w	r2, r3, #31
 8000ae8:	4907      	ldr	r1, [pc, #28]	; (8000b08 <__NVIC_EnableIRQ+0x38>)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	095b      	lsrs	r3, r3, #5
 8000af0:	2001      	movs	r0, #1
 8000af2:	fa00 f202 	lsl.w	r2, r0, r2
 8000af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000e100 	.word	0xe000e100

08000b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	6039      	str	r1, [r7, #0]
 8000b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	db0a      	blt.n	8000b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	490c      	ldr	r1, [pc, #48]	; (8000b58 <__NVIC_SetPriority+0x4c>)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	0112      	lsls	r2, r2, #4
 8000b2c:	b2d2      	uxtb	r2, r2
 8000b2e:	440b      	add	r3, r1
 8000b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b34:	e00a      	b.n	8000b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4908      	ldr	r1, [pc, #32]	; (8000b5c <__NVIC_SetPriority+0x50>)
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	f003 030f 	and.w	r3, r3, #15
 8000b42:	3b04      	subs	r3, #4
 8000b44:	0112      	lsls	r2, r2, #4
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	440b      	add	r3, r1
 8000b4a:	761a      	strb	r2, [r3, #24]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000e100 	.word	0xe000e100
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b089      	sub	sp, #36	; 0x24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	f1c3 0307 	rsb	r3, r3, #7
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	bf28      	it	cs
 8000b7e:	2304      	movcs	r3, #4
 8000b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3304      	adds	r3, #4
 8000b86:	2b06      	cmp	r3, #6
 8000b88:	d902      	bls.n	8000b90 <NVIC_EncodePriority+0x30>
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3b03      	subs	r3, #3
 8000b8e:	e000      	b.n	8000b92 <NVIC_EncodePriority+0x32>
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	f04f 32ff 	mov.w	r2, #4294967295
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43da      	mvns	r2, r3
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	43d9      	mvns	r1, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	4313      	orrs	r3, r2
         );
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3724      	adds	r7, #36	; 0x24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ff4c 	bl	8000a6c <__NVIC_SetPriorityGrouping>
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
 8000be8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bee:	f7ff ff61 	bl	8000ab4 <__NVIC_GetPriorityGrouping>
 8000bf2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	68b9      	ldr	r1, [r7, #8]
 8000bf8:	6978      	ldr	r0, [r7, #20]
 8000bfa:	f7ff ffb1 	bl	8000b60 <NVIC_EncodePriority>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff80 	bl	8000b0c <__NVIC_SetPriority>
}
 8000c0c:	bf00      	nop
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ff54 	bl	8000ad0 <__NVIC_EnableIRQ>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c3e:	e154      	b.n	8000eea <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	2101      	movs	r1, #1
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f000 8146 	beq.w	8000ee4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f003 0303 	and.w	r3, r3, #3
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d005      	beq.n	8000c70 <HAL_GPIO_Init+0x40>
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 0303 	and.w	r3, r3, #3
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d130      	bne.n	8000cd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	68da      	ldr	r2, [r3, #12]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	091b      	lsrs	r3, r3, #4
 8000cbc:	f003 0201 	and.w	r2, r3, #1
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	2b03      	cmp	r3, #3
 8000cdc:	d017      	beq.n	8000d0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	2203      	movs	r2, #3
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	689a      	ldr	r2, [r3, #8]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 0303 	and.w	r3, r3, #3
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d123      	bne.n	8000d62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	08da      	lsrs	r2, r3, #3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3208      	adds	r2, #8
 8000d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	220f      	movs	r2, #15
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	691a      	ldr	r2, [r3, #16]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	f003 0307 	and.w	r3, r3, #7
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	08da      	lsrs	r2, r3, #3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3208      	adds	r2, #8
 8000d5c:	6939      	ldr	r1, [r7, #16]
 8000d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 0203 	and.w	r2, r3, #3
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f000 80a0 	beq.w	8000ee4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da4:	4b58      	ldr	r3, [pc, #352]	; (8000f08 <HAL_GPIO_Init+0x2d8>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a57      	ldr	r2, [pc, #348]	; (8000f08 <HAL_GPIO_Init+0x2d8>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b55      	ldr	r3, [pc, #340]	; (8000f08 <HAL_GPIO_Init+0x2d8>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dbc:	4a53      	ldr	r2, [pc, #332]	; (8000f0c <HAL_GPIO_Init+0x2dc>)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	f003 0303 	and.w	r3, r3, #3
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000de6:	d019      	beq.n	8000e1c <HAL_GPIO_Init+0x1ec>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a49      	ldr	r2, [pc, #292]	; (8000f10 <HAL_GPIO_Init+0x2e0>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d013      	beq.n	8000e18 <HAL_GPIO_Init+0x1e8>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a48      	ldr	r2, [pc, #288]	; (8000f14 <HAL_GPIO_Init+0x2e4>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d00d      	beq.n	8000e14 <HAL_GPIO_Init+0x1e4>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a47      	ldr	r2, [pc, #284]	; (8000f18 <HAL_GPIO_Init+0x2e8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d007      	beq.n	8000e10 <HAL_GPIO_Init+0x1e0>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a46      	ldr	r2, [pc, #280]	; (8000f1c <HAL_GPIO_Init+0x2ec>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d101      	bne.n	8000e0c <HAL_GPIO_Init+0x1dc>
 8000e08:	2304      	movs	r3, #4
 8000e0a:	e008      	b.n	8000e1e <HAL_GPIO_Init+0x1ee>
 8000e0c:	2305      	movs	r3, #5
 8000e0e:	e006      	b.n	8000e1e <HAL_GPIO_Init+0x1ee>
 8000e10:	2303      	movs	r3, #3
 8000e12:	e004      	b.n	8000e1e <HAL_GPIO_Init+0x1ee>
 8000e14:	2302      	movs	r3, #2
 8000e16:	e002      	b.n	8000e1e <HAL_GPIO_Init+0x1ee>
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e000      	b.n	8000e1e <HAL_GPIO_Init+0x1ee>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	f002 0203 	and.w	r2, r2, #3
 8000e24:	0092      	lsls	r2, r2, #2
 8000e26:	4093      	lsls	r3, r2
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e2e:	4937      	ldr	r1, [pc, #220]	; (8000f0c <HAL_GPIO_Init+0x2dc>)
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	089b      	lsrs	r3, r3, #2
 8000e34:	3302      	adds	r3, #2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e3c:	4b38      	ldr	r3, [pc, #224]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e60:	4a2f      	ldr	r2, [pc, #188]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e66:	4b2e      	ldr	r3, [pc, #184]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e8a:	4a25      	ldr	r2, [pc, #148]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e90:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000eb4:	4a1a      	ldr	r2, [pc, #104]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ede:	4a10      	ldr	r2, [pc, #64]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f47f aea3 	bne.w	8000c40 <HAL_GPIO_Init+0x10>
  }
}
 8000efa:	bf00      	nop
 8000efc:	bf00      	nop
 8000efe:	371c      	adds	r7, #28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40010000 	.word	0x40010000
 8000f10:	48000400 	.word	0x48000400
 8000f14:	48000800 	.word	0x48000800
 8000f18:	48000c00 	.word	0x48000c00
 8000f1c:	48001000 	.word	0x48001000
 8000f20:	40010400 	.word	0x40010400

08000f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	807b      	strh	r3, [r7, #2]
 8000f30:	4613      	mov	r3, r2
 8000f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f34:	787b      	ldrb	r3, [r7, #1]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f3a:	887a      	ldrh	r2, [r7, #2]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f40:	e002      	b.n	8000f48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f42:	887a      	ldrh	r2, [r7, #2]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e081      	b.n	800106a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d106      	bne.n	8000f80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff fc36 	bl	80007ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2224      	movs	r2, #36	; 0x24
 8000f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 0201 	bic.w	r2, r2, #1
 8000f96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000fa4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d107      	bne.n	8000fce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	e006      	b.n	8000fdc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000fda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d104      	bne.n	8000fee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	6812      	ldr	r2, [r2, #0]
 8000ff8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001000:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001010:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	691a      	ldr	r2, [r3, #16]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	430a      	orrs	r2, r1
 800102a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69d9      	ldr	r1, [r3, #28]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a1a      	ldr	r2, [r3, #32]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	430a      	orrs	r2, r1
 800103a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0201 	orr.w	r2, r2, #1
 800104a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2220      	movs	r2, #32
 8001056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b084      	sub	sp, #16
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	68f9      	ldr	r1, [r7, #12]
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	4798      	blx	r3
  }
}
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b20      	cmp	r3, #32
 80010ba:	d138      	bne.n	800112e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d101      	bne.n	80010ca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80010c6:	2302      	movs	r3, #2
 80010c8:	e032      	b.n	8001130 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2224      	movs	r2, #36	; 0x24
 80010d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0201 	bic.w	r2, r2, #1
 80010e8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010f8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6819      	ldr	r1, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	430a      	orrs	r2, r1
 8001108:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f042 0201 	orr.w	r2, r2, #1
 8001118:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2220      	movs	r2, #32
 800111e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800112e:	2302      	movs	r3, #2
  }
}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b20      	cmp	r3, #32
 8001150:	d139      	bne.n	80011c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001158:	2b01      	cmp	r3, #1
 800115a:	d101      	bne.n	8001160 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800115c:	2302      	movs	r3, #2
 800115e:	e033      	b.n	80011c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2224      	movs	r2, #36	; 0x24
 800116c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0201 	bic.w	r2, r2, #1
 800117e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800118e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	4313      	orrs	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f042 0201 	orr.w	r2, r2, #1
 80011b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2220      	movs	r2, #32
 80011b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e000      	b.n	80011c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80011c6:	2302      	movs	r3, #2
  }
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80011da:	af00      	add	r7, sp, #0
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	f000 bef4 	b.w	8001fd6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 816a 	beq.w	80014d2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011fe:	4bb3      	ldr	r3, [pc, #716]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	2b04      	cmp	r3, #4
 8001208:	d00c      	beq.n	8001224 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800120a:	4bb0      	ldr	r3, [pc, #704]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 030c 	and.w	r3, r3, #12
 8001212:	2b08      	cmp	r3, #8
 8001214:	d159      	bne.n	80012ca <HAL_RCC_OscConfig+0xf6>
 8001216:	4bad      	ldr	r3, [pc, #692]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001222:	d152      	bne.n	80012ca <HAL_RCC_OscConfig+0xf6>
 8001224:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001228:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001230:	fa93 f3a3 	rbit	r3, r3
 8001234:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001238:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123c:	fab3 f383 	clz	r3, r3
 8001240:	b2db      	uxtb	r3, r3
 8001242:	095b      	lsrs	r3, r3, #5
 8001244:	b2db      	uxtb	r3, r3
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b01      	cmp	r3, #1
 800124e:	d102      	bne.n	8001256 <HAL_RCC_OscConfig+0x82>
 8001250:	4b9e      	ldr	r3, [pc, #632]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	e015      	b.n	8001282 <HAL_RCC_OscConfig+0xae>
 8001256:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800125a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001262:	fa93 f3a3 	rbit	r3, r3
 8001266:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800126a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800126e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001272:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001276:	fa93 f3a3 	rbit	r3, r3
 800127a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800127e:	4b93      	ldr	r3, [pc, #588]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001286:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800128a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800128e:	fa92 f2a2 	rbit	r2, r2
 8001292:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001296:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800129a:	fab2 f282 	clz	r2, r2
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	f042 0220 	orr.w	r2, r2, #32
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	f002 021f 	and.w	r2, r2, #31
 80012aa:	2101      	movs	r1, #1
 80012ac:	fa01 f202 	lsl.w	r2, r1, r2
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 810c 	beq.w	80014d0 <HAL_RCC_OscConfig+0x2fc>
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f040 8106 	bne.w	80014d0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	f000 be86 	b.w	8001fd6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d4:	d106      	bne.n	80012e4 <HAL_RCC_OscConfig+0x110>
 80012d6:	4b7d      	ldr	r3, [pc, #500]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a7c      	ldr	r2, [pc, #496]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e030      	b.n	8001346 <HAL_RCC_OscConfig+0x172>
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10c      	bne.n	8001308 <HAL_RCC_OscConfig+0x134>
 80012ee:	4b77      	ldr	r3, [pc, #476]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a76      	ldr	r2, [pc, #472]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 80012f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	4b74      	ldr	r3, [pc, #464]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a73      	ldr	r2, [pc, #460]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 8001300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	e01e      	b.n	8001346 <HAL_RCC_OscConfig+0x172>
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001312:	d10c      	bne.n	800132e <HAL_RCC_OscConfig+0x15a>
 8001314:	4b6d      	ldr	r3, [pc, #436]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a6c      	ldr	r2, [pc, #432]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 800131a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b6a      	ldr	r3, [pc, #424]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a69      	ldr	r2, [pc, #420]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 8001326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	e00b      	b.n	8001346 <HAL_RCC_OscConfig+0x172>
 800132e:	4b67      	ldr	r3, [pc, #412]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a66      	ldr	r2, [pc, #408]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 8001334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	4b64      	ldr	r3, [pc, #400]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a63      	ldr	r2, [pc, #396]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 8001340:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001344:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001346:	4b61      	ldr	r3, [pc, #388]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 8001348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134a:	f023 020f 	bic.w	r2, r3, #15
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	495d      	ldr	r1, [pc, #372]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 8001356:	4313      	orrs	r3, r2
 8001358:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d059      	beq.n	8001418 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fb76 	bl	8000a54 <HAL_GetTick>
 8001368:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136c:	e00a      	b.n	8001384 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800136e:	f7ff fb71 	bl	8000a54 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	; 0x64
 800137c:	d902      	bls.n	8001384 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	f000 be29 	b.w	8001fd6 <HAL_RCC_OscConfig+0xe02>
 8001384:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001388:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001390:	fa93 f3a3 	rbit	r3, r3
 8001394:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001398:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139c:	fab3 f383 	clz	r3, r3
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	095b      	lsrs	r3, r3, #5
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d102      	bne.n	80013b6 <HAL_RCC_OscConfig+0x1e2>
 80013b0:	4b46      	ldr	r3, [pc, #280]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	e015      	b.n	80013e2 <HAL_RCC_OscConfig+0x20e>
 80013b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ba:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013be:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80013c2:	fa93 f3a3 	rbit	r3, r3
 80013c6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80013ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ce:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80013d2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80013d6:	fa93 f3a3 	rbit	r3, r3
 80013da:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80013de:	4b3b      	ldr	r3, [pc, #236]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013e6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80013ea:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80013ee:	fa92 f2a2 	rbit	r2, r2
 80013f2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80013f6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80013fa:	fab2 f282 	clz	r2, r2
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	f042 0220 	orr.w	r2, r2, #32
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	f002 021f 	and.w	r2, r2, #31
 800140a:	2101      	movs	r1, #1
 800140c:	fa01 f202 	lsl.w	r2, r1, r2
 8001410:	4013      	ands	r3, r2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0ab      	beq.n	800136e <HAL_RCC_OscConfig+0x19a>
 8001416:	e05c      	b.n	80014d2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fb1c 	bl	8000a54 <HAL_GetTick>
 800141c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001420:	e00a      	b.n	8001438 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001422:	f7ff fb17 	bl	8000a54 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	; 0x64
 8001430:	d902      	bls.n	8001438 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	f000 bdcf 	b.w	8001fd6 <HAL_RCC_OscConfig+0xe02>
 8001438:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800143c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001440:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001444:	fa93 f3a3 	rbit	r3, r3
 8001448:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800144c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001450:	fab3 f383 	clz	r3, r3
 8001454:	b2db      	uxtb	r3, r3
 8001456:	095b      	lsrs	r3, r3, #5
 8001458:	b2db      	uxtb	r3, r3
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b01      	cmp	r3, #1
 8001462:	d102      	bne.n	800146a <HAL_RCC_OscConfig+0x296>
 8001464:	4b19      	ldr	r3, [pc, #100]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	e015      	b.n	8001496 <HAL_RCC_OscConfig+0x2c2>
 800146a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800146e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001472:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001476:	fa93 f3a3 	rbit	r3, r3
 800147a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800147e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001482:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001486:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800148a:	fa93 f3a3 	rbit	r3, r3
 800148e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_RCC_OscConfig+0x2f8>)
 8001494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001496:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800149a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800149e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80014a2:	fa92 f2a2 	rbit	r2, r2
 80014a6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80014aa:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80014ae:	fab2 f282 	clz	r2, r2
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	f042 0220 	orr.w	r2, r2, #32
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	f002 021f 	and.w	r2, r2, #31
 80014be:	2101      	movs	r1, #1
 80014c0:	fa01 f202 	lsl.w	r2, r1, r2
 80014c4:	4013      	ands	r3, r2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1ab      	bne.n	8001422 <HAL_RCC_OscConfig+0x24e>
 80014ca:	e002      	b.n	80014d2 <HAL_RCC_OscConfig+0x2fe>
 80014cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 816f 	beq.w	80017c0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014e2:	4bd0      	ldr	r3, [pc, #832]	; (8001824 <HAL_RCC_OscConfig+0x650>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 030c 	and.w	r3, r3, #12
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00b      	beq.n	8001506 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014ee:	4bcd      	ldr	r3, [pc, #820]	; (8001824 <HAL_RCC_OscConfig+0x650>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 030c 	and.w	r3, r3, #12
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d16c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x400>
 80014fa:	4bca      	ldr	r3, [pc, #808]	; (8001824 <HAL_RCC_OscConfig+0x650>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d166      	bne.n	80015d4 <HAL_RCC_OscConfig+0x400>
 8001506:	2302      	movs	r3, #2
 8001508:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001510:	fa93 f3a3 	rbit	r3, r3
 8001514:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001518:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151c:	fab3 f383 	clz	r3, r3
 8001520:	b2db      	uxtb	r3, r3
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	b2db      	uxtb	r3, r3
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b01      	cmp	r3, #1
 800152e:	d102      	bne.n	8001536 <HAL_RCC_OscConfig+0x362>
 8001530:	4bbc      	ldr	r3, [pc, #752]	; (8001824 <HAL_RCC_OscConfig+0x650>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	e013      	b.n	800155e <HAL_RCC_OscConfig+0x38a>
 8001536:	2302      	movs	r3, #2
 8001538:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001540:	fa93 f3a3 	rbit	r3, r3
 8001544:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001548:	2302      	movs	r3, #2
 800154a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800154e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001552:	fa93 f3a3 	rbit	r3, r3
 8001556:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800155a:	4bb2      	ldr	r3, [pc, #712]	; (8001824 <HAL_RCC_OscConfig+0x650>)
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	2202      	movs	r2, #2
 8001560:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001564:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001568:	fa92 f2a2 	rbit	r2, r2
 800156c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001570:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001574:	fab2 f282 	clz	r2, r2
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	f042 0220 	orr.w	r2, r2, #32
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	f002 021f 	and.w	r2, r2, #31
 8001584:	2101      	movs	r1, #1
 8001586:	fa01 f202 	lsl.w	r2, r1, r2
 800158a:	4013      	ands	r3, r2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d007      	beq.n	80015a0 <HAL_RCC_OscConfig+0x3cc>
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d002      	beq.n	80015a0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	f000 bd1b 	b.w	8001fd6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4ba0      	ldr	r3, [pc, #640]	; (8001824 <HAL_RCC_OscConfig+0x650>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	21f8      	movs	r1, #248	; 0xf8
 80015b0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80015b8:	fa91 f1a1 	rbit	r1, r1
 80015bc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80015c0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80015c4:	fab1 f181 	clz	r1, r1
 80015c8:	b2c9      	uxtb	r1, r1
 80015ca:	408b      	lsls	r3, r1
 80015cc:	4995      	ldr	r1, [pc, #596]	; (8001824 <HAL_RCC_OscConfig+0x650>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d2:	e0f5      	b.n	80017c0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 8085 	beq.w	80016ea <HAL_RCC_OscConfig+0x516>
 80015e0:	2301      	movs	r3, #1
 80015e2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80015ea:	fa93 f3a3 	rbit	r3, r3
 80015ee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80015f2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f6:	fab3 f383 	clz	r3, r3
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001600:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	461a      	mov	r2, r3
 8001608:	2301      	movs	r3, #1
 800160a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fa22 	bl	8000a54 <HAL_GetTick>
 8001610:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001614:	e00a      	b.n	800162c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001616:	f7ff fa1d 	bl	8000a54 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d902      	bls.n	800162c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	f000 bcd5 	b.w	8001fd6 <HAL_RCC_OscConfig+0xe02>
 800162c:	2302      	movs	r3, #2
 800162e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001632:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001636:	fa93 f3a3 	rbit	r3, r3
 800163a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800163e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001642:	fab3 f383 	clz	r3, r3
 8001646:	b2db      	uxtb	r3, r3
 8001648:	095b      	lsrs	r3, r3, #5
 800164a:	b2db      	uxtb	r3, r3
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b01      	cmp	r3, #1
 8001654:	d102      	bne.n	800165c <HAL_RCC_OscConfig+0x488>
 8001656:	4b73      	ldr	r3, [pc, #460]	; (8001824 <HAL_RCC_OscConfig+0x650>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	e013      	b.n	8001684 <HAL_RCC_OscConfig+0x4b0>
 800165c:	2302      	movs	r3, #2
 800165e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001662:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001666:	fa93 f3a3 	rbit	r3, r3
 800166a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800166e:	2302      	movs	r3, #2
 8001670:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001674:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001678:	fa93 f3a3 	rbit	r3, r3
 800167c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001680:	4b68      	ldr	r3, [pc, #416]	; (8001824 <HAL_RCC_OscConfig+0x650>)
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	2202      	movs	r2, #2
 8001686:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800168a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800168e:	fa92 f2a2 	rbit	r2, r2
 8001692:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001696:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800169a:	fab2 f282 	clz	r2, r2
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	f042 0220 	orr.w	r2, r2, #32
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	f002 021f 	and.w	r2, r2, #31
 80016aa:	2101      	movs	r1, #1
 80016ac:	fa01 f202 	lsl.w	r2, r1, r2
 80016b0:	4013      	ands	r3, r2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0af      	beq.n	8001616 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b6:	4b5b      	ldr	r3, [pc, #364]	; (8001824 <HAL_RCC_OscConfig+0x650>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	21f8      	movs	r1, #248	; 0xf8
 80016c6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ca:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80016ce:	fa91 f1a1 	rbit	r1, r1
 80016d2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80016d6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80016da:	fab1 f181 	clz	r1, r1
 80016de:	b2c9      	uxtb	r1, r1
 80016e0:	408b      	lsls	r3, r1
 80016e2:	4950      	ldr	r1, [pc, #320]	; (8001824 <HAL_RCC_OscConfig+0x650>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]
 80016e8:	e06a      	b.n	80017c0 <HAL_RCC_OscConfig+0x5ec>
 80016ea:	2301      	movs	r3, #1
 80016ec:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80016f4:	fa93 f3a3 	rbit	r3, r3
 80016f8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80016fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001700:	fab3 f383 	clz	r3, r3
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800170a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	461a      	mov	r2, r3
 8001712:	2300      	movs	r3, #0
 8001714:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001716:	f7ff f99d 	bl	8000a54 <HAL_GetTick>
 800171a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171e:	e00a      	b.n	8001736 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001720:	f7ff f998 	bl	8000a54 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d902      	bls.n	8001736 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	f000 bc50 	b.w	8001fd6 <HAL_RCC_OscConfig+0xe02>
 8001736:	2302      	movs	r3, #2
 8001738:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001740:	fa93 f3a3 	rbit	r3, r3
 8001744:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001748:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174c:	fab3 f383 	clz	r3, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	095b      	lsrs	r3, r3, #5
 8001754:	b2db      	uxtb	r3, r3
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b01      	cmp	r3, #1
 800175e:	d102      	bne.n	8001766 <HAL_RCC_OscConfig+0x592>
 8001760:	4b30      	ldr	r3, [pc, #192]	; (8001824 <HAL_RCC_OscConfig+0x650>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	e013      	b.n	800178e <HAL_RCC_OscConfig+0x5ba>
 8001766:	2302      	movs	r3, #2
 8001768:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001770:	fa93 f3a3 	rbit	r3, r3
 8001774:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001778:	2302      	movs	r3, #2
 800177a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800177e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001782:	fa93 f3a3 	rbit	r3, r3
 8001786:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800178a:	4b26      	ldr	r3, [pc, #152]	; (8001824 <HAL_RCC_OscConfig+0x650>)
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	2202      	movs	r2, #2
 8001790:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001794:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001798:	fa92 f2a2 	rbit	r2, r2
 800179c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80017a0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80017a4:	fab2 f282 	clz	r2, r2
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	f042 0220 	orr.w	r2, r2, #32
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	f002 021f 	and.w	r2, r2, #31
 80017b4:	2101      	movs	r1, #1
 80017b6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1af      	bne.n	8001720 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 80da 	beq.w	8001984 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d069      	beq.n	80018ae <HAL_RCC_OscConfig+0x6da>
 80017da:	2301      	movs	r3, #1
 80017dc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017e4:	fa93 f3a3 	rbit	r3, r3
 80017e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80017ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f0:	fab3 f383 	clz	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_RCC_OscConfig+0x654>)
 80017fa:	4413      	add	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	461a      	mov	r2, r3
 8001800:	2301      	movs	r3, #1
 8001802:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001804:	f7ff f926 	bl	8000a54 <HAL_GetTick>
 8001808:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180c:	e00e      	b.n	800182c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180e:	f7ff f921 	bl	8000a54 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d906      	bls.n	800182c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e3d9      	b.n	8001fd6 <HAL_RCC_OscConfig+0xe02>
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000
 8001828:	10908120 	.word	0x10908120
 800182c:	2302      	movs	r3, #2
 800182e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001836:	fa93 f3a3 	rbit	r3, r3
 800183a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800183e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001842:	2202      	movs	r2, #2
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	fa93 f2a3 	rbit	r2, r3
 8001850:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800185a:	2202      	movs	r2, #2
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	fa93 f2a3 	rbit	r2, r3
 8001868:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800186c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186e:	4ba5      	ldr	r3, [pc, #660]	; (8001b04 <HAL_RCC_OscConfig+0x930>)
 8001870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001872:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001876:	2102      	movs	r1, #2
 8001878:	6019      	str	r1, [r3, #0]
 800187a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	fa93 f1a3 	rbit	r1, r3
 8001884:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001888:	6019      	str	r1, [r3, #0]
  return result;
 800188a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	fab3 f383 	clz	r3, r3
 8001894:	b2db      	uxtb	r3, r3
 8001896:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800189a:	b2db      	uxtb	r3, r3
 800189c:	f003 031f 	and.w	r3, r3, #31
 80018a0:	2101      	movs	r1, #1
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0b0      	beq.n	800180e <HAL_RCC_OscConfig+0x63a>
 80018ac:	e06a      	b.n	8001984 <HAL_RCC_OscConfig+0x7b0>
 80018ae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80018b2:	2201      	movs	r2, #1
 80018b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	fa93 f2a3 	rbit	r2, r3
 80018c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018c4:	601a      	str	r2, [r3, #0]
  return result;
 80018c6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018ca:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018cc:	fab3 f383 	clz	r3, r3
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b8c      	ldr	r3, [pc, #560]	; (8001b08 <HAL_RCC_OscConfig+0x934>)
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	461a      	mov	r2, r3
 80018dc:	2300      	movs	r3, #0
 80018de:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e0:	f7ff f8b8 	bl	8000a54 <HAL_GetTick>
 80018e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e8:	e009      	b.n	80018fe <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ea:	f7ff f8b3 	bl	8000a54 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e36b      	b.n	8001fd6 <HAL_RCC_OscConfig+0xe02>
 80018fe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001902:	2202      	movs	r2, #2
 8001904:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	fa93 f2a3 	rbit	r2, r3
 8001910:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800191a:	2202      	movs	r2, #2
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	fa93 f2a3 	rbit	r2, r3
 8001928:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001932:	2202      	movs	r2, #2
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	fa93 f2a3 	rbit	r2, r3
 8001940:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001944:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001946:	4b6f      	ldr	r3, [pc, #444]	; (8001b04 <HAL_RCC_OscConfig+0x930>)
 8001948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800194a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800194e:	2102      	movs	r1, #2
 8001950:	6019      	str	r1, [r3, #0]
 8001952:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	fa93 f1a3 	rbit	r1, r3
 800195c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001960:	6019      	str	r1, [r3, #0]
  return result;
 8001962:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	fab3 f383 	clz	r3, r3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001972:	b2db      	uxtb	r3, r3
 8001974:	f003 031f 	and.w	r3, r3, #31
 8001978:	2101      	movs	r1, #1
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	4013      	ands	r3, r2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1b2      	bne.n	80018ea <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 8158 	beq.w	8001c44 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800199a:	4b5a      	ldr	r3, [pc, #360]	; (8001b04 <HAL_RCC_OscConfig+0x930>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d112      	bne.n	80019cc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	4b57      	ldr	r3, [pc, #348]	; (8001b04 <HAL_RCC_OscConfig+0x930>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	4a56      	ldr	r2, [pc, #344]	; (8001b04 <HAL_RCC_OscConfig+0x930>)
 80019ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b0:	61d3      	str	r3, [r2, #28]
 80019b2:	4b54      	ldr	r3, [pc, #336]	; (8001b04 <HAL_RCC_OscConfig+0x930>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80019ba:	f107 0308 	add.w	r3, r7, #8
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	f107 0308 	add.w	r3, r7, #8
 80019c4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80019c6:	2301      	movs	r3, #1
 80019c8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019cc:	4b4f      	ldr	r3, [pc, #316]	; (8001b0c <HAL_RCC_OscConfig+0x938>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d11a      	bne.n	8001a0e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019d8:	4b4c      	ldr	r3, [pc, #304]	; (8001b0c <HAL_RCC_OscConfig+0x938>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a4b      	ldr	r2, [pc, #300]	; (8001b0c <HAL_RCC_OscConfig+0x938>)
 80019de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019e4:	f7ff f836 	bl	8000a54 <HAL_GetTick>
 80019e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ec:	e009      	b.n	8001a02 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ee:	f7ff f831 	bl	8000a54 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b64      	cmp	r3, #100	; 0x64
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e2e9      	b.n	8001fd6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a02:	4b42      	ldr	r3, [pc, #264]	; (8001b0c <HAL_RCC_OscConfig+0x938>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0ef      	beq.n	80019ee <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d106      	bne.n	8001a26 <HAL_RCC_OscConfig+0x852>
 8001a18:	4b3a      	ldr	r3, [pc, #232]	; (8001b04 <HAL_RCC_OscConfig+0x930>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4a39      	ldr	r2, [pc, #228]	; (8001b04 <HAL_RCC_OscConfig+0x930>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6213      	str	r3, [r2, #32]
 8001a24:	e02f      	b.n	8001a86 <HAL_RCC_OscConfig+0x8b2>
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10c      	bne.n	8001a4a <HAL_RCC_OscConfig+0x876>
 8001a30:	4b34      	ldr	r3, [pc, #208]	; (8001b04 <HAL_RCC_OscConfig+0x930>)
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	4a33      	ldr	r2, [pc, #204]	; (8001b04 <HAL_RCC_OscConfig+0x930>)
 8001a36:	f023 0301 	bic.w	r3, r3, #1
 8001a3a:	6213      	str	r3, [r2, #32]
 8001a3c:	4b31      	ldr	r3, [pc, #196]	; (8001b04 <HAL_RCC_OscConfig+0x930>)
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	4a30      	ldr	r2, [pc, #192]	; (8001b04 <HAL_RCC_OscConfig+0x930>)
 8001a42:	f023 0304 	bic.w	r3, r3, #4
 8001a46:	6213      	str	r3, [r2, #32]
 8001a48:	e01d      	b.n	8001a86 <HAL_RCC_OscConfig+0x8b2>
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b05      	cmp	r3, #5
 8001a52:	d10c      	bne.n	8001a6e <HAL_RCC_OscConfig+0x89a>
 8001a54:	4b2b      	ldr	r3, [pc, #172]	; (8001b04 <HAL_RCC_OscConfig+0x930>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	4a2a      	ldr	r2, [pc, #168]	; (8001b04 <HAL_RCC_OscConfig+0x930>)
 8001a5a:	f043 0304 	orr.w	r3, r3, #4
 8001a5e:	6213      	str	r3, [r2, #32]
 8001a60:	4b28      	ldr	r3, [pc, #160]	; (8001b04 <HAL_RCC_OscConfig+0x930>)
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	4a27      	ldr	r2, [pc, #156]	; (8001b04 <HAL_RCC_OscConfig+0x930>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6213      	str	r3, [r2, #32]
 8001a6c:	e00b      	b.n	8001a86 <HAL_RCC_OscConfig+0x8b2>
 8001a6e:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <HAL_RCC_OscConfig+0x930>)
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	4a24      	ldr	r2, [pc, #144]	; (8001b04 <HAL_RCC_OscConfig+0x930>)
 8001a74:	f023 0301 	bic.w	r3, r3, #1
 8001a78:	6213      	str	r3, [r2, #32]
 8001a7a:	4b22      	ldr	r3, [pc, #136]	; (8001b04 <HAL_RCC_OscConfig+0x930>)
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	4a21      	ldr	r2, [pc, #132]	; (8001b04 <HAL_RCC_OscConfig+0x930>)
 8001a80:	f023 0304 	bic.w	r3, r3, #4
 8001a84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d06b      	beq.n	8001b68 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a90:	f7fe ffe0 	bl	8000a54 <HAL_GetTick>
 8001a94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a98:	e00b      	b.n	8001ab2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a9a:	f7fe ffdb 	bl	8000a54 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e291      	b.n	8001fd6 <HAL_RCC_OscConfig+0xe02>
 8001ab2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	fa93 f2a3 	rbit	r2, r3
 8001ac4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ace:	2202      	movs	r2, #2
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	fa93 f2a3 	rbit	r2, r3
 8001adc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ae0:	601a      	str	r2, [r3, #0]
  return result;
 8001ae2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ae6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae8:	fab3 f383 	clz	r3, r3
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	095b      	lsrs	r3, r3, #5
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	f043 0302 	orr.w	r3, r3, #2
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d109      	bne.n	8001b10 <HAL_RCC_OscConfig+0x93c>
 8001afc:	4b01      	ldr	r3, [pc, #4]	; (8001b04 <HAL_RCC_OscConfig+0x930>)
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	e014      	b.n	8001b2c <HAL_RCC_OscConfig+0x958>
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
 8001b08:	10908120 	.word	0x10908120
 8001b0c:	40007000 	.word	0x40007000
 8001b10:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b14:	2202      	movs	r2, #2
 8001b16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b18:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	fa93 f2a3 	rbit	r2, r3
 8001b22:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	4bbb      	ldr	r3, [pc, #748]	; (8001e18 <HAL_RCC_OscConfig+0xc44>)
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001b30:	2102      	movs	r1, #2
 8001b32:	6011      	str	r1, [r2, #0]
 8001b34:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	fa92 f1a2 	rbit	r1, r2
 8001b3e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001b42:	6011      	str	r1, [r2, #0]
  return result;
 8001b44:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	fab2 f282 	clz	r2, r2
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	f002 021f 	and.w	r2, r2, #31
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d099      	beq.n	8001a9a <HAL_RCC_OscConfig+0x8c6>
 8001b66:	e063      	b.n	8001c30 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b68:	f7fe ff74 	bl	8000a54 <HAL_GetTick>
 8001b6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b70:	e00b      	b.n	8001b8a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b72:	f7fe ff6f 	bl	8000a54 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e225      	b.n	8001fd6 <HAL_RCC_OscConfig+0xe02>
 8001b8a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b8e:	2202      	movs	r2, #2
 8001b90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	fa93 f2a3 	rbit	r2, r3
 8001b9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	fa93 f2a3 	rbit	r2, r3
 8001bb4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001bb8:	601a      	str	r2, [r3, #0]
  return result;
 8001bba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001bbe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc0:	fab3 f383 	clz	r3, r3
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	095b      	lsrs	r3, r3, #5
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f043 0302 	orr.w	r3, r3, #2
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d102      	bne.n	8001bda <HAL_RCC_OscConfig+0xa06>
 8001bd4:	4b90      	ldr	r3, [pc, #576]	; (8001e18 <HAL_RCC_OscConfig+0xc44>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	e00d      	b.n	8001bf6 <HAL_RCC_OscConfig+0xa22>
 8001bda:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001bde:	2202      	movs	r2, #2
 8001be0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	fa93 f2a3 	rbit	r2, r3
 8001bec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	4b89      	ldr	r3, [pc, #548]	; (8001e18 <HAL_RCC_OscConfig+0xc44>)
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001bfa:	2102      	movs	r1, #2
 8001bfc:	6011      	str	r1, [r2, #0]
 8001bfe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	fa92 f1a2 	rbit	r1, r2
 8001c08:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001c0c:	6011      	str	r1, [r2, #0]
  return result;
 8001c0e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	fab2 f282 	clz	r2, r2
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	f002 021f 	and.w	r2, r2, #31
 8001c24:	2101      	movs	r1, #1
 8001c26:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1a0      	bne.n	8001b72 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c30:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d105      	bne.n	8001c44 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c38:	4b77      	ldr	r3, [pc, #476]	; (8001e18 <HAL_RCC_OscConfig+0xc44>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	4a76      	ldr	r2, [pc, #472]	; (8001e18 <HAL_RCC_OscConfig+0xc44>)
 8001c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c42:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 81c2 	beq.w	8001fd4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c50:	4b71      	ldr	r3, [pc, #452]	; (8001e18 <HAL_RCC_OscConfig+0xc44>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	f000 819c 	beq.w	8001f96 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	f040 8114 	bne.w	8001e92 <HAL_RCC_OscConfig+0xcbe>
 8001c6a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	fa93 f2a3 	rbit	r2, r3
 8001c7e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c82:	601a      	str	r2, [r3, #0]
  return result;
 8001c84:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c88:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8a:	fab3 f383 	clz	r3, r3
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7fe fed8 	bl	8000a54 <HAL_GetTick>
 8001ca4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca8:	e009      	b.n	8001cbe <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001caa:	f7fe fed3 	bl	8000a54 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e18b      	b.n	8001fd6 <HAL_RCC_OscConfig+0xe02>
 8001cbe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001cc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	fa93 f2a3 	rbit	r2, r3
 8001cd2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001cd6:	601a      	str	r2, [r3, #0]
  return result;
 8001cd8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001cdc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	095b      	lsrs	r3, r3, #5
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d102      	bne.n	8001cf8 <HAL_RCC_OscConfig+0xb24>
 8001cf2:	4b49      	ldr	r3, [pc, #292]	; (8001e18 <HAL_RCC_OscConfig+0xc44>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	e01b      	b.n	8001d30 <HAL_RCC_OscConfig+0xb5c>
 8001cf8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001cfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	fa93 f2a3 	rbit	r2, r3
 8001d0c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	fa93 f2a3 	rbit	r2, r3
 8001d26:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	4b3a      	ldr	r3, [pc, #232]	; (8001e18 <HAL_RCC_OscConfig+0xc44>)
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d34:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d38:	6011      	str	r1, [r2, #0]
 8001d3a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	fa92 f1a2 	rbit	r1, r2
 8001d44:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001d48:	6011      	str	r1, [r2, #0]
  return result;
 8001d4a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	fab2 f282 	clz	r2, r2
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	f042 0220 	orr.w	r2, r2, #32
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	f002 021f 	and.w	r2, r2, #31
 8001d60:	2101      	movs	r1, #1
 8001d62:	fa01 f202 	lsl.w	r2, r1, r2
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d19e      	bne.n	8001caa <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d6c:	4b2a      	ldr	r3, [pc, #168]	; (8001e18 <HAL_RCC_OscConfig+0xc44>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d7a:	1d3b      	adds	r3, r7, #4
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	430b      	orrs	r3, r1
 8001d82:	4925      	ldr	r1, [pc, #148]	; (8001e18 <HAL_RCC_OscConfig+0xc44>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]
 8001d88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	fa93 f2a3 	rbit	r2, r3
 8001d9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001da0:	601a      	str	r2, [r3, #0]
  return result;
 8001da2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001da6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da8:	fab3 f383 	clz	r3, r3
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001db2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	461a      	mov	r2, r3
 8001dba:	2301      	movs	r3, #1
 8001dbc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbe:	f7fe fe49 	bl	8000a54 <HAL_GetTick>
 8001dc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dc6:	e009      	b.n	8001ddc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7fe fe44 	bl	8000a54 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e0fc      	b.n	8001fd6 <HAL_RCC_OscConfig+0xe02>
 8001ddc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001de0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	fa93 f2a3 	rbit	r2, r3
 8001df0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001df4:	601a      	str	r2, [r3, #0]
  return result;
 8001df6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dfa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dfc:	fab3 f383 	clz	r3, r3
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d105      	bne.n	8001e1c <HAL_RCC_OscConfig+0xc48>
 8001e10:	4b01      	ldr	r3, [pc, #4]	; (8001e18 <HAL_RCC_OscConfig+0xc44>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	e01e      	b.n	8001e54 <HAL_RCC_OscConfig+0xc80>
 8001e16:	bf00      	nop
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	fa93 f2a3 	rbit	r2, r3
 8001e30:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	fa93 f2a3 	rbit	r2, r3
 8001e4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	4b63      	ldr	r3, [pc, #396]	; (8001fe0 <HAL_RCC_OscConfig+0xe0c>)
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e5c:	6011      	str	r1, [r2, #0]
 8001e5e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	fa92 f1a2 	rbit	r1, r2
 8001e68:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001e6c:	6011      	str	r1, [r2, #0]
  return result;
 8001e6e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	fab2 f282 	clz	r2, r2
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	f042 0220 	orr.w	r2, r2, #32
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	f002 021f 	and.w	r2, r2, #31
 8001e84:	2101      	movs	r1, #1
 8001e86:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d09b      	beq.n	8001dc8 <HAL_RCC_OscConfig+0xbf4>
 8001e90:	e0a0      	b.n	8001fd4 <HAL_RCC_OscConfig+0xe00>
 8001e92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	fa93 f2a3 	rbit	r2, r3
 8001ea6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eaa:	601a      	str	r2, [r3, #0]
  return result;
 8001eac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ebc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7fe fdc4 	bl	8000a54 <HAL_GetTick>
 8001ecc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed0:	e009      	b.n	8001ee6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed2:	f7fe fdbf 	bl	8000a54 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e077      	b.n	8001fd6 <HAL_RCC_OscConfig+0xe02>
 8001ee6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	fa93 f2a3 	rbit	r2, r3
 8001efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efe:	601a      	str	r2, [r3, #0]
  return result;
 8001f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	095b      	lsrs	r3, r3, #5
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d102      	bne.n	8001f20 <HAL_RCC_OscConfig+0xd4c>
 8001f1a:	4b31      	ldr	r3, [pc, #196]	; (8001fe0 <HAL_RCC_OscConfig+0xe0c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	e01b      	b.n	8001f58 <HAL_RCC_OscConfig+0xd84>
 8001f20:	f107 0320 	add.w	r3, r7, #32
 8001f24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f107 0320 	add.w	r3, r7, #32
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	fa93 f2a3 	rbit	r2, r3
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	f107 0318 	add.w	r3, r7, #24
 8001f3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	f107 0318 	add.w	r3, r7, #24
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	fa93 f2a3 	rbit	r2, r3
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	4b22      	ldr	r3, [pc, #136]	; (8001fe0 <HAL_RCC_OscConfig+0xe0c>)
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	f107 0210 	add.w	r2, r7, #16
 8001f5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f60:	6011      	str	r1, [r2, #0]
 8001f62:	f107 0210 	add.w	r2, r7, #16
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	fa92 f1a2 	rbit	r1, r2
 8001f6c:	f107 020c 	add.w	r2, r7, #12
 8001f70:	6011      	str	r1, [r2, #0]
  return result;
 8001f72:	f107 020c 	add.w	r2, r7, #12
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	fab2 f282 	clz	r2, r2
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	f042 0220 	orr.w	r2, r2, #32
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	f002 021f 	and.w	r2, r2, #31
 8001f88:	2101      	movs	r1, #1
 8001f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d19e      	bne.n	8001ed2 <HAL_RCC_OscConfig+0xcfe>
 8001f94:	e01e      	b.n	8001fd4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e018      	b.n	8001fd6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_RCC_OscConfig+0xe0c>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d108      	bne.n	8001fd0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001fbe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000

08001fe4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b09e      	sub	sp, #120	; 0x78
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e162      	b.n	80022c2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b90      	ldr	r3, [pc, #576]	; (8002240 <HAL_RCC_ClockConfig+0x25c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d910      	bls.n	800202c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b8d      	ldr	r3, [pc, #564]	; (8002240 <HAL_RCC_ClockConfig+0x25c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 0207 	bic.w	r2, r3, #7
 8002012:	498b      	ldr	r1, [pc, #556]	; (8002240 <HAL_RCC_ClockConfig+0x25c>)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b89      	ldr	r3, [pc, #548]	; (8002240 <HAL_RCC_ClockConfig+0x25c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e14a      	b.n	80022c2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002038:	4b82      	ldr	r3, [pc, #520]	; (8002244 <HAL_RCC_ClockConfig+0x260>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	497f      	ldr	r1, [pc, #508]	; (8002244 <HAL_RCC_ClockConfig+0x260>)
 8002046:	4313      	orrs	r3, r2
 8002048:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 80dc 	beq.w	8002210 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d13c      	bne.n	80020da <HAL_RCC_ClockConfig+0xf6>
 8002060:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002064:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800206e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002070:	fab3 f383 	clz	r3, r3
 8002074:	b2db      	uxtb	r3, r3
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	b2db      	uxtb	r3, r3
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b01      	cmp	r3, #1
 8002082:	d102      	bne.n	800208a <HAL_RCC_ClockConfig+0xa6>
 8002084:	4b6f      	ldr	r3, [pc, #444]	; (8002244 <HAL_RCC_ClockConfig+0x260>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	e00f      	b.n	80020aa <HAL_RCC_ClockConfig+0xc6>
 800208a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800208e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002092:	fa93 f3a3 	rbit	r3, r3
 8002096:	667b      	str	r3, [r7, #100]	; 0x64
 8002098:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800209c:	663b      	str	r3, [r7, #96]	; 0x60
 800209e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020a0:	fa93 f3a3 	rbit	r3, r3
 80020a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020a6:	4b67      	ldr	r3, [pc, #412]	; (8002244 <HAL_RCC_ClockConfig+0x260>)
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80020b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020b2:	fa92 f2a2 	rbit	r2, r2
 80020b6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80020b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020ba:	fab2 f282 	clz	r2, r2
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	f042 0220 	orr.w	r2, r2, #32
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	f002 021f 	and.w	r2, r2, #31
 80020ca:	2101      	movs	r1, #1
 80020cc:	fa01 f202 	lsl.w	r2, r1, r2
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d17b      	bne.n	80021ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e0f3      	b.n	80022c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d13c      	bne.n	800215c <HAL_RCC_ClockConfig+0x178>
 80020e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80020f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f2:	fab3 f383 	clz	r3, r3
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	095b      	lsrs	r3, r3, #5
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b01      	cmp	r3, #1
 8002104:	d102      	bne.n	800210c <HAL_RCC_ClockConfig+0x128>
 8002106:	4b4f      	ldr	r3, [pc, #316]	; (8002244 <HAL_RCC_ClockConfig+0x260>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	e00f      	b.n	800212c <HAL_RCC_ClockConfig+0x148>
 800210c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002110:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002114:	fa93 f3a3 	rbit	r3, r3
 8002118:	647b      	str	r3, [r7, #68]	; 0x44
 800211a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800211e:	643b      	str	r3, [r7, #64]	; 0x40
 8002120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002128:	4b46      	ldr	r3, [pc, #280]	; (8002244 <HAL_RCC_ClockConfig+0x260>)
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002130:	63ba      	str	r2, [r7, #56]	; 0x38
 8002132:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002134:	fa92 f2a2 	rbit	r2, r2
 8002138:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800213a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800213c:	fab2 f282 	clz	r2, r2
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	f042 0220 	orr.w	r2, r2, #32
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	f002 021f 	and.w	r2, r2, #31
 800214c:	2101      	movs	r1, #1
 800214e:	fa01 f202 	lsl.w	r2, r1, r2
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d13a      	bne.n	80021ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0b2      	b.n	80022c2 <HAL_RCC_ClockConfig+0x2de>
 800215c:	2302      	movs	r3, #2
 800215e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002162:	fa93 f3a3 	rbit	r3, r3
 8002166:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	095b      	lsrs	r3, r3, #5
 8002172:	b2db      	uxtb	r3, r3
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b01      	cmp	r3, #1
 800217c:	d102      	bne.n	8002184 <HAL_RCC_ClockConfig+0x1a0>
 800217e:	4b31      	ldr	r3, [pc, #196]	; (8002244 <HAL_RCC_ClockConfig+0x260>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	e00d      	b.n	80021a0 <HAL_RCC_ClockConfig+0x1bc>
 8002184:	2302      	movs	r3, #2
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
 8002190:	2302      	movs	r3, #2
 8002192:	623b      	str	r3, [r7, #32]
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	fa93 f3a3 	rbit	r3, r3
 800219a:	61fb      	str	r3, [r7, #28]
 800219c:	4b29      	ldr	r3, [pc, #164]	; (8002244 <HAL_RCC_ClockConfig+0x260>)
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	2202      	movs	r2, #2
 80021a2:	61ba      	str	r2, [r7, #24]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	fa92 f2a2 	rbit	r2, r2
 80021aa:	617a      	str	r2, [r7, #20]
  return result;
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	fab2 f282 	clz	r2, r2
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	f042 0220 	orr.w	r2, r2, #32
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	f002 021f 	and.w	r2, r2, #31
 80021be:	2101      	movs	r1, #1
 80021c0:	fa01 f202 	lsl.w	r2, r1, r2
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e079      	b.n	80022c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ce:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <HAL_RCC_ClockConfig+0x260>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f023 0203 	bic.w	r2, r3, #3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	491a      	ldr	r1, [pc, #104]	; (8002244 <HAL_RCC_ClockConfig+0x260>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021e0:	f7fe fc38 	bl	8000a54 <HAL_GetTick>
 80021e4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e6:	e00a      	b.n	80021fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e8:	f7fe fc34 	bl	8000a54 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e061      	b.n	80022c2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <HAL_RCC_ClockConfig+0x260>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 020c 	and.w	r2, r3, #12
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	429a      	cmp	r2, r3
 800220e:	d1eb      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_RCC_ClockConfig+0x25c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d214      	bcs.n	8002248 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_RCC_ClockConfig+0x25c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 0207 	bic.w	r2, r3, #7
 8002226:	4906      	ldr	r1, [pc, #24]	; (8002240 <HAL_RCC_ClockConfig+0x25c>)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	4313      	orrs	r3, r2
 800222c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222e:	4b04      	ldr	r3, [pc, #16]	; (8002240 <HAL_RCC_ClockConfig+0x25c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d005      	beq.n	8002248 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e040      	b.n	80022c2 <HAL_RCC_ClockConfig+0x2de>
 8002240:	40022000 	.word	0x40022000
 8002244:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d008      	beq.n	8002266 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002254:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <HAL_RCC_ClockConfig+0x2e8>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	491a      	ldr	r1, [pc, #104]	; (80022cc <HAL_RCC_ClockConfig+0x2e8>)
 8002262:	4313      	orrs	r3, r2
 8002264:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d009      	beq.n	8002286 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002272:	4b16      	ldr	r3, [pc, #88]	; (80022cc <HAL_RCC_ClockConfig+0x2e8>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4912      	ldr	r1, [pc, #72]	; (80022cc <HAL_RCC_ClockConfig+0x2e8>)
 8002282:	4313      	orrs	r3, r2
 8002284:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002286:	f000 f829 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 800228a:	4601      	mov	r1, r0
 800228c:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <HAL_RCC_ClockConfig+0x2e8>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002294:	22f0      	movs	r2, #240	; 0xf0
 8002296:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	fa92 f2a2 	rbit	r2, r2
 800229e:	60fa      	str	r2, [r7, #12]
  return result;
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	fab2 f282 	clz	r2, r2
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	40d3      	lsrs	r3, r2
 80022aa:	4a09      	ldr	r2, [pc, #36]	; (80022d0 <HAL_RCC_ClockConfig+0x2ec>)
 80022ac:	5cd3      	ldrb	r3, [r2, r3]
 80022ae:	fa21 f303 	lsr.w	r3, r1, r3
 80022b2:	4a08      	ldr	r2, [pc, #32]	; (80022d4 <HAL_RCC_ClockConfig+0x2f0>)
 80022b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <HAL_RCC_ClockConfig+0x2f4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe fae2 	bl	8000884 <HAL_InitTick>
  
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3778      	adds	r7, #120	; 0x78
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000
 80022d0:	08004398 	.word	0x08004398
 80022d4:	20000000 	.word	0x20000000
 80022d8:	20000004 	.word	0x20000004

080022dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	b08b      	sub	sp, #44	; 0x2c
 80022e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
 80022ea:	2300      	movs	r3, #0
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80022f6:	4b29      	ldr	r3, [pc, #164]	; (800239c <HAL_RCC_GetSysClockFreq+0xc0>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b04      	cmp	r3, #4
 8002304:	d002      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x30>
 8002306:	2b08      	cmp	r3, #8
 8002308:	d003      	beq.n	8002312 <HAL_RCC_GetSysClockFreq+0x36>
 800230a:	e03c      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800230c:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800230e:	623b      	str	r3, [r7, #32]
      break;
 8002310:	e03c      	b.n	800238c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002318:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800231c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	fa92 f2a2 	rbit	r2, r2
 8002324:	607a      	str	r2, [r7, #4]
  return result;
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	fab2 f282 	clz	r2, r2
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	40d3      	lsrs	r3, r2
 8002330:	4a1c      	ldr	r2, [pc, #112]	; (80023a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002332:	5cd3      	ldrb	r3, [r2, r3]
 8002334:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002336:	4b19      	ldr	r3, [pc, #100]	; (800239c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	220f      	movs	r2, #15
 8002340:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	fa92 f2a2 	rbit	r2, r2
 8002348:	60fa      	str	r2, [r7, #12]
  return result;
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	fab2 f282 	clz	r2, r2
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	40d3      	lsrs	r3, r2
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002356:	5cd3      	ldrb	r3, [r2, r3]
 8002358:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002364:	4a0e      	ldr	r2, [pc, #56]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	fbb2 f2f3 	udiv	r2, r2, r3
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	fb02 f303 	mul.w	r3, r2, r3
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
 8002374:	e004      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	4a0c      	ldr	r2, [pc, #48]	; (80023ac <HAL_RCC_GetSysClockFreq+0xd0>)
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	623b      	str	r3, [r7, #32]
      break;
 8002384:	e002      	b.n	800238c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002388:	623b      	str	r3, [r7, #32]
      break;
 800238a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800238c:	6a3b      	ldr	r3, [r7, #32]
}
 800238e:	4618      	mov	r0, r3
 8002390:	372c      	adds	r7, #44	; 0x2c
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	007a1200 	.word	0x007a1200
 80023a4:	080043b0 	.word	0x080043b0
 80023a8:	080043c0 	.word	0x080043c0
 80023ac:	003d0900 	.word	0x003d0900

080023b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023b6:	681b      	ldr	r3, [r3, #0]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	20000000 	.word	0x20000000

080023c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80023ce:	f7ff ffef 	bl	80023b0 <HAL_RCC_GetHCLKFreq>
 80023d2:	4601      	mov	r1, r0
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023dc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	fa92 f2a2 	rbit	r2, r2
 80023e8:	603a      	str	r2, [r7, #0]
  return result;
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	fab2 f282 	clz	r2, r2
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	40d3      	lsrs	r3, r2
 80023f4:	4a04      	ldr	r2, [pc, #16]	; (8002408 <HAL_RCC_GetPCLK1Freq+0x40>)
 80023f6:	5cd3      	ldrb	r3, [r2, r3]
 80023f8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000
 8002408:	080043a8 	.word	0x080043a8

0800240c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	220f      	movs	r2, #15
 800241a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800241c:	4b12      	ldr	r3, [pc, #72]	; (8002468 <HAL_RCC_GetClockConfig+0x5c>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0203 	and.w	r2, r3, #3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002428:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <HAL_RCC_GetClockConfig+0x5c>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <HAL_RCC_GetClockConfig+0x5c>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002440:	4b09      	ldr	r3, [pc, #36]	; (8002468 <HAL_RCC_GetClockConfig+0x5c>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	08db      	lsrs	r3, r3, #3
 8002446:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <HAL_RCC_GetClockConfig+0x60>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0207 	and.w	r2, r3, #7
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	601a      	str	r2, [r3, #0]
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000
 800246c:	40022000 	.word	0x40022000

08002470 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b092      	sub	sp, #72	; 0x48
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002480:	2300      	movs	r3, #0
 8002482:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 80d4 	beq.w	800263c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002494:	4b4e      	ldr	r3, [pc, #312]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10e      	bne.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a0:	4b4b      	ldr	r3, [pc, #300]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	4a4a      	ldr	r2, [pc, #296]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024aa:	61d3      	str	r3, [r2, #28]
 80024ac:	4b48      	ldr	r3, [pc, #288]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b8:	2301      	movs	r3, #1
 80024ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024be:	4b45      	ldr	r3, [pc, #276]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d118      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ca:	4b42      	ldr	r3, [pc, #264]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a41      	ldr	r2, [pc, #260]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d6:	f7fe fabd 	bl	8000a54 <HAL_GetTick>
 80024da:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024de:	f7fe fab9 	bl	8000a54 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b64      	cmp	r3, #100	; 0x64
 80024ea:	d901      	bls.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e169      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f0:	4b38      	ldr	r3, [pc, #224]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024fc:	4b34      	ldr	r3, [pc, #208]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002504:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 8084 	beq.w	8002616 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002516:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002518:	429a      	cmp	r2, r3
 800251a:	d07c      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800251c:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002524:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800252a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	461a      	mov	r2, r3
 800253e:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	461a      	mov	r2, r3
 8002546:	2301      	movs	r3, #1
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800254e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	4b1d      	ldr	r3, [pc, #116]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	461a      	mov	r2, r3
 800256a:	2300      	movs	r3, #0
 800256c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800256e:	4a18      	ldr	r2, [pc, #96]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002572:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d04b      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7fe fa69 	bl	8000a54 <HAL_GetTick>
 8002582:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002584:	e00a      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002586:	f7fe fa65 	bl	8000a54 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	f241 3288 	movw	r2, #5000	; 0x1388
 8002594:	4293      	cmp	r3, r2
 8002596:	d901      	bls.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e113      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800259c:	2302      	movs	r3, #2
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a2:	fa93 f3a3 	rbit	r3, r3
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
 80025a8:	2302      	movs	r3, #2
 80025aa:	623b      	str	r3, [r7, #32]
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	fa93 f3a3 	rbit	r3, r3
 80025b2:	61fb      	str	r3, [r7, #28]
  return result;
 80025b4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b6:	fab3 f383 	clz	r3, r3
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	095b      	lsrs	r3, r3, #5
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d108      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80025ca:	4b01      	ldr	r3, [pc, #4]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	e00d      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40007000 	.word	0x40007000
 80025d8:	10908100 	.word	0x10908100
 80025dc:	2302      	movs	r3, #2
 80025de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	4b78      	ldr	r3, [pc, #480]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	2202      	movs	r2, #2
 80025ee:	613a      	str	r2, [r7, #16]
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	fa92 f2a2 	rbit	r2, r2
 80025f6:	60fa      	str	r2, [r7, #12]
  return result;
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	fab2 f282 	clz	r2, r2
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	f002 021f 	and.w	r2, r2, #31
 800260a:	2101      	movs	r1, #1
 800260c:	fa01 f202 	lsl.w	r2, r1, r2
 8002610:	4013      	ands	r3, r2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0b7      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002616:	4b6d      	ldr	r3, [pc, #436]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	496a      	ldr	r1, [pc, #424]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002624:	4313      	orrs	r3, r2
 8002626:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002628:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800262c:	2b01      	cmp	r3, #1
 800262e:	d105      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002630:	4b66      	ldr	r3, [pc, #408]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	4a65      	ldr	r2, [pc, #404]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800263a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002648:	4b60      	ldr	r3, [pc, #384]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	f023 0203 	bic.w	r2, r3, #3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	495d      	ldr	r1, [pc, #372]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002656:	4313      	orrs	r3, r2
 8002658:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d008      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002666:	4b59      	ldr	r3, [pc, #356]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	4956      	ldr	r1, [pc, #344]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002674:	4313      	orrs	r3, r2
 8002676:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002684:	4b51      	ldr	r3, [pc, #324]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	494e      	ldr	r1, [pc, #312]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002692:	4313      	orrs	r3, r2
 8002694:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0320 	and.w	r3, r3, #32
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d008      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026a2:	4b4a      	ldr	r3, [pc, #296]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	f023 0210 	bic.w	r2, r3, #16
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	4947      	ldr	r1, [pc, #284]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80026c0:	4b42      	ldr	r3, [pc, #264]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026cc:	493f      	ldr	r1, [pc, #252]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d008      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026de:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f023 0220 	bic.w	r2, r3, #32
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	4938      	ldr	r1, [pc, #224]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026fc:	4b33      	ldr	r3, [pc, #204]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	4930      	ldr	r1, [pc, #192]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800270a:	4313      	orrs	r3, r2
 800270c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	2b00      	cmp	r3, #0
 8002718:	d008      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800271a:	4b2c      	ldr	r3, [pc, #176]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	4929      	ldr	r1, [pc, #164]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002728:	4313      	orrs	r3, r2
 800272a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002738:	4b24      	ldr	r3, [pc, #144]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	4921      	ldr	r1, [pc, #132]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002746:	4313      	orrs	r3, r2
 8002748:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002752:	2b00      	cmp	r3, #0
 8002754:	d008      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002756:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	491a      	ldr	r1, [pc, #104]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002764:	4313      	orrs	r3, r2
 8002766:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002774:	4b15      	ldr	r3, [pc, #84]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	4912      	ldr	r1, [pc, #72]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002782:	4313      	orrs	r3, r2
 8002784:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d008      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002792:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	490b      	ldr	r1, [pc, #44]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d008      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027bc:	4903      	ldr	r1, [pc, #12]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3748      	adds	r7, #72	; 0x48
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40021000 	.word	0x40021000

080027d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e049      	b.n	8002876 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f841 	bl	800287e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3304      	adds	r3, #4
 800280c:	4619      	mov	r1, r3
 800280e:	4610      	mov	r0, r2
 8002810:	f000 f9f2 	bl	8002bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d001      	beq.n	80028ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e04a      	b.n	8002942 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0201 	orr.w	r2, r2, #1
 80028c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a21      	ldr	r2, [pc, #132]	; (8002950 <HAL_TIM_Base_Start_IT+0xbc>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d018      	beq.n	8002900 <HAL_TIM_Base_Start_IT+0x6c>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d6:	d013      	beq.n	8002900 <HAL_TIM_Base_Start_IT+0x6c>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <HAL_TIM_Base_Start_IT+0xc0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d00e      	beq.n	8002900 <HAL_TIM_Base_Start_IT+0x6c>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a1c      	ldr	r2, [pc, #112]	; (8002958 <HAL_TIM_Base_Start_IT+0xc4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d009      	beq.n	8002900 <HAL_TIM_Base_Start_IT+0x6c>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a1a      	ldr	r2, [pc, #104]	; (800295c <HAL_TIM_Base_Start_IT+0xc8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d004      	beq.n	8002900 <HAL_TIM_Base_Start_IT+0x6c>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a19      	ldr	r2, [pc, #100]	; (8002960 <HAL_TIM_Base_Start_IT+0xcc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d115      	bne.n	800292c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	4b17      	ldr	r3, [pc, #92]	; (8002964 <HAL_TIM_Base_Start_IT+0xd0>)
 8002908:	4013      	ands	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2b06      	cmp	r3, #6
 8002910:	d015      	beq.n	800293e <HAL_TIM_Base_Start_IT+0xaa>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002918:	d011      	beq.n	800293e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0201 	orr.w	r2, r2, #1
 8002928:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292a:	e008      	b.n	800293e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0201 	orr.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	e000      	b.n	8002940 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800293e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40012c00 	.word	0x40012c00
 8002954:	40000400 	.word	0x40000400
 8002958:	40000800 	.word	0x40000800
 800295c:	40013400 	.word	0x40013400
 8002960:	40014000 	.word	0x40014000
 8002964:	00010007 	.word	0x00010007

08002968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b02      	cmp	r3, #2
 800297c:	d122      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b02      	cmp	r3, #2
 800298a:	d11b      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0202 	mvn.w	r2, #2
 8002994:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f905 	bl	8002bba <HAL_TIM_IC_CaptureCallback>
 80029b0:	e005      	b.n	80029be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f8f7 	bl	8002ba6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f908 	bl	8002bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d122      	bne.n	8002a18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d11b      	bne.n	8002a18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0204 	mvn.w	r2, #4
 80029e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2202      	movs	r2, #2
 80029ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f8db 	bl	8002bba <HAL_TIM_IC_CaptureCallback>
 8002a04:	e005      	b.n	8002a12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f8cd 	bl	8002ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f8de 	bl	8002bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d122      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d11b      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0208 	mvn.w	r2, #8
 8002a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2204      	movs	r2, #4
 8002a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f8b1 	bl	8002bba <HAL_TIM_IC_CaptureCallback>
 8002a58:	e005      	b.n	8002a66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f8a3 	bl	8002ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f8b4 	bl	8002bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	2b10      	cmp	r3, #16
 8002a78:	d122      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	2b10      	cmp	r3, #16
 8002a86:	d11b      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0210 	mvn.w	r2, #16
 8002a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2208      	movs	r2, #8
 8002a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f887 	bl	8002bba <HAL_TIM_IC_CaptureCallback>
 8002aac:	e005      	b.n	8002aba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f879 	bl	8002ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f88a 	bl	8002bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d10e      	bne.n	8002aec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d107      	bne.n	8002aec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0201 	mvn.w	r2, #1
 8002ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7fd fe40 	bl	800076c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af6:	2b80      	cmp	r3, #128	; 0x80
 8002af8:	d10e      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b04:	2b80      	cmp	r3, #128	; 0x80
 8002b06:	d107      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f90a 	bl	8002d2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b26:	d10e      	bne.n	8002b46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b32:	2b80      	cmp	r3, #128	; 0x80
 8002b34:	d107      	bne.n	8002b46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f8fd 	bl	8002d40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b50:	2b40      	cmp	r3, #64	; 0x40
 8002b52:	d10e      	bne.n	8002b72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5e:	2b40      	cmp	r3, #64	; 0x40
 8002b60:	d107      	bne.n	8002b72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f838 	bl	8002be2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	d10e      	bne.n	8002b9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	d107      	bne.n	8002b9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f06f 0220 	mvn.w	r2, #32
 8002b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f8bd 	bl	8002d18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a3c      	ldr	r2, [pc, #240]	; (8002cfc <TIM_Base_SetConfig+0x104>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d00f      	beq.n	8002c30 <TIM_Base_SetConfig+0x38>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c16:	d00b      	beq.n	8002c30 <TIM_Base_SetConfig+0x38>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a39      	ldr	r2, [pc, #228]	; (8002d00 <TIM_Base_SetConfig+0x108>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d007      	beq.n	8002c30 <TIM_Base_SetConfig+0x38>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a38      	ldr	r2, [pc, #224]	; (8002d04 <TIM_Base_SetConfig+0x10c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d003      	beq.n	8002c30 <TIM_Base_SetConfig+0x38>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a37      	ldr	r2, [pc, #220]	; (8002d08 <TIM_Base_SetConfig+0x110>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d108      	bne.n	8002c42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a2d      	ldr	r2, [pc, #180]	; (8002cfc <TIM_Base_SetConfig+0x104>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d01b      	beq.n	8002c82 <TIM_Base_SetConfig+0x8a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c50:	d017      	beq.n	8002c82 <TIM_Base_SetConfig+0x8a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a2a      	ldr	r2, [pc, #168]	; (8002d00 <TIM_Base_SetConfig+0x108>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <TIM_Base_SetConfig+0x8a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a29      	ldr	r2, [pc, #164]	; (8002d04 <TIM_Base_SetConfig+0x10c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00f      	beq.n	8002c82 <TIM_Base_SetConfig+0x8a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a28      	ldr	r2, [pc, #160]	; (8002d08 <TIM_Base_SetConfig+0x110>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00b      	beq.n	8002c82 <TIM_Base_SetConfig+0x8a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a27      	ldr	r2, [pc, #156]	; (8002d0c <TIM_Base_SetConfig+0x114>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d007      	beq.n	8002c82 <TIM_Base_SetConfig+0x8a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a26      	ldr	r2, [pc, #152]	; (8002d10 <TIM_Base_SetConfig+0x118>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d003      	beq.n	8002c82 <TIM_Base_SetConfig+0x8a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a25      	ldr	r2, [pc, #148]	; (8002d14 <TIM_Base_SetConfig+0x11c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d108      	bne.n	8002c94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a10      	ldr	r2, [pc, #64]	; (8002cfc <TIM_Base_SetConfig+0x104>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00f      	beq.n	8002ce0 <TIM_Base_SetConfig+0xe8>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a11      	ldr	r2, [pc, #68]	; (8002d08 <TIM_Base_SetConfig+0x110>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d00b      	beq.n	8002ce0 <TIM_Base_SetConfig+0xe8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a10      	ldr	r2, [pc, #64]	; (8002d0c <TIM_Base_SetConfig+0x114>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d007      	beq.n	8002ce0 <TIM_Base_SetConfig+0xe8>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a0f      	ldr	r2, [pc, #60]	; (8002d10 <TIM_Base_SetConfig+0x118>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d003      	beq.n	8002ce0 <TIM_Base_SetConfig+0xe8>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a0e      	ldr	r2, [pc, #56]	; (8002d14 <TIM_Base_SetConfig+0x11c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d103      	bne.n	8002ce8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	615a      	str	r2, [r3, #20]
}
 8002cee:	bf00      	nop
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40012c00 	.word	0x40012c00
 8002d00:	40000400 	.word	0x40000400
 8002d04:	40000800 	.word	0x40000800
 8002d08:	40013400 	.word	0x40013400
 8002d0c:	40014000 	.word	0x40014000
 8002d10:	40014400 	.word	0x40014400
 8002d14:	40014800 	.word	0x40014800

08002d18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d66:	2b84      	cmp	r3, #132	; 0x84
 8002d68:	d005      	beq.n	8002d76 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002d6a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4413      	add	r3, r2
 8002d72:	3303      	adds	r3, #3
 8002d74:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002d76:	68fb      	ldr	r3, [r7, #12]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002d88:	f000 fad6 	bl	8003338 <vTaskStartScheduler>
  
  return osOK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002d92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d94:	b089      	sub	sp, #36	; 0x24
 8002d96:	af04      	add	r7, sp, #16
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d020      	beq.n	8002de6 <osThreadCreate+0x54>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d01c      	beq.n	8002de6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685c      	ldr	r4, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681d      	ldr	r5, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691e      	ldr	r6, [r3, #16]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff ffc8 	bl	8002d54 <makeFreeRtosPriority>
 8002dc4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002dce:	9202      	str	r2, [sp, #8]
 8002dd0:	9301      	str	r3, [sp, #4]
 8002dd2:	9100      	str	r1, [sp, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	4632      	mov	r2, r6
 8002dd8:	4629      	mov	r1, r5
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f000 f8ed 	bl	8002fba <xTaskCreateStatic>
 8002de0:	4603      	mov	r3, r0
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	e01c      	b.n	8002e20 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685c      	ldr	r4, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002df2:	b29e      	uxth	r6, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff ffaa 	bl	8002d54 <makeFreeRtosPriority>
 8002e00:	4602      	mov	r2, r0
 8002e02:	f107 030c 	add.w	r3, r7, #12
 8002e06:	9301      	str	r3, [sp, #4]
 8002e08:	9200      	str	r2, [sp, #0]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	4632      	mov	r2, r6
 8002e0e:	4629      	mov	r1, r5
 8002e10:	4620      	mov	r0, r4
 8002e12:	f000 f92e 	bl	8003072 <xTaskCreate>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d001      	beq.n	8002e20 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e000      	b.n	8002e22 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002e20:	68fb      	ldr	r3, [r7, #12]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e2a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <osDelay+0x16>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	e000      	b.n	8002e42 <osDelay+0x18>
 8002e40:	2301      	movs	r3, #1
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fa44 	bl	80032d0 <vTaskDelay>
  
  return osOK;
 8002e48:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f103 0208 	add.w	r2, r3, #8
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f04f 32ff 	mov.w	r2, #4294967295
 8002e6a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f103 0208 	add.w	r2, r3, #8
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f103 0208 	add.w	r2, r3, #8
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	601a      	str	r2, [r3, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0a:	d103      	bne.n	8002f14 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	e00c      	b.n	8002f2e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3308      	adds	r3, #8
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	e002      	b.n	8002f22 <vListInsert+0x2e>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d2f6      	bcs.n	8002f1c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	601a      	str	r2, [r3, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f66:	b480      	push	{r7}
 8002f68:	b085      	sub	sp, #20
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6892      	ldr	r2, [r2, #8]
 8002f7c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6852      	ldr	r2, [r2, #4]
 8002f86:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d103      	bne.n	8002f9a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	1e5a      	subs	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b08e      	sub	sp, #56	; 0x38
 8002fbe:	af04      	add	r7, sp, #16
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10a      	bne.n	8002fe4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd2:	f383 8811 	msr	BASEPRI, r3
 8002fd6:	f3bf 8f6f 	isb	sy
 8002fda:	f3bf 8f4f 	dsb	sy
 8002fde:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002fe0:	bf00      	nop
 8002fe2:	e7fe      	b.n	8002fe2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10a      	bne.n	8003000 <xTaskCreateStatic+0x46>
	__asm volatile
 8002fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	61fb      	str	r3, [r7, #28]
}
 8002ffc:	bf00      	nop
 8002ffe:	e7fe      	b.n	8002ffe <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003000:	2354      	movs	r3, #84	; 0x54
 8003002:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	2b54      	cmp	r3, #84	; 0x54
 8003008:	d00a      	beq.n	8003020 <xTaskCreateStatic+0x66>
	__asm volatile
 800300a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300e:	f383 8811 	msr	BASEPRI, r3
 8003012:	f3bf 8f6f 	isb	sy
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	61bb      	str	r3, [r7, #24]
}
 800301c:	bf00      	nop
 800301e:	e7fe      	b.n	800301e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003022:	2b00      	cmp	r3, #0
 8003024:	d01e      	beq.n	8003064 <xTaskCreateStatic+0xaa>
 8003026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01b      	beq.n	8003064 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800302c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003034:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	2202      	movs	r2, #2
 800303a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800303e:	2300      	movs	r3, #0
 8003040:	9303      	str	r3, [sp, #12]
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	9302      	str	r3, [sp, #8]
 8003046:	f107 0314 	add.w	r3, r7, #20
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f850 	bl	80030fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800305c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800305e:	f000 f8cd 	bl	80031fc <prvAddNewTaskToReadyList>
 8003062:	e001      	b.n	8003068 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003068:	697b      	ldr	r3, [r7, #20]
	}
 800306a:	4618      	mov	r0, r3
 800306c:	3728      	adds	r7, #40	; 0x28
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003072:	b580      	push	{r7, lr}
 8003074:	b08c      	sub	sp, #48	; 0x30
 8003076:	af04      	add	r7, sp, #16
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	603b      	str	r3, [r7, #0]
 800307e:	4613      	mov	r3, r2
 8003080:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fece 	bl	8003e28 <pvPortMalloc>
 800308c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00e      	beq.n	80030b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003094:	2054      	movs	r0, #84	; 0x54
 8003096:	f000 fec7 	bl	8003e28 <pvPortMalloc>
 800309a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
 80030a8:	e005      	b.n	80030b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80030aa:	6978      	ldr	r0, [r7, #20]
 80030ac:	f000 ff80 	bl	8003fb0 <vPortFree>
 80030b0:	e001      	b.n	80030b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d017      	beq.n	80030ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030c4:	88fa      	ldrh	r2, [r7, #6]
 80030c6:	2300      	movs	r3, #0
 80030c8:	9303      	str	r3, [sp, #12]
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	9302      	str	r3, [sp, #8]
 80030ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f80e 	bl	80030fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030e0:	69f8      	ldr	r0, [r7, #28]
 80030e2:	f000 f88b 	bl	80031fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80030e6:	2301      	movs	r3, #1
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	e002      	b.n	80030f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030ec:	f04f 33ff 	mov.w	r3, #4294967295
 80030f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80030f2:	69bb      	ldr	r3, [r7, #24]
	}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3720      	adds	r7, #32
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
 8003108:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003114:	3b01      	subs	r3, #1
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	f023 0307 	bic.w	r3, r3, #7
 8003122:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <prvInitialiseNewTask+0x48>
	__asm volatile
 800312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	617b      	str	r3, [r7, #20]
}
 8003140:	bf00      	nop
 8003142:	e7fe      	b.n	8003142 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003144:	2300      	movs	r3, #0
 8003146:	61fb      	str	r3, [r7, #28]
 8003148:	e012      	b.n	8003170 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	4413      	add	r3, r2
 8003150:	7819      	ldrb	r1, [r3, #0]
 8003152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	4413      	add	r3, r2
 8003158:	3334      	adds	r3, #52	; 0x34
 800315a:	460a      	mov	r2, r1
 800315c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	4413      	add	r3, r2
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d006      	beq.n	8003178 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3301      	adds	r3, #1
 800316e:	61fb      	str	r3, [r7, #28]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	2b0f      	cmp	r3, #15
 8003174:	d9e9      	bls.n	800314a <prvInitialiseNewTask+0x4e>
 8003176:	e000      	b.n	800317a <prvInitialiseNewTask+0x7e>
		{
			break;
 8003178:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800317a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003184:	2b06      	cmp	r3, #6
 8003186:	d901      	bls.n	800318c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003188:	2306      	movs	r3, #6
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800318c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003190:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003194:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003196:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319a:	2200      	movs	r2, #0
 800319c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800319e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a0:	3304      	adds	r3, #4
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fe75 	bl	8002e92 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031aa:	3318      	adds	r3, #24
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fe70 	bl	8002e92 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ba:	f1c3 0207 	rsb	r2, r3, #7
 80031be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80031c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ca:	2200      	movs	r2, #0
 80031cc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80031ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	68f9      	ldr	r1, [r7, #12]
 80031da:	69b8      	ldr	r0, [r7, #24]
 80031dc:	f000 fc12 	bl	8003a04 <pxPortInitialiseStack>
 80031e0:	4602      	mov	r2, r0
 80031e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80031e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031f2:	bf00      	nop
 80031f4:	3720      	adds	r7, #32
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003204:	f000 fd2e 	bl	8003c64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003208:	4b2a      	ldr	r3, [pc, #168]	; (80032b4 <prvAddNewTaskToReadyList+0xb8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	3301      	adds	r3, #1
 800320e:	4a29      	ldr	r2, [pc, #164]	; (80032b4 <prvAddNewTaskToReadyList+0xb8>)
 8003210:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003212:	4b29      	ldr	r3, [pc, #164]	; (80032b8 <prvAddNewTaskToReadyList+0xbc>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800321a:	4a27      	ldr	r2, [pc, #156]	; (80032b8 <prvAddNewTaskToReadyList+0xbc>)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003220:	4b24      	ldr	r3, [pc, #144]	; (80032b4 <prvAddNewTaskToReadyList+0xb8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d110      	bne.n	800324a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003228:	f000 fac2 	bl	80037b0 <prvInitialiseTaskLists>
 800322c:	e00d      	b.n	800324a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800322e:	4b23      	ldr	r3, [pc, #140]	; (80032bc <prvAddNewTaskToReadyList+0xc0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d109      	bne.n	800324a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003236:	4b20      	ldr	r3, [pc, #128]	; (80032b8 <prvAddNewTaskToReadyList+0xbc>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	429a      	cmp	r2, r3
 8003242:	d802      	bhi.n	800324a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003244:	4a1c      	ldr	r2, [pc, #112]	; (80032b8 <prvAddNewTaskToReadyList+0xbc>)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800324a:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <prvAddNewTaskToReadyList+0xc4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3301      	adds	r3, #1
 8003250:	4a1b      	ldr	r2, [pc, #108]	; (80032c0 <prvAddNewTaskToReadyList+0xc4>)
 8003252:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	2201      	movs	r2, #1
 800325a:	409a      	lsls	r2, r3
 800325c:	4b19      	ldr	r3, [pc, #100]	; (80032c4 <prvAddNewTaskToReadyList+0xc8>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4313      	orrs	r3, r2
 8003262:	4a18      	ldr	r2, [pc, #96]	; (80032c4 <prvAddNewTaskToReadyList+0xc8>)
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4a15      	ldr	r2, [pc, #84]	; (80032c8 <prvAddNewTaskToReadyList+0xcc>)
 8003274:	441a      	add	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3304      	adds	r3, #4
 800327a:	4619      	mov	r1, r3
 800327c:	4610      	mov	r0, r2
 800327e:	f7ff fe15 	bl	8002eac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003282:	f000 fd1f 	bl	8003cc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003286:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <prvAddNewTaskToReadyList+0xc0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00e      	beq.n	80032ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800328e:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <prvAddNewTaskToReadyList+0xbc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	429a      	cmp	r2, r3
 800329a:	d207      	bcs.n	80032ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800329c:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <prvAddNewTaskToReadyList+0xd0>)
 800329e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032ac:	bf00      	nop
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20000380 	.word	0x20000380
 80032b8:	20000280 	.word	0x20000280
 80032bc:	2000038c 	.word	0x2000038c
 80032c0:	2000039c 	.word	0x2000039c
 80032c4:	20000388 	.word	0x20000388
 80032c8:	20000284 	.word	0x20000284
 80032cc:	e000ed04 	.word	0xe000ed04

080032d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d017      	beq.n	8003312 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80032e2:	4b13      	ldr	r3, [pc, #76]	; (8003330 <vTaskDelay+0x60>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <vTaskDelay+0x30>
	__asm volatile
 80032ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ee:	f383 8811 	msr	BASEPRI, r3
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	60bb      	str	r3, [r7, #8]
}
 80032fc:	bf00      	nop
 80032fe:	e7fe      	b.n	80032fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003300:	f000 f87a 	bl	80033f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003304:	2100      	movs	r1, #0
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fb16 	bl	8003938 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800330c:	f000 f882 	bl	8003414 <xTaskResumeAll>
 8003310:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d107      	bne.n	8003328 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003318:	4b06      	ldr	r3, [pc, #24]	; (8003334 <vTaskDelay+0x64>)
 800331a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003328:	bf00      	nop
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	200003a8 	.word	0x200003a8
 8003334:	e000ed04 	.word	0xe000ed04

08003338 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08a      	sub	sp, #40	; 0x28
 800333c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800333e:	2300      	movs	r3, #0
 8003340:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003342:	2300      	movs	r3, #0
 8003344:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003346:	463a      	mov	r2, r7
 8003348:	1d39      	adds	r1, r7, #4
 800334a:	f107 0308 	add.w	r3, r7, #8
 800334e:	4618      	mov	r0, r3
 8003350:	f7fc ff3e 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003354:	6839      	ldr	r1, [r7, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	9202      	str	r2, [sp, #8]
 800335c:	9301      	str	r3, [sp, #4]
 800335e:	2300      	movs	r3, #0
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	2300      	movs	r3, #0
 8003364:	460a      	mov	r2, r1
 8003366:	491e      	ldr	r1, [pc, #120]	; (80033e0 <vTaskStartScheduler+0xa8>)
 8003368:	481e      	ldr	r0, [pc, #120]	; (80033e4 <vTaskStartScheduler+0xac>)
 800336a:	f7ff fe26 	bl	8002fba <xTaskCreateStatic>
 800336e:	4603      	mov	r3, r0
 8003370:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <vTaskStartScheduler+0xb0>)
 8003372:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003374:	4b1c      	ldr	r3, [pc, #112]	; (80033e8 <vTaskStartScheduler+0xb0>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800337c:	2301      	movs	r3, #1
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	e001      	b.n	8003386 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d116      	bne.n	80033ba <vTaskStartScheduler+0x82>
	__asm volatile
 800338c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003390:	f383 8811 	msr	BASEPRI, r3
 8003394:	f3bf 8f6f 	isb	sy
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	613b      	str	r3, [r7, #16]
}
 800339e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80033a0:	4b12      	ldr	r3, [pc, #72]	; (80033ec <vTaskStartScheduler+0xb4>)
 80033a2:	f04f 32ff 	mov.w	r2, #4294967295
 80033a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80033a8:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <vTaskStartScheduler+0xb8>)
 80033aa:	2201      	movs	r2, #1
 80033ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80033ae:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <vTaskStartScheduler+0xbc>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80033b4:	f000 fbb4 	bl	8003b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80033b8:	e00e      	b.n	80033d8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c0:	d10a      	bne.n	80033d8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80033c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c6:	f383 8811 	msr	BASEPRI, r3
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	f3bf 8f4f 	dsb	sy
 80033d2:	60fb      	str	r3, [r7, #12]
}
 80033d4:	bf00      	nop
 80033d6:	e7fe      	b.n	80033d6 <vTaskStartScheduler+0x9e>
}
 80033d8:	bf00      	nop
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	08004390 	.word	0x08004390
 80033e4:	08003781 	.word	0x08003781
 80033e8:	200003a4 	.word	0x200003a4
 80033ec:	200003a0 	.word	0x200003a0
 80033f0:	2000038c 	.word	0x2000038c
 80033f4:	20000384 	.word	0x20000384

080033f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80033fc:	4b04      	ldr	r3, [pc, #16]	; (8003410 <vTaskSuspendAll+0x18>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3301      	adds	r3, #1
 8003402:	4a03      	ldr	r2, [pc, #12]	; (8003410 <vTaskSuspendAll+0x18>)
 8003404:	6013      	str	r3, [r2, #0]
}
 8003406:	bf00      	nop
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	200003a8 	.word	0x200003a8

08003414 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800341e:	2300      	movs	r3, #0
 8003420:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003422:	4b41      	ldr	r3, [pc, #260]	; (8003528 <xTaskResumeAll+0x114>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10a      	bne.n	8003440 <xTaskResumeAll+0x2c>
	__asm volatile
 800342a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342e:	f383 8811 	msr	BASEPRI, r3
 8003432:	f3bf 8f6f 	isb	sy
 8003436:	f3bf 8f4f 	dsb	sy
 800343a:	603b      	str	r3, [r7, #0]
}
 800343c:	bf00      	nop
 800343e:	e7fe      	b.n	800343e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003440:	f000 fc10 	bl	8003c64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003444:	4b38      	ldr	r3, [pc, #224]	; (8003528 <xTaskResumeAll+0x114>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3b01      	subs	r3, #1
 800344a:	4a37      	ldr	r2, [pc, #220]	; (8003528 <xTaskResumeAll+0x114>)
 800344c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800344e:	4b36      	ldr	r3, [pc, #216]	; (8003528 <xTaskResumeAll+0x114>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d161      	bne.n	800351a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003456:	4b35      	ldr	r3, [pc, #212]	; (800352c <xTaskResumeAll+0x118>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d05d      	beq.n	800351a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800345e:	e02e      	b.n	80034be <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003460:	4b33      	ldr	r3, [pc, #204]	; (8003530 <xTaskResumeAll+0x11c>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	3318      	adds	r3, #24
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff fd7a 	bl	8002f66 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	3304      	adds	r3, #4
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff fd75 	bl	8002f66 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	2201      	movs	r2, #1
 8003482:	409a      	lsls	r2, r3
 8003484:	4b2b      	ldr	r3, [pc, #172]	; (8003534 <xTaskResumeAll+0x120>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4313      	orrs	r3, r2
 800348a:	4a2a      	ldr	r2, [pc, #168]	; (8003534 <xTaskResumeAll+0x120>)
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4a27      	ldr	r2, [pc, #156]	; (8003538 <xTaskResumeAll+0x124>)
 800349c:	441a      	add	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	3304      	adds	r3, #4
 80034a2:	4619      	mov	r1, r3
 80034a4:	4610      	mov	r0, r2
 80034a6:	f7ff fd01 	bl	8002eac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ae:	4b23      	ldr	r3, [pc, #140]	; (800353c <xTaskResumeAll+0x128>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d302      	bcc.n	80034be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80034b8:	4b21      	ldr	r3, [pc, #132]	; (8003540 <xTaskResumeAll+0x12c>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034be:	4b1c      	ldr	r3, [pc, #112]	; (8003530 <xTaskResumeAll+0x11c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1cc      	bne.n	8003460 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80034cc:	f000 fa0e 	bl	80038ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80034d0:	4b1c      	ldr	r3, [pc, #112]	; (8003544 <xTaskResumeAll+0x130>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d010      	beq.n	80034fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80034dc:	f000 f836 	bl	800354c <xTaskIncrementTick>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80034e6:	4b16      	ldr	r3, [pc, #88]	; (8003540 <xTaskResumeAll+0x12c>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1f1      	bne.n	80034dc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80034f8:	4b12      	ldr	r3, [pc, #72]	; (8003544 <xTaskResumeAll+0x130>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80034fe:	4b10      	ldr	r3, [pc, #64]	; (8003540 <xTaskResumeAll+0x12c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d009      	beq.n	800351a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003506:	2301      	movs	r3, #1
 8003508:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800350a:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <xTaskResumeAll+0x134>)
 800350c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	f3bf 8f4f 	dsb	sy
 8003516:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800351a:	f000 fbd3 	bl	8003cc4 <vPortExitCritical>

	return xAlreadyYielded;
 800351e:	68bb      	ldr	r3, [r7, #8]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	200003a8 	.word	0x200003a8
 800352c:	20000380 	.word	0x20000380
 8003530:	20000340 	.word	0x20000340
 8003534:	20000388 	.word	0x20000388
 8003538:	20000284 	.word	0x20000284
 800353c:	20000280 	.word	0x20000280
 8003540:	20000394 	.word	0x20000394
 8003544:	20000390 	.word	0x20000390
 8003548:	e000ed04 	.word	0xe000ed04

0800354c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003552:	2300      	movs	r3, #0
 8003554:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003556:	4b51      	ldr	r3, [pc, #324]	; (800369c <xTaskIncrementTick+0x150>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f040 808d 	bne.w	800367a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003560:	4b4f      	ldr	r3, [pc, #316]	; (80036a0 <xTaskIncrementTick+0x154>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3301      	adds	r3, #1
 8003566:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003568:	4a4d      	ldr	r2, [pc, #308]	; (80036a0 <xTaskIncrementTick+0x154>)
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d120      	bne.n	80035b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003574:	4b4b      	ldr	r3, [pc, #300]	; (80036a4 <xTaskIncrementTick+0x158>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <xTaskIncrementTick+0x48>
	__asm volatile
 800357e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	603b      	str	r3, [r7, #0]
}
 8003590:	bf00      	nop
 8003592:	e7fe      	b.n	8003592 <xTaskIncrementTick+0x46>
 8003594:	4b43      	ldr	r3, [pc, #268]	; (80036a4 <xTaskIncrementTick+0x158>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	4b43      	ldr	r3, [pc, #268]	; (80036a8 <xTaskIncrementTick+0x15c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a41      	ldr	r2, [pc, #260]	; (80036a4 <xTaskIncrementTick+0x158>)
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	4a41      	ldr	r2, [pc, #260]	; (80036a8 <xTaskIncrementTick+0x15c>)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	4b40      	ldr	r3, [pc, #256]	; (80036ac <xTaskIncrementTick+0x160>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	3301      	adds	r3, #1
 80035ae:	4a3f      	ldr	r2, [pc, #252]	; (80036ac <xTaskIncrementTick+0x160>)
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	f000 f99b 	bl	80038ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80035b6:	4b3e      	ldr	r3, [pc, #248]	; (80036b0 <xTaskIncrementTick+0x164>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d34d      	bcc.n	800365c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035c0:	4b38      	ldr	r3, [pc, #224]	; (80036a4 <xTaskIncrementTick+0x158>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <xTaskIncrementTick+0x82>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <xTaskIncrementTick+0x84>
 80035ce:	2300      	movs	r3, #0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d004      	beq.n	80035de <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035d4:	4b36      	ldr	r3, [pc, #216]	; (80036b0 <xTaskIncrementTick+0x164>)
 80035d6:	f04f 32ff 	mov.w	r2, #4294967295
 80035da:	601a      	str	r2, [r3, #0]
					break;
 80035dc:	e03e      	b.n	800365c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80035de:	4b31      	ldr	r3, [pc, #196]	; (80036a4 <xTaskIncrementTick+0x158>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d203      	bcs.n	80035fe <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80035f6:	4a2e      	ldr	r2, [pc, #184]	; (80036b0 <xTaskIncrementTick+0x164>)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6013      	str	r3, [r2, #0]
						break;
 80035fc:	e02e      	b.n	800365c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	3304      	adds	r3, #4
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff fcaf 	bl	8002f66 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	2b00      	cmp	r3, #0
 800360e:	d004      	beq.n	800361a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	3318      	adds	r3, #24
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff fca6 	bl	8002f66 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	2201      	movs	r2, #1
 8003620:	409a      	lsls	r2, r3
 8003622:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <xTaskIncrementTick+0x168>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4313      	orrs	r3, r2
 8003628:	4a22      	ldr	r2, [pc, #136]	; (80036b4 <xTaskIncrementTick+0x168>)
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4a1f      	ldr	r2, [pc, #124]	; (80036b8 <xTaskIncrementTick+0x16c>)
 800363a:	441a      	add	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	3304      	adds	r3, #4
 8003640:	4619      	mov	r1, r3
 8003642:	4610      	mov	r0, r2
 8003644:	f7ff fc32 	bl	8002eac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364c:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <xTaskIncrementTick+0x170>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003652:	429a      	cmp	r2, r3
 8003654:	d3b4      	bcc.n	80035c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003656:	2301      	movs	r3, #1
 8003658:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800365a:	e7b1      	b.n	80035c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800365c:	4b17      	ldr	r3, [pc, #92]	; (80036bc <xTaskIncrementTick+0x170>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003662:	4915      	ldr	r1, [pc, #84]	; (80036b8 <xTaskIncrementTick+0x16c>)
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d907      	bls.n	8003684 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003674:	2301      	movs	r3, #1
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	e004      	b.n	8003684 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800367a:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <xTaskIncrementTick+0x174>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3301      	adds	r3, #1
 8003680:	4a0f      	ldr	r2, [pc, #60]	; (80036c0 <xTaskIncrementTick+0x174>)
 8003682:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003684:	4b0f      	ldr	r3, [pc, #60]	; (80036c4 <xTaskIncrementTick+0x178>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800368c:	2301      	movs	r3, #1
 800368e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003690:	697b      	ldr	r3, [r7, #20]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	200003a8 	.word	0x200003a8
 80036a0:	20000384 	.word	0x20000384
 80036a4:	20000338 	.word	0x20000338
 80036a8:	2000033c 	.word	0x2000033c
 80036ac:	20000398 	.word	0x20000398
 80036b0:	200003a0 	.word	0x200003a0
 80036b4:	20000388 	.word	0x20000388
 80036b8:	20000284 	.word	0x20000284
 80036bc:	20000280 	.word	0x20000280
 80036c0:	20000390 	.word	0x20000390
 80036c4:	20000394 	.word	0x20000394

080036c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036ce:	4b27      	ldr	r3, [pc, #156]	; (800376c <vTaskSwitchContext+0xa4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80036d6:	4b26      	ldr	r3, [pc, #152]	; (8003770 <vTaskSwitchContext+0xa8>)
 80036d8:	2201      	movs	r2, #1
 80036da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80036dc:	e03f      	b.n	800375e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80036de:	4b24      	ldr	r3, [pc, #144]	; (8003770 <vTaskSwitchContext+0xa8>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80036e4:	4b23      	ldr	r3, [pc, #140]	; (8003774 <vTaskSwitchContext+0xac>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	fab3 f383 	clz	r3, r3
 80036f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80036f2:	7afb      	ldrb	r3, [r7, #11]
 80036f4:	f1c3 031f 	rsb	r3, r3, #31
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	491f      	ldr	r1, [pc, #124]	; (8003778 <vTaskSwitchContext+0xb0>)
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10a      	bne.n	8003724 <vTaskSwitchContext+0x5c>
	__asm volatile
 800370e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003712:	f383 8811 	msr	BASEPRI, r3
 8003716:	f3bf 8f6f 	isb	sy
 800371a:	f3bf 8f4f 	dsb	sy
 800371e:	607b      	str	r3, [r7, #4]
}
 8003720:	bf00      	nop
 8003722:	e7fe      	b.n	8003722 <vTaskSwitchContext+0x5a>
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4a12      	ldr	r2, [pc, #72]	; (8003778 <vTaskSwitchContext+0xb0>)
 8003730:	4413      	add	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	3308      	adds	r3, #8
 8003746:	429a      	cmp	r2, r3
 8003748:	d104      	bne.n	8003754 <vTaskSwitchContext+0x8c>
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	605a      	str	r2, [r3, #4]
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	4a08      	ldr	r2, [pc, #32]	; (800377c <vTaskSwitchContext+0xb4>)
 800375c:	6013      	str	r3, [r2, #0]
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	200003a8 	.word	0x200003a8
 8003770:	20000394 	.word	0x20000394
 8003774:	20000388 	.word	0x20000388
 8003778:	20000284 	.word	0x20000284
 800377c:	20000280 	.word	0x20000280

08003780 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003788:	f000 f852 	bl	8003830 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800378c:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <prvIdleTask+0x28>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d9f9      	bls.n	8003788 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003794:	4b05      	ldr	r3, [pc, #20]	; (80037ac <prvIdleTask+0x2c>)
 8003796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	f3bf 8f4f 	dsb	sy
 80037a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80037a4:	e7f0      	b.n	8003788 <prvIdleTask+0x8>
 80037a6:	bf00      	nop
 80037a8:	20000284 	.word	0x20000284
 80037ac:	e000ed04 	.word	0xe000ed04

080037b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037b6:	2300      	movs	r3, #0
 80037b8:	607b      	str	r3, [r7, #4]
 80037ba:	e00c      	b.n	80037d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4a12      	ldr	r2, [pc, #72]	; (8003810 <prvInitialiseTaskLists+0x60>)
 80037c8:	4413      	add	r3, r2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff fb41 	bl	8002e52 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3301      	adds	r3, #1
 80037d4:	607b      	str	r3, [r7, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b06      	cmp	r3, #6
 80037da:	d9ef      	bls.n	80037bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80037dc:	480d      	ldr	r0, [pc, #52]	; (8003814 <prvInitialiseTaskLists+0x64>)
 80037de:	f7ff fb38 	bl	8002e52 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80037e2:	480d      	ldr	r0, [pc, #52]	; (8003818 <prvInitialiseTaskLists+0x68>)
 80037e4:	f7ff fb35 	bl	8002e52 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80037e8:	480c      	ldr	r0, [pc, #48]	; (800381c <prvInitialiseTaskLists+0x6c>)
 80037ea:	f7ff fb32 	bl	8002e52 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80037ee:	480c      	ldr	r0, [pc, #48]	; (8003820 <prvInitialiseTaskLists+0x70>)
 80037f0:	f7ff fb2f 	bl	8002e52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80037f4:	480b      	ldr	r0, [pc, #44]	; (8003824 <prvInitialiseTaskLists+0x74>)
 80037f6:	f7ff fb2c 	bl	8002e52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80037fa:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <prvInitialiseTaskLists+0x78>)
 80037fc:	4a05      	ldr	r2, [pc, #20]	; (8003814 <prvInitialiseTaskLists+0x64>)
 80037fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003800:	4b0a      	ldr	r3, [pc, #40]	; (800382c <prvInitialiseTaskLists+0x7c>)
 8003802:	4a05      	ldr	r2, [pc, #20]	; (8003818 <prvInitialiseTaskLists+0x68>)
 8003804:	601a      	str	r2, [r3, #0]
}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20000284 	.word	0x20000284
 8003814:	20000310 	.word	0x20000310
 8003818:	20000324 	.word	0x20000324
 800381c:	20000340 	.word	0x20000340
 8003820:	20000354 	.word	0x20000354
 8003824:	2000036c 	.word	0x2000036c
 8003828:	20000338 	.word	0x20000338
 800382c:	2000033c 	.word	0x2000033c

08003830 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003836:	e019      	b.n	800386c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003838:	f000 fa14 	bl	8003c64 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800383c:	4b10      	ldr	r3, [pc, #64]	; (8003880 <prvCheckTasksWaitingTermination+0x50>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3304      	adds	r3, #4
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff fb8c 	bl	8002f66 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800384e:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <prvCheckTasksWaitingTermination+0x54>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3b01      	subs	r3, #1
 8003854:	4a0b      	ldr	r2, [pc, #44]	; (8003884 <prvCheckTasksWaitingTermination+0x54>)
 8003856:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003858:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <prvCheckTasksWaitingTermination+0x58>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3b01      	subs	r3, #1
 800385e:	4a0a      	ldr	r2, [pc, #40]	; (8003888 <prvCheckTasksWaitingTermination+0x58>)
 8003860:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003862:	f000 fa2f 	bl	8003cc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f810 	bl	800388c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800386c:	4b06      	ldr	r3, [pc, #24]	; (8003888 <prvCheckTasksWaitingTermination+0x58>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1e1      	bne.n	8003838 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003874:	bf00      	nop
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000354 	.word	0x20000354
 8003884:	20000380 	.word	0x20000380
 8003888:	20000368 	.word	0x20000368

0800388c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800389a:	2b00      	cmp	r3, #0
 800389c:	d108      	bne.n	80038b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fb84 	bl	8003fb0 <vPortFree>
				vPortFree( pxTCB );
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fb81 	bl	8003fb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80038ae:	e018      	b.n	80038e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d103      	bne.n	80038c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fb78 	bl	8003fb0 <vPortFree>
	}
 80038c0:	e00f      	b.n	80038e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d00a      	beq.n	80038e2 <prvDeleteTCB+0x56>
	__asm volatile
 80038cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d0:	f383 8811 	msr	BASEPRI, r3
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	60fb      	str	r3, [r7, #12]
}
 80038de:	bf00      	nop
 80038e0:	e7fe      	b.n	80038e0 <prvDeleteTCB+0x54>
	}
 80038e2:	bf00      	nop
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038f2:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <prvResetNextTaskUnblockTime+0x44>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <prvResetNextTaskUnblockTime+0x14>
 80038fc:	2301      	movs	r3, #1
 80038fe:	e000      	b.n	8003902 <prvResetNextTaskUnblockTime+0x16>
 8003900:	2300      	movs	r3, #0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d004      	beq.n	8003910 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003906:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <prvResetNextTaskUnblockTime+0x48>)
 8003908:	f04f 32ff 	mov.w	r2, #4294967295
 800390c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800390e:	e008      	b.n	8003922 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003910:	4b07      	ldr	r3, [pc, #28]	; (8003930 <prvResetNextTaskUnblockTime+0x44>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4a05      	ldr	r2, [pc, #20]	; (8003934 <prvResetNextTaskUnblockTime+0x48>)
 8003920:	6013      	str	r3, [r2, #0]
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	20000338 	.word	0x20000338
 8003934:	200003a0 	.word	0x200003a0

08003938 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003942:	4b29      	ldr	r3, [pc, #164]	; (80039e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003948:	4b28      	ldr	r3, [pc, #160]	; (80039ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3304      	adds	r3, #4
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff fb09 	bl	8002f66 <uxListRemove>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10b      	bne.n	8003972 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800395a:	4b24      	ldr	r3, [pc, #144]	; (80039ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	2201      	movs	r2, #1
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43da      	mvns	r2, r3
 8003968:	4b21      	ldr	r3, [pc, #132]	; (80039f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4013      	ands	r3, r2
 800396e:	4a20      	ldr	r2, [pc, #128]	; (80039f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003970:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003978:	d10a      	bne.n	8003990 <prvAddCurrentTaskToDelayedList+0x58>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d007      	beq.n	8003990 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003980:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3304      	adds	r3, #4
 8003986:	4619      	mov	r1, r3
 8003988:	481a      	ldr	r0, [pc, #104]	; (80039f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800398a:	f7ff fa8f 	bl	8002eac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800398e:	e026      	b.n	80039de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4413      	add	r3, r2
 8003996:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003998:	4b14      	ldr	r3, [pc, #80]	; (80039ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d209      	bcs.n	80039bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039a8:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3304      	adds	r3, #4
 80039b2:	4619      	mov	r1, r3
 80039b4:	4610      	mov	r0, r2
 80039b6:	f7ff fa9d 	bl	8002ef4 <vListInsert>
}
 80039ba:	e010      	b.n	80039de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039bc:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3304      	adds	r3, #4
 80039c6:	4619      	mov	r1, r3
 80039c8:	4610      	mov	r0, r2
 80039ca:	f7ff fa93 	bl	8002ef4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80039ce:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <prvAddCurrentTaskToDelayedList+0xc8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d202      	bcs.n	80039de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80039d8:	4a09      	ldr	r2, [pc, #36]	; (8003a00 <prvAddCurrentTaskToDelayedList+0xc8>)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	6013      	str	r3, [r2, #0]
}
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20000384 	.word	0x20000384
 80039ec:	20000280 	.word	0x20000280
 80039f0:	20000388 	.word	0x20000388
 80039f4:	2000036c 	.word	0x2000036c
 80039f8:	2000033c 	.word	0x2000033c
 80039fc:	20000338 	.word	0x20000338
 8003a00:	200003a0 	.word	0x200003a0

08003a04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3b04      	subs	r3, #4
 8003a14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	3b04      	subs	r3, #4
 8003a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f023 0201 	bic.w	r2, r3, #1
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	3b04      	subs	r3, #4
 8003a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003a34:	4a0c      	ldr	r2, [pc, #48]	; (8003a68 <pxPortInitialiseStack+0x64>)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3b14      	subs	r3, #20
 8003a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3b04      	subs	r3, #4
 8003a4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f06f 0202 	mvn.w	r2, #2
 8003a52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	3b20      	subs	r3, #32
 8003a58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	08003a6d 	.word	0x08003a6d

08003a6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003a72:	2300      	movs	r3, #0
 8003a74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003a76:	4b12      	ldr	r3, [pc, #72]	; (8003ac0 <prvTaskExitError+0x54>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7e:	d00a      	beq.n	8003a96 <prvTaskExitError+0x2a>
	__asm volatile
 8003a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	60fb      	str	r3, [r7, #12]
}
 8003a92:	bf00      	nop
 8003a94:	e7fe      	b.n	8003a94 <prvTaskExitError+0x28>
	__asm volatile
 8003a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9a:	f383 8811 	msr	BASEPRI, r3
 8003a9e:	f3bf 8f6f 	isb	sy
 8003aa2:	f3bf 8f4f 	dsb	sy
 8003aa6:	60bb      	str	r3, [r7, #8]
}
 8003aa8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003aaa:	bf00      	nop
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0fc      	beq.n	8003aac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003ab2:	bf00      	nop
 8003ab4:	bf00      	nop
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	2000000c 	.word	0x2000000c
	...

08003ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ad0:	4b07      	ldr	r3, [pc, #28]	; (8003af0 <pxCurrentTCBConst2>)
 8003ad2:	6819      	ldr	r1, [r3, #0]
 8003ad4:	6808      	ldr	r0, [r1, #0]
 8003ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ada:	f380 8809 	msr	PSP, r0
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f04f 0000 	mov.w	r0, #0
 8003ae6:	f380 8811 	msr	BASEPRI, r0
 8003aea:	4770      	bx	lr
 8003aec:	f3af 8000 	nop.w

08003af0 <pxCurrentTCBConst2>:
 8003af0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop

08003af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003af8:	4808      	ldr	r0, [pc, #32]	; (8003b1c <prvPortStartFirstTask+0x24>)
 8003afa:	6800      	ldr	r0, [r0, #0]
 8003afc:	6800      	ldr	r0, [r0, #0]
 8003afe:	f380 8808 	msr	MSP, r0
 8003b02:	f04f 0000 	mov.w	r0, #0
 8003b06:	f380 8814 	msr	CONTROL, r0
 8003b0a:	b662      	cpsie	i
 8003b0c:	b661      	cpsie	f
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	df00      	svc	0
 8003b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003b1a:	bf00      	nop
 8003b1c:	e000ed08 	.word	0xe000ed08

08003b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b26:	4b46      	ldr	r3, [pc, #280]	; (8003c40 <xPortStartScheduler+0x120>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a46      	ldr	r2, [pc, #280]	; (8003c44 <xPortStartScheduler+0x124>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d10a      	bne.n	8003b46 <xPortStartScheduler+0x26>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	613b      	str	r3, [r7, #16]
}
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b46:	4b3e      	ldr	r3, [pc, #248]	; (8003c40 <xPortStartScheduler+0x120>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a3f      	ldr	r2, [pc, #252]	; (8003c48 <xPortStartScheduler+0x128>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10a      	bne.n	8003b66 <xPortStartScheduler+0x46>
	__asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	60fb      	str	r3, [r7, #12]
}
 8003b62:	bf00      	nop
 8003b64:	e7fe      	b.n	8003b64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b66:	4b39      	ldr	r3, [pc, #228]	; (8003c4c <xPortStartScheduler+0x12c>)
 8003b68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	22ff      	movs	r2, #255	; 0xff
 8003b76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	4b31      	ldr	r3, [pc, #196]	; (8003c50 <xPortStartScheduler+0x130>)
 8003b8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b8e:	4b31      	ldr	r3, [pc, #196]	; (8003c54 <xPortStartScheduler+0x134>)
 8003b90:	2207      	movs	r2, #7
 8003b92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b94:	e009      	b.n	8003baa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003b96:	4b2f      	ldr	r3, [pc, #188]	; (8003c54 <xPortStartScheduler+0x134>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	4a2d      	ldr	r2, [pc, #180]	; (8003c54 <xPortStartScheduler+0x134>)
 8003b9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003baa:	78fb      	ldrb	r3, [r7, #3]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb2:	2b80      	cmp	r3, #128	; 0x80
 8003bb4:	d0ef      	beq.n	8003b96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003bb6:	4b27      	ldr	r3, [pc, #156]	; (8003c54 <xPortStartScheduler+0x134>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f1c3 0307 	rsb	r3, r3, #7
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d00a      	beq.n	8003bd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	60bb      	str	r3, [r7, #8]
}
 8003bd4:	bf00      	nop
 8003bd6:	e7fe      	b.n	8003bd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003bd8:	4b1e      	ldr	r3, [pc, #120]	; (8003c54 <xPortStartScheduler+0x134>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	4a1d      	ldr	r2, [pc, #116]	; (8003c54 <xPortStartScheduler+0x134>)
 8003be0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003be2:	4b1c      	ldr	r3, [pc, #112]	; (8003c54 <xPortStartScheduler+0x134>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bea:	4a1a      	ldr	r2, [pc, #104]	; (8003c54 <xPortStartScheduler+0x134>)
 8003bec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003bf6:	4b18      	ldr	r3, [pc, #96]	; (8003c58 <xPortStartScheduler+0x138>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a17      	ldr	r2, [pc, #92]	; (8003c58 <xPortStartScheduler+0x138>)
 8003bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003c02:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <xPortStartScheduler+0x138>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a14      	ldr	r2, [pc, #80]	; (8003c58 <xPortStartScheduler+0x138>)
 8003c08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003c0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003c0e:	f000 f8dd 	bl	8003dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c12:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <xPortStartScheduler+0x13c>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003c18:	f000 f8fc 	bl	8003e14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c1c:	4b10      	ldr	r3, [pc, #64]	; (8003c60 <xPortStartScheduler+0x140>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a0f      	ldr	r2, [pc, #60]	; (8003c60 <xPortStartScheduler+0x140>)
 8003c22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003c26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003c28:	f7ff ff66 	bl	8003af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003c2c:	f7ff fd4c 	bl	80036c8 <vTaskSwitchContext>
	prvTaskExitError();
 8003c30:	f7ff ff1c 	bl	8003a6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	e000ed00 	.word	0xe000ed00
 8003c44:	410fc271 	.word	0x410fc271
 8003c48:	410fc270 	.word	0x410fc270
 8003c4c:	e000e400 	.word	0xe000e400
 8003c50:	200003ac 	.word	0x200003ac
 8003c54:	200003b0 	.word	0x200003b0
 8003c58:	e000ed20 	.word	0xe000ed20
 8003c5c:	2000000c 	.word	0x2000000c
 8003c60:	e000ef34 	.word	0xe000ef34

08003c64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
	__asm volatile
 8003c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	607b      	str	r3, [r7, #4]
}
 8003c7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003c7e:	4b0f      	ldr	r3, [pc, #60]	; (8003cbc <vPortEnterCritical+0x58>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	3301      	adds	r3, #1
 8003c84:	4a0d      	ldr	r2, [pc, #52]	; (8003cbc <vPortEnterCritical+0x58>)
 8003c86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003c88:	4b0c      	ldr	r3, [pc, #48]	; (8003cbc <vPortEnterCritical+0x58>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d10f      	bne.n	8003cb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003c90:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <vPortEnterCritical+0x5c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8003c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9e:	f383 8811 	msr	BASEPRI, r3
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	603b      	str	r3, [r7, #0]
}
 8003cac:	bf00      	nop
 8003cae:	e7fe      	b.n	8003cae <vPortEnterCritical+0x4a>
	}
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	2000000c 	.word	0x2000000c
 8003cc0:	e000ed04 	.word	0xe000ed04

08003cc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003cca:	4b12      	ldr	r3, [pc, #72]	; (8003d14 <vPortExitCritical+0x50>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10a      	bne.n	8003ce8 <vPortExitCritical+0x24>
	__asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	607b      	str	r3, [r7, #4]
}
 8003ce4:	bf00      	nop
 8003ce6:	e7fe      	b.n	8003ce6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003ce8:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <vPortExitCritical+0x50>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3b01      	subs	r3, #1
 8003cee:	4a09      	ldr	r2, [pc, #36]	; (8003d14 <vPortExitCritical+0x50>)
 8003cf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003cf2:	4b08      	ldr	r3, [pc, #32]	; (8003d14 <vPortExitCritical+0x50>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d105      	bne.n	8003d06 <vPortExitCritical+0x42>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	2000000c 	.word	0x2000000c
	...

08003d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d20:	f3ef 8009 	mrs	r0, PSP
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	4b15      	ldr	r3, [pc, #84]	; (8003d80 <pxCurrentTCBConst>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	f01e 0f10 	tst.w	lr, #16
 8003d30:	bf08      	it	eq
 8003d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d3a:	6010      	str	r0, [r2, #0]
 8003d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003d40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003d44:	f380 8811 	msr	BASEPRI, r0
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f7ff fcba 	bl	80036c8 <vTaskSwitchContext>
 8003d54:	f04f 0000 	mov.w	r0, #0
 8003d58:	f380 8811 	msr	BASEPRI, r0
 8003d5c:	bc09      	pop	{r0, r3}
 8003d5e:	6819      	ldr	r1, [r3, #0]
 8003d60:	6808      	ldr	r0, [r1, #0]
 8003d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d66:	f01e 0f10 	tst.w	lr, #16
 8003d6a:	bf08      	it	eq
 8003d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003d70:	f380 8809 	msr	PSP, r0
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	f3af 8000 	nop.w

08003d80 <pxCurrentTCBConst>:
 8003d80:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003d84:	bf00      	nop
 8003d86:	bf00      	nop

08003d88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8003d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	607b      	str	r3, [r7, #4]
}
 8003da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003da2:	f7ff fbd3 	bl	800354c <xTaskIncrementTick>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003dac:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <SysTick_Handler+0x40>)
 8003dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	2300      	movs	r3, #0
 8003db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	f383 8811 	msr	BASEPRI, r3
}
 8003dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	e000ed04 	.word	0xe000ed04

08003dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <vPortSetupTimerInterrupt+0x34>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003dd6:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <vPortSetupTimerInterrupt+0x38>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <vPortSetupTimerInterrupt+0x3c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a0a      	ldr	r2, [pc, #40]	; (8003e0c <vPortSetupTimerInterrupt+0x40>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	099b      	lsrs	r3, r3, #6
 8003de8:	4a09      	ldr	r2, [pc, #36]	; (8003e10 <vPortSetupTimerInterrupt+0x44>)
 8003dea:	3b01      	subs	r3, #1
 8003dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003dee:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <vPortSetupTimerInterrupt+0x34>)
 8003df0:	2207      	movs	r2, #7
 8003df2:	601a      	str	r2, [r3, #0]
}
 8003df4:	bf00      	nop
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	e000e010 	.word	0xe000e010
 8003e04:	e000e018 	.word	0xe000e018
 8003e08:	20000000 	.word	0x20000000
 8003e0c:	10624dd3 	.word	0x10624dd3
 8003e10:	e000e014 	.word	0xe000e014

08003e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003e14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003e24 <vPortEnableVFP+0x10>
 8003e18:	6801      	ldr	r1, [r0, #0]
 8003e1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003e1e:	6001      	str	r1, [r0, #0]
 8003e20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003e22:	bf00      	nop
 8003e24:	e000ed88 	.word	0xe000ed88

08003e28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08a      	sub	sp, #40	; 0x28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e34:	f7ff fae0 	bl	80033f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e38:	4b58      	ldr	r3, [pc, #352]	; (8003f9c <pvPortMalloc+0x174>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e40:	f000 f910 	bl	8004064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e44:	4b56      	ldr	r3, [pc, #344]	; (8003fa0 <pvPortMalloc+0x178>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f040 808e 	bne.w	8003f6e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01d      	beq.n	8003e94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003e58:	2208      	movs	r2, #8
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d014      	beq.n	8003e94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f023 0307 	bic.w	r3, r3, #7
 8003e70:	3308      	adds	r3, #8
 8003e72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <pvPortMalloc+0x6c>
	__asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	617b      	str	r3, [r7, #20]
}
 8003e90:	bf00      	nop
 8003e92:	e7fe      	b.n	8003e92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d069      	beq.n	8003f6e <pvPortMalloc+0x146>
 8003e9a:	4b42      	ldr	r3, [pc, #264]	; (8003fa4 <pvPortMalloc+0x17c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d864      	bhi.n	8003f6e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003ea4:	4b40      	ldr	r3, [pc, #256]	; (8003fa8 <pvPortMalloc+0x180>)
 8003ea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003ea8:	4b3f      	ldr	r3, [pc, #252]	; (8003fa8 <pvPortMalloc+0x180>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003eae:	e004      	b.n	8003eba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d903      	bls.n	8003ecc <pvPortMalloc+0xa4>
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f1      	bne.n	8003eb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003ecc:	4b33      	ldr	r3, [pc, #204]	; (8003f9c <pvPortMalloc+0x174>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d04b      	beq.n	8003f6e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2208      	movs	r2, #8
 8003edc:	4413      	add	r3, r2
 8003ede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	1ad2      	subs	r2, r2, r3
 8003ef0:	2308      	movs	r3, #8
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d91f      	bls.n	8003f38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4413      	add	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <pvPortMalloc+0xf8>
	__asm volatile
 8003f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	613b      	str	r3, [r7, #16]
}
 8003f1c:	bf00      	nop
 8003f1e:	e7fe      	b.n	8003f1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	1ad2      	subs	r2, r2, r3
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f32:	69b8      	ldr	r0, [r7, #24]
 8003f34:	f000 f8f8 	bl	8004128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f38:	4b1a      	ldr	r3, [pc, #104]	; (8003fa4 <pvPortMalloc+0x17c>)
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	4a18      	ldr	r2, [pc, #96]	; (8003fa4 <pvPortMalloc+0x17c>)
 8003f44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f46:	4b17      	ldr	r3, [pc, #92]	; (8003fa4 <pvPortMalloc+0x17c>)
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	4b18      	ldr	r3, [pc, #96]	; (8003fac <pvPortMalloc+0x184>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d203      	bcs.n	8003f5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f52:	4b14      	ldr	r3, [pc, #80]	; (8003fa4 <pvPortMalloc+0x17c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a15      	ldr	r2, [pc, #84]	; (8003fac <pvPortMalloc+0x184>)
 8003f58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <pvPortMalloc+0x178>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	431a      	orrs	r2, r3
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003f6e:	f7ff fa51 	bl	8003414 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <pvPortMalloc+0x16a>
	__asm volatile
 8003f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	60fb      	str	r3, [r7, #12]
}
 8003f8e:	bf00      	nop
 8003f90:	e7fe      	b.n	8003f90 <pvPortMalloc+0x168>
	return pvReturn;
 8003f92:	69fb      	ldr	r3, [r7, #28]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3728      	adds	r7, #40	; 0x28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	20000fbc 	.word	0x20000fbc
 8003fa0:	20000fc8 	.word	0x20000fc8
 8003fa4:	20000fc0 	.word	0x20000fc0
 8003fa8:	20000fb4 	.word	0x20000fb4
 8003fac:	20000fc4 	.word	0x20000fc4

08003fb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d048      	beq.n	8004054 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003fc2:	2308      	movs	r3, #8
 8003fc4:	425b      	negs	r3, r3
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	4413      	add	r3, r2
 8003fca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	4b21      	ldr	r3, [pc, #132]	; (800405c <vPortFree+0xac>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10a      	bne.n	8003ff4 <vPortFree+0x44>
	__asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	60fb      	str	r3, [r7, #12]
}
 8003ff0:	bf00      	nop
 8003ff2:	e7fe      	b.n	8003ff2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <vPortFree+0x62>
	__asm volatile
 8003ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004000:	f383 8811 	msr	BASEPRI, r3
 8004004:	f3bf 8f6f 	isb	sy
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	60bb      	str	r3, [r7, #8]
}
 800400e:	bf00      	nop
 8004010:	e7fe      	b.n	8004010 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	4b11      	ldr	r3, [pc, #68]	; (800405c <vPortFree+0xac>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4013      	ands	r3, r2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d019      	beq.n	8004054 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d115      	bne.n	8004054 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	4b0b      	ldr	r3, [pc, #44]	; (800405c <vPortFree+0xac>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	43db      	mvns	r3, r3
 8004032:	401a      	ands	r2, r3
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004038:	f7ff f9de 	bl	80033f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	4b07      	ldr	r3, [pc, #28]	; (8004060 <vPortFree+0xb0>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4413      	add	r3, r2
 8004046:	4a06      	ldr	r2, [pc, #24]	; (8004060 <vPortFree+0xb0>)
 8004048:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800404a:	6938      	ldr	r0, [r7, #16]
 800404c:	f000 f86c 	bl	8004128 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004050:	f7ff f9e0 	bl	8003414 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004054:	bf00      	nop
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	20000fc8 	.word	0x20000fc8
 8004060:	20000fc0 	.word	0x20000fc0

08004064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800406a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800406e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004070:	4b27      	ldr	r3, [pc, #156]	; (8004110 <prvHeapInit+0xac>)
 8004072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00c      	beq.n	8004098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3307      	adds	r3, #7
 8004082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0307 	bic.w	r3, r3, #7
 800408a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	4a1f      	ldr	r2, [pc, #124]	; (8004110 <prvHeapInit+0xac>)
 8004094:	4413      	add	r3, r2
 8004096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800409c:	4a1d      	ldr	r2, [pc, #116]	; (8004114 <prvHeapInit+0xb0>)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80040a2:	4b1c      	ldr	r3, [pc, #112]	; (8004114 <prvHeapInit+0xb0>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	4413      	add	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80040b0:	2208      	movs	r2, #8
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1a9b      	subs	r3, r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0307 	bic.w	r3, r3, #7
 80040be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4a15      	ldr	r2, [pc, #84]	; (8004118 <prvHeapInit+0xb4>)
 80040c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80040c6:	4b14      	ldr	r3, [pc, #80]	; (8004118 <prvHeapInit+0xb4>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2200      	movs	r2, #0
 80040cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80040ce:	4b12      	ldr	r3, [pc, #72]	; (8004118 <prvHeapInit+0xb4>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	1ad2      	subs	r2, r2, r3
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80040e4:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <prvHeapInit+0xb4>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	4a0a      	ldr	r2, [pc, #40]	; (800411c <prvHeapInit+0xb8>)
 80040f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	4a09      	ldr	r2, [pc, #36]	; (8004120 <prvHeapInit+0xbc>)
 80040fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80040fc:	4b09      	ldr	r3, [pc, #36]	; (8004124 <prvHeapInit+0xc0>)
 80040fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004102:	601a      	str	r2, [r3, #0]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	200003b4 	.word	0x200003b4
 8004114:	20000fb4 	.word	0x20000fb4
 8004118:	20000fbc 	.word	0x20000fbc
 800411c:	20000fc4 	.word	0x20000fc4
 8004120:	20000fc0 	.word	0x20000fc0
 8004124:	20000fc8 	.word	0x20000fc8

08004128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004130:	4b28      	ldr	r3, [pc, #160]	; (80041d4 <prvInsertBlockIntoFreeList+0xac>)
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	e002      	b.n	800413c <prvInsertBlockIntoFreeList+0x14>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	429a      	cmp	r2, r3
 8004144:	d8f7      	bhi.n	8004136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	4413      	add	r3, r2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	429a      	cmp	r2, r3
 8004156:	d108      	bne.n	800416a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	441a      	add	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	441a      	add	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d118      	bne.n	80041b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	4b15      	ldr	r3, [pc, #84]	; (80041d8 <prvInsertBlockIntoFreeList+0xb0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d00d      	beq.n	80041a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	441a      	add	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	e008      	b.n	80041b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80041a6:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <prvInsertBlockIntoFreeList+0xb0>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e003      	b.n	80041b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d002      	beq.n	80041c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041c6:	bf00      	nop
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	20000fb4 	.word	0x20000fb4
 80041d8:	20000fbc 	.word	0x20000fbc

080041dc <__libc_init_array>:
 80041dc:	b570      	push	{r4, r5, r6, lr}
 80041de:	4d0d      	ldr	r5, [pc, #52]	; (8004214 <__libc_init_array+0x38>)
 80041e0:	4c0d      	ldr	r4, [pc, #52]	; (8004218 <__libc_init_array+0x3c>)
 80041e2:	1b64      	subs	r4, r4, r5
 80041e4:	10a4      	asrs	r4, r4, #2
 80041e6:	2600      	movs	r6, #0
 80041e8:	42a6      	cmp	r6, r4
 80041ea:	d109      	bne.n	8004200 <__libc_init_array+0x24>
 80041ec:	4d0b      	ldr	r5, [pc, #44]	; (800421c <__libc_init_array+0x40>)
 80041ee:	4c0c      	ldr	r4, [pc, #48]	; (8004220 <__libc_init_array+0x44>)
 80041f0:	f000 f820 	bl	8004234 <_init>
 80041f4:	1b64      	subs	r4, r4, r5
 80041f6:	10a4      	asrs	r4, r4, #2
 80041f8:	2600      	movs	r6, #0
 80041fa:	42a6      	cmp	r6, r4
 80041fc:	d105      	bne.n	800420a <__libc_init_array+0x2e>
 80041fe:	bd70      	pop	{r4, r5, r6, pc}
 8004200:	f855 3b04 	ldr.w	r3, [r5], #4
 8004204:	4798      	blx	r3
 8004206:	3601      	adds	r6, #1
 8004208:	e7ee      	b.n	80041e8 <__libc_init_array+0xc>
 800420a:	f855 3b04 	ldr.w	r3, [r5], #4
 800420e:	4798      	blx	r3
 8004210:	3601      	adds	r6, #1
 8004212:	e7f2      	b.n	80041fa <__libc_init_array+0x1e>
 8004214:	080043d0 	.word	0x080043d0
 8004218:	080043d0 	.word	0x080043d0
 800421c:	080043d0 	.word	0x080043d0
 8004220:	080043d4 	.word	0x080043d4

08004224 <memset>:
 8004224:	4402      	add	r2, r0
 8004226:	4603      	mov	r3, r0
 8004228:	4293      	cmp	r3, r2
 800422a:	d100      	bne.n	800422e <memset+0xa>
 800422c:	4770      	bx	lr
 800422e:	f803 1b01 	strb.w	r1, [r3], #1
 8004232:	e7f9      	b.n	8004228 <memset+0x4>

08004234 <_init>:
 8004234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004236:	bf00      	nop
 8004238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423a:	bc08      	pop	{r3}
 800423c:	469e      	mov	lr, r3
 800423e:	4770      	bx	lr

08004240 <_fini>:
 8004240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004242:	bf00      	nop
 8004244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004246:	bc08      	pop	{r3}
 8004248:	469e      	mov	lr, r3
 800424a:	4770      	bx	lr
