
STM32_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007778  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08007908  08007908  00017908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ab0  08007ab0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08007ab0  08007ab0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ab0  08007ab0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ab0  08007ab0  00017ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ab4  08007ab4  00017ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00001198  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200011a8  200011a8  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017318  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031c6  00000000  00000000  00037358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001250  00000000  00000000  0003a520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010f8  00000000  00000000  0003b770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002015b  00000000  00000000  0003c868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000162e8  00000000  00000000  0005c9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c59ac  00000000  00000000  00072cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00138657  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d58  00000000  00000000  001386ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078f0 	.word	0x080078f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080078f0 	.word	0x080078f0

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <vApplicationGetIdleTaskMemory+0x30>)
 8000a22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	2000002c 	.word	0x2000002c
 8000a3c:	20000080 	.word	0x20000080

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b5b0      	push	{r4, r5, r7, lr}
 8000a42:	b0b0      	sub	sp, #192	; 0xc0
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a46:	f000 fdd9 	bl	80015fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4a:	f000 f8b9 	bl	8000bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4e:	f000 f9c1 	bl	8000dd4 <MX_GPIO_Init>
  MX_I2C1_SMBUS_Init();
 8000a52:	f000 f985 	bl	8000d60 <MX_I2C1_SMBUS_Init>
  MX_ADC1_Init();
 8000a56:	f000 f913 	bl	8000c80 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // PCB data initialization
  PCB pcb;
  pcb.PCBUniqueID=PCBuniqueID;
 8000a5a:	2328      	movs	r3, #40	; 0x28
 8000a5c:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
  pcb.NumberOfSensors=Numberofsensors;
 8000a60:	2302      	movs	r3, #2
 8000a62:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
  strcpy(pcb.ManufacturingDate,Manufacturingdate);
 8000a66:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000a6a:	3303      	adds	r3, #3
 8000a6c:	4946      	ldr	r1, [pc, #280]	; (8000b88 <main+0x148>)
 8000a6e:	461a      	mov	r2, r3
 8000a70:	460b      	mov	r3, r1
 8000a72:	cb03      	ldmia	r3!, {r0, r1}
 8000a74:	6010      	str	r0, [r2, #0]
 8000a76:	6051      	str	r1, [r2, #4]
 8000a78:	8819      	ldrh	r1, [r3, #0]
 8000a7a:	789b      	ldrb	r3, [r3, #2]
 8000a7c:	8111      	strh	r1, [r2, #8]
 8000a7e:	7293      	strb	r3, [r2, #10]
  pcb.PCBCapabilities=temperature_degC*8 + temperaturePCB_degC*4 + humidity_percent*2 + absolutePressure_kPa;
 8000a80:	230f      	movs	r3, #15
 8000a82:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MutexADC1 */
  osMutexDef(MutexADC1);
 8000a86:	2300      	movs	r3, #0
 8000a88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  MutexADC1Handle = osMutexCreate(osMutex(MutexADC1));
 8000a92:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000a96:	4618      	mov	r0, r3
 8000a98:	f004 fb9f 	bl	80051da <osMutexCreate>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	4a3b      	ldr	r2, [pc, #236]	; (8000b8c <main+0x14c>)
 8000aa0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01_I2C */
  osThreadDef(Task01_I2C, StartTask01_I2C, osPriorityRealtime, 0, 128);
 8000aa2:	4b3b      	ldr	r3, [pc, #236]	; (8000b90 <main+0x150>)
 8000aa4:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000aa8:	461d      	mov	r5, r3
 8000aaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ab2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01_I2CHandle = osThreadCreate(osThread(Task01_I2C), NULL);
 8000ab6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f004 fb2c 	bl	800511a <osThreadCreate>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	4a33      	ldr	r2, [pc, #204]	; (8000b94 <main+0x154>)
 8000ac6:	6013      	str	r3, [r2, #0]

  /* definition and creation of IDLE */
  osThreadDef(IDLE, StartTaskIDLE, osPriorityIdle, 0, 128);
 8000ac8:	4b33      	ldr	r3, [pc, #204]	; (8000b98 <main+0x158>)
 8000aca:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000ace:	461d      	mov	r5, r3
 8000ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ad8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IDLEHandle = osThreadCreate(osThread(IDLE), NULL);
 8000adc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f004 fb19 	bl	800511a <osThreadCreate>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	4a2c      	ldr	r2, [pc, #176]	; (8000b9c <main+0x15c>)
 8000aec:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  /* definition and creation of Task02 */
  if(temperature_degC){
	osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 128);
 8000aee:	4b2c      	ldr	r3, [pc, #176]	; (8000ba0 <main+0x160>)
 8000af0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000af4:	461d      	mov	r5, r3
 8000af6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000afa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000afe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task02Handle = osThreadCreate(osThread(Task02), NULL);
 8000b02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f004 fb06 	bl	800511a <osThreadCreate>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	4a24      	ldr	r2, [pc, #144]	; (8000ba4 <main+0x164>)
 8000b12:	6013      	str	r3, [r2, #0]
  }
  /* definition and creation of Task03 */
  if(temperaturePCB_degC){
	osThreadDef(Task03, StartTask03, osPriorityNormal, 0, 128);
 8000b14:	4b24      	ldr	r3, [pc, #144]	; (8000ba8 <main+0x168>)
 8000b16:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000b1a:	461d      	mov	r5, r3
 8000b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task03Handle = osThreadCreate(osThread(Task03), NULL);
 8000b28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f004 faf3 	bl	800511a <osThreadCreate>
 8000b34:	4603      	mov	r3, r0
 8000b36:	4a1d      	ldr	r2, [pc, #116]	; (8000bac <main+0x16c>)
 8000b38:	6013      	str	r3, [r2, #0]
  }
  /* definition and creation of Task04 */
  if(humidity_percent){
	osThreadDef(Task04, StartTask04, osPriorityNormal, 0, 128);
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <main+0x170>)
 8000b3c:	f107 041c 	add.w	r4, r7, #28
 8000b40:	461d      	mov	r5, r3
 8000b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task04Handle = osThreadCreate(osThread(Task04), NULL);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f004 fae0 	bl	800511a <osThreadCreate>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	4a15      	ldr	r2, [pc, #84]	; (8000bb4 <main+0x174>)
 8000b5e:	6013      	str	r3, [r2, #0]
  }
  /* definition and creation of Task05 */
  if(absolutePressure_kPa){
	osThreadDef(Task05, StartTask05, osPriorityNormal, 0, 128);
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <main+0x178>)
 8000b62:	463c      	mov	r4, r7
 8000b64:	461d      	mov	r5, r3
 8000b66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task05Handle = osThreadCreate(osThread(Task05), NULL);
 8000b72:	463b      	mov	r3, r7
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f004 facf 	bl	800511a <osThreadCreate>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	; (8000bbc <main+0x17c>)
 8000b80:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b82:	f004 fac3 	bl	800510c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <main+0x146>
 8000b88:	0800793c 	.word	0x0800793c
 8000b8c:	20000fd0 	.word	0x20000fd0
 8000b90:	08007948 	.word	0x08007948
 8000b94:	20001094 	.word	0x20001094
 8000b98:	08007964 	.word	0x08007964
 8000b9c:	20001090 	.word	0x20001090
 8000ba0:	08007980 	.word	0x08007980
 8000ba4:	20000fcc 	.word	0x20000fcc
 8000ba8:	0800799c 	.word	0x0800799c
 8000bac:	20001098 	.word	0x20001098
 8000bb0:	080079b8 	.word	0x080079b8
 8000bb4:	20001008 	.word	0x20001008
 8000bb8:	080079d4 	.word	0x080079d4
 8000bbc:	200010ec 	.word	0x200010ec

08000bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b09e      	sub	sp, #120	; 0x78
 8000bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000bca:	2228      	movs	r2, #40	; 0x28
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f006 fe86 	bl	80078e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be4:	463b      	mov	r3, r7
 8000be6:	223c      	movs	r2, #60	; 0x3c
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f006 fe78 	bl	80078e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bf4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bf8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c02:	2310      	movs	r3, #16
 8000c04:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c06:	2302      	movs	r3, #2
 8000c08:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c0e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c14:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 fdca 	bl	80027b4 <HAL_RCC_OscConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000c26:	f000 fb41 	bl	80012ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2a:	230f      	movs	r3, #15
 8000c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c40:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c44:	2101      	movs	r1, #1
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 fcbc 	bl	80035c4 <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c52:	f000 fb2b 	bl	80012ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
 8000c56:	23a0      	movs	r3, #160	; 0xa0
 8000c58:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000c5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c64:	463b      	mov	r3, r7
 8000c66:	4618      	mov	r0, r3
 8000c68:	f002 fef2 	bl	8003a50 <HAL_RCCEx_PeriphCLKConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000c72:	f000 fb1b 	bl	80012ac <Error_Handler>
  }
}
 8000c76:	bf00      	nop
 8000c78:	3778      	adds	r7, #120	; 0x78
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
 8000ca0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ca2:	4b2e      	ldr	r3, [pc, #184]	; (8000d5c <MX_ADC1_Init+0xdc>)
 8000ca4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ca8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000caa:	4b2c      	ldr	r3, [pc, #176]	; (8000d5c <MX_ADC1_Init+0xdc>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cb0:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <MX_ADC1_Init+0xdc>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cb6:	4b29      	ldr	r3, [pc, #164]	; (8000d5c <MX_ADC1_Init+0xdc>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cbc:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <MX_ADC1_Init+0xdc>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cc2:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <MX_ADC1_Init+0xdc>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cca:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <MX_ADC1_Init+0xdc>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <MX_ADC1_Init+0xdc>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <MX_ADC1_Init+0xdc>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <MX_ADC1_Init+0xdc>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <MX_ADC1_Init+0xdc>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <MX_ADC1_Init+0xdc>)
 8000cec:	2204      	movs	r2, #4
 8000cee:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_ADC1_Init+0xdc>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <MX_ADC1_Init+0xdc>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cfc:	4817      	ldr	r0, [pc, #92]	; (8000d5c <MX_ADC1_Init+0xdc>)
 8000cfe:	f000 fcb3 	bl	8001668 <HAL_ADC_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000d08:	f000 fad0 	bl	80012ac <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	4811      	ldr	r0, [pc, #68]	; (8000d5c <MX_ADC1_Init+0xdc>)
 8000d18:	f001 f980 	bl	800201c <HAL_ADCEx_MultiModeConfigChannel>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000d22:	f000 fac3 	bl	80012ac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d26:	2302      	movs	r3, #2
 8000d28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8000d32:	2302      	movs	r3, #2
 8000d34:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	4619      	mov	r1, r3
 8000d42:	4806      	ldr	r0, [pc, #24]	; (8000d5c <MX_ADC1_Init+0xdc>)
 8000d44:	f000 fe7e 	bl	8001a44 <HAL_ADC_ConfigChannel>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000d4e:	f000 faad 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	3728      	adds	r7, #40	; 0x28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20001040 	.word	0x20001040

08000d60 <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <MX_I2C1_SMBUS_Init+0x68>)
 8000d66:	4a19      	ldr	r2, [pc, #100]	; (8000dcc <MX_I2C1_SMBUS_Init+0x6c>)
 8000d68:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x2000090E;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <MX_I2C1_SMBUS_Init+0x68>)
 8000d6c:	4a18      	ldr	r2, [pc, #96]	; (8000dd0 <MX_I2C1_SMBUS_Init+0x70>)
 8000d6e:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <MX_I2C1_SMBUS_Init+0x68>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_I2C1_SMBUS_Init+0x68>)
 8000d78:	2202      	movs	r2, #2
 8000d7a:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <MX_I2C1_SMBUS_Init+0x68>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_I2C1_SMBUS_Init+0x68>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_I2C1_SMBUS_Init+0x68>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_I2C1_SMBUS_Init+0x68>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_I2C1_SMBUS_Init+0x68>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <MX_I2C1_SMBUS_Init+0x68>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_I2C1_SMBUS_Init+0x68>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <MX_I2C1_SMBUS_Init+0x68>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x00008061;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_I2C1_SMBUS_Init+0x68>)
 8000dae:	f248 0261 	movw	r2, #32865	; 0x8061
 8000db2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8000db4:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <MX_I2C1_SMBUS_Init+0x68>)
 8000db6:	f002 fffb 	bl	8003db0 <HAL_SMBUS_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000dc0:	f000 fa74 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2000109c 	.word	0x2000109c
 8000dcc:	40005400 	.word	0x40005400
 8000dd0:	2000090e 	.word	0x2000090e

08000dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
 8000de8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dea:	4b49      	ldr	r3, [pc, #292]	; (8000f10 <MX_GPIO_Init+0x13c>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	4a48      	ldr	r2, [pc, #288]	; (8000f10 <MX_GPIO_Init+0x13c>)
 8000df0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000df4:	6153      	str	r3, [r2, #20]
 8000df6:	4b46      	ldr	r3, [pc, #280]	; (8000f10 <MX_GPIO_Init+0x13c>)
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e02:	4b43      	ldr	r3, [pc, #268]	; (8000f10 <MX_GPIO_Init+0x13c>)
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	4a42      	ldr	r2, [pc, #264]	; (8000f10 <MX_GPIO_Init+0x13c>)
 8000e08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e0c:	6153      	str	r3, [r2, #20]
 8000e0e:	4b40      	ldr	r3, [pc, #256]	; (8000f10 <MX_GPIO_Init+0x13c>)
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e1a:	4b3d      	ldr	r3, [pc, #244]	; (8000f10 <MX_GPIO_Init+0x13c>)
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	4a3c      	ldr	r2, [pc, #240]	; (8000f10 <MX_GPIO_Init+0x13c>)
 8000e20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e24:	6153      	str	r3, [r2, #20]
 8000e26:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <MX_GPIO_Init+0x13c>)
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b37      	ldr	r3, [pc, #220]	; (8000f10 <MX_GPIO_Init+0x13c>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	4a36      	ldr	r2, [pc, #216]	; (8000f10 <MX_GPIO_Init+0x13c>)
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3c:	6153      	str	r3, [r2, #20]
 8000e3e:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <MX_GPIO_Init+0x13c>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	4b31      	ldr	r3, [pc, #196]	; (8000f10 <MX_GPIO_Init+0x13c>)
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	4a30      	ldr	r2, [pc, #192]	; (8000f10 <MX_GPIO_Init+0x13c>)
 8000e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e54:	6153      	str	r3, [r2, #20]
 8000e56:	4b2e      	ldr	r3, [pc, #184]	; (8000f10 <MX_GPIO_Init+0x13c>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000e62:	2200      	movs	r2, #0
 8000e64:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000e68:	482a      	ldr	r0, [pc, #168]	; (8000f14 <MX_GPIO_Init+0x140>)
 8000e6a:	f001 fc8b 	bl	8002784 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000e6e:	2337      	movs	r3, #55	; 0x37
 8000e70:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e72:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	4824      	ldr	r0, [pc, #144]	; (8000f14 <MX_GPIO_Init+0x140>)
 8000e84:	f001 fb04 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000e88:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000e8c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	481c      	ldr	r0, [pc, #112]	; (8000f14 <MX_GPIO_Init+0x140>)
 8000ea2:	f001 faf5 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebc:	f001 fae8 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000ec0:	23e0      	movs	r3, #224	; 0xe0
 8000ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ed0:	2305      	movs	r3, #5
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ede:	f001 fad7 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000ee2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000ef4:	230e      	movs	r3, #14
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f02:	f001 fac5 	bl	8002490 <HAL_GPIO_Init>

}
 8000f06:	bf00      	nop
 8000f08:	3728      	adds	r7, #40	; 0x28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000
 8000f14:	48001000 	.word	0x48001000

08000f18 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  //Sensor initialization
	strcpy(ExternalTemperatureSensor.Sensor_name,"SHT31-ARP-B");
 8000f20:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <StartTask02+0xa8>)
 8000f22:	4a28      	ldr	r2, [pc, #160]	; (8000fc4 <StartTask02+0xac>)
 8000f24:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcpy(ExternalTemperatureSensor.Sensor_type,"Temperature");
 8000f2a:	4a27      	ldr	r2, [pc, #156]	; (8000fc8 <StartTask02+0xb0>)
 8000f2c:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <StartTask02+0xb4>)
 8000f2e:	4614      	mov	r4, r2
 8000f30:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000f32:	6020      	str	r0, [r4, #0]
 8000f34:	6061      	str	r1, [r4, #4]
 8000f36:	60a2      	str	r2, [r4, #8]
	strcpy(ExternalTemperatureSensor.Main_gas,"....");
 8000f38:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <StartTask02+0xb8>)
 8000f3a:	4a26      	ldr	r2, [pc, #152]	; (8000fd4 <StartTask02+0xbc>)
 8000f3c:	6810      	ldr	r0, [r2, #0]
 8000f3e:	6018      	str	r0, [r3, #0]
 8000f40:	7912      	ldrb	r2, [r2, #4]
 8000f42:	711a      	strb	r2, [r3, #4]
	ExternalTemperatureSensor.Response_time=20;
 8000f44:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <StartTask02+0xa8>)
 8000f46:	2214      	movs	r2, #20
 8000f48:	85da      	strh	r2, [r3, #46]	; 0x2e
  /* Infinite loop */
  for(;;)
  {
	/*use of the ADC with mutex, this so that only one task can use the ADC at a time*/
	osMutexWait(MutexADC1Handle, 100);
 8000f4a:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <StartTask02+0xc0>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2164      	movs	r1, #100	; 0x64
 8000f50:	4618      	mov	r0, r3
 8000f52:	f004 f95b 	bl	800520c <osMutexWait>
	assert_param(IS_ADC_CHANNEL(ADC_CHANNEL_2));
	uint32_t Vadc=HAL_ADC_GetValue(&hadc1);
 8000f56:	4821      	ldr	r0, [pc, #132]	; (8000fdc <StartTask02+0xc4>)
 8000f58:	f000 fd66 	bl	8001a28 <HAL_ADC_GetValue>
 8000f5c:	60f8      	str	r0, [r7, #12]
	osMutexRelease(MutexADC1Handle);
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <StartTask02+0xc0>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f004 f9a0 	bl	80052a8 <osMutexRelease>
	//The temperature formula is T=-66.875 + 218.75*Vt/Vd
	//where Vd=3.3, Vt=adc*3.3/2^12
	//The temperature formula is T=-66.875 + 218.75*Vadc/4096
	ExternalTemperatureSensor.Data=-66.875+(53.40576172e-3*Vadc);
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f7ff fa73 	bl	8000454 <__aeabi_ui2d>
 8000f6e:	a310      	add	r3, pc, #64	; (adr r3, 8000fb0 <StartTask02+0x98>)
 8000f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f74:	f7ff fae8 	bl	8000548 <__aeabi_dmul>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	a30d      	add	r3, pc, #52	; (adr r3, 8000fb8 <StartTask02+0xa0>)
 8000f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f86:	f7ff f927 	bl	80001d8 <__aeabi_dsub>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	4610      	mov	r0, r2
 8000f90:	4619      	mov	r1, r3
 8000f92:	f7ff fceb 	bl	800096c <__aeabi_d2f>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4a09      	ldr	r2, [pc, #36]	; (8000fc0 <StartTask02+0xa8>)
 8000f9a:	6313      	str	r3, [r2, #48]	; 0x30
    osDelay(ExternalTemperatureSensor.Response_time);
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <StartTask02+0xa8>)
 8000f9e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f004 f905 	bl	80051b2 <osDelay>
  {
 8000fa8:	e7cf      	b.n	8000f4a <StartTask02+0x32>
 8000faa:	bf00      	nop
 8000fac:	f3af 8000 	nop.w
 8000fb0:	0002bfb0 	.word	0x0002bfb0
 8000fb4:	3fab5800 	.word	0x3fab5800
 8000fb8:	00000000 	.word	0x00000000
 8000fbc:	4050b800 	.word	0x4050b800
 8000fc0:	20001124 	.word	0x20001124
 8000fc4:	080079f0 	.word	0x080079f0
 8000fc8:	2000112f 	.word	0x2000112f
 8000fcc:	080079fc 	.word	0x080079fc
 8000fd0:	2000113d 	.word	0x2000113d
 8000fd4:	08007a08 	.word	0x08007a08
 8000fd8:	20000fd0 	.word	0x20000fd0
 8000fdc:	20001040 	.word	0x20001040

08000fe0 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000fe0:	b5b0      	push	{r4, r5, r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  //Sensor initialization
	strcpy(InternalTemperatureSensor.Sensor_name,"Internal");
 8000fe8:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <StartTask03+0xc8>)
 8000fea:	4a30      	ldr	r2, [pc, #192]	; (80010ac <StartTask03+0xcc>)
 8000fec:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fee:	c303      	stmia	r3!, {r0, r1}
 8000ff0:	701a      	strb	r2, [r3, #0]
	strcpy(InternalTemperatureSensor.Sensor_type,"Micro-controller temperature ");
 8000ff2:	4a2f      	ldr	r2, [pc, #188]	; (80010b0 <StartTask03+0xd0>)
 8000ff4:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <StartTask03+0xd4>)
 8000ff6:	4615      	mov	r5, r2
 8000ff8:	461c      	mov	r4, r3
 8000ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ffc:	6028      	str	r0, [r5, #0]
 8000ffe:	6069      	str	r1, [r5, #4]
 8001000:	60aa      	str	r2, [r5, #8]
 8001002:	60eb      	str	r3, [r5, #12]
 8001004:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001006:	6128      	str	r0, [r5, #16]
 8001008:	6169      	str	r1, [r5, #20]
 800100a:	61aa      	str	r2, [r5, #24]
 800100c:	8823      	ldrh	r3, [r4, #0]
 800100e:	83ab      	strh	r3, [r5, #28]
	strcpy(InternalTemperatureSensor.Main_gas,"....");
 8001010:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <StartTask03+0xd8>)
 8001012:	4a2a      	ldr	r2, [pc, #168]	; (80010bc <StartTask03+0xdc>)
 8001014:	6810      	ldr	r0, [r2, #0]
 8001016:	6018      	str	r0, [r3, #0]
 8001018:	7912      	ldrb	r2, [r2, #4]
 800101a:	711a      	strb	r2, [r3, #4]
	InternalTemperatureSensor.Response_time=10;
 800101c:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <StartTask03+0xc8>)
 800101e:	220a      	movs	r2, #10
 8001020:	85da      	strh	r2, [r3, #46]	; 0x2e
  /* Infinite loop */
  for(;;)
  {
    /*use of the ADC with mutex, this so that only one task can use the ADC at a time*/
	osMutexWait(MutexADC1Handle, 100);
 8001022:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <StartTask03+0xe0>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2164      	movs	r1, #100	; 0x64
 8001028:	4618      	mov	r0, r3
 800102a:	f004 f8ef 	bl	800520c <osMutexWait>
	assert_param(IS_ADC_CHANNEL(ADC_CHANNEL_TEMPSENSOR));
	uint32_t Vadc=HAL_ADC_GetValue(&hadc1);
 800102e:	4825      	ldr	r0, [pc, #148]	; (80010c4 <StartTask03+0xe4>)
 8001030:	f000 fcfa 	bl	8001a28 <HAL_ADC_GetValue>
 8001034:	60f8      	str	r0, [r7, #12]
	osMutexRelease(MutexADC1Handle);
 8001036:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <StartTask03+0xe0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f004 f934 	bl	80052a8 <osMutexRelease>
	//The formula is Temperature (in °C) = {(V25 – Vadc) / Avg_Slope} + 25
	//where V25=1.43, Avg_Slope=4.3
	InternalTemperatureSensor.Data=((1.43 - Vadc) / 4.3) + 25;
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f7ff fa07 	bl	8000454 <__aeabi_ui2d>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	a113      	add	r1, pc, #76	; (adr r1, 8001098 <StartTask03+0xb8>)
 800104c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001050:	f7ff f8c2 	bl	80001d8 <__aeabi_dsub>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	a310      	add	r3, pc, #64	; (adr r3, 80010a0 <StartTask03+0xc0>)
 800105e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001062:	f7ff fb9b 	bl	800079c <__aeabi_ddiv>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <StartTask03+0xe8>)
 8001074:	f7ff f8b2 	bl	80001dc <__adddf3>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fc74 	bl	800096c <__aeabi_d2f>
 8001084:	4603      	mov	r3, r0
 8001086:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <StartTask03+0xc8>)
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
    osDelay(InternalTemperatureSensor.Response_time);
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <StartTask03+0xc8>)
 800108c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001090:	4618      	mov	r0, r3
 8001092:	f004 f88e 	bl	80051b2 <osDelay>
  {
 8001096:	e7c4      	b.n	8001022 <StartTask03+0x42>
 8001098:	ae147ae1 	.word	0xae147ae1
 800109c:	3ff6e147 	.word	0x3ff6e147
 80010a0:	33333333 	.word	0x33333333
 80010a4:	40113333 	.word	0x40113333
 80010a8:	200010f0 	.word	0x200010f0
 80010ac:	08007a10 	.word	0x08007a10
 80010b0:	200010fb 	.word	0x200010fb
 80010b4:	08007a1c 	.word	0x08007a1c
 80010b8:	20001109 	.word	0x20001109
 80010bc:	08007a08 	.word	0x08007a08
 80010c0:	20000fd0 	.word	0x20000fd0
 80010c4:	20001040 	.word	0x20001040
 80010c8:	40390000 	.word	0x40390000
 80010cc:	00000000 	.word	0x00000000

080010d0 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  //Sensor initialization
	strcpy(HumiditySensor.Sensor_name,"SHT31-ARP-B");
 80010d8:	4b25      	ldr	r3, [pc, #148]	; (8001170 <StartTask04+0xa0>)
 80010da:	4a26      	ldr	r2, [pc, #152]	; (8001174 <StartTask04+0xa4>)
 80010dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80010de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcpy(HumiditySensor.Sensor_type,"Humidity:");
 80010e2:	4a25      	ldr	r2, [pc, #148]	; (8001178 <StartTask04+0xa8>)
 80010e4:	4b25      	ldr	r3, [pc, #148]	; (800117c <StartTask04+0xac>)
 80010e6:	cb03      	ldmia	r3!, {r0, r1}
 80010e8:	6010      	str	r0, [r2, #0]
 80010ea:	6051      	str	r1, [r2, #4]
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	8113      	strh	r3, [r2, #8]
	strcpy(HumiditySensor.Main_gas,"....");
 80010f0:	4b23      	ldr	r3, [pc, #140]	; (8001180 <StartTask04+0xb0>)
 80010f2:	4a24      	ldr	r2, [pc, #144]	; (8001184 <StartTask04+0xb4>)
 80010f4:	6810      	ldr	r0, [r2, #0]
 80010f6:	6018      	str	r0, [r3, #0]
 80010f8:	7912      	ldrb	r2, [r2, #4]
 80010fa:	711a      	strb	r2, [r3, #4]
	HumiditySensor.Response_time=200;
 80010fc:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <StartTask04+0xa0>)
 80010fe:	22c8      	movs	r2, #200	; 0xc8
 8001100:	85da      	strh	r2, [r3, #46]	; 0x2e
  /* Infinite loop */
  for(;;)
  {
    /*use of the ADC with mutex, this so that only one task can use the ADC at a time*/
	osMutexWait(MutexADC1Handle, 100);
 8001102:	4b21      	ldr	r3, [pc, #132]	; (8001188 <StartTask04+0xb8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2164      	movs	r1, #100	; 0x64
 8001108:	4618      	mov	r0, r3
 800110a:	f004 f87f 	bl	800520c <osMutexWait>
	assert_param(IS_ADC_CHANNEL(ADC_CHANNEL_3));
	uint32_t Vadc=HAL_ADC_GetValue(&hadc1);
 800110e:	481f      	ldr	r0, [pc, #124]	; (800118c <StartTask04+0xbc>)
 8001110:	f000 fc8a 	bl	8001a28 <HAL_ADC_GetValue>
 8001114:	60f8      	str	r0, [r7, #12]
	osMutexRelease(MutexADC1Handle);
 8001116:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <StartTask04+0xb8>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f004 f8c4 	bl	80052a8 <osMutexRelease>
	//The temperature formula is Rh=-12.5 + 125*Vt/Vd
	//where Vd=3.3, Vt=adc*3.3/2^12
	//The temperature formula is Rh=-12.5 + 125*Vadc/4096
    HumiditySensor.Data=-12.5 + (30.51757813e-3*Vadc);
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f7ff f997 	bl	8000454 <__aeabi_ui2d>
 8001126:	a310      	add	r3, pc, #64	; (adr r3, 8001168 <StartTask04+0x98>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	f7ff fa0c 	bl	8000548 <__aeabi_dmul>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <StartTask04+0xc0>)
 800113e:	f7ff f84b 	bl	80001d8 <__aeabi_dsub>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	4610      	mov	r0, r2
 8001148:	4619      	mov	r1, r3
 800114a:	f7ff fc0f 	bl	800096c <__aeabi_d2f>
 800114e:	4603      	mov	r3, r0
 8001150:	4a07      	ldr	r2, [pc, #28]	; (8001170 <StartTask04+0xa0>)
 8001152:	6313      	str	r3, [r2, #48]	; 0x30
    osDelay(HumiditySensor.Response_time);
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <StartTask04+0xa0>)
 8001156:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800115a:	4618      	mov	r0, r3
 800115c:	f004 f829 	bl	80051b2 <osDelay>
  {
 8001160:	e7cf      	b.n	8001102 <StartTask04+0x32>
 8001162:	bf00      	nop
 8001164:	f3af 8000 	nop.w
 8001168:	0015fd80 	.word	0x0015fd80
 800116c:	3f9f4000 	.word	0x3f9f4000
 8001170:	2000100c 	.word	0x2000100c
 8001174:	080079f0 	.word	0x080079f0
 8001178:	20001017 	.word	0x20001017
 800117c:	08007a3c 	.word	0x08007a3c
 8001180:	20001025 	.word	0x20001025
 8001184:	08007a08 	.word	0x08007a08
 8001188:	20000fd0 	.word	0x20000fd0
 800118c:	20001040 	.word	0x20001040
 8001190:	40290000 	.word	0x40290000
 8001194:	00000000 	.word	0x00000000

08001198 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  //Sensor initialization
	strcpy(PressureSensor.Sensor_name,"KP229-E2701-XTMA1");
 80011a0:	4a29      	ldr	r2, [pc, #164]	; (8001248 <StartTask05+0xb0>)
 80011a2:	4b2a      	ldr	r3, [pc, #168]	; (800124c <StartTask05+0xb4>)
 80011a4:	4614      	mov	r4, r2
 80011a6:	461d      	mov	r5, r3
 80011a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ac:	682b      	ldr	r3, [r5, #0]
 80011ae:	8023      	strh	r3, [r4, #0]
	strcpy(PressureSensor.Sensor_type,"Absolute pressure");
 80011b0:	4a27      	ldr	r2, [pc, #156]	; (8001250 <StartTask05+0xb8>)
 80011b2:	4b28      	ldr	r3, [pc, #160]	; (8001254 <StartTask05+0xbc>)
 80011b4:	4615      	mov	r5, r2
 80011b6:	461c      	mov	r4, r3
 80011b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ba:	6028      	str	r0, [r5, #0]
 80011bc:	6069      	str	r1, [r5, #4]
 80011be:	60aa      	str	r2, [r5, #8]
 80011c0:	60eb      	str	r3, [r5, #12]
 80011c2:	8823      	ldrh	r3, [r4, #0]
 80011c4:	822b      	strh	r3, [r5, #16]
	strcpy(PressureSensor.Main_gas,"....");
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <StartTask05+0xc0>)
 80011c8:	4a24      	ldr	r2, [pc, #144]	; (800125c <StartTask05+0xc4>)
 80011ca:	6810      	ldr	r0, [r2, #0]
 80011cc:	6018      	str	r0, [r3, #0]
 80011ce:	7912      	ldrb	r2, [r2, #4]
 80011d0:	711a      	strb	r2, [r3, #4]
	PressureSensor.Response_time=1;
 80011d2:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <StartTask05+0xb0>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  /* Infinite loop */
  for(;;)
  {
    /*use of the ADC with mutex, this so that only one task can use the ADC at a time*/
	osMutexWait(MutexADC1Handle, 100);
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <StartTask05+0xc8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2164      	movs	r1, #100	; 0x64
 80011de:	4618      	mov	r0, r3
 80011e0:	f004 f814 	bl	800520c <osMutexWait>
	assert_param(IS_ADC_CHANNEL(ADC_CHANNEL_4));
	uint32_t Vadc=HAL_ADC_GetValue(&hadc1);
 80011e4:	481f      	ldr	r0, [pc, #124]	; (8001264 <StartTask05+0xcc>)
 80011e6:	f000 fc1f 	bl	8001a28 <HAL_ADC_GetValue>
 80011ea:	60f8      	str	r0, [r7, #12]
	osMutexRelease(MutexADC1Handle);
 80011ec:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <StartTask05+0xc8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f004 f859 	bl	80052a8 <osMutexRelease>
	//The temperature formula is P=(Vp/Vdd-b)/a
	//where Vp=adc*3.3/2^12, Vdd=3.3, b=0.05069, a=0.00293.
	//The temperature formula is P=-b/a+adc/a/4096=-17.3003413+83.32444539e-3*adc
	PressureSensor.Data=-17.3003413 + (83.32444539e-3*Vadc);
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff f92c 	bl	8000454 <__aeabi_ui2d>
 80011fc:	a30e      	add	r3, pc, #56	; (adr r3, 8001238 <StartTask05+0xa0>)
 80011fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001202:	f7ff f9a1 	bl	8000548 <__aeabi_dmul>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	a30c      	add	r3, pc, #48	; (adr r3, 8001240 <StartTask05+0xa8>)
 8001210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001214:	f7fe ffe0 	bl	80001d8 <__aeabi_dsub>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff fba4 	bl	800096c <__aeabi_d2f>
 8001224:	4603      	mov	r3, r0
 8001226:	4a08      	ldr	r2, [pc, #32]	; (8001248 <StartTask05+0xb0>)
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
    osDelay(PressureSensor.Response_time);
 800122a:	4b07      	ldr	r3, [pc, #28]	; (8001248 <StartTask05+0xb0>)
 800122c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001230:	4618      	mov	r0, r3
 8001232:	f003 ffbe 	bl	80051b2 <osDelay>
  {
 8001236:	e7cf      	b.n	80011d8 <StartTask05+0x40>
 8001238:	37e84a94 	.word	0x37e84a94
 800123c:	3fb554c0 	.word	0x3fb554c0
 8001240:	2add235c 	.word	0x2add235c
 8001244:	40314ce3 	.word	0x40314ce3
 8001248:	20000fd4 	.word	0x20000fd4
 800124c:	08007a48 	.word	0x08007a48
 8001250:	20000fdf 	.word	0x20000fdf
 8001254:	08007a5c 	.word	0x08007a5c
 8001258:	20000fed 	.word	0x20000fed
 800125c:	08007a08 	.word	0x08007a08
 8001260:	20000fd0 	.word	0x20000fd0
 8001264:	20001040 	.word	0x20001040

08001268 <StartTask01_I2C>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01_I2C */
void StartTask01_I2C(void const * argument)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001270:	2001      	movs	r0, #1
 8001272:	f003 ff9e 	bl	80051b2 <osDelay>
 8001276:	e7fb      	b.n	8001270 <StartTask01_I2C+0x8>

08001278 <StartTaskIDLE>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskIDLE */
void StartTaskIDLE(void const * argument)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskIDLE */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001280:	2001      	movs	r0, #1
 8001282:	f003 ff96 	bl	80051b2 <osDelay>
 8001286:	e7fb      	b.n	8001280 <StartTaskIDLE+0x8>

08001288 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d101      	bne.n	800129e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800129a:	f000 f9c5 	bl	8001628 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40001000 	.word	0x40001000

080012ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b0:	b672      	cpsid	i
}
 80012b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <Error_Handler+0x8>
	...

080012b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_MspInit+0x4c>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	4a10      	ldr	r2, [pc, #64]	; (8001304 <HAL_MspInit+0x4c>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6193      	str	r3, [r2, #24]
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_MspInit+0x4c>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <HAL_MspInit+0x4c>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <HAL_MspInit+0x4c>)
 80012dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e0:	61d3      	str	r3, [r2, #28]
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <HAL_MspInit+0x4c>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	210f      	movs	r1, #15
 80012f2:	f06f 0001 	mvn.w	r0, #1
 80012f6:	f001 f8a1 	bl	800243c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000

08001308 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	; 0x30
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001328:	d154      	bne.n	80013d4 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800132a:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <HAL_ADC_MspInit+0xd4>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	4a2b      	ldr	r2, [pc, #172]	; (80013dc <HAL_ADC_MspInit+0xd4>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001334:	6153      	str	r3, [r2, #20]
 8001336:	4b29      	ldr	r3, [pc, #164]	; (80013dc <HAL_ADC_MspInit+0xd4>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	61bb      	str	r3, [r7, #24]
 8001340:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	4b26      	ldr	r3, [pc, #152]	; (80013dc <HAL_ADC_MspInit+0xd4>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	4a25      	ldr	r2, [pc, #148]	; (80013dc <HAL_ADC_MspInit+0xd4>)
 8001348:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800134c:	6153      	str	r3, [r2, #20]
 800134e:	4b23      	ldr	r3, [pc, #140]	; (80013dc <HAL_ADC_MspInit+0xd4>)
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	4b20      	ldr	r3, [pc, #128]	; (80013dc <HAL_ADC_MspInit+0xd4>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a1f      	ldr	r2, [pc, #124]	; (80013dc <HAL_ADC_MspInit+0xd4>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	6153      	str	r3, [r2, #20]
 8001366:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <HAL_ADC_MspInit+0xd4>)
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001372:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <HAL_ADC_MspInit+0xd4>)
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	4a19      	ldr	r2, [pc, #100]	; (80013dc <HAL_ADC_MspInit+0xd4>)
 8001378:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800137c:	6153      	str	r3, [r2, #20]
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <HAL_ADC_MspInit+0xd4>)
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800138a:	2301      	movs	r3, #1
 800138c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800138e:	2303      	movs	r3, #3
 8001390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4619      	mov	r1, r3
 800139c:	4810      	ldr	r0, [pc, #64]	; (80013e0 <HAL_ADC_MspInit+0xd8>)
 800139e:	f001 f877 	bl	8002490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80013a2:	230e      	movs	r3, #14
 80013a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a6:	2303      	movs	r3, #3
 80013a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b8:	f001 f86a 	bl	8002490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013bc:	2310      	movs	r3, #16
 80013be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c0:	2303      	movs	r3, #3
 80013c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <HAL_ADC_MspInit+0xdc>)
 80013d0:	f001 f85e 	bl	8002490 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013d4:	bf00      	nop
 80013d6:	3730      	adds	r7, #48	; 0x30
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40021000 	.word	0x40021000
 80013e0:	48000800 	.word	0x48000800
 80013e4:	48001400 	.word	0x48001400

080013e8 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  if(hsmbus->Instance==I2C1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a1b      	ldr	r2, [pc, #108]	; (8001474 <HAL_SMBUS_MspInit+0x8c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d12f      	bne.n	800146a <HAL_SMBUS_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <HAL_SMBUS_MspInit+0x90>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4a1a      	ldr	r2, [pc, #104]	; (8001478 <HAL_SMBUS_MspInit+0x90>)
 8001410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001414:	6153      	str	r3, [r2, #20]
 8001416:	4b18      	ldr	r3, [pc, #96]	; (8001478 <HAL_SMBUS_MspInit+0x90>)
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001422:	23c0      	movs	r3, #192	; 0xc0
 8001424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001426:	2312      	movs	r3, #18
 8001428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800142a:	2301      	movs	r3, #1
 800142c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001432:	2304      	movs	r3, #4
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	480f      	ldr	r0, [pc, #60]	; (800147c <HAL_SMBUS_MspInit+0x94>)
 800143e:	f001 f827 	bl	8002490 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <HAL_SMBUS_MspInit+0x90>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	4a0c      	ldr	r2, [pc, #48]	; (8001478 <HAL_SMBUS_MspInit+0x90>)
 8001448:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800144c:	61d3      	str	r3, [r2, #28]
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <HAL_SMBUS_MspInit+0x90>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2105      	movs	r1, #5
 800145e:	201f      	movs	r0, #31
 8001460:	f000 ffec 	bl	800243c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001464:	201f      	movs	r0, #31
 8001466:	f001 f805 	bl	8002474 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800146a:	bf00      	nop
 800146c:	3728      	adds	r7, #40	; 0x28
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40005400 	.word	0x40005400
 8001478:	40021000 	.word	0x40021000
 800147c:	48000400 	.word	0x48000400

08001480 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	; 0x30
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001490:	2200      	movs	r2, #0
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	2036      	movs	r0, #54	; 0x36
 8001496:	f000 ffd1 	bl	800243c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800149a:	2036      	movs	r0, #54	; 0x36
 800149c:	f000 ffea 	bl	8002474 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <HAL_InitTick+0xa0>)
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	4a1e      	ldr	r2, [pc, #120]	; (8001520 <HAL_InitTick+0xa0>)
 80014a6:	f043 0310 	orr.w	r3, r3, #16
 80014aa:	61d3      	str	r3, [r2, #28]
 80014ac:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <HAL_InitTick+0xa0>)
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	f003 0310 	and.w	r3, r3, #16
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014b8:	f107 0210 	add.w	r2, r7, #16
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 fa92 	bl	80039ec <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80014c8:	f002 fa6e 	bl	80039a8 <HAL_RCC_GetPCLK1Freq>
 80014cc:	4603      	mov	r3, r0
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d4:	4a13      	ldr	r2, [pc, #76]	; (8001524 <HAL_InitTick+0xa4>)
 80014d6:	fba2 2303 	umull	r2, r3, r2, r3
 80014da:	0c9b      	lsrs	r3, r3, #18
 80014dc:	3b01      	subs	r3, #1
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <HAL_InitTick+0xa8>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	; (800152c <HAL_InitTick+0xac>)
 80014e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <HAL_InitTick+0xa8>)
 80014e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014ec:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80014ee:	4a0e      	ldr	r2, [pc, #56]	; (8001528 <HAL_InitTick+0xa8>)
 80014f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <HAL_InitTick+0xa8>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <HAL_InitTick+0xa8>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001500:	4809      	ldr	r0, [pc, #36]	; (8001528 <HAL_InitTick+0xa8>)
 8001502:	f003 fb17 	bl	8004b34 <HAL_TIM_Base_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d104      	bne.n	8001516 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800150c:	4806      	ldr	r0, [pc, #24]	; (8001528 <HAL_InitTick+0xa8>)
 800150e:	f003 fb73 	bl	8004bf8 <HAL_TIM_Base_Start_IT>
 8001512:	4603      	mov	r3, r0
 8001514:	e000      	b.n	8001518 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3730      	adds	r7, #48	; 0x30
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	431bde83 	.word	0x431bde83
 8001528:	20001158 	.word	0x20001158
 800152c:	40001000 	.word	0x40001000

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <NMI_Handler+0x4>

08001536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <HardFault_Handler+0x4>

0800153c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <MemManage_Handler+0x4>

08001542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <BusFault_Handler+0x4>

08001548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <UsageFault_Handler+0x4>

0800154e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_SMBUS_EV_IRQHandler(&hsmbus1);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <I2C1_EV_IRQHandler+0x10>)
 8001562:	f002 fcdd 	bl	8003f20 <HAL_SMBUS_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	2000109c 	.word	0x2000109c

08001570 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001574:	4802      	ldr	r0, [pc, #8]	; (8001580 <TIM6_DAC_IRQHandler+0x10>)
 8001576:	f003 fba9 	bl	8004ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20001158 	.word	0x20001158

08001584 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <SystemInit+0x20>)
 800158a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158e:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <SystemInit+0x20>)
 8001590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015ac:	480d      	ldr	r0, [pc, #52]	; (80015e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80015ae:	490e      	ldr	r1, [pc, #56]	; (80015e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015b0:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <LoopForever+0xe>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b4:	e002      	b.n	80015bc <LoopCopyDataInit>

080015b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ba:	3304      	adds	r3, #4

080015bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c0:	d3f9      	bcc.n	80015b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c2:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015c4:	4c0b      	ldr	r4, [pc, #44]	; (80015f4 <LoopForever+0x16>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c8:	e001      	b.n	80015ce <LoopFillZerobss>

080015ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015cc:	3204      	adds	r2, #4

080015ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d0:	d3fb      	bcc.n	80015ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015d2:	f7ff ffd7 	bl	8001584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015d6:	f006 f951 	bl	800787c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015da:	f7ff fa31 	bl	8000a40 <main>

080015de <LoopForever>:

LoopForever:
    b LoopForever
 80015de:	e7fe      	b.n	80015de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015e0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80015e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80015ec:	08007ab8 	.word	0x08007ab8
  ldr r2, =_sbss
 80015f0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80015f4:	200011a8 	.word	0x200011a8

080015f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC1_2_IRQHandler>
	...

080015fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_Init+0x28>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a07      	ldr	r2, [pc, #28]	; (8001624 <HAL_Init+0x28>)
 8001606:	f043 0310 	orr.w	r3, r3, #16
 800160a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160c:	2003      	movs	r0, #3
 800160e:	f000 ff0a 	bl	8002426 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001612:	200f      	movs	r0, #15
 8001614:	f7ff ff34 	bl	8001480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001618:	f7ff fe4e 	bl	80012b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40022000 	.word	0x40022000

08001628 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x20>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_IncTick+0x24>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <HAL_IncTick+0x24>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000008 	.word	0x20000008
 800164c:	200011a4 	.word	0x200011a4

08001650 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return uwTick;  
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <HAL_GetTick+0x14>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	200011a4 	.word	0x200011a4

08001668 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b09a      	sub	sp, #104	; 0x68
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001676:	2300      	movs	r3, #0
 8001678:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e1c9      	b.n	8001a1c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	2b00      	cmp	r3, #0
 8001698:	d176      	bne.n	8001788 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d152      	bne.n	8001748 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff fe23 	bl	8001308 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d13b      	bne.n	8001748 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 fd95 	bl	8002200 <ADC_Disable>
 80016d6:	4603      	mov	r3, r0
 80016d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	f003 0310 	and.w	r3, r3, #16
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d12f      	bne.n	8001748 <HAL_ADC_Init+0xe0>
 80016e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d12b      	bne.n	8001748 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016f8:	f023 0302 	bic.w	r3, r3, #2
 80016fc:	f043 0202 	orr.w	r2, r3, #2
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001712:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001722:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001724:	4b86      	ldr	r3, [pc, #536]	; (8001940 <HAL_ADC_Init+0x2d8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a86      	ldr	r2, [pc, #536]	; (8001944 <HAL_ADC_Init+0x2dc>)
 800172a:	fba2 2303 	umull	r2, r3, r2, r3
 800172e:	0c9a      	lsrs	r2, r3, #18
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800173a:	e002      	b.n	8001742 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	3b01      	subs	r3, #1
 8001740:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1f9      	bne.n	800173c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d007      	beq.n	8001766 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001764:	d110      	bne.n	8001788 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f023 0312 	bic.w	r3, r3, #18
 800176e:	f043 0210 	orr.w	r2, r3, #16
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	f043 0201 	orr.w	r2, r3, #1
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f003 0310 	and.w	r3, r3, #16
 8001790:	2b00      	cmp	r3, #0
 8001792:	f040 8136 	bne.w	8001a02 <HAL_ADC_Init+0x39a>
 8001796:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800179a:	2b00      	cmp	r3, #0
 800179c:	f040 8131 	bne.w	8001a02 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f040 8129 	bne.w	8001a02 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017b8:	f043 0202 	orr.w	r2, r3, #2
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017c8:	d004      	beq.n	80017d4 <HAL_ADC_Init+0x16c>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a5e      	ldr	r2, [pc, #376]	; (8001948 <HAL_ADC_Init+0x2e0>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d101      	bne.n	80017d8 <HAL_ADC_Init+0x170>
 80017d4:	4b5d      	ldr	r3, [pc, #372]	; (800194c <HAL_ADC_Init+0x2e4>)
 80017d6:	e000      	b.n	80017da <HAL_ADC_Init+0x172>
 80017d8:	4b5d      	ldr	r3, [pc, #372]	; (8001950 <HAL_ADC_Init+0x2e8>)
 80017da:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017e4:	d102      	bne.n	80017ec <HAL_ADC_Init+0x184>
 80017e6:	4b58      	ldr	r3, [pc, #352]	; (8001948 <HAL_ADC_Init+0x2e0>)
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	e01a      	b.n	8001822 <HAL_ADC_Init+0x1ba>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a55      	ldr	r2, [pc, #340]	; (8001948 <HAL_ADC_Init+0x2e0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d103      	bne.n	80017fe <HAL_ADC_Init+0x196>
 80017f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	e011      	b.n	8001822 <HAL_ADC_Init+0x1ba>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a54      	ldr	r2, [pc, #336]	; (8001954 <HAL_ADC_Init+0x2ec>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d102      	bne.n	800180e <HAL_ADC_Init+0x1a6>
 8001808:	4b53      	ldr	r3, [pc, #332]	; (8001958 <HAL_ADC_Init+0x2f0>)
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	e009      	b.n	8001822 <HAL_ADC_Init+0x1ba>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a51      	ldr	r2, [pc, #324]	; (8001958 <HAL_ADC_Init+0x2f0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d102      	bne.n	800181e <HAL_ADC_Init+0x1b6>
 8001818:	4b4e      	ldr	r3, [pc, #312]	; (8001954 <HAL_ADC_Init+0x2ec>)
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	e001      	b.n	8001822 <HAL_ADC_Init+0x1ba>
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	2b01      	cmp	r3, #1
 800182e:	d108      	bne.n	8001842 <HAL_ADC_Init+0x1da>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <HAL_ADC_Init+0x1da>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <HAL_ADC_Init+0x1dc>
 8001842:	2300      	movs	r3, #0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d11c      	bne.n	8001882 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001848:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800184a:	2b00      	cmp	r3, #0
 800184c:	d010      	beq.n	8001870 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	2b01      	cmp	r3, #1
 8001858:	d107      	bne.n	800186a <HAL_ADC_Init+0x202>
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_ADC_Init+0x202>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <HAL_ADC_Init+0x204>
 800186a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800186c:	2b00      	cmp	r3, #0
 800186e:	d108      	bne.n	8001882 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001870:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	431a      	orrs	r2, r3
 800187e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001880:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	7e5b      	ldrb	r3, [r3, #25]
 8001886:	035b      	lsls	r3, r3, #13
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800188c:	2a01      	cmp	r2, #1
 800188e:	d002      	beq.n	8001896 <HAL_ADC_Init+0x22e>
 8001890:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001894:	e000      	b.n	8001898 <HAL_ADC_Init+0x230>
 8001896:	2200      	movs	r2, #0
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018a8:	4313      	orrs	r3, r2
 80018aa:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d11b      	bne.n	80018ee <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	7e5b      	ldrb	r3, [r3, #25]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d109      	bne.n	80018d2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c2:	3b01      	subs	r3, #1
 80018c4:	045a      	lsls	r2, r3, #17
 80018c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018c8:	4313      	orrs	r3, r2
 80018ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ce:	663b      	str	r3, [r7, #96]	; 0x60
 80018d0:	e00d      	b.n	80018ee <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80018da:	f043 0220 	orr.w	r2, r3, #32
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	f043 0201 	orr.w	r2, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d03a      	beq.n	800196c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a16      	ldr	r2, [pc, #88]	; (8001954 <HAL_ADC_Init+0x2ec>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d004      	beq.n	800190a <HAL_ADC_Init+0x2a2>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a14      	ldr	r2, [pc, #80]	; (8001958 <HAL_ADC_Init+0x2f0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d128      	bne.n	800195c <HAL_ADC_Init+0x2f4>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001912:	d012      	beq.n	800193a <HAL_ADC_Init+0x2d2>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800191c:	d00a      	beq.n	8001934 <HAL_ADC_Init+0x2cc>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001922:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001926:	d002      	beq.n	800192e <HAL_ADC_Init+0x2c6>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	e018      	b.n	8001960 <HAL_ADC_Init+0x2f8>
 800192e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001932:	e015      	b.n	8001960 <HAL_ADC_Init+0x2f8>
 8001934:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001938:	e012      	b.n	8001960 <HAL_ADC_Init+0x2f8>
 800193a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800193e:	e00f      	b.n	8001960 <HAL_ADC_Init+0x2f8>
 8001940:	20000000 	.word	0x20000000
 8001944:	431bde83 	.word	0x431bde83
 8001948:	50000100 	.word	0x50000100
 800194c:	50000300 	.word	0x50000300
 8001950:	50000700 	.word	0x50000700
 8001954:	50000400 	.word	0x50000400
 8001958:	50000500 	.word	0x50000500
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001964:	4313      	orrs	r3, r2
 8001966:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001968:	4313      	orrs	r3, r2
 800196a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b00      	cmp	r3, #0
 8001978:	d114      	bne.n	80019a4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001988:	f023 0302 	bic.w	r3, r3, #2
 800198c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7e1b      	ldrb	r3, [r3, #24]
 8001992:	039a      	lsls	r2, r3, #14
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4313      	orrs	r3, r2
 800199e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019a0:	4313      	orrs	r3, r2
 80019a2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <HAL_ADC_Init+0x3bc>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6812      	ldr	r2, [r2, #0]
 80019b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80019b4:	430b      	orrs	r3, r1
 80019b6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d10c      	bne.n	80019da <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f023 010f 	bic.w	r1, r3, #15
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	1e5a      	subs	r2, r3, #1
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	631a      	str	r2, [r3, #48]	; 0x30
 80019d8:	e007      	b.n	80019ea <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 020f 	bic.w	r2, r2, #15
 80019e8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	f023 0303 	bic.w	r3, r3, #3
 80019f8:	f043 0201 	orr.w	r2, r3, #1
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001a00:	e00a      	b.n	8001a18 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f023 0312 	bic.w	r3, r3, #18
 8001a0a:	f043 0210 	orr.w	r2, r3, #16
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001a12:	2301      	movs	r3, #1
 8001a14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001a18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3768      	adds	r7, #104	; 0x68
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	fff0c007 	.word	0xfff0c007

08001a28 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b09b      	sub	sp, #108	; 0x6c
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x22>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e2cb      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x5ba>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f040 82af 	bne.w	8001fdc <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d81c      	bhi.n	8001ac0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	461a      	mov	r2, r3
 8001a9a:	231f      	movs	r3, #31
 8001a9c:	4093      	lsls	r3, r2
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	4019      	ands	r1, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	631a      	str	r2, [r3, #48]	; 0x30
 8001abe:	e063      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b09      	cmp	r3, #9
 8001ac6:	d81e      	bhi.n	8001b06 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	3b1e      	subs	r3, #30
 8001adc:	221f      	movs	r2, #31
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	4019      	ands	r1, r3
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	6818      	ldr	r0, [r3, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	3b1e      	subs	r3, #30
 8001af8:	fa00 f203 	lsl.w	r2, r0, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	635a      	str	r2, [r3, #52]	; 0x34
 8001b04:	e040      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b0e      	cmp	r3, #14
 8001b0c:	d81e      	bhi.n	8001b4c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	3b3c      	subs	r3, #60	; 0x3c
 8001b22:	221f      	movs	r2, #31
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	4019      	ands	r1, r3
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	3b3c      	subs	r3, #60	; 0x3c
 8001b3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	639a      	str	r2, [r3, #56]	; 0x38
 8001b4a:	e01d      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	3b5a      	subs	r3, #90	; 0x5a
 8001b60:	221f      	movs	r2, #31
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	4019      	ands	r1, r3
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	3b5a      	subs	r3, #90	; 0x5a
 8001b7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f040 80e5 	bne.w	8001d62 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b09      	cmp	r3, #9
 8001b9e:	d91c      	bls.n	8001bda <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6999      	ldr	r1, [r3, #24]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	3b1e      	subs	r3, #30
 8001bb2:	2207      	movs	r2, #7
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	4019      	ands	r1, r3
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	6898      	ldr	r0, [r3, #8]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	3b1e      	subs	r3, #30
 8001bcc:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	619a      	str	r2, [r3, #24]
 8001bd8:	e019      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6959      	ldr	r1, [r3, #20]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	2207      	movs	r2, #7
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	4019      	ands	r1, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	6898      	ldr	r0, [r3, #8]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4413      	add	r3, r2
 8001c02:	fa00 f203 	lsl.w	r2, r0, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	695a      	ldr	r2, [r3, #20]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	08db      	lsrs	r3, r3, #3
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d84f      	bhi.n	8001cd0 <HAL_ADC_ConfigChannel+0x28c>
 8001c30:	a201      	add	r2, pc, #4	; (adr r2, 8001c38 <HAL_ADC_ConfigChannel+0x1f4>)
 8001c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c36:	bf00      	nop
 8001c38:	08001c49 	.word	0x08001c49
 8001c3c:	08001c6b 	.word	0x08001c6b
 8001c40:	08001c8d 	.word	0x08001c8d
 8001c44:	08001caf 	.word	0x08001caf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c4e:	4b9f      	ldr	r3, [pc, #636]	; (8001ecc <HAL_ADC_ConfigChannel+0x488>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	6812      	ldr	r2, [r2, #0]
 8001c56:	0691      	lsls	r1, r2, #26
 8001c58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c66:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c68:	e07e      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c70:	4b96      	ldr	r3, [pc, #600]	; (8001ecc <HAL_ADC_ConfigChannel+0x488>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	0691      	lsls	r1, r2, #26
 8001c7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c88:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c8a:	e06d      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c92:	4b8e      	ldr	r3, [pc, #568]	; (8001ecc <HAL_ADC_ConfigChannel+0x488>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	0691      	lsls	r1, r2, #26
 8001c9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001caa:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cac:	e05c      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001cb4:	4b85      	ldr	r3, [pc, #532]	; (8001ecc <HAL_ADC_ConfigChannel+0x488>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	0691      	lsls	r1, r2, #26
 8001cbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ccc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cce:	e04b      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	069b      	lsls	r3, r3, #26
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d107      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cf2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	069b      	lsls	r3, r3, #26
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d107      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d16:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	069b      	lsls	r3, r3, #26
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d107      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d3a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	069b      	lsls	r3, r3, #26
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d10a      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d5e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001d60:	e001      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001d62:	bf00      	nop
 8001d64:	e000      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001d66:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d108      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x344>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x344>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x346>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f040 8131 	bne.w	8001ff2 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d00f      	beq.n	8001db8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2201      	movs	r2, #1
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43da      	mvns	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	400a      	ands	r2, r1
 8001db2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001db6:	e049      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2b09      	cmp	r3, #9
 8001dd8:	d91c      	bls.n	8001e14 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6999      	ldr	r1, [r3, #24]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	3b1b      	subs	r3, #27
 8001dec:	2207      	movs	r2, #7
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	4019      	ands	r1, r3
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	6898      	ldr	r0, [r3, #8]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	3b1b      	subs	r3, #27
 8001e06:	fa00 f203 	lsl.w	r2, r0, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	619a      	str	r2, [r3, #24]
 8001e12:	e01b      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6959      	ldr	r1, [r3, #20]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	4613      	mov	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	2207      	movs	r2, #7
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	4019      	ands	r1, r3
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	6898      	ldr	r0, [r3, #8]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	fa00 f203 	lsl.w	r2, r0, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e54:	d004      	beq.n	8001e60 <HAL_ADC_ConfigChannel+0x41c>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <HAL_ADC_ConfigChannel+0x48c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d101      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x420>
 8001e60:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <HAL_ADC_ConfigChannel+0x490>)
 8001e62:	e000      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x422>
 8001e64:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <HAL_ADC_ConfigChannel+0x494>)
 8001e66:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b10      	cmp	r3, #16
 8001e6e:	d105      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d015      	beq.n	8001ea8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e80:	2b11      	cmp	r3, #17
 8001e82:	d105      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00b      	beq.n	8001ea8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001e94:	2b12      	cmp	r3, #18
 8001e96:	f040 80ac 	bne.w	8001ff2 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f040 80a5 	bne.w	8001ff2 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eb0:	d102      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x474>
 8001eb2:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <HAL_ADC_ConfigChannel+0x48c>)
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	e023      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x4bc>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <HAL_ADC_ConfigChannel+0x48c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d10c      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x498>
 8001ec2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	e01a      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x4bc>
 8001eca:	bf00      	nop
 8001ecc:	83fff000 	.word	0x83fff000
 8001ed0:	50000100 	.word	0x50000100
 8001ed4:	50000300 	.word	0x50000300
 8001ed8:	50000700 	.word	0x50000700
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a4a      	ldr	r2, [pc, #296]	; (800200c <HAL_ADC_ConfigChannel+0x5c8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d102      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x4a8>
 8001ee6:	4b4a      	ldr	r3, [pc, #296]	; (8002010 <HAL_ADC_ConfigChannel+0x5cc>)
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	e009      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x4bc>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a47      	ldr	r2, [pc, #284]	; (8002010 <HAL_ADC_ConfigChannel+0x5cc>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d102      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x4b8>
 8001ef6:	4b45      	ldr	r3, [pc, #276]	; (800200c <HAL_ADC_ConfigChannel+0x5c8>)
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	e001      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x4bc>
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d108      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x4dc>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x4dc>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x4de>
 8001f20:	2300      	movs	r3, #0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d150      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f26:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d010      	beq.n	8001f4e <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d107      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x504>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x504>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x506>
 8001f48:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d13c      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b10      	cmp	r3, #16
 8001f54:	d11d      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x54e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f5e:	d118      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f6a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f6c:	4b29      	ldr	r3, [pc, #164]	; (8002014 <HAL_ADC_ConfigChannel+0x5d0>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a29      	ldr	r2, [pc, #164]	; (8002018 <HAL_ADC_ConfigChannel+0x5d4>)
 8001f72:	fba2 2303 	umull	r2, r3, r2, r3
 8001f76:	0c9a      	lsrs	r2, r3, #18
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f82:	e002      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1f9      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f90:	e02e      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b11      	cmp	r3, #17
 8001f98:	d10b      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x56e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fa2:	d106      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fae:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fb0:	e01e      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b12      	cmp	r3, #18
 8001fb8:	d11a      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fc4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fc6:	e013      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	f043 0220 	orr.w	r2, r3, #32
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001fda:	e00a      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f043 0220 	orr.w	r2, r3, #32
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001fee:	e000      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ff0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ffa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	376c      	adds	r7, #108	; 0x6c
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	50000400 	.word	0x50000400
 8002010:	50000500 	.word	0x50000500
 8002014:	20000000 	.word	0x20000000
 8002018:	431bde83 	.word	0x431bde83

0800201c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800201c:	b480      	push	{r7}
 800201e:	b099      	sub	sp, #100	; 0x64
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002034:	d102      	bne.n	800203c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002036:	4b6d      	ldr	r3, [pc, #436]	; (80021ec <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	e01a      	b.n	8002072 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a6a      	ldr	r2, [pc, #424]	; (80021ec <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d103      	bne.n	800204e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002046:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	e011      	b.n	8002072 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a67      	ldr	r2, [pc, #412]	; (80021f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d102      	bne.n	800205e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002058:	4b66      	ldr	r3, [pc, #408]	; (80021f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	e009      	b.n	8002072 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a64      	ldr	r2, [pc, #400]	; (80021f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d102      	bne.n	800206e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002068:	4b61      	ldr	r3, [pc, #388]	; (80021f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	e001      	b.n	8002072 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800206e:	2300      	movs	r3, #0
 8002070:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0b0      	b.n	80021de <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002086:	2302      	movs	r3, #2
 8002088:	e0a9      	b.n	80021de <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	f040 808d 	bne.w	80021bc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f040 8086 	bne.w	80021bc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020b8:	d004      	beq.n	80020c4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a4b      	ldr	r2, [pc, #300]	; (80021ec <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d101      	bne.n	80020c8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80020c4:	4b4c      	ldr	r3, [pc, #304]	; (80021f8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80020c6:	e000      	b.n	80020ca <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80020c8:	4b4c      	ldr	r3, [pc, #304]	; (80021fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80020ca:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d040      	beq.n	8002156 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80020d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	6859      	ldr	r1, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020e6:	035b      	lsls	r3, r3, #13
 80020e8:	430b      	orrs	r3, r1
 80020ea:	431a      	orrs	r2, r3
 80020ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020ee:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d108      	bne.n	8002110 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002110:	2300      	movs	r3, #0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d15c      	bne.n	80021d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	2b01      	cmp	r3, #1
 8002120:	d107      	bne.n	8002132 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002132:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002134:	2b00      	cmp	r3, #0
 8002136:	d14b      	bne.n	80021d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002138:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002140:	f023 030f 	bic.w	r3, r3, #15
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	6811      	ldr	r1, [r2, #0]
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	6892      	ldr	r2, [r2, #8]
 800214c:	430a      	orrs	r2, r1
 800214e:	431a      	orrs	r2, r3
 8002150:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002152:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002154:	e03c      	b.n	80021d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800215e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002160:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b01      	cmp	r3, #1
 800216e:	d108      	bne.n	8002182 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002182:	2300      	movs	r3, #0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d123      	bne.n	80021d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	2b01      	cmp	r3, #1
 8002192:	d107      	bne.n	80021a4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80021a4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d112      	bne.n	80021d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80021aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021b2:	f023 030f 	bic.w	r3, r3, #15
 80021b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021b8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80021ba:	e009      	b.n	80021d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	f043 0220 	orr.w	r2, r3, #32
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80021ce:	e000      	b.n	80021d2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80021d0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80021da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80021de:	4618      	mov	r0, r3
 80021e0:	3764      	adds	r7, #100	; 0x64
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	50000100 	.word	0x50000100
 80021f0:	50000400 	.word	0x50000400
 80021f4:	50000500 	.word	0x50000500
 80021f8:	50000300 	.word	0x50000300
 80021fc:	50000700 	.word	0x50000700

08002200 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d108      	bne.n	800222c <ADC_Disable+0x2c>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <ADC_Disable+0x2c>
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <ADC_Disable+0x2e>
 800222c:	2300      	movs	r3, #0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d047      	beq.n	80022c2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 030d 	and.w	r3, r3, #13
 800223c:	2b01      	cmp	r3, #1
 800223e:	d10f      	bne.n	8002260 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0202 	orr.w	r2, r2, #2
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2203      	movs	r2, #3
 8002256:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002258:	f7ff f9fa 	bl	8001650 <HAL_GetTick>
 800225c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800225e:	e029      	b.n	80022b4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	f043 0210 	orr.w	r2, r3, #16
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002270:	f043 0201 	orr.w	r2, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e023      	b.n	80022c4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800227c:	f7ff f9e8 	bl	8001650 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d914      	bls.n	80022b4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b01      	cmp	r3, #1
 8002296:	d10d      	bne.n	80022b4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	f043 0210 	orr.w	r2, r3, #16
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a8:	f043 0201 	orr.w	r2, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e007      	b.n	80022c4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d0dc      	beq.n	800227c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <__NVIC_SetPriorityGrouping+0x44>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e8:	4013      	ands	r3, r2
 80022ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fe:	4a04      	ldr	r2, [pc, #16]	; (8002310 <__NVIC_SetPriorityGrouping+0x44>)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	60d3      	str	r3, [r2, #12]
}
 8002304:	bf00      	nop
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <__NVIC_GetPriorityGrouping+0x18>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	0a1b      	lsrs	r3, r3, #8
 800231e:	f003 0307 	and.w	r3, r3, #7
}
 8002322:	4618      	mov	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	2b00      	cmp	r3, #0
 8002340:	db0b      	blt.n	800235a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	f003 021f 	and.w	r2, r3, #31
 8002348:	4907      	ldr	r1, [pc, #28]	; (8002368 <__NVIC_EnableIRQ+0x38>)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	2001      	movs	r0, #1
 8002352:	fa00 f202 	lsl.w	r2, r0, r2
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000e100 	.word	0xe000e100

0800236c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237c:	2b00      	cmp	r3, #0
 800237e:	db0a      	blt.n	8002396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	b2da      	uxtb	r2, r3
 8002384:	490c      	ldr	r1, [pc, #48]	; (80023b8 <__NVIC_SetPriority+0x4c>)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	0112      	lsls	r2, r2, #4
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	440b      	add	r3, r1
 8002390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002394:	e00a      	b.n	80023ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4908      	ldr	r1, [pc, #32]	; (80023bc <__NVIC_SetPriority+0x50>)
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	3b04      	subs	r3, #4
 80023a4:	0112      	lsls	r2, r2, #4
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	440b      	add	r3, r1
 80023aa:	761a      	strb	r2, [r3, #24]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000e100 	.word	0xe000e100
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f1c3 0307 	rsb	r3, r3, #7
 80023da:	2b04      	cmp	r3, #4
 80023dc:	bf28      	it	cs
 80023de:	2304      	movcs	r3, #4
 80023e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3304      	adds	r3, #4
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d902      	bls.n	80023f0 <NVIC_EncodePriority+0x30>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3b03      	subs	r3, #3
 80023ee:	e000      	b.n	80023f2 <NVIC_EncodePriority+0x32>
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	f04f 32ff 	mov.w	r2, #4294967295
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43da      	mvns	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	401a      	ands	r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002408:	f04f 31ff 	mov.w	r1, #4294967295
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	fa01 f303 	lsl.w	r3, r1, r3
 8002412:	43d9      	mvns	r1, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002418:	4313      	orrs	r3, r2
         );
}
 800241a:	4618      	mov	r0, r3
 800241c:	3724      	adds	r7, #36	; 0x24
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff ff4c 	bl	80022cc <__NVIC_SetPriorityGrouping>
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800244e:	f7ff ff61 	bl	8002314 <__NVIC_GetPriorityGrouping>
 8002452:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	68b9      	ldr	r1, [r7, #8]
 8002458:	6978      	ldr	r0, [r7, #20]
 800245a:	f7ff ffb1 	bl	80023c0 <NVIC_EncodePriority>
 800245e:	4602      	mov	r2, r0
 8002460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff ff80 	bl	800236c <__NVIC_SetPriority>
}
 800246c:	bf00      	nop
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ff54 	bl	8002330 <__NVIC_EnableIRQ>
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800249e:	e154      	b.n	800274a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	2101      	movs	r1, #1
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ac:	4013      	ands	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8146 	beq.w	8002744 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d005      	beq.n	80024d0 <HAL_GPIO_Init+0x40>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d130      	bne.n	8002532 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	2203      	movs	r2, #3
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002506:	2201      	movs	r2, #1
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4013      	ands	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	f003 0201 	and.w	r2, r3, #1
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	2b03      	cmp	r3, #3
 800253c:	d017      	beq.n	800256e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	2203      	movs	r2, #3
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d123      	bne.n	80025c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	08da      	lsrs	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3208      	adds	r2, #8
 8002582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002586:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	220f      	movs	r2, #15
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	691a      	ldr	r2, [r3, #16]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	08da      	lsrs	r2, r3, #3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3208      	adds	r2, #8
 80025bc:	6939      	ldr	r1, [r7, #16]
 80025be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	2203      	movs	r2, #3
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4013      	ands	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 0203 	and.w	r2, r3, #3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 80a0 	beq.w	8002744 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002604:	4b58      	ldr	r3, [pc, #352]	; (8002768 <HAL_GPIO_Init+0x2d8>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	4a57      	ldr	r2, [pc, #348]	; (8002768 <HAL_GPIO_Init+0x2d8>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6193      	str	r3, [r2, #24]
 8002610:	4b55      	ldr	r3, [pc, #340]	; (8002768 <HAL_GPIO_Init+0x2d8>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800261c:	4a53      	ldr	r2, [pc, #332]	; (800276c <HAL_GPIO_Init+0x2dc>)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	089b      	lsrs	r3, r3, #2
 8002622:	3302      	adds	r3, #2
 8002624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	220f      	movs	r2, #15
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002646:	d019      	beq.n	800267c <HAL_GPIO_Init+0x1ec>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a49      	ldr	r2, [pc, #292]	; (8002770 <HAL_GPIO_Init+0x2e0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d013      	beq.n	8002678 <HAL_GPIO_Init+0x1e8>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a48      	ldr	r2, [pc, #288]	; (8002774 <HAL_GPIO_Init+0x2e4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d00d      	beq.n	8002674 <HAL_GPIO_Init+0x1e4>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a47      	ldr	r2, [pc, #284]	; (8002778 <HAL_GPIO_Init+0x2e8>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d007      	beq.n	8002670 <HAL_GPIO_Init+0x1e0>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a46      	ldr	r2, [pc, #280]	; (800277c <HAL_GPIO_Init+0x2ec>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d101      	bne.n	800266c <HAL_GPIO_Init+0x1dc>
 8002668:	2304      	movs	r3, #4
 800266a:	e008      	b.n	800267e <HAL_GPIO_Init+0x1ee>
 800266c:	2305      	movs	r3, #5
 800266e:	e006      	b.n	800267e <HAL_GPIO_Init+0x1ee>
 8002670:	2303      	movs	r3, #3
 8002672:	e004      	b.n	800267e <HAL_GPIO_Init+0x1ee>
 8002674:	2302      	movs	r3, #2
 8002676:	e002      	b.n	800267e <HAL_GPIO_Init+0x1ee>
 8002678:	2301      	movs	r3, #1
 800267a:	e000      	b.n	800267e <HAL_GPIO_Init+0x1ee>
 800267c:	2300      	movs	r3, #0
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	f002 0203 	and.w	r2, r2, #3
 8002684:	0092      	lsls	r2, r2, #2
 8002686:	4093      	lsls	r3, r2
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800268e:	4937      	ldr	r1, [pc, #220]	; (800276c <HAL_GPIO_Init+0x2dc>)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	089b      	lsrs	r3, r3, #2
 8002694:	3302      	adds	r3, #2
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800269c:	4b38      	ldr	r3, [pc, #224]	; (8002780 <HAL_GPIO_Init+0x2f0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026c0:	4a2f      	ldr	r2, [pc, #188]	; (8002780 <HAL_GPIO_Init+0x2f0>)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026c6:	4b2e      	ldr	r3, [pc, #184]	; (8002780 <HAL_GPIO_Init+0x2f0>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4013      	ands	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026ea:	4a25      	ldr	r2, [pc, #148]	; (8002780 <HAL_GPIO_Init+0x2f0>)
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026f0:	4b23      	ldr	r3, [pc, #140]	; (8002780 <HAL_GPIO_Init+0x2f0>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	4013      	ands	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002714:	4a1a      	ldr	r2, [pc, #104]	; (8002780 <HAL_GPIO_Init+0x2f0>)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800271a:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_GPIO_Init+0x2f0>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	43db      	mvns	r3, r3
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4013      	ands	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800273e:	4a10      	ldr	r2, [pc, #64]	; (8002780 <HAL_GPIO_Init+0x2f0>)
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	3301      	adds	r3, #1
 8002748:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	f47f aea3 	bne.w	80024a0 <HAL_GPIO_Init+0x10>
  }
}
 800275a:	bf00      	nop
 800275c:	bf00      	nop
 800275e:	371c      	adds	r7, #28
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	40021000 	.word	0x40021000
 800276c:	40010000 	.word	0x40010000
 8002770:	48000400 	.word	0x48000400
 8002774:	48000800 	.word	0x48000800
 8002778:	48000c00 	.word	0x48000c00
 800277c:	48001000 	.word	0x48001000
 8002780:	40010400 	.word	0x40010400

08002784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	807b      	strh	r3, [r7, #2]
 8002790:	4613      	mov	r3, r2
 8002792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002794:	787b      	ldrb	r3, [r7, #1]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800279a:	887a      	ldrh	r2, [r7, #2]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027a0:	e002      	b.n	80027a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027a2:	887a      	ldrh	r2, [r7, #2]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	1d3b      	adds	r3, r7, #4
 80027be:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027c0:	1d3b      	adds	r3, r7, #4
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d102      	bne.n	80027ce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	f000 bef4 	b.w	80035b6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ce:	1d3b      	adds	r3, r7, #4
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 816a 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027de:	4bb3      	ldr	r3, [pc, #716]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d00c      	beq.n	8002804 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027ea:	4bb0      	ldr	r3, [pc, #704]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d159      	bne.n	80028aa <HAL_RCC_OscConfig+0xf6>
 80027f6:	4bad      	ldr	r3, [pc, #692]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002802:	d152      	bne.n	80028aa <HAL_RCC_OscConfig+0xf6>
 8002804:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002808:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002810:	fa93 f3a3 	rbit	r3, r3
 8002814:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002818:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281c:	fab3 f383 	clz	r3, r3
 8002820:	b2db      	uxtb	r3, r3
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	b2db      	uxtb	r3, r3
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b01      	cmp	r3, #1
 800282e:	d102      	bne.n	8002836 <HAL_RCC_OscConfig+0x82>
 8002830:	4b9e      	ldr	r3, [pc, #632]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	e015      	b.n	8002862 <HAL_RCC_OscConfig+0xae>
 8002836:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800283a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002842:	fa93 f3a3 	rbit	r3, r3
 8002846:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800284a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800284e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002852:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800285e:	4b93      	ldr	r3, [pc, #588]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002866:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800286a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800286e:	fa92 f2a2 	rbit	r2, r2
 8002872:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002876:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800287a:	fab2 f282 	clz	r2, r2
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	f042 0220 	orr.w	r2, r2, #32
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	f002 021f 	and.w	r2, r2, #31
 800288a:	2101      	movs	r1, #1
 800288c:	fa01 f202 	lsl.w	r2, r1, r2
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 810c 	beq.w	8002ab0 <HAL_RCC_OscConfig+0x2fc>
 8002898:	1d3b      	adds	r3, r7, #4
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f040 8106 	bne.w	8002ab0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	f000 be86 	b.w	80035b6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028aa:	1d3b      	adds	r3, r7, #4
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b4:	d106      	bne.n	80028c4 <HAL_RCC_OscConfig+0x110>
 80028b6:	4b7d      	ldr	r3, [pc, #500]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a7c      	ldr	r2, [pc, #496]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 80028bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e030      	b.n	8002926 <HAL_RCC_OscConfig+0x172>
 80028c4:	1d3b      	adds	r3, r7, #4
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCC_OscConfig+0x134>
 80028ce:	4b77      	ldr	r3, [pc, #476]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a76      	ldr	r2, [pc, #472]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 80028d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	4b74      	ldr	r3, [pc, #464]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a73      	ldr	r2, [pc, #460]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 80028e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e01e      	b.n	8002926 <HAL_RCC_OscConfig+0x172>
 80028e8:	1d3b      	adds	r3, r7, #4
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f2:	d10c      	bne.n	800290e <HAL_RCC_OscConfig+0x15a>
 80028f4:	4b6d      	ldr	r3, [pc, #436]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a6c      	ldr	r2, [pc, #432]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 80028fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	4b6a      	ldr	r3, [pc, #424]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a69      	ldr	r2, [pc, #420]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 8002906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	e00b      	b.n	8002926 <HAL_RCC_OscConfig+0x172>
 800290e:	4b67      	ldr	r3, [pc, #412]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a66      	ldr	r2, [pc, #408]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 8002914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	4b64      	ldr	r3, [pc, #400]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a63      	ldr	r2, [pc, #396]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 8002920:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002924:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002926:	4b61      	ldr	r3, [pc, #388]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	f023 020f 	bic.w	r2, r3, #15
 800292e:	1d3b      	adds	r3, r7, #4
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	495d      	ldr	r1, [pc, #372]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 8002936:	4313      	orrs	r3, r2
 8002938:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800293a:	1d3b      	adds	r3, r7, #4
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d059      	beq.n	80029f8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7fe fe84 	bl	8001650 <HAL_GetTick>
 8002948:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294c:	e00a      	b.n	8002964 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800294e:	f7fe fe7f 	bl	8001650 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	; 0x64
 800295c:	d902      	bls.n	8002964 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	f000 be29 	b.w	80035b6 <HAL_RCC_OscConfig+0xe02>
 8002964:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002968:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002970:	fa93 f3a3 	rbit	r3, r3
 8002974:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002978:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297c:	fab3 f383 	clz	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	d102      	bne.n	8002996 <HAL_RCC_OscConfig+0x1e2>
 8002990:	4b46      	ldr	r3, [pc, #280]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	e015      	b.n	80029c2 <HAL_RCC_OscConfig+0x20e>
 8002996:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800299a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80029a2:	fa93 f3a3 	rbit	r3, r3
 80029a6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80029aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ae:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80029b2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80029be:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029c6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80029ca:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80029ce:	fa92 f2a2 	rbit	r2, r2
 80029d2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80029d6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80029da:	fab2 f282 	clz	r2, r2
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	f042 0220 	orr.w	r2, r2, #32
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	f002 021f 	and.w	r2, r2, #31
 80029ea:	2101      	movs	r1, #1
 80029ec:	fa01 f202 	lsl.w	r2, r1, r2
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0ab      	beq.n	800294e <HAL_RCC_OscConfig+0x19a>
 80029f6:	e05c      	b.n	8002ab2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7fe fe2a 	bl	8001650 <HAL_GetTick>
 80029fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a00:	e00a      	b.n	8002a18 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a02:	f7fe fe25 	bl	8001650 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	; 0x64
 8002a10:	d902      	bls.n	8002a18 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	f000 bdcf 	b.w	80035b6 <HAL_RCC_OscConfig+0xe02>
 8002a18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a1c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002a2c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a30:	fab3 f383 	clz	r3, r3
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d102      	bne.n	8002a4a <HAL_RCC_OscConfig+0x296>
 8002a44:	4b19      	ldr	r3, [pc, #100]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	e015      	b.n	8002a76 <HAL_RCC_OscConfig+0x2c2>
 8002a4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a4e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a62:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a66:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002a6a:	fa93 f3a3 	rbit	r3, r3
 8002a6e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <HAL_RCC_OscConfig+0x2f8>)
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a7a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002a7e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a82:	fa92 f2a2 	rbit	r2, r2
 8002a86:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002a8a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002a8e:	fab2 f282 	clz	r2, r2
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	f042 0220 	orr.w	r2, r2, #32
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	f002 021f 	and.w	r2, r2, #31
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1ab      	bne.n	8002a02 <HAL_RCC_OscConfig+0x24e>
 8002aaa:	e002      	b.n	8002ab2 <HAL_RCC_OscConfig+0x2fe>
 8002aac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab2:	1d3b      	adds	r3, r7, #4
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 816f 	beq.w	8002da0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ac2:	4bd0      	ldr	r3, [pc, #832]	; (8002e04 <HAL_RCC_OscConfig+0x650>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00b      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ace:	4bcd      	ldr	r3, [pc, #820]	; (8002e04 <HAL_RCC_OscConfig+0x650>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d16c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x400>
 8002ada:	4bca      	ldr	r3, [pc, #808]	; (8002e04 <HAL_RCC_OscConfig+0x650>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d166      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x400>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002af0:	fa93 f3a3 	rbit	r3, r3
 8002af4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002af8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afc:	fab3 f383 	clz	r3, r3
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d102      	bne.n	8002b16 <HAL_RCC_OscConfig+0x362>
 8002b10:	4bbc      	ldr	r3, [pc, #752]	; (8002e04 <HAL_RCC_OscConfig+0x650>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	e013      	b.n	8002b3e <HAL_RCC_OscConfig+0x38a>
 8002b16:	2302      	movs	r3, #2
 8002b18:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002b28:	2302      	movs	r3, #2
 8002b2a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002b2e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b32:	fa93 f3a3 	rbit	r3, r3
 8002b36:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002b3a:	4bb2      	ldr	r3, [pc, #712]	; (8002e04 <HAL_RCC_OscConfig+0x650>)
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002b44:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002b48:	fa92 f2a2 	rbit	r2, r2
 8002b4c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002b50:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002b54:	fab2 f282 	clz	r2, r2
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	f042 0220 	orr.w	r2, r2, #32
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	f002 021f 	and.w	r2, r2, #31
 8002b64:	2101      	movs	r1, #1
 8002b66:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d007      	beq.n	8002b80 <HAL_RCC_OscConfig+0x3cc>
 8002b70:	1d3b      	adds	r3, r7, #4
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d002      	beq.n	8002b80 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	f000 bd1b 	b.w	80035b6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b80:	4ba0      	ldr	r3, [pc, #640]	; (8002e04 <HAL_RCC_OscConfig+0x650>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b88:	1d3b      	adds	r3, r7, #4
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	21f8      	movs	r1, #248	; 0xf8
 8002b90:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b98:	fa91 f1a1 	rbit	r1, r1
 8002b9c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002ba0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002ba4:	fab1 f181 	clz	r1, r1
 8002ba8:	b2c9      	uxtb	r1, r1
 8002baa:	408b      	lsls	r3, r1
 8002bac:	4995      	ldr	r1, [pc, #596]	; (8002e04 <HAL_RCC_OscConfig+0x650>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb2:	e0f5      	b.n	8002da0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 8085 	beq.w	8002cca <HAL_RCC_OscConfig+0x516>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002bd2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002be0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	461a      	mov	r2, r3
 8002be8:	2301      	movs	r3, #1
 8002bea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7fe fd30 	bl	8001650 <HAL_GetTick>
 8002bf0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf4:	e00a      	b.n	8002c0c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bf6:	f7fe fd2b 	bl	8001650 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d902      	bls.n	8002c0c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	f000 bcd5 	b.w	80035b6 <HAL_RCC_OscConfig+0xe02>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002c1e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c22:	fab3 f383 	clz	r3, r3
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	095b      	lsrs	r3, r3, #5
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d102      	bne.n	8002c3c <HAL_RCC_OscConfig+0x488>
 8002c36:	4b73      	ldr	r3, [pc, #460]	; (8002e04 <HAL_RCC_OscConfig+0x650>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	e013      	b.n	8002c64 <HAL_RCC_OscConfig+0x4b0>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002c46:	fa93 f3a3 	rbit	r3, r3
 8002c4a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c4e:	2302      	movs	r3, #2
 8002c50:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c54:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002c58:	fa93 f3a3 	rbit	r3, r3
 8002c5c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002c60:	4b68      	ldr	r3, [pc, #416]	; (8002e04 <HAL_RCC_OscConfig+0x650>)
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	2202      	movs	r2, #2
 8002c66:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002c6a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002c6e:	fa92 f2a2 	rbit	r2, r2
 8002c72:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002c76:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002c7a:	fab2 f282 	clz	r2, r2
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	f042 0220 	orr.w	r2, r2, #32
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	f002 021f 	and.w	r2, r2, #31
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0af      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c96:	4b5b      	ldr	r3, [pc, #364]	; (8002e04 <HAL_RCC_OscConfig+0x650>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c9e:	1d3b      	adds	r3, r7, #4
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	21f8      	movs	r1, #248	; 0xf8
 8002ca6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002cae:	fa91 f1a1 	rbit	r1, r1
 8002cb2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002cb6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002cba:	fab1 f181 	clz	r1, r1
 8002cbe:	b2c9      	uxtb	r1, r1
 8002cc0:	408b      	lsls	r3, r1
 8002cc2:	4950      	ldr	r1, [pc, #320]	; (8002e04 <HAL_RCC_OscConfig+0x650>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	600b      	str	r3, [r1, #0]
 8002cc8:	e06a      	b.n	8002da0 <HAL_RCC_OscConfig+0x5ec>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002cd4:	fa93 f3a3 	rbit	r3, r3
 8002cd8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002cdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce0:	fab3 f383 	clz	r3, r3
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf6:	f7fe fcab 	bl	8001650 <HAL_GetTick>
 8002cfa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfe:	e00a      	b.n	8002d16 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d00:	f7fe fca6 	bl	8001650 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d902      	bls.n	8002d16 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	f000 bc50 	b.w	80035b6 <HAL_RCC_OscConfig+0xe02>
 8002d16:	2302      	movs	r3, #2
 8002d18:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002d28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2c:	fab3 f383 	clz	r3, r3
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d102      	bne.n	8002d46 <HAL_RCC_OscConfig+0x592>
 8002d40:	4b30      	ldr	r3, [pc, #192]	; (8002e04 <HAL_RCC_OscConfig+0x650>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	e013      	b.n	8002d6e <HAL_RCC_OscConfig+0x5ba>
 8002d46:	2302      	movs	r3, #2
 8002d48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002d50:	fa93 f3a3 	rbit	r3, r3
 8002d54:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d58:	2302      	movs	r3, #2
 8002d5a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d62:	fa93 f3a3 	rbit	r3, r3
 8002d66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002d6a:	4b26      	ldr	r3, [pc, #152]	; (8002e04 <HAL_RCC_OscConfig+0x650>)
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002d74:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002d78:	fa92 f2a2 	rbit	r2, r2
 8002d7c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002d80:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002d84:	fab2 f282 	clz	r2, r2
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	f042 0220 	orr.w	r2, r2, #32
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	f002 021f 	and.w	r2, r2, #31
 8002d94:	2101      	movs	r1, #1
 8002d96:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1af      	bne.n	8002d00 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da0:	1d3b      	adds	r3, r7, #4
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 80da 	beq.w	8002f64 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002db0:	1d3b      	adds	r3, r7, #4
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d069      	beq.n	8002e8e <HAL_RCC_OscConfig+0x6da>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd0:	fab3 f383 	clz	r3, r3
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_OscConfig+0x654>)
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	461a      	mov	r2, r3
 8002de0:	2301      	movs	r3, #1
 8002de2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de4:	f7fe fc34 	bl	8001650 <HAL_GetTick>
 8002de8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dec:	e00e      	b.n	8002e0c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dee:	f7fe fc2f 	bl	8001650 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d906      	bls.n	8002e0c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e3d9      	b.n	80035b6 <HAL_RCC_OscConfig+0xe02>
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000
 8002e08:	10908120 	.word	0x10908120
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002e16:	fa93 f3a3 	rbit	r3, r3
 8002e1a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002e1e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002e22:	2202      	movs	r2, #2
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	fa93 f2a3 	rbit	r2, r3
 8002e30:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	fa93 f2a3 	rbit	r2, r3
 8002e48:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002e4c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e4e:	4ba5      	ldr	r3, [pc, #660]	; (80030e4 <HAL_RCC_OscConfig+0x930>)
 8002e50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e52:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002e56:	2102      	movs	r1, #2
 8002e58:	6019      	str	r1, [r3, #0]
 8002e5a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	fa93 f1a3 	rbit	r1, r3
 8002e64:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e68:	6019      	str	r1, [r3, #0]
  return result;
 8002e6a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	fab3 f383 	clz	r3, r3
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f003 031f 	and.w	r3, r3, #31
 8002e80:	2101      	movs	r1, #1
 8002e82:	fa01 f303 	lsl.w	r3, r1, r3
 8002e86:	4013      	ands	r3, r2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0b0      	beq.n	8002dee <HAL_RCC_OscConfig+0x63a>
 8002e8c:	e06a      	b.n	8002f64 <HAL_RCC_OscConfig+0x7b0>
 8002e8e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	fa93 f2a3 	rbit	r2, r3
 8002ea0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ea4:	601a      	str	r2, [r3, #0]
  return result;
 8002ea6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002eaa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eac:	fab3 f383 	clz	r3, r3
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	4b8c      	ldr	r3, [pc, #560]	; (80030e8 <HAL_RCC_OscConfig+0x934>)
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec0:	f7fe fbc6 	bl	8001650 <HAL_GetTick>
 8002ec4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec8:	e009      	b.n	8002ede <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eca:	f7fe fbc1 	bl	8001650 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e36b      	b.n	80035b6 <HAL_RCC_OscConfig+0xe02>
 8002ede:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	fa93 f2a3 	rbit	r2, r3
 8002ef0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002efa:	2202      	movs	r2, #2
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	fa93 f2a3 	rbit	r2, r3
 8002f08:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002f12:	2202      	movs	r2, #2
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	fa93 f2a3 	rbit	r2, r3
 8002f20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f24:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f26:	4b6f      	ldr	r3, [pc, #444]	; (80030e4 <HAL_RCC_OscConfig+0x930>)
 8002f28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f2a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002f2e:	2102      	movs	r1, #2
 8002f30:	6019      	str	r1, [r3, #0]
 8002f32:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	fa93 f1a3 	rbit	r1, r3
 8002f3c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002f40:	6019      	str	r1, [r3, #0]
  return result;
 8002f42:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	f003 031f 	and.w	r3, r3, #31
 8002f58:	2101      	movs	r1, #1
 8002f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5e:	4013      	ands	r3, r2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1b2      	bne.n	8002eca <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f64:	1d3b      	adds	r3, r7, #4
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8158 	beq.w	8003224 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f74:	2300      	movs	r3, #0
 8002f76:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f7a:	4b5a      	ldr	r3, [pc, #360]	; (80030e4 <HAL_RCC_OscConfig+0x930>)
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d112      	bne.n	8002fac <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f86:	4b57      	ldr	r3, [pc, #348]	; (80030e4 <HAL_RCC_OscConfig+0x930>)
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	4a56      	ldr	r2, [pc, #344]	; (80030e4 <HAL_RCC_OscConfig+0x930>)
 8002f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f90:	61d3      	str	r3, [r2, #28]
 8002f92:	4b54      	ldr	r3, [pc, #336]	; (80030e4 <HAL_RCC_OscConfig+0x930>)
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002f9a:	f107 0308 	add.w	r3, r7, #8
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	f107 0308 	add.w	r3, r7, #8
 8002fa4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fac:	4b4f      	ldr	r3, [pc, #316]	; (80030ec <HAL_RCC_OscConfig+0x938>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d11a      	bne.n	8002fee <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fb8:	4b4c      	ldr	r3, [pc, #304]	; (80030ec <HAL_RCC_OscConfig+0x938>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a4b      	ldr	r2, [pc, #300]	; (80030ec <HAL_RCC_OscConfig+0x938>)
 8002fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc4:	f7fe fb44 	bl	8001650 <HAL_GetTick>
 8002fc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fcc:	e009      	b.n	8002fe2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fce:	f7fe fb3f 	bl	8001650 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	; 0x64
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e2e9      	b.n	80035b6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe2:	4b42      	ldr	r3, [pc, #264]	; (80030ec <HAL_RCC_OscConfig+0x938>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0ef      	beq.n	8002fce <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fee:	1d3b      	adds	r3, r7, #4
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d106      	bne.n	8003006 <HAL_RCC_OscConfig+0x852>
 8002ff8:	4b3a      	ldr	r3, [pc, #232]	; (80030e4 <HAL_RCC_OscConfig+0x930>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	4a39      	ldr	r2, [pc, #228]	; (80030e4 <HAL_RCC_OscConfig+0x930>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6213      	str	r3, [r2, #32]
 8003004:	e02f      	b.n	8003066 <HAL_RCC_OscConfig+0x8b2>
 8003006:	1d3b      	adds	r3, r7, #4
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10c      	bne.n	800302a <HAL_RCC_OscConfig+0x876>
 8003010:	4b34      	ldr	r3, [pc, #208]	; (80030e4 <HAL_RCC_OscConfig+0x930>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4a33      	ldr	r2, [pc, #204]	; (80030e4 <HAL_RCC_OscConfig+0x930>)
 8003016:	f023 0301 	bic.w	r3, r3, #1
 800301a:	6213      	str	r3, [r2, #32]
 800301c:	4b31      	ldr	r3, [pc, #196]	; (80030e4 <HAL_RCC_OscConfig+0x930>)
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	4a30      	ldr	r2, [pc, #192]	; (80030e4 <HAL_RCC_OscConfig+0x930>)
 8003022:	f023 0304 	bic.w	r3, r3, #4
 8003026:	6213      	str	r3, [r2, #32]
 8003028:	e01d      	b.n	8003066 <HAL_RCC_OscConfig+0x8b2>
 800302a:	1d3b      	adds	r3, r7, #4
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	2b05      	cmp	r3, #5
 8003032:	d10c      	bne.n	800304e <HAL_RCC_OscConfig+0x89a>
 8003034:	4b2b      	ldr	r3, [pc, #172]	; (80030e4 <HAL_RCC_OscConfig+0x930>)
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	4a2a      	ldr	r2, [pc, #168]	; (80030e4 <HAL_RCC_OscConfig+0x930>)
 800303a:	f043 0304 	orr.w	r3, r3, #4
 800303e:	6213      	str	r3, [r2, #32]
 8003040:	4b28      	ldr	r3, [pc, #160]	; (80030e4 <HAL_RCC_OscConfig+0x930>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	4a27      	ldr	r2, [pc, #156]	; (80030e4 <HAL_RCC_OscConfig+0x930>)
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	6213      	str	r3, [r2, #32]
 800304c:	e00b      	b.n	8003066 <HAL_RCC_OscConfig+0x8b2>
 800304e:	4b25      	ldr	r3, [pc, #148]	; (80030e4 <HAL_RCC_OscConfig+0x930>)
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	4a24      	ldr	r2, [pc, #144]	; (80030e4 <HAL_RCC_OscConfig+0x930>)
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	6213      	str	r3, [r2, #32]
 800305a:	4b22      	ldr	r3, [pc, #136]	; (80030e4 <HAL_RCC_OscConfig+0x930>)
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	4a21      	ldr	r2, [pc, #132]	; (80030e4 <HAL_RCC_OscConfig+0x930>)
 8003060:	f023 0304 	bic.w	r3, r3, #4
 8003064:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003066:	1d3b      	adds	r3, r7, #4
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d06b      	beq.n	8003148 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003070:	f7fe faee 	bl	8001650 <HAL_GetTick>
 8003074:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003078:	e00b      	b.n	8003092 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800307a:	f7fe fae9 	bl	8001650 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f241 3288 	movw	r2, #5000	; 0x1388
 800308a:	4293      	cmp	r3, r2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e291      	b.n	80035b6 <HAL_RCC_OscConfig+0xe02>
 8003092:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003096:	2202      	movs	r2, #2
 8003098:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	fa93 f2a3 	rbit	r2, r3
 80030a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80030ae:	2202      	movs	r2, #2
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	fa93 f2a3 	rbit	r2, r3
 80030bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80030c0:	601a      	str	r2, [r3, #0]
  return result;
 80030c2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80030c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c8:	fab3 f383 	clz	r3, r3
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	f043 0302 	orr.w	r3, r3, #2
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d109      	bne.n	80030f0 <HAL_RCC_OscConfig+0x93c>
 80030dc:	4b01      	ldr	r3, [pc, #4]	; (80030e4 <HAL_RCC_OscConfig+0x930>)
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	e014      	b.n	800310c <HAL_RCC_OscConfig+0x958>
 80030e2:	bf00      	nop
 80030e4:	40021000 	.word	0x40021000
 80030e8:	10908120 	.word	0x10908120
 80030ec:	40007000 	.word	0x40007000
 80030f0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80030f4:	2202      	movs	r2, #2
 80030f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	fa93 f2a3 	rbit	r2, r3
 8003102:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	4bbb      	ldr	r3, [pc, #748]	; (80033f8 <HAL_RCC_OscConfig+0xc44>)
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003110:	2102      	movs	r1, #2
 8003112:	6011      	str	r1, [r2, #0]
 8003114:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003118:	6812      	ldr	r2, [r2, #0]
 800311a:	fa92 f1a2 	rbit	r1, r2
 800311e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003122:	6011      	str	r1, [r2, #0]
  return result;
 8003124:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	fab2 f282 	clz	r2, r2
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	f002 021f 	and.w	r2, r2, #31
 800313a:	2101      	movs	r1, #1
 800313c:	fa01 f202 	lsl.w	r2, r1, r2
 8003140:	4013      	ands	r3, r2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d099      	beq.n	800307a <HAL_RCC_OscConfig+0x8c6>
 8003146:	e063      	b.n	8003210 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003148:	f7fe fa82 	bl	8001650 <HAL_GetTick>
 800314c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003150:	e00b      	b.n	800316a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003152:	f7fe fa7d 	bl	8001650 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e225      	b.n	80035b6 <HAL_RCC_OscConfig+0xe02>
 800316a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800316e:	2202      	movs	r2, #2
 8003170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003172:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	fa93 f2a3 	rbit	r2, r3
 800317c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003186:	2202      	movs	r2, #2
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	fa93 f2a3 	rbit	r2, r3
 8003194:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003198:	601a      	str	r2, [r3, #0]
  return result;
 800319a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800319e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a0:	fab3 f383 	clz	r3, r3
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	f043 0302 	orr.w	r3, r3, #2
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d102      	bne.n	80031ba <HAL_RCC_OscConfig+0xa06>
 80031b4:	4b90      	ldr	r3, [pc, #576]	; (80033f8 <HAL_RCC_OscConfig+0xc44>)
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	e00d      	b.n	80031d6 <HAL_RCC_OscConfig+0xa22>
 80031ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80031be:	2202      	movs	r2, #2
 80031c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	fa93 f2a3 	rbit	r2, r3
 80031cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	4b89      	ldr	r3, [pc, #548]	; (80033f8 <HAL_RCC_OscConfig+0xc44>)
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80031da:	2102      	movs	r1, #2
 80031dc:	6011      	str	r1, [r2, #0]
 80031de:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	fa92 f1a2 	rbit	r1, r2
 80031e8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80031ec:	6011      	str	r1, [r2, #0]
  return result;
 80031ee:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	fab2 f282 	clz	r2, r2
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	f002 021f 	and.w	r2, r2, #31
 8003204:	2101      	movs	r1, #1
 8003206:	fa01 f202 	lsl.w	r2, r1, r2
 800320a:	4013      	ands	r3, r2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1a0      	bne.n	8003152 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003210:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003214:	2b01      	cmp	r3, #1
 8003216:	d105      	bne.n	8003224 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003218:	4b77      	ldr	r3, [pc, #476]	; (80033f8 <HAL_RCC_OscConfig+0xc44>)
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	4a76      	ldr	r2, [pc, #472]	; (80033f8 <HAL_RCC_OscConfig+0xc44>)
 800321e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003222:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003224:	1d3b      	adds	r3, r7, #4
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 81c2 	beq.w	80035b4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003230:	4b71      	ldr	r3, [pc, #452]	; (80033f8 <HAL_RCC_OscConfig+0xc44>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b08      	cmp	r3, #8
 800323a:	f000 819c 	beq.w	8003576 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800323e:	1d3b      	adds	r3, r7, #4
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	2b02      	cmp	r3, #2
 8003246:	f040 8114 	bne.w	8003472 <HAL_RCC_OscConfig+0xcbe>
 800324a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800324e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003252:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	fa93 f2a3 	rbit	r2, r3
 800325e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003262:	601a      	str	r2, [r3, #0]
  return result;
 8003264:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003268:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326a:	fab3 f383 	clz	r3, r3
 800326e:	b2db      	uxtb	r3, r3
 8003270:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003274:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	461a      	mov	r2, r3
 800327c:	2300      	movs	r3, #0
 800327e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7fe f9e6 	bl	8001650 <HAL_GetTick>
 8003284:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003288:	e009      	b.n	800329e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800328a:	f7fe f9e1 	bl	8001650 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e18b      	b.n	80035b6 <HAL_RCC_OscConfig+0xe02>
 800329e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80032a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	fa93 f2a3 	rbit	r2, r3
 80032b2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80032b6:	601a      	str	r2, [r3, #0]
  return result;
 80032b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80032bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032be:	fab3 f383 	clz	r3, r3
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	095b      	lsrs	r3, r3, #5
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d102      	bne.n	80032d8 <HAL_RCC_OscConfig+0xb24>
 80032d2:	4b49      	ldr	r3, [pc, #292]	; (80033f8 <HAL_RCC_OscConfig+0xc44>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	e01b      	b.n	8003310 <HAL_RCC_OscConfig+0xb5c>
 80032d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80032dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	fa93 f2a3 	rbit	r2, r3
 80032ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80032f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	fa93 f2a3 	rbit	r2, r3
 8003306:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	4b3a      	ldr	r3, [pc, #232]	; (80033f8 <HAL_RCC_OscConfig+0xc44>)
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003314:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003318:	6011      	str	r1, [r2, #0]
 800331a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800331e:	6812      	ldr	r2, [r2, #0]
 8003320:	fa92 f1a2 	rbit	r1, r2
 8003324:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003328:	6011      	str	r1, [r2, #0]
  return result;
 800332a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	fab2 f282 	clz	r2, r2
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	f042 0220 	orr.w	r2, r2, #32
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	f002 021f 	and.w	r2, r2, #31
 8003340:	2101      	movs	r1, #1
 8003342:	fa01 f202 	lsl.w	r2, r1, r2
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d19e      	bne.n	800328a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800334c:	4b2a      	ldr	r3, [pc, #168]	; (80033f8 <HAL_RCC_OscConfig+0xc44>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003354:	1d3b      	adds	r3, r7, #4
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	430b      	orrs	r3, r1
 8003362:	4925      	ldr	r1, [pc, #148]	; (80033f8 <HAL_RCC_OscConfig+0xc44>)
 8003364:	4313      	orrs	r3, r2
 8003366:	604b      	str	r3, [r1, #4]
 8003368:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800336c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003372:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	fa93 f2a3 	rbit	r2, r3
 800337c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003380:	601a      	str	r2, [r3, #0]
  return result;
 8003382:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003386:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003388:	fab3 f383 	clz	r3, r3
 800338c:	b2db      	uxtb	r3, r3
 800338e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003392:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	461a      	mov	r2, r3
 800339a:	2301      	movs	r3, #1
 800339c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339e:	f7fe f957 	bl	8001650 <HAL_GetTick>
 80033a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033a6:	e009      	b.n	80033bc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fe f952 	bl	8001650 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e0fc      	b.n	80035b6 <HAL_RCC_OscConfig+0xe02>
 80033bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80033c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	fa93 f2a3 	rbit	r2, r3
 80033d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80033d4:	601a      	str	r2, [r3, #0]
  return result;
 80033d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80033da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033dc:	fab3 f383 	clz	r3, r3
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d105      	bne.n	80033fc <HAL_RCC_OscConfig+0xc48>
 80033f0:	4b01      	ldr	r3, [pc, #4]	; (80033f8 <HAL_RCC_OscConfig+0xc44>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	e01e      	b.n	8003434 <HAL_RCC_OscConfig+0xc80>
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000
 80033fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003400:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	fa93 f2a3 	rbit	r2, r3
 8003410:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800341a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	fa93 f2a3 	rbit	r2, r3
 800342a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	4b63      	ldr	r3, [pc, #396]	; (80035c0 <HAL_RCC_OscConfig+0xe0c>)
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003438:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800343c:	6011      	str	r1, [r2, #0]
 800343e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003442:	6812      	ldr	r2, [r2, #0]
 8003444:	fa92 f1a2 	rbit	r1, r2
 8003448:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800344c:	6011      	str	r1, [r2, #0]
  return result;
 800344e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	fab2 f282 	clz	r2, r2
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	f042 0220 	orr.w	r2, r2, #32
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	f002 021f 	and.w	r2, r2, #31
 8003464:	2101      	movs	r1, #1
 8003466:	fa01 f202 	lsl.w	r2, r1, r2
 800346a:	4013      	ands	r3, r2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d09b      	beq.n	80033a8 <HAL_RCC_OscConfig+0xbf4>
 8003470:	e0a0      	b.n	80035b4 <HAL_RCC_OscConfig+0xe00>
 8003472:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003476:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800347a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	fa93 f2a3 	rbit	r2, r3
 8003486:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800348a:	601a      	str	r2, [r3, #0]
  return result;
 800348c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003490:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003492:	fab3 f383 	clz	r3, r3
 8003496:	b2db      	uxtb	r3, r3
 8003498:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800349c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	461a      	mov	r2, r3
 80034a4:	2300      	movs	r3, #0
 80034a6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a8:	f7fe f8d2 	bl	8001650 <HAL_GetTick>
 80034ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b0:	e009      	b.n	80034c6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b2:	f7fe f8cd 	bl	8001650 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e077      	b.n	80035b6 <HAL_RCC_OscConfig+0xe02>
 80034c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	fa93 f2a3 	rbit	r2, r3
 80034da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034de:	601a      	str	r2, [r3, #0]
  return result;
 80034e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e6:	fab3 f383 	clz	r3, r3
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	095b      	lsrs	r3, r3, #5
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d102      	bne.n	8003500 <HAL_RCC_OscConfig+0xd4c>
 80034fa:	4b31      	ldr	r3, [pc, #196]	; (80035c0 <HAL_RCC_OscConfig+0xe0c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	e01b      	b.n	8003538 <HAL_RCC_OscConfig+0xd84>
 8003500:	f107 0320 	add.w	r3, r7, #32
 8003504:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350a:	f107 0320 	add.w	r3, r7, #32
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	fa93 f2a3 	rbit	r2, r3
 8003514:	f107 031c 	add.w	r3, r7, #28
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	f107 0318 	add.w	r3, r7, #24
 800351e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	f107 0318 	add.w	r3, r7, #24
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	fa93 f2a3 	rbit	r2, r3
 800352e:	f107 0314 	add.w	r3, r7, #20
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	4b22      	ldr	r3, [pc, #136]	; (80035c0 <HAL_RCC_OscConfig+0xe0c>)
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	f107 0210 	add.w	r2, r7, #16
 800353c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003540:	6011      	str	r1, [r2, #0]
 8003542:	f107 0210 	add.w	r2, r7, #16
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	fa92 f1a2 	rbit	r1, r2
 800354c:	f107 020c 	add.w	r2, r7, #12
 8003550:	6011      	str	r1, [r2, #0]
  return result;
 8003552:	f107 020c 	add.w	r2, r7, #12
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	fab2 f282 	clz	r2, r2
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	f042 0220 	orr.w	r2, r2, #32
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	f002 021f 	and.w	r2, r2, #31
 8003568:	2101      	movs	r1, #1
 800356a:	fa01 f202 	lsl.w	r2, r1, r2
 800356e:	4013      	ands	r3, r2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d19e      	bne.n	80034b2 <HAL_RCC_OscConfig+0xcfe>
 8003574:	e01e      	b.n	80035b4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003576:	1d3b      	adds	r3, r7, #4
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e018      	b.n	80035b6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003584:	4b0e      	ldr	r3, [pc, #56]	; (80035c0 <HAL_RCC_OscConfig+0xe0c>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800358c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003590:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003594:	1d3b      	adds	r3, r7, #4
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	429a      	cmp	r2, r3
 800359c:	d108      	bne.n	80035b0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800359e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80035a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035a6:	1d3b      	adds	r3, r7, #4
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e000      	b.n	80035b6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40021000 	.word	0x40021000

080035c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b09e      	sub	sp, #120	; 0x78
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e162      	b.n	80038a2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035dc:	4b90      	ldr	r3, [pc, #576]	; (8003820 <HAL_RCC_ClockConfig+0x25c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d910      	bls.n	800360c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ea:	4b8d      	ldr	r3, [pc, #564]	; (8003820 <HAL_RCC_ClockConfig+0x25c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 0207 	bic.w	r2, r3, #7
 80035f2:	498b      	ldr	r1, [pc, #556]	; (8003820 <HAL_RCC_ClockConfig+0x25c>)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b89      	ldr	r3, [pc, #548]	; (8003820 <HAL_RCC_ClockConfig+0x25c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e14a      	b.n	80038a2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003618:	4b82      	ldr	r3, [pc, #520]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	497f      	ldr	r1, [pc, #508]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 8003626:	4313      	orrs	r3, r2
 8003628:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 80dc 	beq.w	80037f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d13c      	bne.n	80036ba <HAL_RCC_ClockConfig+0xf6>
 8003640:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003644:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003648:	fa93 f3a3 	rbit	r3, r3
 800364c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800364e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003650:	fab3 f383 	clz	r3, r3
 8003654:	b2db      	uxtb	r3, r3
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	b2db      	uxtb	r3, r3
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b01      	cmp	r3, #1
 8003662:	d102      	bne.n	800366a <HAL_RCC_ClockConfig+0xa6>
 8003664:	4b6f      	ldr	r3, [pc, #444]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	e00f      	b.n	800368a <HAL_RCC_ClockConfig+0xc6>
 800366a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800366e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003670:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003672:	fa93 f3a3 	rbit	r3, r3
 8003676:	667b      	str	r3, [r7, #100]	; 0x64
 8003678:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800367c:	663b      	str	r3, [r7, #96]	; 0x60
 800367e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003680:	fa93 f3a3 	rbit	r3, r3
 8003684:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003686:	4b67      	ldr	r3, [pc, #412]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800368e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003690:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003692:	fa92 f2a2 	rbit	r2, r2
 8003696:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003698:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800369a:	fab2 f282 	clz	r2, r2
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	f042 0220 	orr.w	r2, r2, #32
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	f002 021f 	and.w	r2, r2, #31
 80036aa:	2101      	movs	r1, #1
 80036ac:	fa01 f202 	lsl.w	r2, r1, r2
 80036b0:	4013      	ands	r3, r2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d17b      	bne.n	80037ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e0f3      	b.n	80038a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d13c      	bne.n	800373c <HAL_RCC_ClockConfig+0x178>
 80036c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80036d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d2:	fab3 f383 	clz	r3, r3
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d102      	bne.n	80036ec <HAL_RCC_ClockConfig+0x128>
 80036e6:	4b4f      	ldr	r3, [pc, #316]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	e00f      	b.n	800370c <HAL_RCC_ClockConfig+0x148>
 80036ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036f4:	fa93 f3a3 	rbit	r3, r3
 80036f8:	647b      	str	r3, [r7, #68]	; 0x44
 80036fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036fe:	643b      	str	r3, [r7, #64]	; 0x40
 8003700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003702:	fa93 f3a3 	rbit	r3, r3
 8003706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003708:	4b46      	ldr	r3, [pc, #280]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003710:	63ba      	str	r2, [r7, #56]	; 0x38
 8003712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003714:	fa92 f2a2 	rbit	r2, r2
 8003718:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800371a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800371c:	fab2 f282 	clz	r2, r2
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	f042 0220 	orr.w	r2, r2, #32
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	f002 021f 	and.w	r2, r2, #31
 800372c:	2101      	movs	r1, #1
 800372e:	fa01 f202 	lsl.w	r2, r1, r2
 8003732:	4013      	ands	r3, r2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d13a      	bne.n	80037ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0b2      	b.n	80038a2 <HAL_RCC_ClockConfig+0x2de>
 800373c:	2302      	movs	r3, #2
 800373e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003742:	fa93 f3a3 	rbit	r3, r3
 8003746:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374a:	fab3 f383 	clz	r3, r3
 800374e:	b2db      	uxtb	r3, r3
 8003750:	095b      	lsrs	r3, r3, #5
 8003752:	b2db      	uxtb	r3, r3
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b01      	cmp	r3, #1
 800375c:	d102      	bne.n	8003764 <HAL_RCC_ClockConfig+0x1a0>
 800375e:	4b31      	ldr	r3, [pc, #196]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	e00d      	b.n	8003780 <HAL_RCC_ClockConfig+0x1bc>
 8003764:	2302      	movs	r3, #2
 8003766:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376a:	fa93 f3a3 	rbit	r3, r3
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
 8003770:	2302      	movs	r3, #2
 8003772:	623b      	str	r3, [r7, #32]
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	fa93 f3a3 	rbit	r3, r3
 800377a:	61fb      	str	r3, [r7, #28]
 800377c:	4b29      	ldr	r3, [pc, #164]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	2202      	movs	r2, #2
 8003782:	61ba      	str	r2, [r7, #24]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	fa92 f2a2 	rbit	r2, r2
 800378a:	617a      	str	r2, [r7, #20]
  return result;
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	fab2 f282 	clz	r2, r2
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	f042 0220 	orr.w	r2, r2, #32
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	f002 021f 	and.w	r2, r2, #31
 800379e:	2101      	movs	r1, #1
 80037a0:	fa01 f202 	lsl.w	r2, r1, r2
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e079      	b.n	80038a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ae:	4b1d      	ldr	r3, [pc, #116]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f023 0203 	bic.w	r2, r3, #3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	491a      	ldr	r1, [pc, #104]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037c0:	f7fd ff46 	bl	8001650 <HAL_GetTick>
 80037c4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c6:	e00a      	b.n	80037de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c8:	f7fd ff42 	bl	8001650 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e061      	b.n	80038a2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037de:	4b11      	ldr	r3, [pc, #68]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f003 020c 	and.w	r2, r3, #12
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d1eb      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <HAL_RCC_ClockConfig+0x25c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d214      	bcs.n	8003828 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fe:	4b08      	ldr	r3, [pc, #32]	; (8003820 <HAL_RCC_ClockConfig+0x25c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f023 0207 	bic.w	r2, r3, #7
 8003806:	4906      	ldr	r1, [pc, #24]	; (8003820 <HAL_RCC_ClockConfig+0x25c>)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	4313      	orrs	r3, r2
 800380c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800380e:	4b04      	ldr	r3, [pc, #16]	; (8003820 <HAL_RCC_ClockConfig+0x25c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d005      	beq.n	8003828 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e040      	b.n	80038a2 <HAL_RCC_ClockConfig+0x2de>
 8003820:	40022000 	.word	0x40022000
 8003824:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003834:	4b1d      	ldr	r3, [pc, #116]	; (80038ac <HAL_RCC_ClockConfig+0x2e8>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	491a      	ldr	r1, [pc, #104]	; (80038ac <HAL_RCC_ClockConfig+0x2e8>)
 8003842:	4313      	orrs	r3, r2
 8003844:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003852:	4b16      	ldr	r3, [pc, #88]	; (80038ac <HAL_RCC_ClockConfig+0x2e8>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4912      	ldr	r1, [pc, #72]	; (80038ac <HAL_RCC_ClockConfig+0x2e8>)
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003866:	f000 f829 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 800386a:	4601      	mov	r1, r0
 800386c:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <HAL_RCC_ClockConfig+0x2e8>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003874:	22f0      	movs	r2, #240	; 0xf0
 8003876:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	fa92 f2a2 	rbit	r2, r2
 800387e:	60fa      	str	r2, [r7, #12]
  return result;
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	fab2 f282 	clz	r2, r2
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	40d3      	lsrs	r3, r2
 800388a:	4a09      	ldr	r2, [pc, #36]	; (80038b0 <HAL_RCC_ClockConfig+0x2ec>)
 800388c:	5cd3      	ldrb	r3, [r2, r3]
 800388e:	fa21 f303 	lsr.w	r3, r1, r3
 8003892:	4a08      	ldr	r2, [pc, #32]	; (80038b4 <HAL_RCC_ClockConfig+0x2f0>)
 8003894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003896:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <HAL_RCC_ClockConfig+0x2f4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7fd fdf0 	bl	8001480 <HAL_InitTick>
  
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3778      	adds	r7, #120	; 0x78
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40021000 	.word	0x40021000
 80038b0:	08007a78 	.word	0x08007a78
 80038b4:	20000000 	.word	0x20000000
 80038b8:	20000004 	.word	0x20000004

080038bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	b08b      	sub	sp, #44	; 0x2c
 80038c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	2300      	movs	r3, #0
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	2300      	movs	r3, #0
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80038d6:	4b29      	ldr	r3, [pc, #164]	; (800397c <HAL_RCC_GetSysClockFreq+0xc0>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f003 030c 	and.w	r3, r3, #12
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d002      	beq.n	80038ec <HAL_RCC_GetSysClockFreq+0x30>
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d003      	beq.n	80038f2 <HAL_RCC_GetSysClockFreq+0x36>
 80038ea:	e03c      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038ec:	4b24      	ldr	r3, [pc, #144]	; (8003980 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038ee:	623b      	str	r3, [r7, #32]
      break;
 80038f0:	e03c      	b.n	800396c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80038f8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80038fc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	fa92 f2a2 	rbit	r2, r2
 8003904:	607a      	str	r2, [r7, #4]
  return result;
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	fab2 f282 	clz	r2, r2
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	40d3      	lsrs	r3, r2
 8003910:	4a1c      	ldr	r2, [pc, #112]	; (8003984 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003912:	5cd3      	ldrb	r3, [r2, r3]
 8003914:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003916:	4b19      	ldr	r3, [pc, #100]	; (800397c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	220f      	movs	r2, #15
 8003920:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	fa92 f2a2 	rbit	r2, r2
 8003928:	60fa      	str	r2, [r7, #12]
  return result;
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	fab2 f282 	clz	r2, r2
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	40d3      	lsrs	r3, r2
 8003934:	4a14      	ldr	r2, [pc, #80]	; (8003988 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003936:	5cd3      	ldrb	r3, [r2, r3]
 8003938:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003944:	4a0e      	ldr	r2, [pc, #56]	; (8003980 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	fbb2 f2f3 	udiv	r2, r2, r3
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	fb02 f303 	mul.w	r3, r2, r3
 8003952:	627b      	str	r3, [r7, #36]	; 0x24
 8003954:	e004      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	4a0c      	ldr	r2, [pc, #48]	; (800398c <HAL_RCC_GetSysClockFreq+0xd0>)
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	623b      	str	r3, [r7, #32]
      break;
 8003964:	e002      	b.n	800396c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003966:	4b06      	ldr	r3, [pc, #24]	; (8003980 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003968:	623b      	str	r3, [r7, #32]
      break;
 800396a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800396c:	6a3b      	ldr	r3, [r7, #32]
}
 800396e:	4618      	mov	r0, r3
 8003970:	372c      	adds	r7, #44	; 0x2c
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000
 8003980:	007a1200 	.word	0x007a1200
 8003984:	08007a90 	.word	0x08007a90
 8003988:	08007aa0 	.word	0x08007aa0
 800398c:	003d0900 	.word	0x003d0900

08003990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003994:	4b03      	ldr	r3, [pc, #12]	; (80039a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003996:	681b      	ldr	r3, [r3, #0]
}
 8003998:	4618      	mov	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	20000000 	.word	0x20000000

080039a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80039ae:	f7ff ffef 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039b2:	4601      	mov	r1, r0
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039bc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80039c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	fa92 f2a2 	rbit	r2, r2
 80039c8:	603a      	str	r2, [r7, #0]
  return result;
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	fab2 f282 	clz	r2, r2
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	40d3      	lsrs	r3, r2
 80039d4:	4a04      	ldr	r2, [pc, #16]	; (80039e8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80039d6:	5cd3      	ldrb	r3, [r2, r3]
 80039d8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80039dc:	4618      	mov	r0, r3
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40021000 	.word	0x40021000
 80039e8:	08007a88 	.word	0x08007a88

080039ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	220f      	movs	r2, #15
 80039fa:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039fc:	4b12      	ldr	r3, [pc, #72]	; (8003a48 <HAL_RCC_GetClockConfig+0x5c>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 0203 	and.w	r2, r3, #3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003a08:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <HAL_RCC_GetClockConfig+0x5c>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003a14:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <HAL_RCC_GetClockConfig+0x5c>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a20:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <HAL_RCC_GetClockConfig+0x5c>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	08db      	lsrs	r3, r3, #3
 8003a26:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003a2e:	4b07      	ldr	r3, [pc, #28]	; (8003a4c <HAL_RCC_GetClockConfig+0x60>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0207 	and.w	r2, r3, #7
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	601a      	str	r2, [r3, #0]
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40022000 	.word	0x40022000

08003a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b092      	sub	sp, #72	; 0x48
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003a60:	2300      	movs	r3, #0
 8003a62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 80d4 	beq.w	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a74:	4b4e      	ldr	r3, [pc, #312]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10e      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a80:	4b4b      	ldr	r3, [pc, #300]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	4a4a      	ldr	r2, [pc, #296]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	61d3      	str	r3, [r2, #28]
 8003a8c:	4b48      	ldr	r3, [pc, #288]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9e:	4b45      	ldr	r3, [pc, #276]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d118      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aaa:	4b42      	ldr	r3, [pc, #264]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a41      	ldr	r2, [pc, #260]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab6:	f7fd fdcb 	bl	8001650 <HAL_GetTick>
 8003aba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003abc:	e008      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003abe:	f7fd fdc7 	bl	8001650 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b64      	cmp	r3, #100	; 0x64
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e169      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad0:	4b38      	ldr	r3, [pc, #224]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f0      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003adc:	4b34      	ldr	r3, [pc, #208]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8084 	beq.w	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d07c      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003afc:	4b2c      	ldr	r3, [pc, #176]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0e:	fa93 f3a3 	rbit	r3, r3
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b16:	fab3 f383 	clz	r3, r3
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4b26      	ldr	r3, [pc, #152]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	461a      	mov	r2, r3
 8003b26:	2301      	movs	r3, #1
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b3a:	fab3 f383 	clz	r3, r3
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	4b1d      	ldr	r3, [pc, #116]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b4e:	4a18      	ldr	r2, [pc, #96]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b52:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d04b      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5e:	f7fd fd77 	bl	8001650 <HAL_GetTick>
 8003b62:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b64:	e00a      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b66:	f7fd fd73 	bl	8001650 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e113      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b82:	fa93 f3a3 	rbit	r3, r3
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
 8003b88:	2302      	movs	r3, #2
 8003b8a:	623b      	str	r3, [r7, #32]
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	fa93 f3a3 	rbit	r3, r3
 8003b92:	61fb      	str	r3, [r7, #28]
  return result;
 8003b94:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	f043 0302 	orr.w	r3, r3, #2
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d108      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003baa:	4b01      	ldr	r3, [pc, #4]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	e00d      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	40007000 	.word	0x40007000
 8003bb8:	10908100 	.word	0x10908100
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	fa93 f3a3 	rbit	r3, r3
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	4b78      	ldr	r3, [pc, #480]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	2202      	movs	r2, #2
 8003bce:	613a      	str	r2, [r7, #16]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	fa92 f2a2 	rbit	r2, r2
 8003bd6:	60fa      	str	r2, [r7, #12]
  return result;
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	fab2 f282 	clz	r2, r2
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	f002 021f 	and.w	r2, r2, #31
 8003bea:	2101      	movs	r1, #1
 8003bec:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0b7      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003bf6:	4b6d      	ldr	r3, [pc, #436]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	496a      	ldr	r1, [pc, #424]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d105      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c10:	4b66      	ldr	r3, [pc, #408]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	4a65      	ldr	r2, [pc, #404]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c28:	4b60      	ldr	r3, [pc, #384]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2c:	f023 0203 	bic.w	r2, r3, #3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	495d      	ldr	r1, [pc, #372]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d008      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c46:	4b59      	ldr	r3, [pc, #356]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	4956      	ldr	r1, [pc, #344]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c64:	4b51      	ldr	r3, [pc, #324]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	494e      	ldr	r1, [pc, #312]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c82:	4b4a      	ldr	r3, [pc, #296]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	f023 0210 	bic.w	r2, r3, #16
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	4947      	ldr	r1, [pc, #284]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003ca0:	4b42      	ldr	r3, [pc, #264]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	493f      	ldr	r1, [pc, #252]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cbe:	4b3b      	ldr	r3, [pc, #236]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	f023 0220 	bic.w	r2, r3, #32
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	4938      	ldr	r1, [pc, #224]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cdc:	4b33      	ldr	r3, [pc, #204]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	4930      	ldr	r1, [pc, #192]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0310 	and.w	r3, r3, #16
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d008      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cfa:	4b2c      	ldr	r3, [pc, #176]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	4929      	ldr	r1, [pc, #164]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d18:	4b24      	ldr	r3, [pc, #144]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	4921      	ldr	r1, [pc, #132]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d008      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d36:	4b1d      	ldr	r3, [pc, #116]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	491a      	ldr	r1, [pc, #104]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003d54:	4b15      	ldr	r3, [pc, #84]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d60:	4912      	ldr	r1, [pc, #72]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d008      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d72:	4b0e      	ldr	r3, [pc, #56]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	490b      	ldr	r1, [pc, #44]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003d90:	4b06      	ldr	r3, [pc, #24]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9c:	4903      	ldr	r1, [pc, #12]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3748      	adds	r7, #72	; 0x48
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40021000 	.word	0x40021000

08003db0 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e0aa      	b.n	8003f18 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7fd fb08 	bl	80013e8 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0201 	bic.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003dfa:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695a      	ldr	r2, [r3, #20]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e0a:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695a      	ldr	r2, [r3, #20]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e1a:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e24:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e34:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d012      	beq.n	8003e64 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d107      	bne.n	8003e56 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e52:	609a      	str	r2, [r3, #8]
 8003e54:	e006      	b.n	8003e64 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e62:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d104      	bne.n	8003e76 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e88:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695a      	ldr	r2, [r3, #20]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1a      	ldr	r2, [r3, #32]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8003eb2:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8003ec4:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8003ec6:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ecc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ed0:	d110      	bne.n	8003ef4 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d004      	beq.n	8003ee4 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8003ede:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ee2:	d107      	bne.n	8003ef4 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003ef2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_SMBUS_EV_IRQHandler>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_EV_IRQHandler(SMBUS_HandleTypeDef *hsmbus)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Use a local variable to store the current ISR flags */
  /* This action will avoid a wrong treatment due to ISR flags change during interrupt handler */
  uint32_t tmpisrvalue = READ_REG(hsmbus->Instance->ISR);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr1value = READ_REG(hsmbus->Instance->CR1);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60bb      	str	r3, [r7, #8]

  /* SMBUS in mode Transmitter ---------------------------------------------------*/
  if ((SMBUS_CHECK_IT_SOURCE(tmpcr1value, (SMBUS_IT_TCI | SMBUS_IT_STOPI |
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f003 0372 	and.w	r3, r3, #114	; 0x72
 8003f3e:	2b72      	cmp	r3, #114	; 0x72
 8003f40:	d132      	bne.n	8003fa8 <HAL_SMBUS_EV_IRQHandler+0x88>
                                           SMBUS_IT_NACKI | SMBUS_IT_TXI)) != RESET) &&
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TXIS) != RESET) ||
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	085b      	lsrs	r3, r3, #1
 8003f46:	f003 0301 	and.w	r3, r3, #1
                                           SMBUS_IT_NACKI | SMBUS_IT_TXI)) != RESET) &&
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d117      	bne.n	8003f7e <HAL_SMBUS_EV_IRQHandler+0x5e>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	09db      	lsrs	r3, r3, #7
 8003f52:	f003 0301 	and.w	r3, r3, #1
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TXIS) != RESET) ||
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d111      	bne.n	8003f7e <HAL_SMBUS_EV_IRQHandler+0x5e>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	099b      	lsrs	r3, r3, #6
 8003f5e:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10b      	bne.n	8003f7e <HAL_SMBUS_EV_IRQHandler+0x5e>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	095b      	lsrs	r3, r3, #5
 8003f6a:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d105      	bne.n	8003f7e <HAL_SMBUS_EV_IRQHandler+0x5e>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	091b      	lsrs	r3, r3, #4
 8003f76:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d014      	beq.n	8003fa8 <HAL_SMBUS_EV_IRQHandler+0x88>
  {
    /* Slave mode selected */
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f82:	f003 0332 	and.w	r3, r3, #50	; 0x32
 8003f86:	2b32      	cmp	r3, #50	; 0x32
 8003f88:	d104      	bne.n	8003f94 <HAL_SMBUS_EV_IRQHandler+0x74>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 8003f8a:	68f9      	ldr	r1, [r7, #12]
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fa97 	bl	80044c0 <SMBUS_Slave_ISR>
 8003f92:	e009      	b.n	8003fa8 <HAL_SMBUS_EV_IRQHandler+0x88>
    }
    /* Master mode selected */
    else if ((hsmbus->State & HAL_SMBUS_STATE_MASTER_BUSY_TX) == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f98:	f003 0312 	and.w	r3, r3, #18
 8003f9c:	2b12      	cmp	r3, #18
 8003f9e:	d103      	bne.n	8003fa8 <HAL_SMBUS_EV_IRQHandler+0x88>
    {
      (void)SMBUS_Master_ISR(hsmbus, tmpisrvalue);
 8003fa0:	68f9      	ldr	r1, [r7, #12]
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f8b4 	bl	8004110 <SMBUS_Master_ISR>
      /* Nothing to do */
    }
  }

  /* SMBUS in mode Receiver ----------------------------------------------------*/
  if ((SMBUS_CHECK_IT_SOURCE(tmpcr1value, (SMBUS_IT_TCI | SMBUS_IT_STOPI |
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f003 0374 	and.w	r3, r3, #116	; 0x74
 8003fae:	2b74      	cmp	r3, #116	; 0x74
 8003fb0:	d132      	bne.n	8004018 <HAL_SMBUS_EV_IRQHandler+0xf8>
                                           SMBUS_IT_NACKI | SMBUS_IT_RXI)) != RESET) &&
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_RXNE) != RESET) ||
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	089b      	lsrs	r3, r3, #2
 8003fb6:	f003 0301 	and.w	r3, r3, #1
                                           SMBUS_IT_NACKI | SMBUS_IT_RXI)) != RESET) &&
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d117      	bne.n	8003fee <HAL_SMBUS_EV_IRQHandler+0xce>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	09db      	lsrs	r3, r3, #7
 8003fc2:	f003 0301 	and.w	r3, r3, #1
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_RXNE) != RESET) ||
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d111      	bne.n	8003fee <HAL_SMBUS_EV_IRQHandler+0xce>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	099b      	lsrs	r3, r3, #6
 8003fce:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10b      	bne.n	8003fee <HAL_SMBUS_EV_IRQHandler+0xce>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d105      	bne.n	8003fee <HAL_SMBUS_EV_IRQHandler+0xce>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	091b      	lsrs	r3, r3, #4
 8003fe6:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d014      	beq.n	8004018 <HAL_SMBUS_EV_IRQHandler+0xf8>
  {
    /* Slave mode selected */
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff2:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8003ff6:	2b42      	cmp	r3, #66	; 0x42
 8003ff8:	d104      	bne.n	8004004 <HAL_SMBUS_EV_IRQHandler+0xe4>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 8003ffa:	68f9      	ldr	r1, [r7, #12]
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 fa5f 	bl	80044c0 <SMBUS_Slave_ISR>
 8004002:	e009      	b.n	8004018 <HAL_SMBUS_EV_IRQHandler+0xf8>
    }
    /* Master mode selected */
    else if ((hsmbus->State & HAL_SMBUS_STATE_MASTER_BUSY_RX) == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004008:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800400c:	2b22      	cmp	r3, #34	; 0x22
 800400e:	d103      	bne.n	8004018 <HAL_SMBUS_EV_IRQHandler+0xf8>
    {
      (void)SMBUS_Master_ISR(hsmbus, tmpisrvalue);
 8004010:	68f9      	ldr	r1, [r7, #12]
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f87c 	bl	8004110 <SMBUS_Master_ISR>
      /* Nothing to do */
    }
  }

  /* SMBUS in mode Listener Only --------------------------------------------------*/
  if (((SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_ADDRI) != RESET) ||
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	08db      	lsrs	r3, r3, #3
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10b      	bne.n	800403c <HAL_SMBUS_EV_IRQHandler+0x11c>
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_STOPI) != RESET) ||
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	f003 0301 	and.w	r3, r3, #1
  if (((SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_ADDRI) != RESET) ||
 800402c:	2b00      	cmp	r3, #0
 800402e:	d105      	bne.n	800403c <HAL_SMBUS_EV_IRQHandler+0x11c>
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_NACKI) != RESET)) &&
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	091b      	lsrs	r3, r3, #4
 8004034:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_STOPI) != RESET) ||
 8004038:	2b00      	cmp	r3, #0
 800403a:	d01b      	beq.n	8004074 <HAL_SMBUS_EV_IRQHandler+0x154>
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_ADDR) != RESET) ||
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	08db      	lsrs	r3, r3, #3
 8004040:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_NACKI) != RESET)) &&
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10b      	bne.n	8004060 <HAL_SMBUS_EV_IRQHandler+0x140>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	f003 0301 	and.w	r3, r3, #1
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_ADDR) != RESET) ||
 8004050:	2b00      	cmp	r3, #0
 8004052:	d105      	bne.n	8004060 <HAL_SMBUS_EV_IRQHandler+0x140>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	091b      	lsrs	r3, r3, #4
 8004058:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 800405c:	2b00      	cmp	r3, #0
 800405e:	d009      	beq.n	8004074 <HAL_SMBUS_EV_IRQHandler+0x154>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b08      	cmp	r3, #8
 800406a:	d103      	bne.n	8004074 <HAL_SMBUS_EV_IRQHandler+0x154>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 800406c:	68f9      	ldr	r1, [r7, #12]
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fa26 	bl	80044c0 <SMBUS_Slave_ISR>
    }
  }
}
 8004074:	bf00      	nop
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_SMBUS_MasterTxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_MasterTxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_MasterTxCpltCallback() could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_SMBUS_MasterRxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_MasterRxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_MasterRxCpltCallback() could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_SMBUS_SlaveTxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_SlaveTxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_SlaveTxCpltCallback() could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_SMBUS_SlaveRxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_SlaveRxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_SlaveRxCpltCallback() could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_SMBUS_AddrCallback>:
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_SMBUS_AddrCallback(SMBUS_HandleTypeDef *hsmbus, uint8_t TransferDirection,
                                   uint16_t AddrMatchCode)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	70fb      	strb	r3, [r7, #3]
 80040d8:	4613      	mov	r3, r2
 80040da:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_AddrCallback() could be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_SMBUS_ListenCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_ListenCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_ListenCpltCallback() could be implemented in the user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_SMBUS_ErrorCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_ErrorCallback(SMBUS_HandleTypeDef *hsmbus)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_ErrorCallback() could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <SMBUS_Master_ISR>:
  *                the configuration information for the specified SMBUS.
  * @param  StatusFlags Value of Interrupt Flags.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMBUS_Master_ISR(SMBUS_HandleTypeDef *hsmbus, uint32_t StatusFlags)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af02      	add	r7, sp, #8
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint16_t DevAddress;

  /* Process Locked */
  __HAL_LOCK(hsmbus);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <SMBUS_Master_ISR+0x18>
 8004124:	2302      	movs	r3, #2
 8004126:	e1c6      	b.n	80044b6 <SMBUS_Master_ISR+0x3a6>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_AF) != RESET)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	091b      	lsrs	r3, r3, #4
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d011      	beq.n	8004160 <SMBUS_Master_ISR+0x50>
  {
    /* Clear NACK Flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2210      	movs	r2, #16
 8004142:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ACKF;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004148:	f043 0204 	orr.w	r2, r3, #4
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->ErrorCallback(hsmbus);
#else
    HAL_SMBUS_ErrorCallback(hsmbus);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff ffcf 	bl	80040fc <HAL_SMBUS_ErrorCallback>
 800415e:	e1a5      	b.n	80044ac <SMBUS_Master_ISR+0x39c>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_STOPF) != RESET)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d07a      	beq.n	8004262 <SMBUS_Master_ISR+0x152>
  {
    /* Check and treat errors if errors occurs during STOP process */
    SMBUS_ITErrorHandler(hsmbus);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 fc00 	bl	8004972 <SMBUS_ITErrorHandler>

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004176:	2b12      	cmp	r3, #18
 8004178:	d12d      	bne.n	80041d6 <SMBUS_Master_ISR+0xc6>
    {
      /* Disable Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 800417a:	21f2      	movs	r1, #242	; 0xf2
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fb7b 	bl	8004878 <SMBUS_Disable_IRQ>

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2220      	movs	r2, #32
 8004188:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6859      	ldr	r1, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	4b91      	ldr	r3, [pc, #580]	; (80043dc <SMBUS_Master_ISR+0x2cc>)
 8004196:	400b      	ands	r3, r1
 8004198:	6053      	str	r3, [r2, #4]

      /* Flush remaining data in Fifo register in case of error occurs before TXEmpty */
      /* Disable the selected SMBUS peripheral */
      __HAL_SMBUS_DISABLE(hsmbus);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0201 	bic.w	r2, r2, #1
 80041a8:	601a      	str	r2, [r3, #0]

      hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Re-enable the selected SMBUS peripheral */
      __HAL_SMBUS_ENABLE(hsmbus);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f042 0201 	orr.w	r2, r2, #1
 80041cc:	601a      	str	r2, [r3, #0]

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->MasterTxCpltCallback(hsmbus);
#else
      HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7ff ff54 	bl	800407c <HAL_SMBUS_MasterTxCpltCallback>
 80041d4:	e16a      	b.n	80044ac <SMBUS_Master_ISR+0x39c>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
    else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041da:	2b22      	cmp	r3, #34	; 0x22
 80041dc:	f040 8166 	bne.w	80044ac <SMBUS_Master_ISR+0x39c>
    {
      /* Store Last receive data if any */
      if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	089b      	lsrs	r3, r3, #2
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01c      	beq.n	8004226 <SMBUS_Master_ISR+0x116>
      {
        /* Read data from RXDR */
        *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hsmbus->pBuffPtr++;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	635a      	str	r2, [r3, #52]	; 0x34

        if ((hsmbus->XferSize > 0U))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00c      	beq.n	8004226 <SMBUS_Master_ISR+0x116>
        {
          hsmbus->XferSize--;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
      }

      /* Disable Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 8004226:	21d4      	movs	r1, #212	; 0xd4
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 fb25 	bl	8004878 <SMBUS_Disable_IRQ>

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2220      	movs	r2, #32
 8004234:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6859      	ldr	r1, [r3, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	4b66      	ldr	r3, [pc, #408]	; (80043dc <SMBUS_Master_ISR+0x2cc>)
 8004242:	400b      	ands	r3, r1
 8004244:	6053      	str	r3, [r2, #4]

      hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->MasterRxCpltCallback(hsmbus);
#else
      HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff ff18 	bl	8004090 <HAL_SMBUS_MasterRxCpltCallback>
 8004260:	e124      	b.n	80044ac <SMBUS_Master_ISR+0x39c>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	089b      	lsrs	r3, r3, #2
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d019      	beq.n	80042a2 <SMBUS_Master_ISR+0x192>
  {
    /* Read data from RXDR */
    *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hsmbus->pBuffPtr++;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment Size counter */
    hsmbus->XferSize--;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	871a      	strh	r2, [r3, #56]	; 0x38
    hsmbus->XferCount--;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	875a      	strh	r2, [r3, #58]	; 0x3a
 80042a0:	e104      	b.n	80044ac <SMBUS_Master_ISR+0x39c>
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TXIS) != RESET)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	085b      	lsrs	r3, r3, #1
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d018      	beq.n	80042e0 <SMBUS_Master_ISR+0x1d0>
  {
    /* Write data to TXDR */
    hsmbus->Instance->TXDR = *hsmbus->pBuffPtr;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b2:	781a      	ldrb	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hsmbus->pBuffPtr++;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment Size counter */
    hsmbus->XferSize--;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	871a      	strh	r2, [r3, #56]	; 0x38
    hsmbus->XferCount--;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b29a      	uxth	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	875a      	strh	r2, [r3, #58]	; 0x3a
 80042de:	e0e5      	b.n	80044ac <SMBUS_Master_ISR+0x39c>
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TCR) != RESET)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	09db      	lsrs	r3, r3, #7
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 8090 	beq.w	800440e <SMBUS_Master_ISR+0x2fe>
  {
    if ((hsmbus->XferCount != 0U) && (hsmbus->XferSize == 0U))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d046      	beq.n	8004386 <SMBUS_Master_ISR+0x276>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d142      	bne.n	8004386 <SMBUS_Master_ISR+0x276>
    {
      DevAddress = (uint16_t)(hsmbus->Instance->CR2 & I2C_CR2_SADD);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	b29b      	uxth	r3, r3
 8004308:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800430c:	81fb      	strh	r3, [r7, #14]

      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004312:	b29b      	uxth	r3, r3
 8004314:	2bff      	cmp	r3, #255	; 0xff
 8004316:	d910      	bls.n	800433a <SMBUS_Master_ISR+0x22a>
      {
        SMBUS_TransferConfig(hsmbus, DevAddress, MAX_NBYTE_SIZE,
                             (SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE)),
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        SMBUS_TransferConfig(hsmbus, DevAddress, MAX_NBYTE_SIZE,
 8004320:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004324:	89f9      	ldrh	r1, [r7, #14]
 8004326:	2200      	movs	r2, #0
 8004328:	9200      	str	r2, [sp, #0]
 800432a:	22ff      	movs	r2, #255	; 0xff
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fbd3 	bl	8004ad8 <SMBUS_TransferConfig>
                             SMBUS_NO_STARTSTOP);
        hsmbus->XferSize = MAX_NBYTE_SIZE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	22ff      	movs	r2, #255	; 0xff
 8004336:	871a      	strh	r2, [r3, #56]	; 0x38
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 8004338:	e0b7      	b.n	80044aa <SMBUS_Master_ISR+0x39a>
      }
      else
      {
        hsmbus->XferSize = hsmbus->XferCount;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800433e:	b29a      	uxth	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	871a      	strh	r2, [r3, #56]	; 0x38
        SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions,
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004348:	b2da      	uxtb	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434e:	89f9      	ldrh	r1, [r7, #14]
 8004350:	2000      	movs	r0, #0
 8004352:	9000      	str	r0, [sp, #0]
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 fbbf 	bl	8004ad8 <SMBUS_TransferConfig>
                             SMBUS_NO_STARTSTOP);
        /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
        /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
        if (SMBUS_GET_PEC_MODE(hsmbus) != 0UL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 80a0 	beq.w	80044aa <SMBUS_Master_ISR+0x39a>
        {
          hsmbus->XferSize--;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	875a      	strh	r2, [r3, #58]	; 0x3a
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 8004384:	e091      	b.n	80044aa <SMBUS_Master_ISR+0x39a>
        }
      }
    }
    else if ((hsmbus->XferCount == 0U) && (hsmbus->XferSize == 0U))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800438a:	b29b      	uxth	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	f040 808d 	bne.w	80044ac <SMBUS_Master_ISR+0x39c>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004396:	2b00      	cmp	r3, #0
 8004398:	f040 8088 	bne.w	80044ac <SMBUS_Master_ISR+0x39c>
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (SMBUS_GET_STOP_MODE(hsmbus) != SMBUS_AUTOEND_MODE)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043aa:	d07f      	beq.n	80044ac <SMBUS_Master_ISR+0x39c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b0:	2b12      	cmp	r3, #18
 80043b2:	d115      	bne.n	80043e0 <SMBUS_Master_ISR+0x2d0>
        {
          /* Disable Interrupt */
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 80043b4:	21f2      	movs	r1, #242	; 0xf2
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fa5e 	bl	8004878 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterTxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff fe52 	bl	800407c <HAL_SMBUS_MasterTxCpltCallback>
 80043d8:	e068      	b.n	80044ac <SMBUS_Master_ISR+0x39c>
 80043da:	bf00      	nop
 80043dc:	fe00e800 	.word	0xfe00e800
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
        }
        else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043e4:	2b22      	cmp	r3, #34	; 0x22
 80043e6:	d161      	bne.n	80044ac <SMBUS_Master_ISR+0x39c>
        {
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 80043e8:	21d4      	movs	r1, #212	; 0xd4
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fa44 	bl	8004878 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterRxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff fe42 	bl	8004090 <HAL_SMBUS_MasterRxCpltCallback>
 800440c:	e04e      	b.n	80044ac <SMBUS_Master_ISR+0x39c>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TC) != RESET)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	099b      	lsrs	r3, r3, #6
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d048      	beq.n	80044ac <SMBUS_Master_ISR+0x39c>
  {
    if (hsmbus->XferCount == 0U)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800441e:	b29b      	uxth	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d143      	bne.n	80044ac <SMBUS_Master_ISR+0x39c>
    {
      /* Specific use case for Quick command */
      if (hsmbus->pBuffPtr == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004428:	2b00      	cmp	r3, #0
 800442a:	d108      	bne.n	800443e <SMBUS_Master_ISR+0x32e>
      {
        /* Generate a Stop command */
        hsmbus->Instance->CR2 |= I2C_CR2_STOP;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800443a:	605a      	str	r2, [r3, #4]
 800443c:	e036      	b.n	80044ac <SMBUS_Master_ISR+0x39c>
      }
      /* Call TxCpltCallback() if no stop mode is set */
      else if (SMBUS_GET_STOP_MODE(hsmbus) != SMBUS_AUTOEND_MODE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004448:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800444c:	d02e      	beq.n	80044ac <SMBUS_Master_ISR+0x39c>
      {
        /* No Generate Stop, to permit restart mode */
        /* The stop will be done at the end of transfer, when SMBUS_AUTOEND_MODE enable */

        /* Call the corresponding callback to inform upper layer of End of Transfer */
        if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004452:	2b12      	cmp	r3, #18
 8004454:	d112      	bne.n	800447c <SMBUS_Master_ISR+0x36c>
        {
          /* Disable Interrupt */
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 8004456:	21f2      	movs	r1, #242	; 0xf2
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fa0d 	bl	8004878 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterTxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f7ff fe01 	bl	800407c <HAL_SMBUS_MasterTxCpltCallback>
 800447a:	e017      	b.n	80044ac <SMBUS_Master_ISR+0x39c>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
        }
        else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004480:	2b22      	cmp	r3, #34	; 0x22
 8004482:	d113      	bne.n	80044ac <SMBUS_Master_ISR+0x39c>
        {
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 8004484:	21d4      	movs	r1, #212	; 0xd4
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f9f6 	bl	8004878 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterRxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7ff fdf4 	bl	8004090 <HAL_SMBUS_MasterRxCpltCallback>
 80044a8:	e000      	b.n	80044ac <SMBUS_Master_ISR+0x39c>
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 80044aa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsmbus);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop

080044c0 <SMBUS_Slave_ISR>:
  *                the configuration information for the specified SMBUS.
  * @param  StatusFlags Value of Interrupt Flags.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMBUS_Slave_ISR(SMBUS_HandleTypeDef *hsmbus, uint32_t StatusFlags)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af02      	add	r7, sp, #8
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection;
  uint16_t SlaveAddrCode;

  /* Process Locked */
  __HAL_LOCK(hsmbus);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <SMBUS_Slave_ISR+0x18>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e1c8      	b.n	800486a <SMBUS_Slave_ISR+0x3aa>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_AF) != RESET)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	091b      	lsrs	r3, r3, #4
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d033      	beq.n	8004554 <SMBUS_Slave_ISR+0x94>
  {
    /* Check that SMBUS transfer finished */
    /* if yes, normal usecase, a NACK is sent by the HOST when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hsmbus->XferCount == 0U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d108      	bne.n	8004508 <SMBUS_Slave_ISR+0x48>
    {
      /* Clear NACK Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2210      	movs	r2, #16
 80044fc:	61da      	str	r2, [r3, #28]

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004506:	e14a      	b.n	800479e <SMBUS_Slave_ISR+0x2de>
    }
    else
    {
      /* if no, error usecase, a Non-Acknowledge of last Data is generated by the HOST*/
      /* Clear NACK Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2210      	movs	r2, #16
 800450e:	61da      	str	r2, [r3, #28]

      /* Set HAL State to "Idle" State, mean to LISTEN state */
      /* So reset Slave Busy state */
      hsmbus->PreviousState = hsmbus->State;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_TX);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451c:	f023 0232 	bic.w	r2, r3, #50	; 0x32
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	649a      	str	r2, [r3, #72]	; 0x48
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_RX);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004528:	f023 0242 	bic.w	r2, r3, #66	; 0x42
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	649a      	str	r2, [r3, #72]	; 0x48

      /* Disable RX/TX Interrupts, keep only ADDR Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_TX);
 8004530:	21f6      	movs	r1, #246	; 0xf6
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f9a0 	bl	8004878 <SMBUS_Disable_IRQ>

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ACKF;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453c:	f043 0204 	orr.w	r2, r3, #4
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->ErrorCallback(hsmbus);
#else
      HAL_SMBUS_ErrorCallback(hsmbus);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7ff fdd5 	bl	80040fc <HAL_SMBUS_ErrorCallback>
 8004552:	e124      	b.n	800479e <SMBUS_Slave_ISR+0x2de>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_ADDR) != RESET)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	08db      	lsrs	r3, r3, #3
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d022      	beq.n	80045a6 <SMBUS_Slave_ISR+0xe6>
  {
    TransferDirection = (uint8_t)(SMBUS_GET_DIR(hsmbus));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	0c1b      	lsrs	r3, r3, #16
 8004568:	b2db      	uxtb	r3, r3
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	73fb      	strb	r3, [r7, #15]
    SlaveAddrCode = (uint16_t)(SMBUS_GET_ADDR_MATCH(hsmbus));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	0c5b      	lsrs	r3, r3, #17
 8004578:	b29b      	uxth	r3, r3
 800457a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800457e:	81bb      	strh	r3, [r7, #12]

    /* Disable ADDR interrupt to prevent multiple ADDRInterrupt*/
    /* Other ADDRInterrupt will be treat in next Listen usecase */
    __HAL_SMBUS_DISABLE_IT(hsmbus, SMBUS_IT_ADDRI);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0208 	bic.w	r2, r2, #8
 800458e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Call Slave Addr callback */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->AddrCallback(hsmbus, TransferDirection, SlaveAddrCode);
#else
    HAL_SMBUS_AddrCallback(hsmbus, TransferDirection, SlaveAddrCode);
 8004598:	89ba      	ldrh	r2, [r7, #12]
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	4619      	mov	r1, r3
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff fd94 	bl	80040cc <HAL_SMBUS_AddrCallback>
 80045a4:	e0fb      	b.n	800479e <SMBUS_Slave_ISR+0x2de>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
  else if ((SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET) ||
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	089b      	lsrs	r3, r3, #2
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d106      	bne.n	80045c0 <SMBUS_Slave_ISR+0x100>
           (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TCR) != RESET))
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	09db      	lsrs	r3, r3, #7
 80045b6:	f003 0301 	and.w	r3, r3, #1
  else if ((SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET) ||
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 80b0 	beq.w	8004720 <SMBUS_Slave_ISR+0x260>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c4:	f003 0342 	and.w	r3, r3, #66	; 0x42
 80045c8:	2b42      	cmp	r3, #66	; 0x42
 80045ca:	d15e      	bne.n	800468a <SMBUS_Slave_ISR+0x1ca>
    {
      /* Read data from RXDR */
      *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hsmbus->pBuffPtr++;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	635a      	str	r2, [r3, #52]	; 0x34

      hsmbus->XferSize--;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	871a      	strh	r2, [r3, #56]	; 0x38
      hsmbus->XferCount--;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	875a      	strh	r2, [r3, #58]	; 0x3a

      if (hsmbus->XferCount == 1U)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b01      	cmp	r3, #1
 8004606:	d10f      	bne.n	8004628 <SMBUS_Slave_ISR+0x168>
      {
        /* Receive last Byte, can be PEC byte in case of PEC BYTE enabled */
        /* or only the last Byte of Transfer */
        /* So reset the RELOAD bit mode */
        hsmbus->XferOptions &= ~SMBUS_RELOAD_MODE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	63da      	str	r2, [r3, #60]	; 0x3c
        SMBUS_TransferConfig(hsmbus, 0, 1, hsmbus->XferOptions, SMBUS_NO_STARTSTOP);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004618:	2200      	movs	r2, #0
 800461a:	9200      	str	r2, [sp, #0]
 800461c:	2201      	movs	r2, #1
 800461e:	2100      	movs	r1, #0
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fa59 	bl	8004ad8 <SMBUS_TransferConfig>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8004626:	e0b9      	b.n	800479c <SMBUS_Slave_ISR+0x2dc>
      }
      else if (hsmbus->XferCount == 0U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d115      	bne.n	800465e <SMBUS_Slave_ISR+0x19e>
      {
        /* Last Byte is received, disable Interrupt */
        SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 8004632:	21d4      	movs	r1, #212	; 0xd4
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f91f 	bl	8004878 <SMBUS_Disable_IRQ>

        /* Remove HAL_SMBUS_STATE_SLAVE_BUSY_RX, keep only HAL_SMBUS_STATE_LISTEN */
        hsmbus->PreviousState = hsmbus->State;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	641a      	str	r2, [r3, #64]	; 0x40
        hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_RX);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004646:	f023 0242 	bic.w	r2, r3, #66	; 0x42
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	649a      	str	r2, [r3, #72]	; 0x48

        /* Process Unlocked */
        __HAL_UNLOCK(hsmbus);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
        hsmbus->SlaveRxCpltCallback(hsmbus);
#else
        HAL_SMBUS_SlaveRxCpltCallback(hsmbus);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7ff fd2e 	bl	80040b8 <HAL_SMBUS_SlaveRxCpltCallback>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800465c:	e09e      	b.n	800479c <SMBUS_Slave_ISR+0x2dc>
      }
      else
      {
        /* Set Reload for next Bytes */
        SMBUS_TransferConfig(hsmbus, 0, 1,
                             SMBUS_RELOAD_MODE  | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE),
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004662:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        SMBUS_TransferConfig(hsmbus, 0, 1,
 8004666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800466a:	2200      	movs	r2, #0
 800466c:	9200      	str	r2, [sp, #0]
 800466e:	2201      	movs	r2, #1
 8004670:	2100      	movs	r1, #0
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fa30 	bl	8004ad8 <SMBUS_TransferConfig>
                             SMBUS_NO_STARTSTOP);

        /* Ack last Byte Read */
        hsmbus->Instance->CR2 &= ~I2C_CR2_NACK;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004686:	605a      	str	r2, [r3, #4]
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8004688:	e088      	b.n	800479c <SMBUS_Slave_ISR+0x2dc>
      }
    }
    else if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800468e:	f003 0332 	and.w	r3, r3, #50	; 0x32
 8004692:	2b32      	cmp	r3, #50	; 0x32
 8004694:	f040 8082 	bne.w	800479c <SMBUS_Slave_ISR+0x2dc>
    {
      if ((hsmbus->XferCount != 0U) && (hsmbus->XferSize == 0U))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d07c      	beq.n	800479c <SMBUS_Slave_ISR+0x2dc>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d178      	bne.n	800479c <SMBUS_Slave_ISR+0x2dc>
      {
        if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2bff      	cmp	r3, #255	; 0xff
 80046b2:	d910      	bls.n	80046d6 <SMBUS_Slave_ISR+0x216>
        {
          SMBUS_TransferConfig(hsmbus, 0, MAX_NBYTE_SIZE,
                               (SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE)),
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
          SMBUS_TransferConfig(hsmbus, 0, MAX_NBYTE_SIZE,
 80046bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046c0:	2200      	movs	r2, #0
 80046c2:	9200      	str	r2, [sp, #0]
 80046c4:	22ff      	movs	r2, #255	; 0xff
 80046c6:	2100      	movs	r1, #0
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 fa05 	bl	8004ad8 <SMBUS_TransferConfig>
                               SMBUS_NO_STARTSTOP);
          hsmbus->XferSize = MAX_NBYTE_SIZE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	22ff      	movs	r2, #255	; 0xff
 80046d2:	871a      	strh	r2, [r3, #56]	; 0x38
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 80046d4:	e062      	b.n	800479c <SMBUS_Slave_ISR+0x2dc>
        }
        else
        {
          hsmbus->XferSize = hsmbus->XferCount;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80046da:	b29a      	uxth	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	871a      	strh	r2, [r3, #56]	; 0x38
          SMBUS_TransferConfig(hsmbus, 0, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions,
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ea:	2100      	movs	r1, #0
 80046ec:	9100      	str	r1, [sp, #0]
 80046ee:	2100      	movs	r1, #0
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f9f1 	bl	8004ad8 <SMBUS_TransferConfig>
                               SMBUS_NO_STARTSTOP);
          /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
          /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
          if (SMBUS_GET_PEC_MODE(hsmbus) != 0UL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d04b      	beq.n	800479c <SMBUS_Slave_ISR+0x2dc>
          {
            hsmbus->XferSize--;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	871a      	strh	r2, [r3, #56]	; 0x38
            hsmbus->XferCount--;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004714:	b29b      	uxth	r3, r3
 8004716:	3b01      	subs	r3, #1
 8004718:	b29a      	uxth	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	875a      	strh	r2, [r3, #58]	; 0x3a
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800471e:	e03d      	b.n	800479c <SMBUS_Slave_ISR+0x2dc>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TXIS) != RESET)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	085b      	lsrs	r3, r3, #1
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d038      	beq.n	800479e <SMBUS_Slave_ISR+0x2de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hsmbus->XferCount > 0U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004730:	b29b      	uxth	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d017      	beq.n	8004766 <SMBUS_Slave_ISR+0x2a6>
    {
      /* Write data to TXDR */
      hsmbus->Instance->TXDR = *hsmbus->pBuffPtr;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473a:	781a      	ldrb	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hsmbus->pBuffPtr++;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	635a      	str	r2, [r3, #52]	; 0x34

      hsmbus->XferCount--;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004750:	b29b      	uxth	r3, r3
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	875a      	strh	r2, [r3, #58]	; 0x3a
      hsmbus->XferSize--;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800475e:	3b01      	subs	r3, #1
 8004760:	b29a      	uxth	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	871a      	strh	r2, [r3, #56]	; 0x38
    }

    if (hsmbus->XferCount == 0U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d116      	bne.n	800479e <SMBUS_Slave_ISR+0x2de>
    {
      /* Last Byte is Transmitted */
      /* Remove HAL_SMBUS_STATE_SLAVE_BUSY_TX, keep only HAL_SMBUS_STATE_LISTEN */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 8004770:	21f2      	movs	r1, #242	; 0xf2
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f880 	bl	8004878 <SMBUS_Disable_IRQ>
      hsmbus->PreviousState = hsmbus->State;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_TX);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004784:	f023 0232 	bic.w	r2, r3, #50	; 0x32
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->SlaveTxCpltCallback(hsmbus);
#else
      HAL_SMBUS_SlaveTxCpltCallback(hsmbus);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff fc85 	bl	80040a4 <HAL_SMBUS_SlaveTxCpltCallback>
 800479a:	e000      	b.n	800479e <SMBUS_Slave_ISR+0x2de>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800479c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_STOPF) != RESET)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	095b      	lsrs	r3, r3, #5
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d05a      	beq.n	8004860 <SMBUS_Slave_ISR+0x3a0>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d154      	bne.n	8004860 <SMBUS_Slave_ISR+0x3a0>
    {
      /* Store Last receive data if any */
      if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_RXNE) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d11c      	bne.n	80047fe <SMBUS_Slave_ISR+0x33e>
      {
        /* Read data from RXDR */
        *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hsmbus->pBuffPtr++;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d6:	1c5a      	adds	r2, r3, #1
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	635a      	str	r2, [r3, #52]	; 0x34

        if ((hsmbus->XferSize > 0U))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00c      	beq.n	80047fe <SMBUS_Slave_ISR+0x33e>
        {
          hsmbus->XferSize--;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
      }

      /* Disable RX and TX Interrupts */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_TX);
 80047fe:	21f6      	movs	r1, #246	; 0xf6
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f839 	bl	8004878 <SMBUS_Disable_IRQ>

      /* Disable ADDR Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_ADDR);
 8004806:	2138      	movs	r1, #56	; 0x38
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f835 	bl	8004878 <SMBUS_Disable_IRQ>

      /* Disable Address Acknowledge */
      hsmbus->Instance->CR2 |= I2C_CR2_NACK;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800481c:	605a      	str	r2, [r3, #4]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6859      	ldr	r1, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	4b12      	ldr	r3, [pc, #72]	; (8004874 <SMBUS_Slave_ISR+0x3b4>)
 800482a:	400b      	ands	r3, r1
 800482c:	6053      	str	r3, [r2, #4]

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2220      	movs	r2, #32
 8004834:	61da      	str	r2, [r3, #28]

      /* Clear ADDR flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ADDR);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2208      	movs	r2, #8
 800483c:	61da      	str	r2, [r3, #28]

      hsmbus->XferOptions = 0;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	63da      	str	r2, [r3, #60]	; 0x3c
      hsmbus->PreviousState = hsmbus->State;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->ListenCpltCallback(hsmbus);
#else
      HAL_SMBUS_ListenCpltCallback(hsmbus);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7ff fc44 	bl	80040e8 <HAL_SMBUS_ListenCpltCallback>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsmbus);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	fe00e800 	.word	0xfe00e800

08004878 <SMBUS_Disable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Disable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 8004882:	2300      	movs	r3, #0
 8004884:	60fb      	str	r3, [r7, #12]
  uint32_t tmpstate = hsmbus->State;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800488a:	60bb      	str	r3, [r7, #8]

  if ((tmpstate == HAL_SMBUS_STATE_READY) && ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT))
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d108      	bne.n	80048a4 <SMBUS_Disable_IRQ+0x2c>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <SMBUS_Disable_IRQ+0x2c>
  {
    /* Disable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a2:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80048aa:	2bf2      	cmp	r3, #242	; 0xf2
 80048ac:	d11c      	bne.n	80048e8 <SMBUS_Disable_IRQ+0x70>
  {
    /* Disable TC, STOP, NACK and TXI interrupt */
    tmpisr |= SMBUS_IT_TCI | SMBUS_IT_TXI;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80048b4:	60fb      	str	r3, [r7, #12]

    if ((SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d108      	bne.n	80048d6 <SMBUS_Disable_IRQ+0x5e>
        && ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d103      	bne.n	80048d6 <SMBUS_Disable_IRQ+0x5e>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d4:	60fb      	str	r3, [r7, #12]
    }

    if ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN)
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d103      	bne.n	80048e8 <SMBUS_Disable_IRQ+0x70>
    {
      /* Disable STOP and NACK interrupt */
      tmpisr |= SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80048e6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 80048ee:	2bd4      	cmp	r3, #212	; 0xd4
 80048f0:	d11c      	bne.n	800492c <SMBUS_Disable_IRQ+0xb4>
  {
    /* Disable TC, STOP, NACK and RXI interrupt */
    tmpisr |= SMBUS_IT_TCI | SMBUS_IT_RXI;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80048f8:	60fb      	str	r3, [r7, #12]

    if ((SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d108      	bne.n	800491a <SMBUS_Disable_IRQ+0xa2>
        && ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN))
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d103      	bne.n	800491a <SMBUS_Disable_IRQ+0xa2>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004918:	60fb      	str	r3, [r7, #12]
    }

    if ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f003 0308 	and.w	r3, r3, #8
 8004920:	2b00      	cmp	r3, #0
 8004922:	d103      	bne.n	800492c <SMBUS_Disable_IRQ+0xb4>
    {
      /* Disable STOP and NACK interrupt */
      tmpisr |= SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800492a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004932:	2b38      	cmp	r3, #56	; 0x38
 8004934:	d10e      	bne.n	8004954 <SMBUS_Disable_IRQ+0xdc>
  {
    /* Disable ADDR, STOP and NACK interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800493c:	60fb      	str	r3, [r7, #12]

    if (SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d103      	bne.n	8004954 <SMBUS_Disable_IRQ+0xdc>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004952:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_SMBUS_DISABLE_IT(hsmbus, tmpisr);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6819      	ldr	r1, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	43da      	mvns	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	400a      	ands	r2, r1
 8004964:	601a      	str	r2, [r3, #0]
}
 8004966:	bf00      	nop
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <SMBUS_ITErrorHandler>:
  * @brief  SMBUS interrupts error handler.
  * @param  hsmbus SMBUS handle.
  * @retval None
  */
static void SMBUS_ITErrorHandler(SMBUS_HandleTypeDef *hsmbus)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b086      	sub	sp, #24
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hsmbus->Instance->ISR);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hsmbus->Instance->CR1);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	613b      	str	r3, [r7, #16]
  uint32_t tmpstate;
  uint32_t tmperror;

  /* SMBUS Bus error interrupt occurred ------------------------------------*/
  if (((itflags & SMBUS_FLAG_BERR) == SMBUS_FLAG_BERR) && \
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00f      	beq.n	80049b4 <SMBUS_ITErrorHandler+0x42>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if (((itflags & SMBUS_FLAG_BERR) == SMBUS_FLAG_BERR) && \
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00a      	beq.n	80049b4 <SMBUS_ITErrorHandler+0x42>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_BERR;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a2:	f043 0201 	orr.w	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear BERR flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_BERR);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049b2:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if (((itflags & SMBUS_FLAG_OVR) == SMBUS_FLAG_OVR) && \
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00f      	beq.n	80049de <SMBUS_ITErrorHandler+0x6c>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if (((itflags & SMBUS_FLAG_OVR) == SMBUS_FLAG_OVR) && \
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <SMBUS_ITErrorHandler+0x6c>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_OVR;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049cc:	f043 0208 	orr.w	r2, r3, #8
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear OVR flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_OVR);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049dc:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Arbitration Loss error interrupt occurred ------------------------------------*/
  if (((itflags & SMBUS_FLAG_ARLO) == SMBUS_FLAG_ARLO) && \
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00f      	beq.n	8004a08 <SMBUS_ITErrorHandler+0x96>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if (((itflags & SMBUS_FLAG_ARLO) == SMBUS_FLAG_ARLO) && \
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <SMBUS_ITErrorHandler+0x96>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ARLO;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f6:	f043 0202 	orr.w	r2, r3, #2
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear ARLO flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ARLO);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a06:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Timeout error interrupt occurred ---------------------------------------------*/
  if (((itflags & SMBUS_FLAG_TIMEOUT) == SMBUS_FLAG_TIMEOUT) && \
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00f      	beq.n	8004a32 <SMBUS_ITErrorHandler+0xc0>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if (((itflags & SMBUS_FLAG_TIMEOUT) == SMBUS_FLAG_TIMEOUT) && \
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00a      	beq.n	8004a32 <SMBUS_ITErrorHandler+0xc0>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_BUSTIMEOUT;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a20:	f043 0220 	orr.w	r2, r3, #32
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear TIMEOUT flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_TIMEOUT);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a30:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Alert error interrupt occurred -----------------------------------------------*/
  if (((itflags & SMBUS_FLAG_ALERT) == SMBUS_FLAG_ALERT) && \
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00f      	beq.n	8004a5c <SMBUS_ITErrorHandler+0xea>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if (((itflags & SMBUS_FLAG_ALERT) == SMBUS_FLAG_ALERT) && \
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <SMBUS_ITErrorHandler+0xea>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ALERT;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear ALERT flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a5a:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Packet Error Check error interrupt occurred ----------------------------------*/
  if (((itflags & SMBUS_FLAG_PECERR) == SMBUS_FLAG_PECERR) && \
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00f      	beq.n	8004a86 <SMBUS_ITErrorHandler+0x114>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if (((itflags & SMBUS_FLAG_PECERR) == SMBUS_FLAG_PECERR) && \
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <SMBUS_ITErrorHandler+0x114>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_PECERR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear PEC error flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_PECERR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a84:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hsmbus->State, misra rule */
  tmperror = hsmbus->ErrorCode;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror != HAL_SMBUS_ERROR_NONE) && (tmperror != HAL_SMBUS_ERROR_ACKF))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d01d      	beq.n	8004ace <SMBUS_ITErrorHandler+0x15c>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d01a      	beq.n	8004ace <SMBUS_ITErrorHandler+0x15c>
  {
    /* Do not Reset the HAL state in case of ALERT error */
    if ((tmperror & HAL_SMBUS_ERROR_ALERT) != HAL_SMBUS_ERROR_ALERT)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d112      	bne.n	8004ac8 <SMBUS_ITErrorHandler+0x156>
    {
      /* Store current volatile hsmbus->State, misra rule */
      tmpstate = hsmbus->State;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aa6:	60bb      	str	r3, [r7, #8]

      if (((tmpstate & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f003 0332 	and.w	r3, r3, #50	; 0x32
 8004aae:	2b32      	cmp	r3, #50	; 0x32
 8004ab0:	d004      	beq.n	8004abc <SMBUS_ITErrorHandler+0x14a>
          || ((tmpstate & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX))
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8004ab8:	2b42      	cmp	r3, #66	; 0x42
 8004aba:	d105      	bne.n	8004ac8 <SMBUS_ITErrorHandler+0x156>
      {
        /* Reset only HAL_SMBUS_STATE_SLAVE_BUSY_XX */
        /* keep HAL_SMBUS_STATE_LISTEN if set */
        hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	641a      	str	r2, [r3, #64]	; 0x40
        hsmbus->State = HAL_SMBUS_STATE_LISTEN;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2208      	movs	r2, #8
 8004ac6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->ErrorCallback(hsmbus);
#else
    HAL_SMBUS_ErrorCallback(hsmbus);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7ff fb17 	bl	80040fc <HAL_SMBUS_ErrorCallback>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
}
 8004ace:	bf00      	nop
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <SMBUS_TransferConfig>:
  *     @arg @ref SMBUS_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void SMBUS_TransferConfig(SMBUS_HandleTypeDef *hsmbus,  uint16_t DevAddress, uint8_t Size,
                                 uint32_t Mode, uint32_t Request)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	607b      	str	r3, [r7, #4]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	817b      	strh	r3, [r7, #10]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
  assert_param(IS_SMBUS_TRANSFER_MODE(Mode));
  assert_param(IS_SMBUS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hsmbus->Instance->CR2,
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	0d5b      	lsrs	r3, r3, #21
 8004af4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004af8:	4b0d      	ldr	r3, [pc, #52]	; (8004b30 <SMBUS_TransferConfig+0x58>)
 8004afa:	430b      	orrs	r3, r1
 8004afc:	43db      	mvns	r3, r3
 8004afe:	ea02 0103 	and.w	r1, r2, r3
 8004b02:	897b      	ldrh	r3, [r7, #10]
 8004b04:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b08:	7a7b      	ldrb	r3, [r7, #9]
 8004b0a:	041b      	lsls	r3, r3, #16
 8004b0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	431a      	orrs	r2, r3
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31UL - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_PECBYTE)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004b22:	bf00      	nop
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	07ff63ff 	.word	0x07ff63ff

08004b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e049      	b.n	8004bda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f841 	bl	8004be2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3304      	adds	r3, #4
 8004b70:	4619      	mov	r1, r3
 8004b72:	4610      	mov	r0, r2
 8004b74:	f000 f9f2 	bl	8004f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
	...

08004bf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d001      	beq.n	8004c10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e04a      	b.n	8004ca6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a21      	ldr	r2, [pc, #132]	; (8004cb4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d018      	beq.n	8004c64 <HAL_TIM_Base_Start_IT+0x6c>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3a:	d013      	beq.n	8004c64 <HAL_TIM_Base_Start_IT+0x6c>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1d      	ldr	r2, [pc, #116]	; (8004cb8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00e      	beq.n	8004c64 <HAL_TIM_Base_Start_IT+0x6c>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1c      	ldr	r2, [pc, #112]	; (8004cbc <HAL_TIM_Base_Start_IT+0xc4>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d009      	beq.n	8004c64 <HAL_TIM_Base_Start_IT+0x6c>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1a      	ldr	r2, [pc, #104]	; (8004cc0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d004      	beq.n	8004c64 <HAL_TIM_Base_Start_IT+0x6c>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a19      	ldr	r2, [pc, #100]	; (8004cc4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d115      	bne.n	8004c90 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689a      	ldr	r2, [r3, #8]
 8004c6a:	4b17      	ldr	r3, [pc, #92]	; (8004cc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2b06      	cmp	r3, #6
 8004c74:	d015      	beq.n	8004ca2 <HAL_TIM_Base_Start_IT+0xaa>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c7c:	d011      	beq.n	8004ca2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0201 	orr.w	r2, r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8e:	e008      	b.n	8004ca2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	e000      	b.n	8004ca4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	40012c00 	.word	0x40012c00
 8004cb8:	40000400 	.word	0x40000400
 8004cbc:	40000800 	.word	0x40000800
 8004cc0:	40013400 	.word	0x40013400
 8004cc4:	40014000 	.word	0x40014000
 8004cc8:	00010007 	.word	0x00010007

08004ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d122      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d11b      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0202 	mvn.w	r2, #2
 8004cf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f905 	bl	8004f1e <HAL_TIM_IC_CaptureCallback>
 8004d14:	e005      	b.n	8004d22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f8f7 	bl	8004f0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f908 	bl	8004f32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0304 	and.w	r3, r3, #4
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d122      	bne.n	8004d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b04      	cmp	r3, #4
 8004d42:	d11b      	bne.n	8004d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0204 	mvn.w	r2, #4
 8004d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2202      	movs	r2, #2
 8004d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f8db 	bl	8004f1e <HAL_TIM_IC_CaptureCallback>
 8004d68:	e005      	b.n	8004d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f8cd 	bl	8004f0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f8de 	bl	8004f32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b08      	cmp	r3, #8
 8004d88:	d122      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d11b      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f06f 0208 	mvn.w	r2, #8
 8004da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2204      	movs	r2, #4
 8004da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f8b1 	bl	8004f1e <HAL_TIM_IC_CaptureCallback>
 8004dbc:	e005      	b.n	8004dca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f8a3 	bl	8004f0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f8b4 	bl	8004f32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0310 	and.w	r3, r3, #16
 8004dda:	2b10      	cmp	r3, #16
 8004ddc:	d122      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f003 0310 	and.w	r3, r3, #16
 8004de8:	2b10      	cmp	r3, #16
 8004dea:	d11b      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0210 	mvn.w	r2, #16
 8004df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2208      	movs	r2, #8
 8004dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f887 	bl	8004f1e <HAL_TIM_IC_CaptureCallback>
 8004e10:	e005      	b.n	8004e1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f879 	bl	8004f0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f88a 	bl	8004f32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d10e      	bne.n	8004e50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d107      	bne.n	8004e50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f06f 0201 	mvn.w	r2, #1
 8004e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fc fa1c 	bl	8001288 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5a:	2b80      	cmp	r3, #128	; 0x80
 8004e5c:	d10e      	bne.n	8004e7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e68:	2b80      	cmp	r3, #128	; 0x80
 8004e6a:	d107      	bne.n	8004e7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f90a 	bl	8005090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e8a:	d10e      	bne.n	8004eaa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e96:	2b80      	cmp	r3, #128	; 0x80
 8004e98:	d107      	bne.n	8004eaa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f8fd 	bl	80050a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb4:	2b40      	cmp	r3, #64	; 0x40
 8004eb6:	d10e      	bne.n	8004ed6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec2:	2b40      	cmp	r3, #64	; 0x40
 8004ec4:	d107      	bne.n	8004ed6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f838 	bl	8004f46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	d10e      	bne.n	8004f02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	d107      	bne.n	8004f02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f06f 0220 	mvn.w	r2, #32
 8004efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f8bd 	bl	800507c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f02:	bf00      	nop
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b083      	sub	sp, #12
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
	...

08004f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a3c      	ldr	r2, [pc, #240]	; (8005060 <TIM_Base_SetConfig+0x104>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00f      	beq.n	8004f94 <TIM_Base_SetConfig+0x38>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f7a:	d00b      	beq.n	8004f94 <TIM_Base_SetConfig+0x38>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a39      	ldr	r2, [pc, #228]	; (8005064 <TIM_Base_SetConfig+0x108>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d007      	beq.n	8004f94 <TIM_Base_SetConfig+0x38>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a38      	ldr	r2, [pc, #224]	; (8005068 <TIM_Base_SetConfig+0x10c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d003      	beq.n	8004f94 <TIM_Base_SetConfig+0x38>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a37      	ldr	r2, [pc, #220]	; (800506c <TIM_Base_SetConfig+0x110>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d108      	bne.n	8004fa6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a2d      	ldr	r2, [pc, #180]	; (8005060 <TIM_Base_SetConfig+0x104>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d01b      	beq.n	8004fe6 <TIM_Base_SetConfig+0x8a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb4:	d017      	beq.n	8004fe6 <TIM_Base_SetConfig+0x8a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a2a      	ldr	r2, [pc, #168]	; (8005064 <TIM_Base_SetConfig+0x108>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d013      	beq.n	8004fe6 <TIM_Base_SetConfig+0x8a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a29      	ldr	r2, [pc, #164]	; (8005068 <TIM_Base_SetConfig+0x10c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00f      	beq.n	8004fe6 <TIM_Base_SetConfig+0x8a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a28      	ldr	r2, [pc, #160]	; (800506c <TIM_Base_SetConfig+0x110>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00b      	beq.n	8004fe6 <TIM_Base_SetConfig+0x8a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a27      	ldr	r2, [pc, #156]	; (8005070 <TIM_Base_SetConfig+0x114>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d007      	beq.n	8004fe6 <TIM_Base_SetConfig+0x8a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a26      	ldr	r2, [pc, #152]	; (8005074 <TIM_Base_SetConfig+0x118>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d003      	beq.n	8004fe6 <TIM_Base_SetConfig+0x8a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a25      	ldr	r2, [pc, #148]	; (8005078 <TIM_Base_SetConfig+0x11c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d108      	bne.n	8004ff8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a10      	ldr	r2, [pc, #64]	; (8005060 <TIM_Base_SetConfig+0x104>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00f      	beq.n	8005044 <TIM_Base_SetConfig+0xe8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a11      	ldr	r2, [pc, #68]	; (800506c <TIM_Base_SetConfig+0x110>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d00b      	beq.n	8005044 <TIM_Base_SetConfig+0xe8>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a10      	ldr	r2, [pc, #64]	; (8005070 <TIM_Base_SetConfig+0x114>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d007      	beq.n	8005044 <TIM_Base_SetConfig+0xe8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a0f      	ldr	r2, [pc, #60]	; (8005074 <TIM_Base_SetConfig+0x118>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d003      	beq.n	8005044 <TIM_Base_SetConfig+0xe8>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a0e      	ldr	r2, [pc, #56]	; (8005078 <TIM_Base_SetConfig+0x11c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d103      	bne.n	800504c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	691a      	ldr	r2, [r3, #16]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	615a      	str	r2, [r3, #20]
}
 8005052:	bf00      	nop
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40012c00 	.word	0x40012c00
 8005064:	40000400 	.word	0x40000400
 8005068:	40000800 	.word	0x40000800
 800506c:	40013400 	.word	0x40013400
 8005070:	40014000 	.word	0x40014000
 8005074:	40014400 	.word	0x40014400
 8005078:	40014800 	.word	0x40014800

0800507c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	4603      	mov	r3, r0
 80050c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80050c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050ca:	2b84      	cmp	r3, #132	; 0x84
 80050cc:	d005      	beq.n	80050da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80050ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4413      	add	r3, r2
 80050d6:	3303      	adds	r3, #3
 80050d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80050da:	68fb      	ldr	r3, [r7, #12]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050ee:	f3ef 8305 	mrs	r3, IPSR
 80050f2:	607b      	str	r3, [r7, #4]
  return(result);
 80050f4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	bf14      	ite	ne
 80050fa:	2301      	movne	r3, #1
 80050fc:	2300      	moveq	r3, #0
 80050fe:	b2db      	uxtb	r3, r3
}
 8005100:	4618      	mov	r0, r3
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005110:	f001 f93c 	bl	800638c <vTaskStartScheduler>
  
  return osOK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	bd80      	pop	{r7, pc}

0800511a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800511a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800511c:	b089      	sub	sp, #36	; 0x24
 800511e:	af04      	add	r7, sp, #16
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d020      	beq.n	800516e <osThreadCreate+0x54>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01c      	beq.n	800516e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685c      	ldr	r4, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681d      	ldr	r5, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691e      	ldr	r6, [r3, #16]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff ffb6 	bl	80050b8 <makeFreeRtosPriority>
 800514c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005156:	9202      	str	r2, [sp, #8]
 8005158:	9301      	str	r3, [sp, #4]
 800515a:	9100      	str	r1, [sp, #0]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	4632      	mov	r2, r6
 8005160:	4629      	mov	r1, r5
 8005162:	4620      	mov	r0, r4
 8005164:	f000 ff54 	bl	8006010 <xTaskCreateStatic>
 8005168:	4603      	mov	r3, r0
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	e01c      	b.n	80051a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685c      	ldr	r4, [r3, #4]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800517a:	b29e      	uxth	r6, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff ff98 	bl	80050b8 <makeFreeRtosPriority>
 8005188:	4602      	mov	r2, r0
 800518a:	f107 030c 	add.w	r3, r7, #12
 800518e:	9301      	str	r3, [sp, #4]
 8005190:	9200      	str	r2, [sp, #0]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	4632      	mov	r2, r6
 8005196:	4629      	mov	r1, r5
 8005198:	4620      	mov	r0, r4
 800519a:	f000 ff95 	bl	80060c8 <xTaskCreate>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d001      	beq.n	80051a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	e000      	b.n	80051aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80051a8:	68fb      	ldr	r3, [r7, #12]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b084      	sub	sp, #16
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <osDelay+0x16>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	e000      	b.n	80051ca <osDelay+0x18>
 80051c8:	2301      	movs	r3, #1
 80051ca:	4618      	mov	r0, r3
 80051cc:	f001 f8aa 	bl	8006324 <vTaskDelay>
  
  return osOK;
 80051d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b082      	sub	sp, #8
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d007      	beq.n	80051fa <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	4619      	mov	r1, r3
 80051f0:	2001      	movs	r0, #1
 80051f2:	f000 fab1 	bl	8005758 <xQueueCreateMutexStatic>
 80051f6:	4603      	mov	r3, r0
 80051f8:	e003      	b.n	8005202 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80051fa:	2001      	movs	r0, #1
 80051fc:	f000 fa94 	bl	8005728 <xQueueCreateMutex>
 8005200:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005216:	2300      	movs	r3, #0
 8005218:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <osMutexWait+0x18>
    return osErrorParameter;
 8005220:	2380      	movs	r3, #128	; 0x80
 8005222:	e03a      	b.n	800529a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005224:	2300      	movs	r3, #0
 8005226:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522e:	d103      	bne.n	8005238 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005230:	f04f 33ff 	mov.w	r3, #4294967295
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	e009      	b.n	800524c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d006      	beq.n	800524c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <osMutexWait+0x40>
      ticks = 1;
 8005248:	2301      	movs	r3, #1
 800524a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800524c:	f7ff ff4c 	bl	80050e8 <inHandlerMode>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d017      	beq.n	8005286 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005256:	f107 0308 	add.w	r3, r7, #8
 800525a:	461a      	mov	r2, r3
 800525c:	2100      	movs	r1, #0
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fd2e 	bl	8005cc0 <xQueueReceiveFromISR>
 8005264:	4603      	mov	r3, r0
 8005266:	2b01      	cmp	r3, #1
 8005268:	d001      	beq.n	800526e <osMutexWait+0x62>
      return osErrorOS;
 800526a:	23ff      	movs	r3, #255	; 0xff
 800526c:	e015      	b.n	800529a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d011      	beq.n	8005298 <osMutexWait+0x8c>
 8005274:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <osMutexWait+0x98>)
 8005276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	e008      	b.n	8005298 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005286:	68f9      	ldr	r1, [r7, #12]
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fc0d 	bl	8005aa8 <xQueueSemaphoreTake>
 800528e:	4603      	mov	r3, r0
 8005290:	2b01      	cmp	r3, #1
 8005292:	d001      	beq.n	8005298 <osMutexWait+0x8c>
    return osErrorOS;
 8005294:	23ff      	movs	r3, #255	; 0xff
 8005296:	e000      	b.n	800529a <osMutexWait+0x8e>
  }
  
  return osOK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	e000ed04 	.word	0xe000ed04

080052a8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80052b4:	2300      	movs	r3, #0
 80052b6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80052b8:	f7ff ff16 	bl	80050e8 <inHandlerMode>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d016      	beq.n	80052f0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80052c2:	f107 0308 	add.w	r3, r7, #8
 80052c6:	4619      	mov	r1, r3
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fb5f 	bl	800598c <xQueueGiveFromISR>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d001      	beq.n	80052d8 <osMutexRelease+0x30>
      return osErrorOS;
 80052d4:	23ff      	movs	r3, #255	; 0xff
 80052d6:	e017      	b.n	8005308 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d013      	beq.n	8005306 <osMutexRelease+0x5e>
 80052de:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <osMutexRelease+0x68>)
 80052e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	e00a      	b.n	8005306 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80052f0:	2300      	movs	r3, #0
 80052f2:	2200      	movs	r2, #0
 80052f4:	2100      	movs	r1, #0
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fa4a 	bl	8005790 <xQueueGenericSend>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d001      	beq.n	8005306 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005302:	23ff      	movs	r3, #255	; 0xff
 8005304:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005306:	68fb      	ldr	r3, [r7, #12]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	e000ed04 	.word	0xe000ed04

08005314 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f103 0208 	add.w	r2, r3, #8
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f04f 32ff 	mov.w	r2, #4294967295
 800532c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f103 0208 	add.w	r2, r3, #8
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f103 0208 	add.w	r2, r3, #8
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800536e:	b480      	push	{r7}
 8005370:	b085      	sub	sp, #20
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	601a      	str	r2, [r3, #0]
}
 80053aa:	bf00      	nop
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053b6:	b480      	push	{r7}
 80053b8:	b085      	sub	sp, #20
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053cc:	d103      	bne.n	80053d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	e00c      	b.n	80053f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3308      	adds	r3, #8
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	e002      	b.n	80053e4 <vListInsert+0x2e>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d2f6      	bcs.n	80053de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	601a      	str	r2, [r3, #0]
}
 800541c:	bf00      	nop
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6892      	ldr	r2, [r2, #8]
 800543e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6852      	ldr	r2, [r2, #4]
 8005448:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	429a      	cmp	r2, r3
 8005452:	d103      	bne.n	800545c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	1e5a      	subs	r2, r3, #1
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10a      	bne.n	80054a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054a2:	bf00      	nop
 80054a4:	e7fe      	b.n	80054a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054a6:	f001 feed 	bl	8007284 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b2:	68f9      	ldr	r1, [r7, #12]
 80054b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054b6:	fb01 f303 	mul.w	r3, r1, r3
 80054ba:	441a      	add	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d6:	3b01      	subs	r3, #1
 80054d8:	68f9      	ldr	r1, [r7, #12]
 80054da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054dc:	fb01 f303 	mul.w	r3, r1, r3
 80054e0:	441a      	add	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	22ff      	movs	r2, #255	; 0xff
 80054ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	22ff      	movs	r2, #255	; 0xff
 80054f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d114      	bne.n	8005526 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d01a      	beq.n	800553a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	3310      	adds	r3, #16
 8005508:	4618      	mov	r0, r3
 800550a:	f001 f987 	bl	800681c <xTaskRemoveFromEventList>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d012      	beq.n	800553a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005514:	4b0c      	ldr	r3, [pc, #48]	; (8005548 <xQueueGenericReset+0xcc>)
 8005516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	f3bf 8f6f 	isb	sy
 8005524:	e009      	b.n	800553a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3310      	adds	r3, #16
 800552a:	4618      	mov	r0, r3
 800552c:	f7ff fef2 	bl	8005314 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	3324      	adds	r3, #36	; 0x24
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff feed 	bl	8005314 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800553a:	f001 fed3 	bl	80072e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800553e:	2301      	movs	r3, #1
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	e000ed04 	.word	0xe000ed04

0800554c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08e      	sub	sp, #56	; 0x38
 8005550:	af02      	add	r7, sp, #8
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10a      	bne.n	8005576 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005572:	bf00      	nop
 8005574:	e7fe      	b.n	8005574 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10a      	bne.n	8005592 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800557c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800558e:	bf00      	nop
 8005590:	e7fe      	b.n	8005590 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <xQueueGenericCreateStatic+0x52>
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <xQueueGenericCreateStatic+0x56>
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <xQueueGenericCreateStatic+0x58>
 80055a2:	2300      	movs	r3, #0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10a      	bne.n	80055be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80055a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ac:	f383 8811 	msr	BASEPRI, r3
 80055b0:	f3bf 8f6f 	isb	sy
 80055b4:	f3bf 8f4f 	dsb	sy
 80055b8:	623b      	str	r3, [r7, #32]
}
 80055ba:	bf00      	nop
 80055bc:	e7fe      	b.n	80055bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d102      	bne.n	80055ca <xQueueGenericCreateStatic+0x7e>
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <xQueueGenericCreateStatic+0x82>
 80055ca:	2301      	movs	r3, #1
 80055cc:	e000      	b.n	80055d0 <xQueueGenericCreateStatic+0x84>
 80055ce:	2300      	movs	r3, #0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10a      	bne.n	80055ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80055d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d8:	f383 8811 	msr	BASEPRI, r3
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	61fb      	str	r3, [r7, #28]
}
 80055e6:	bf00      	nop
 80055e8:	e7fe      	b.n	80055e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80055ea:	2348      	movs	r3, #72	; 0x48
 80055ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2b48      	cmp	r3, #72	; 0x48
 80055f2:	d00a      	beq.n	800560a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	61bb      	str	r3, [r7, #24]
}
 8005606:	bf00      	nop
 8005608:	e7fe      	b.n	8005608 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00d      	beq.n	8005630 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800561c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	4613      	mov	r3, r2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	68b9      	ldr	r1, [r7, #8]
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 f843 	bl	80056b6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005632:	4618      	mov	r0, r3
 8005634:	3730      	adds	r7, #48	; 0x30
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800563a:	b580      	push	{r7, lr}
 800563c:	b08a      	sub	sp, #40	; 0x28
 800563e:	af02      	add	r7, sp, #8
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	4613      	mov	r3, r2
 8005646:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10a      	bne.n	8005664 <xQueueGenericCreate+0x2a>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	613b      	str	r3, [r7, #16]
}
 8005660:	bf00      	nop
 8005662:	e7fe      	b.n	8005662 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d102      	bne.n	8005670 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800566a:	2300      	movs	r3, #0
 800566c:	61fb      	str	r3, [r7, #28]
 800566e:	e004      	b.n	800567a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	fb02 f303 	mul.w	r3, r2, r3
 8005678:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	3348      	adds	r3, #72	; 0x48
 800567e:	4618      	mov	r0, r3
 8005680:	f001 ff22 	bl	80074c8 <pvPortMalloc>
 8005684:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00f      	beq.n	80056ac <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	3348      	adds	r3, #72	; 0x48
 8005690:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800569a:	79fa      	ldrb	r2, [r7, #7]
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	4613      	mov	r3, r2
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	68b9      	ldr	r1, [r7, #8]
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f000 f805 	bl	80056b6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80056ac:	69bb      	ldr	r3, [r7, #24]
	}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3720      	adds	r7, #32
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b084      	sub	sp, #16
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	607a      	str	r2, [r7, #4]
 80056c2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d103      	bne.n	80056d2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	e002      	b.n	80056d8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056e4:	2101      	movs	r1, #1
 80056e6:	69b8      	ldr	r0, [r7, #24]
 80056e8:	f7ff fec8 	bl	800547c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056ec:	bf00      	nop
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00e      	beq.n	8005720 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005714:	2300      	movs	r3, #0
 8005716:	2200      	movs	r2, #0
 8005718:	2100      	movs	r1, #0
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f838 	bl	8005790 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005720:	bf00      	nop
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	4603      	mov	r3, r0
 8005730:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005732:	2301      	movs	r3, #1
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	2300      	movs	r3, #0
 8005738:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800573a:	79fb      	ldrb	r3, [r7, #7]
 800573c:	461a      	mov	r2, r3
 800573e:	6939      	ldr	r1, [r7, #16]
 8005740:	6978      	ldr	r0, [r7, #20]
 8005742:	f7ff ff7a 	bl	800563a <xQueueGenericCreate>
 8005746:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f7ff ffd3 	bl	80056f4 <prvInitialiseMutex>

		return pxNewQueue;
 800574e:	68fb      	ldr	r3, [r7, #12]
	}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af02      	add	r7, sp, #8
 800575e:	4603      	mov	r3, r0
 8005760:	6039      	str	r1, [r7, #0]
 8005762:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005764:	2301      	movs	r3, #1
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	2300      	movs	r3, #0
 800576a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800576c:	79fb      	ldrb	r3, [r7, #7]
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2200      	movs	r2, #0
 8005774:	6939      	ldr	r1, [r7, #16]
 8005776:	6978      	ldr	r0, [r7, #20]
 8005778:	f7ff fee8 	bl	800554c <xQueueGenericCreateStatic>
 800577c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f7ff ffb8 	bl	80056f4 <prvInitialiseMutex>

		return pxNewQueue;
 8005784:	68fb      	ldr	r3, [r7, #12]
	}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b08e      	sub	sp, #56	; 0x38
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
 800579c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800579e:	2300      	movs	r3, #0
 80057a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10a      	bne.n	80057c2 <xQueueGenericSend+0x32>
	__asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80057be:	bf00      	nop
 80057c0:	e7fe      	b.n	80057c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d103      	bne.n	80057d0 <xQueueGenericSend+0x40>
 80057c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <xQueueGenericSend+0x44>
 80057d0:	2301      	movs	r3, #1
 80057d2:	e000      	b.n	80057d6 <xQueueGenericSend+0x46>
 80057d4:	2300      	movs	r3, #0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10a      	bne.n	80057f0 <xQueueGenericSend+0x60>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057ec:	bf00      	nop
 80057ee:	e7fe      	b.n	80057ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d103      	bne.n	80057fe <xQueueGenericSend+0x6e>
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <xQueueGenericSend+0x72>
 80057fe:	2301      	movs	r3, #1
 8005800:	e000      	b.n	8005804 <xQueueGenericSend+0x74>
 8005802:	2300      	movs	r3, #0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10a      	bne.n	800581e <xQueueGenericSend+0x8e>
	__asm volatile
 8005808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	623b      	str	r3, [r7, #32]
}
 800581a:	bf00      	nop
 800581c:	e7fe      	b.n	800581c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800581e:	f001 f9bf 	bl	8006ba0 <xTaskGetSchedulerState>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d102      	bne.n	800582e <xQueueGenericSend+0x9e>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <xQueueGenericSend+0xa2>
 800582e:	2301      	movs	r3, #1
 8005830:	e000      	b.n	8005834 <xQueueGenericSend+0xa4>
 8005832:	2300      	movs	r3, #0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10a      	bne.n	800584e <xQueueGenericSend+0xbe>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	61fb      	str	r3, [r7, #28]
}
 800584a:	bf00      	nop
 800584c:	e7fe      	b.n	800584c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800584e:	f001 fd19 	bl	8007284 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585a:	429a      	cmp	r2, r3
 800585c:	d302      	bcc.n	8005864 <xQueueGenericSend+0xd4>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b02      	cmp	r3, #2
 8005862:	d129      	bne.n	80058b8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800586a:	f000 fac1 	bl	8005df0 <prvCopyDataToQueue>
 800586e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	2b00      	cmp	r3, #0
 8005876:	d010      	beq.n	800589a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587a:	3324      	adds	r3, #36	; 0x24
 800587c:	4618      	mov	r0, r3
 800587e:	f000 ffcd 	bl	800681c <xTaskRemoveFromEventList>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d013      	beq.n	80058b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005888:	4b3f      	ldr	r3, [pc, #252]	; (8005988 <xQueueGenericSend+0x1f8>)
 800588a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	e00a      	b.n	80058b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800589a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589c:	2b00      	cmp	r3, #0
 800589e:	d007      	beq.n	80058b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80058a0:	4b39      	ldr	r3, [pc, #228]	; (8005988 <xQueueGenericSend+0x1f8>)
 80058a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80058b0:	f001 fd18 	bl	80072e4 <vPortExitCritical>
				return pdPASS;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e063      	b.n	8005980 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d103      	bne.n	80058c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058be:	f001 fd11 	bl	80072e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80058c2:	2300      	movs	r3, #0
 80058c4:	e05c      	b.n	8005980 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d106      	bne.n	80058da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058cc:	f107 0314 	add.w	r3, r7, #20
 80058d0:	4618      	mov	r0, r3
 80058d2:	f001 f805 	bl	80068e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058d6:	2301      	movs	r3, #1
 80058d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058da:	f001 fd03 	bl	80072e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058de:	f000 fdb5 	bl	800644c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058e2:	f001 fccf 	bl	8007284 <vPortEnterCritical>
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058ec:	b25b      	sxtb	r3, r3
 80058ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f2:	d103      	bne.n	80058fc <xQueueGenericSend+0x16c>
 80058f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005902:	b25b      	sxtb	r3, r3
 8005904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005908:	d103      	bne.n	8005912 <xQueueGenericSend+0x182>
 800590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005912:	f001 fce7 	bl	80072e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005916:	1d3a      	adds	r2, r7, #4
 8005918:	f107 0314 	add.w	r3, r7, #20
 800591c:	4611      	mov	r1, r2
 800591e:	4618      	mov	r0, r3
 8005920:	f000 fff4 	bl	800690c <xTaskCheckForTimeOut>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d124      	bne.n	8005974 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800592a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800592c:	f000 fb58 	bl	8005fe0 <prvIsQueueFull>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d018      	beq.n	8005968 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	3310      	adds	r3, #16
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	4611      	mov	r1, r2
 800593e:	4618      	mov	r0, r3
 8005940:	f000 ff48 	bl	80067d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005946:	f000 fae3 	bl	8005f10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800594a:	f000 fd8d 	bl	8006468 <xTaskResumeAll>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	f47f af7c 	bne.w	800584e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005956:	4b0c      	ldr	r3, [pc, #48]	; (8005988 <xQueueGenericSend+0x1f8>)
 8005958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	e772      	b.n	800584e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800596a:	f000 fad1 	bl	8005f10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800596e:	f000 fd7b 	bl	8006468 <xTaskResumeAll>
 8005972:	e76c      	b.n	800584e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005976:	f000 facb 	bl	8005f10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800597a:	f000 fd75 	bl	8006468 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800597e:	2300      	movs	r3, #0
		}
	}
}
 8005980:	4618      	mov	r0, r3
 8005982:	3738      	adds	r7, #56	; 0x38
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	e000ed04 	.word	0xe000ed04

0800598c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08e      	sub	sp, #56	; 0x38
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10a      	bne.n	80059b6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	623b      	str	r3, [r7, #32]
}
 80059b2:	bf00      	nop
 80059b4:	e7fe      	b.n	80059b4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80059b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <xQueueGiveFromISR+0x48>
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	61fb      	str	r3, [r7, #28]
}
 80059d0:	bf00      	nop
 80059d2:	e7fe      	b.n	80059d2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d103      	bne.n	80059e4 <xQueueGiveFromISR+0x58>
 80059dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <xQueueGiveFromISR+0x5c>
 80059e4:	2301      	movs	r3, #1
 80059e6:	e000      	b.n	80059ea <xQueueGiveFromISR+0x5e>
 80059e8:	2300      	movs	r3, #0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10a      	bne.n	8005a04 <xQueueGiveFromISR+0x78>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	61bb      	str	r3, [r7, #24]
}
 8005a00:	bf00      	nop
 8005a02:	e7fe      	b.n	8005a02 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a04:	f001 fd20 	bl	8007448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a08:	f3ef 8211 	mrs	r2, BASEPRI
 8005a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	617a      	str	r2, [r7, #20]
 8005a1e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a20:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a22:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a28:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d22b      	bcs.n	8005a8c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a44:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a46:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4e:	d112      	bne.n	8005a76 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d016      	beq.n	8005a86 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	3324      	adds	r3, #36	; 0x24
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f000 fedd 	bl	800681c <xTaskRemoveFromEventList>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00e      	beq.n	8005a86 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00b      	beq.n	8005a86 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2201      	movs	r2, #1
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	e007      	b.n	8005a86 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	b25a      	sxtb	r2, r3
 8005a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a86:	2301      	movs	r3, #1
 8005a88:	637b      	str	r3, [r7, #52]	; 0x34
 8005a8a:	e001      	b.n	8005a90 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a92:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a9a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3738      	adds	r7, #56	; 0x38
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08e      	sub	sp, #56	; 0x38
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005aba:	2300      	movs	r3, #0
 8005abc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10a      	bne.n	8005ada <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	623b      	str	r3, [r7, #32]
}
 8005ad6:	bf00      	nop
 8005ad8:	e7fe      	b.n	8005ad8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	61fb      	str	r3, [r7, #28]
}
 8005af4:	bf00      	nop
 8005af6:	e7fe      	b.n	8005af6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005af8:	f001 f852 	bl	8006ba0 <xTaskGetSchedulerState>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d102      	bne.n	8005b08 <xQueueSemaphoreTake+0x60>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <xQueueSemaphoreTake+0x64>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <xQueueSemaphoreTake+0x66>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10a      	bne.n	8005b28 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	61bb      	str	r3, [r7, #24]
}
 8005b24:	bf00      	nop
 8005b26:	e7fe      	b.n	8005b26 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b28:	f001 fbac 	bl	8007284 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b30:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d024      	beq.n	8005b82 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3a:	1e5a      	subs	r2, r3, #1
 8005b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d104      	bne.n	8005b52 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005b48:	f001 f9f4 	bl	8006f34 <pvTaskIncrementMutexHeldCount>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b50:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00f      	beq.n	8005b7a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5c:	3310      	adds	r3, #16
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 fe5c 	bl	800681c <xTaskRemoveFromEventList>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d007      	beq.n	8005b7a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b6a:	4b54      	ldr	r3, [pc, #336]	; (8005cbc <xQueueSemaphoreTake+0x214>)
 8005b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	f3bf 8f4f 	dsb	sy
 8005b76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b7a:	f001 fbb3 	bl	80072e4 <vPortExitCritical>
				return pdPASS;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e097      	b.n	8005cb2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d111      	bne.n	8005bac <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	617b      	str	r3, [r7, #20]
}
 8005ba0:	bf00      	nop
 8005ba2:	e7fe      	b.n	8005ba2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005ba4:	f001 fb9e 	bl	80072e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	e082      	b.n	8005cb2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d106      	bne.n	8005bc0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bb2:	f107 030c 	add.w	r3, r7, #12
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fe92 	bl	80068e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bc0:	f001 fb90 	bl	80072e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bc4:	f000 fc42 	bl	800644c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bc8:	f001 fb5c 	bl	8007284 <vPortEnterCritical>
 8005bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bd2:	b25b      	sxtb	r3, r3
 8005bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd8:	d103      	bne.n	8005be2 <xQueueSemaphoreTake+0x13a>
 8005bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005be8:	b25b      	sxtb	r3, r3
 8005bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bee:	d103      	bne.n	8005bf8 <xQueueSemaphoreTake+0x150>
 8005bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bf8:	f001 fb74 	bl	80072e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bfc:	463a      	mov	r2, r7
 8005bfe:	f107 030c 	add.w	r3, r7, #12
 8005c02:	4611      	mov	r1, r2
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 fe81 	bl	800690c <xTaskCheckForTimeOut>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d132      	bne.n	8005c76 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c12:	f000 f9cf 	bl	8005fb4 <prvIsQueueEmpty>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d026      	beq.n	8005c6a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d109      	bne.n	8005c38 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005c24:	f001 fb2e 	bl	8007284 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 ffd5 	bl	8006bdc <xTaskPriorityInherit>
 8005c32:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005c34:	f001 fb56 	bl	80072e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3a:	3324      	adds	r3, #36	; 0x24
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	4611      	mov	r1, r2
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 fdc7 	bl	80067d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c48:	f000 f962 	bl	8005f10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c4c:	f000 fc0c 	bl	8006468 <xTaskResumeAll>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f47f af68 	bne.w	8005b28 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005c58:	4b18      	ldr	r3, [pc, #96]	; (8005cbc <xQueueSemaphoreTake+0x214>)
 8005c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	e75e      	b.n	8005b28 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005c6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c6c:	f000 f950 	bl	8005f10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c70:	f000 fbfa 	bl	8006468 <xTaskResumeAll>
 8005c74:	e758      	b.n	8005b28 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005c76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c78:	f000 f94a 	bl	8005f10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c7c:	f000 fbf4 	bl	8006468 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c82:	f000 f997 	bl	8005fb4 <prvIsQueueEmpty>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f43f af4d 	beq.w	8005b28 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00d      	beq.n	8005cb0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005c94:	f001 faf6 	bl	8007284 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005c98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c9a:	f000 f891 	bl	8005dc0 <prvGetDisinheritPriorityAfterTimeout>
 8005c9e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f001 f8a4 	bl	8006df4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005cac:	f001 fb1a 	bl	80072e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005cb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3738      	adds	r7, #56	; 0x38
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	e000ed04 	.word	0xe000ed04

08005cc0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08e      	sub	sp, #56	; 0x38
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10a      	bne.n	8005cec <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	623b      	str	r3, [r7, #32]
}
 8005ce8:	bf00      	nop
 8005cea:	e7fe      	b.n	8005cea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d103      	bne.n	8005cfa <xQueueReceiveFromISR+0x3a>
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <xQueueReceiveFromISR+0x3e>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e000      	b.n	8005d00 <xQueueReceiveFromISR+0x40>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10a      	bne.n	8005d1a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	61fb      	str	r3, [r7, #28]
}
 8005d16:	bf00      	nop
 8005d18:	e7fe      	b.n	8005d18 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d1a:	f001 fb95 	bl	8007448 <vPortValidateInterruptPriority>
	__asm volatile
 8005d1e:	f3ef 8211 	mrs	r2, BASEPRI
 8005d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	61ba      	str	r2, [r7, #24]
 8005d34:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005d36:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d02f      	beq.n	8005da6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d50:	68b9      	ldr	r1, [r7, #8]
 8005d52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d54:	f000 f8b6 	bl	8005ec4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	1e5a      	subs	r2, r3, #1
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005d60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d68:	d112      	bne.n	8005d90 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d016      	beq.n	8005da0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	3310      	adds	r3, #16
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fd50 	bl	800681c <xTaskRemoveFromEventList>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00e      	beq.n	8005da0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00b      	beq.n	8005da0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	e007      	b.n	8005da0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d94:	3301      	adds	r3, #1
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	b25a      	sxtb	r2, r3
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005da0:	2301      	movs	r3, #1
 8005da2:	637b      	str	r3, [r7, #52]	; 0x34
 8005da4:	e001      	b.n	8005daa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005da6:	2300      	movs	r3, #0
 8005da8:	637b      	str	r3, [r7, #52]	; 0x34
 8005daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dac:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f383 8811 	msr	BASEPRI, r3
}
 8005db4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3738      	adds	r7, #56	; 0x38
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d006      	beq.n	8005dde <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f1c3 0307 	rsb	r3, r3, #7
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	e001      	b.n	8005de2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005de2:	68fb      	ldr	r3, [r7, #12]
	}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10d      	bne.n	8005e2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d14d      	bne.n	8005eb2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 ff64 	bl	8006ce8 <xTaskPriorityDisinherit>
 8005e20:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	605a      	str	r2, [r3, #4]
 8005e28:	e043      	b.n	8005eb2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d119      	bne.n	8005e64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6898      	ldr	r0, [r3, #8]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e38:	461a      	mov	r2, r3
 8005e3a:	68b9      	ldr	r1, [r7, #8]
 8005e3c:	f001 fd42 	bl	80078c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	441a      	add	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	689a      	ldr	r2, [r3, #8]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d32b      	bcc.n	8005eb2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	609a      	str	r2, [r3, #8]
 8005e62:	e026      	b.n	8005eb2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	68d8      	ldr	r0, [r3, #12]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	68b9      	ldr	r1, [r7, #8]
 8005e70:	f001 fd28 	bl	80078c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7c:	425b      	negs	r3, r3
 8005e7e:	441a      	add	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d207      	bcs.n	8005ea0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	425b      	negs	r3, r3
 8005e9a:	441a      	add	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d105      	bne.n	8005eb2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005eba:	697b      	ldr	r3, [r7, #20]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d018      	beq.n	8005f08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	441a      	add	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68da      	ldr	r2, [r3, #12]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d303      	bcc.n	8005ef8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68d9      	ldr	r1, [r3, #12]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f00:	461a      	mov	r2, r3
 8005f02:	6838      	ldr	r0, [r7, #0]
 8005f04:	f001 fcde 	bl	80078c4 <memcpy>
	}
}
 8005f08:	bf00      	nop
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f18:	f001 f9b4 	bl	8007284 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f24:	e011      	b.n	8005f4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d012      	beq.n	8005f54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	3324      	adds	r3, #36	; 0x24
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 fc72 	bl	800681c <xTaskRemoveFromEventList>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f3e:	f000 fd47 	bl	80069d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
 8005f44:	3b01      	subs	r3, #1
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	dce9      	bgt.n	8005f26 <prvUnlockQueue+0x16>
 8005f52:	e000      	b.n	8005f56 <prvUnlockQueue+0x46>
					break;
 8005f54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	22ff      	movs	r2, #255	; 0xff
 8005f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005f5e:	f001 f9c1 	bl	80072e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f62:	f001 f98f 	bl	8007284 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f6e:	e011      	b.n	8005f94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d012      	beq.n	8005f9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	3310      	adds	r3, #16
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 fc4d 	bl	800681c <xTaskRemoveFromEventList>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d001      	beq.n	8005f8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f88:	f000 fd22 	bl	80069d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f8c:	7bbb      	ldrb	r3, [r7, #14]
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	dce9      	bgt.n	8005f70 <prvUnlockQueue+0x60>
 8005f9c:	e000      	b.n	8005fa0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	22ff      	movs	r2, #255	; 0xff
 8005fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005fa8:	f001 f99c 	bl	80072e4 <vPortExitCritical>
}
 8005fac:	bf00      	nop
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fbc:	f001 f962 	bl	8007284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d102      	bne.n	8005fce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	e001      	b.n	8005fd2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fd2:	f001 f987 	bl	80072e4 <vPortExitCritical>

	return xReturn;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fe8:	f001 f94c 	bl	8007284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d102      	bne.n	8005ffe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	e001      	b.n	8006002 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ffe:	2300      	movs	r3, #0
 8006000:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006002:	f001 f96f 	bl	80072e4 <vPortExitCritical>

	return xReturn;
 8006006:	68fb      	ldr	r3, [r7, #12]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006010:	b580      	push	{r7, lr}
 8006012:	b08e      	sub	sp, #56	; 0x38
 8006014:	af04      	add	r7, sp, #16
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
 800601c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800601e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10a      	bne.n	800603a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006028:	f383 8811 	msr	BASEPRI, r3
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	623b      	str	r3, [r7, #32]
}
 8006036:	bf00      	nop
 8006038:	e7fe      	b.n	8006038 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800603a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10a      	bne.n	8006056 <xTaskCreateStatic+0x46>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	61fb      	str	r3, [r7, #28]
}
 8006052:	bf00      	nop
 8006054:	e7fe      	b.n	8006054 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006056:	2354      	movs	r3, #84	; 0x54
 8006058:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	2b54      	cmp	r3, #84	; 0x54
 800605e:	d00a      	beq.n	8006076 <xTaskCreateStatic+0x66>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	61bb      	str	r3, [r7, #24]
}
 8006072:	bf00      	nop
 8006074:	e7fe      	b.n	8006074 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01e      	beq.n	80060ba <xTaskCreateStatic+0xaa>
 800607c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607e:	2b00      	cmp	r3, #0
 8006080:	d01b      	beq.n	80060ba <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800608a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	2202      	movs	r2, #2
 8006090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006094:	2300      	movs	r3, #0
 8006096:	9303      	str	r3, [sp, #12]
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	9302      	str	r3, [sp, #8]
 800609c:	f107 0314 	add.w	r3, r7, #20
 80060a0:	9301      	str	r3, [sp, #4]
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	68b9      	ldr	r1, [r7, #8]
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 f850 	bl	8006152 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060b4:	f000 f8cc 	bl	8006250 <prvAddNewTaskToReadyList>
 80060b8:	e001      	b.n	80060be <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80060be:	697b      	ldr	r3, [r7, #20]
	}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3728      	adds	r7, #40	; 0x28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b08c      	sub	sp, #48	; 0x30
 80060cc:	af04      	add	r7, sp, #16
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	603b      	str	r3, [r7, #0]
 80060d4:	4613      	mov	r3, r2
 80060d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060d8:	88fb      	ldrh	r3, [r7, #6]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4618      	mov	r0, r3
 80060de:	f001 f9f3 	bl	80074c8 <pvPortMalloc>
 80060e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00e      	beq.n	8006108 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80060ea:	2054      	movs	r0, #84	; 0x54
 80060ec:	f001 f9ec 	bl	80074c8 <pvPortMalloc>
 80060f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d003      	beq.n	8006100 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	631a      	str	r2, [r3, #48]	; 0x30
 80060fe:	e005      	b.n	800610c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006100:	6978      	ldr	r0, [r7, #20]
 8006102:	f001 faa5 	bl	8007650 <vPortFree>
 8006106:	e001      	b.n	800610c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006108:	2300      	movs	r3, #0
 800610a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d017      	beq.n	8006142 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800611a:	88fa      	ldrh	r2, [r7, #6]
 800611c:	2300      	movs	r3, #0
 800611e:	9303      	str	r3, [sp, #12]
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	9302      	str	r3, [sp, #8]
 8006124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006126:	9301      	str	r3, [sp, #4]
 8006128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	68b9      	ldr	r1, [r7, #8]
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 f80e 	bl	8006152 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006136:	69f8      	ldr	r0, [r7, #28]
 8006138:	f000 f88a 	bl	8006250 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800613c:	2301      	movs	r3, #1
 800613e:	61bb      	str	r3, [r7, #24]
 8006140:	e002      	b.n	8006148 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006142:	f04f 33ff 	mov.w	r3, #4294967295
 8006146:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006148:	69bb      	ldr	r3, [r7, #24]
	}
 800614a:	4618      	mov	r0, r3
 800614c:	3720      	adds	r7, #32
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b088      	sub	sp, #32
 8006156:	af00      	add	r7, sp, #0
 8006158:	60f8      	str	r0, [r7, #12]
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	607a      	str	r2, [r7, #4]
 800615e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800616a:	3b01      	subs	r3, #1
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	f023 0307 	bic.w	r3, r3, #7
 8006178:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	f003 0307 	and.w	r3, r3, #7
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00a      	beq.n	800619a <prvInitialiseNewTask+0x48>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	617b      	str	r3, [r7, #20]
}
 8006196:	bf00      	nop
 8006198:	e7fe      	b.n	8006198 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800619a:	2300      	movs	r3, #0
 800619c:	61fb      	str	r3, [r7, #28]
 800619e:	e012      	b.n	80061c6 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	4413      	add	r3, r2
 80061a6:	7819      	ldrb	r1, [r3, #0]
 80061a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	4413      	add	r3, r2
 80061ae:	3334      	adds	r3, #52	; 0x34
 80061b0:	460a      	mov	r2, r1
 80061b2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	4413      	add	r3, r2
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d006      	beq.n	80061ce <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	3301      	adds	r3, #1
 80061c4:	61fb      	str	r3, [r7, #28]
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	2b0f      	cmp	r3, #15
 80061ca:	d9e9      	bls.n	80061a0 <prvInitialiseNewTask+0x4e>
 80061cc:	e000      	b.n	80061d0 <prvInitialiseNewTask+0x7e>
		{
			break;
 80061ce:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061da:	2b06      	cmp	r3, #6
 80061dc:	d901      	bls.n	80061e2 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061de:	2306      	movs	r3, #6
 80061e0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061e6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80061e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061ec:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80061ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f0:	2200      	movs	r2, #0
 80061f2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f6:	3304      	adds	r3, #4
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7ff f8ab 	bl	8005354 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006200:	3318      	adds	r3, #24
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff f8a6 	bl	8005354 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800620c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800620e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006210:	f1c3 0207 	rsb	r2, r3, #7
 8006214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006216:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800621c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	2200      	movs	r2, #0
 8006222:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006226:	2200      	movs	r2, #0
 8006228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	68f9      	ldr	r1, [r7, #12]
 8006230:	69b8      	ldr	r0, [r7, #24]
 8006232:	f000 fef9 	bl	8007028 <pxPortInitialiseStack>
 8006236:	4602      	mov	r2, r0
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800623c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006246:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006248:	bf00      	nop
 800624a:	3720      	adds	r7, #32
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006258:	f001 f814 	bl	8007284 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800625c:	4b2a      	ldr	r3, [pc, #168]	; (8006308 <prvAddNewTaskToReadyList+0xb8>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3301      	adds	r3, #1
 8006262:	4a29      	ldr	r2, [pc, #164]	; (8006308 <prvAddNewTaskToReadyList+0xb8>)
 8006264:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006266:	4b29      	ldr	r3, [pc, #164]	; (800630c <prvAddNewTaskToReadyList+0xbc>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d109      	bne.n	8006282 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800626e:	4a27      	ldr	r2, [pc, #156]	; (800630c <prvAddNewTaskToReadyList+0xbc>)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006274:	4b24      	ldr	r3, [pc, #144]	; (8006308 <prvAddNewTaskToReadyList+0xb8>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d110      	bne.n	800629e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800627c:	f000 fbcc 	bl	8006a18 <prvInitialiseTaskLists>
 8006280:	e00d      	b.n	800629e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006282:	4b23      	ldr	r3, [pc, #140]	; (8006310 <prvAddNewTaskToReadyList+0xc0>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d109      	bne.n	800629e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800628a:	4b20      	ldr	r3, [pc, #128]	; (800630c <prvAddNewTaskToReadyList+0xbc>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006294:	429a      	cmp	r2, r3
 8006296:	d802      	bhi.n	800629e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006298:	4a1c      	ldr	r2, [pc, #112]	; (800630c <prvAddNewTaskToReadyList+0xbc>)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800629e:	4b1d      	ldr	r3, [pc, #116]	; (8006314 <prvAddNewTaskToReadyList+0xc4>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3301      	adds	r3, #1
 80062a4:	4a1b      	ldr	r2, [pc, #108]	; (8006314 <prvAddNewTaskToReadyList+0xc4>)
 80062a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ac:	2201      	movs	r2, #1
 80062ae:	409a      	lsls	r2, r3
 80062b0:	4b19      	ldr	r3, [pc, #100]	; (8006318 <prvAddNewTaskToReadyList+0xc8>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	4a18      	ldr	r2, [pc, #96]	; (8006318 <prvAddNewTaskToReadyList+0xc8>)
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062be:	4613      	mov	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4413      	add	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4a15      	ldr	r2, [pc, #84]	; (800631c <prvAddNewTaskToReadyList+0xcc>)
 80062c8:	441a      	add	r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	3304      	adds	r3, #4
 80062ce:	4619      	mov	r1, r3
 80062d0:	4610      	mov	r0, r2
 80062d2:	f7ff f84c 	bl	800536e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062d6:	f001 f805 	bl	80072e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062da:	4b0d      	ldr	r3, [pc, #52]	; (8006310 <prvAddNewTaskToReadyList+0xc0>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00e      	beq.n	8006300 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062e2:	4b0a      	ldr	r3, [pc, #40]	; (800630c <prvAddNewTaskToReadyList+0xbc>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d207      	bcs.n	8006300 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062f0:	4b0b      	ldr	r3, [pc, #44]	; (8006320 <prvAddNewTaskToReadyList+0xd0>)
 80062f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006300:	bf00      	nop
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	20000380 	.word	0x20000380
 800630c:	20000280 	.word	0x20000280
 8006310:	2000038c 	.word	0x2000038c
 8006314:	2000039c 	.word	0x2000039c
 8006318:	20000388 	.word	0x20000388
 800631c:	20000284 	.word	0x20000284
 8006320:	e000ed04 	.word	0xe000ed04

08006324 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800632c:	2300      	movs	r3, #0
 800632e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d017      	beq.n	8006366 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006336:	4b13      	ldr	r3, [pc, #76]	; (8006384 <vTaskDelay+0x60>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00a      	beq.n	8006354 <vTaskDelay+0x30>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	60bb      	str	r3, [r7, #8]
}
 8006350:	bf00      	nop
 8006352:	e7fe      	b.n	8006352 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006354:	f000 f87a 	bl	800644c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006358:	2100      	movs	r1, #0
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fdfe 	bl	8006f5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006360:	f000 f882 	bl	8006468 <xTaskResumeAll>
 8006364:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d107      	bne.n	800637c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800636c:	4b06      	ldr	r3, [pc, #24]	; (8006388 <vTaskDelay+0x64>)
 800636e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800637c:	bf00      	nop
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	200003a8 	.word	0x200003a8
 8006388:	e000ed04 	.word	0xe000ed04

0800638c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08a      	sub	sp, #40	; 0x28
 8006390:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006392:	2300      	movs	r3, #0
 8006394:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006396:	2300      	movs	r3, #0
 8006398:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800639a:	463a      	mov	r2, r7
 800639c:	1d39      	adds	r1, r7, #4
 800639e:	f107 0308 	add.w	r3, r7, #8
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fa fb32 	bl	8000a0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80063a8:	6839      	ldr	r1, [r7, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	9202      	str	r2, [sp, #8]
 80063b0:	9301      	str	r3, [sp, #4]
 80063b2:	2300      	movs	r3, #0
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	2300      	movs	r3, #0
 80063b8:	460a      	mov	r2, r1
 80063ba:	491e      	ldr	r1, [pc, #120]	; (8006434 <vTaskStartScheduler+0xa8>)
 80063bc:	481e      	ldr	r0, [pc, #120]	; (8006438 <vTaskStartScheduler+0xac>)
 80063be:	f7ff fe27 	bl	8006010 <xTaskCreateStatic>
 80063c2:	4603      	mov	r3, r0
 80063c4:	4a1d      	ldr	r2, [pc, #116]	; (800643c <vTaskStartScheduler+0xb0>)
 80063c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80063c8:	4b1c      	ldr	r3, [pc, #112]	; (800643c <vTaskStartScheduler+0xb0>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d002      	beq.n	80063d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80063d0:	2301      	movs	r3, #1
 80063d2:	617b      	str	r3, [r7, #20]
 80063d4:	e001      	b.n	80063da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063d6:	2300      	movs	r3, #0
 80063d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d116      	bne.n	800640e <vTaskStartScheduler+0x82>
	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	613b      	str	r3, [r7, #16]
}
 80063f2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063f4:	4b12      	ldr	r3, [pc, #72]	; (8006440 <vTaskStartScheduler+0xb4>)
 80063f6:	f04f 32ff 	mov.w	r2, #4294967295
 80063fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063fc:	4b11      	ldr	r3, [pc, #68]	; (8006444 <vTaskStartScheduler+0xb8>)
 80063fe:	2201      	movs	r2, #1
 8006400:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006402:	4b11      	ldr	r3, [pc, #68]	; (8006448 <vTaskStartScheduler+0xbc>)
 8006404:	2200      	movs	r2, #0
 8006406:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006408:	f000 fe9a 	bl	8007140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800640c:	e00e      	b.n	800642c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006414:	d10a      	bne.n	800642c <vTaskStartScheduler+0xa0>
	__asm volatile
 8006416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641a:	f383 8811 	msr	BASEPRI, r3
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	f3bf 8f4f 	dsb	sy
 8006426:	60fb      	str	r3, [r7, #12]
}
 8006428:	bf00      	nop
 800642a:	e7fe      	b.n	800642a <vTaskStartScheduler+0x9e>
}
 800642c:	bf00      	nop
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	08007a70 	.word	0x08007a70
 8006438:	080069e9 	.word	0x080069e9
 800643c:	200003a4 	.word	0x200003a4
 8006440:	200003a0 	.word	0x200003a0
 8006444:	2000038c 	.word	0x2000038c
 8006448:	20000384 	.word	0x20000384

0800644c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800644c:	b480      	push	{r7}
 800644e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006450:	4b04      	ldr	r3, [pc, #16]	; (8006464 <vTaskSuspendAll+0x18>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3301      	adds	r3, #1
 8006456:	4a03      	ldr	r2, [pc, #12]	; (8006464 <vTaskSuspendAll+0x18>)
 8006458:	6013      	str	r3, [r2, #0]
}
 800645a:	bf00      	nop
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	200003a8 	.word	0x200003a8

08006468 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006472:	2300      	movs	r3, #0
 8006474:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006476:	4b41      	ldr	r3, [pc, #260]	; (800657c <xTaskResumeAll+0x114>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10a      	bne.n	8006494 <xTaskResumeAll+0x2c>
	__asm volatile
 800647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	603b      	str	r3, [r7, #0]
}
 8006490:	bf00      	nop
 8006492:	e7fe      	b.n	8006492 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006494:	f000 fef6 	bl	8007284 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006498:	4b38      	ldr	r3, [pc, #224]	; (800657c <xTaskResumeAll+0x114>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3b01      	subs	r3, #1
 800649e:	4a37      	ldr	r2, [pc, #220]	; (800657c <xTaskResumeAll+0x114>)
 80064a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064a2:	4b36      	ldr	r3, [pc, #216]	; (800657c <xTaskResumeAll+0x114>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d161      	bne.n	800656e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80064aa:	4b35      	ldr	r3, [pc, #212]	; (8006580 <xTaskResumeAll+0x118>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d05d      	beq.n	800656e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064b2:	e02e      	b.n	8006512 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80064b4:	4b33      	ldr	r3, [pc, #204]	; (8006584 <xTaskResumeAll+0x11c>)
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	3318      	adds	r3, #24
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7fe ffb1 	bl	8005428 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	3304      	adds	r3, #4
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fe ffac 	bl	8005428 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d4:	2201      	movs	r2, #1
 80064d6:	409a      	lsls	r2, r3
 80064d8:	4b2b      	ldr	r3, [pc, #172]	; (8006588 <xTaskResumeAll+0x120>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4313      	orrs	r3, r2
 80064de:	4a2a      	ldr	r2, [pc, #168]	; (8006588 <xTaskResumeAll+0x120>)
 80064e0:	6013      	str	r3, [r2, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e6:	4613      	mov	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4a27      	ldr	r2, [pc, #156]	; (800658c <xTaskResumeAll+0x124>)
 80064f0:	441a      	add	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	3304      	adds	r3, #4
 80064f6:	4619      	mov	r1, r3
 80064f8:	4610      	mov	r0, r2
 80064fa:	f7fe ff38 	bl	800536e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006502:	4b23      	ldr	r3, [pc, #140]	; (8006590 <xTaskResumeAll+0x128>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	429a      	cmp	r2, r3
 800650a:	d302      	bcc.n	8006512 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800650c:	4b21      	ldr	r3, [pc, #132]	; (8006594 <xTaskResumeAll+0x12c>)
 800650e:	2201      	movs	r2, #1
 8006510:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006512:	4b1c      	ldr	r3, [pc, #112]	; (8006584 <xTaskResumeAll+0x11c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1cc      	bne.n	80064b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006520:	f000 fb18 	bl	8006b54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006524:	4b1c      	ldr	r3, [pc, #112]	; (8006598 <xTaskResumeAll+0x130>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d010      	beq.n	8006552 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006530:	f000 f836 	bl	80065a0 <xTaskIncrementTick>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d002      	beq.n	8006540 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800653a:	4b16      	ldr	r3, [pc, #88]	; (8006594 <xTaskResumeAll+0x12c>)
 800653c:	2201      	movs	r2, #1
 800653e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	3b01      	subs	r3, #1
 8006544:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1f1      	bne.n	8006530 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800654c:	4b12      	ldr	r3, [pc, #72]	; (8006598 <xTaskResumeAll+0x130>)
 800654e:	2200      	movs	r2, #0
 8006550:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006552:	4b10      	ldr	r3, [pc, #64]	; (8006594 <xTaskResumeAll+0x12c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d009      	beq.n	800656e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800655a:	2301      	movs	r3, #1
 800655c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800655e:	4b0f      	ldr	r3, [pc, #60]	; (800659c <xTaskResumeAll+0x134>)
 8006560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800656e:	f000 feb9 	bl	80072e4 <vPortExitCritical>

	return xAlreadyYielded;
 8006572:	68bb      	ldr	r3, [r7, #8]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	200003a8 	.word	0x200003a8
 8006580:	20000380 	.word	0x20000380
 8006584:	20000340 	.word	0x20000340
 8006588:	20000388 	.word	0x20000388
 800658c:	20000284 	.word	0x20000284
 8006590:	20000280 	.word	0x20000280
 8006594:	20000394 	.word	0x20000394
 8006598:	20000390 	.word	0x20000390
 800659c:	e000ed04 	.word	0xe000ed04

080065a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065aa:	4b51      	ldr	r3, [pc, #324]	; (80066f0 <xTaskIncrementTick+0x150>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f040 808d 	bne.w	80066ce <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065b4:	4b4f      	ldr	r3, [pc, #316]	; (80066f4 <xTaskIncrementTick+0x154>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3301      	adds	r3, #1
 80065ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065bc:	4a4d      	ldr	r2, [pc, #308]	; (80066f4 <xTaskIncrementTick+0x154>)
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d120      	bne.n	800660a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80065c8:	4b4b      	ldr	r3, [pc, #300]	; (80066f8 <xTaskIncrementTick+0x158>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	603b      	str	r3, [r7, #0]
}
 80065e4:	bf00      	nop
 80065e6:	e7fe      	b.n	80065e6 <xTaskIncrementTick+0x46>
 80065e8:	4b43      	ldr	r3, [pc, #268]	; (80066f8 <xTaskIncrementTick+0x158>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	4b43      	ldr	r3, [pc, #268]	; (80066fc <xTaskIncrementTick+0x15c>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a41      	ldr	r2, [pc, #260]	; (80066f8 <xTaskIncrementTick+0x158>)
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	4a41      	ldr	r2, [pc, #260]	; (80066fc <xTaskIncrementTick+0x15c>)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	4b40      	ldr	r3, [pc, #256]	; (8006700 <xTaskIncrementTick+0x160>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3301      	adds	r3, #1
 8006602:	4a3f      	ldr	r2, [pc, #252]	; (8006700 <xTaskIncrementTick+0x160>)
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	f000 faa5 	bl	8006b54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800660a:	4b3e      	ldr	r3, [pc, #248]	; (8006704 <xTaskIncrementTick+0x164>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	429a      	cmp	r2, r3
 8006612:	d34d      	bcc.n	80066b0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006614:	4b38      	ldr	r3, [pc, #224]	; (80066f8 <xTaskIncrementTick+0x158>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <xTaskIncrementTick+0x82>
 800661e:	2301      	movs	r3, #1
 8006620:	e000      	b.n	8006624 <xTaskIncrementTick+0x84>
 8006622:	2300      	movs	r3, #0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d004      	beq.n	8006632 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006628:	4b36      	ldr	r3, [pc, #216]	; (8006704 <xTaskIncrementTick+0x164>)
 800662a:	f04f 32ff 	mov.w	r2, #4294967295
 800662e:	601a      	str	r2, [r3, #0]
					break;
 8006630:	e03e      	b.n	80066b0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006632:	4b31      	ldr	r3, [pc, #196]	; (80066f8 <xTaskIncrementTick+0x158>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	429a      	cmp	r2, r3
 8006648:	d203      	bcs.n	8006652 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800664a:	4a2e      	ldr	r2, [pc, #184]	; (8006704 <xTaskIncrementTick+0x164>)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6013      	str	r3, [r2, #0]
						break;
 8006650:	e02e      	b.n	80066b0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	3304      	adds	r3, #4
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe fee6 	bl	8005428 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006660:	2b00      	cmp	r3, #0
 8006662:	d004      	beq.n	800666e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	3318      	adds	r3, #24
 8006668:	4618      	mov	r0, r3
 800666a:	f7fe fedd 	bl	8005428 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006672:	2201      	movs	r2, #1
 8006674:	409a      	lsls	r2, r3
 8006676:	4b24      	ldr	r3, [pc, #144]	; (8006708 <xTaskIncrementTick+0x168>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4313      	orrs	r3, r2
 800667c:	4a22      	ldr	r2, [pc, #136]	; (8006708 <xTaskIncrementTick+0x168>)
 800667e:	6013      	str	r3, [r2, #0]
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006684:	4613      	mov	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4a1f      	ldr	r2, [pc, #124]	; (800670c <xTaskIncrementTick+0x16c>)
 800668e:	441a      	add	r2, r3
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	3304      	adds	r3, #4
 8006694:	4619      	mov	r1, r3
 8006696:	4610      	mov	r0, r2
 8006698:	f7fe fe69 	bl	800536e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a0:	4b1b      	ldr	r3, [pc, #108]	; (8006710 <xTaskIncrementTick+0x170>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d3b4      	bcc.n	8006614 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80066aa:	2301      	movs	r3, #1
 80066ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066ae:	e7b1      	b.n	8006614 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066b0:	4b17      	ldr	r3, [pc, #92]	; (8006710 <xTaskIncrementTick+0x170>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b6:	4915      	ldr	r1, [pc, #84]	; (800670c <xTaskIncrementTick+0x16c>)
 80066b8:	4613      	mov	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	440b      	add	r3, r1
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d907      	bls.n	80066d8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80066c8:	2301      	movs	r3, #1
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	e004      	b.n	80066d8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80066ce:	4b11      	ldr	r3, [pc, #68]	; (8006714 <xTaskIncrementTick+0x174>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3301      	adds	r3, #1
 80066d4:	4a0f      	ldr	r2, [pc, #60]	; (8006714 <xTaskIncrementTick+0x174>)
 80066d6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80066d8:	4b0f      	ldr	r3, [pc, #60]	; (8006718 <xTaskIncrementTick+0x178>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80066e0:	2301      	movs	r3, #1
 80066e2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80066e4:	697b      	ldr	r3, [r7, #20]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	200003a8 	.word	0x200003a8
 80066f4:	20000384 	.word	0x20000384
 80066f8:	20000338 	.word	0x20000338
 80066fc:	2000033c 	.word	0x2000033c
 8006700:	20000398 	.word	0x20000398
 8006704:	200003a0 	.word	0x200003a0
 8006708:	20000388 	.word	0x20000388
 800670c:	20000284 	.word	0x20000284
 8006710:	20000280 	.word	0x20000280
 8006714:	20000390 	.word	0x20000390
 8006718:	20000394 	.word	0x20000394

0800671c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006722:	4b27      	ldr	r3, [pc, #156]	; (80067c0 <vTaskSwitchContext+0xa4>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800672a:	4b26      	ldr	r3, [pc, #152]	; (80067c4 <vTaskSwitchContext+0xa8>)
 800672c:	2201      	movs	r2, #1
 800672e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006730:	e03f      	b.n	80067b2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006732:	4b24      	ldr	r3, [pc, #144]	; (80067c4 <vTaskSwitchContext+0xa8>)
 8006734:	2200      	movs	r2, #0
 8006736:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006738:	4b23      	ldr	r3, [pc, #140]	; (80067c8 <vTaskSwitchContext+0xac>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	fab3 f383 	clz	r3, r3
 8006744:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006746:	7afb      	ldrb	r3, [r7, #11]
 8006748:	f1c3 031f 	rsb	r3, r3, #31
 800674c:	617b      	str	r3, [r7, #20]
 800674e:	491f      	ldr	r1, [pc, #124]	; (80067cc <vTaskSwitchContext+0xb0>)
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	4613      	mov	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	440b      	add	r3, r1
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10a      	bne.n	8006778 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	607b      	str	r3, [r7, #4]
}
 8006774:	bf00      	nop
 8006776:	e7fe      	b.n	8006776 <vTaskSwitchContext+0x5a>
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	4613      	mov	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4a12      	ldr	r2, [pc, #72]	; (80067cc <vTaskSwitchContext+0xb0>)
 8006784:	4413      	add	r3, r2
 8006786:	613b      	str	r3, [r7, #16]
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	605a      	str	r2, [r3, #4]
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	3308      	adds	r3, #8
 800679a:	429a      	cmp	r2, r3
 800679c:	d104      	bne.n	80067a8 <vTaskSwitchContext+0x8c>
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	605a      	str	r2, [r3, #4]
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	4a08      	ldr	r2, [pc, #32]	; (80067d0 <vTaskSwitchContext+0xb4>)
 80067b0:	6013      	str	r3, [r2, #0]
}
 80067b2:	bf00      	nop
 80067b4:	371c      	adds	r7, #28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	200003a8 	.word	0x200003a8
 80067c4:	20000394 	.word	0x20000394
 80067c8:	20000388 	.word	0x20000388
 80067cc:	20000284 	.word	0x20000284
 80067d0:	20000280 	.word	0x20000280

080067d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10a      	bne.n	80067fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80067e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e8:	f383 8811 	msr	BASEPRI, r3
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	60fb      	str	r3, [r7, #12]
}
 80067f6:	bf00      	nop
 80067f8:	e7fe      	b.n	80067f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067fa:	4b07      	ldr	r3, [pc, #28]	; (8006818 <vTaskPlaceOnEventList+0x44>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3318      	adds	r3, #24
 8006800:	4619      	mov	r1, r3
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7fe fdd7 	bl	80053b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006808:	2101      	movs	r1, #1
 800680a:	6838      	ldr	r0, [r7, #0]
 800680c:	f000 fba6 	bl	8006f5c <prvAddCurrentTaskToDelayedList>
}
 8006810:	bf00      	nop
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	20000280 	.word	0x20000280

0800681c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10a      	bne.n	8006848 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	60fb      	str	r3, [r7, #12]
}
 8006844:	bf00      	nop
 8006846:	e7fe      	b.n	8006846 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	3318      	adds	r3, #24
 800684c:	4618      	mov	r0, r3
 800684e:	f7fe fdeb 	bl	8005428 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006852:	4b1d      	ldr	r3, [pc, #116]	; (80068c8 <xTaskRemoveFromEventList+0xac>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d11c      	bne.n	8006894 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	3304      	adds	r3, #4
 800685e:	4618      	mov	r0, r3
 8006860:	f7fe fde2 	bl	8005428 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006868:	2201      	movs	r2, #1
 800686a:	409a      	lsls	r2, r3
 800686c:	4b17      	ldr	r3, [pc, #92]	; (80068cc <xTaskRemoveFromEventList+0xb0>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4313      	orrs	r3, r2
 8006872:	4a16      	ldr	r2, [pc, #88]	; (80068cc <xTaskRemoveFromEventList+0xb0>)
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800687a:	4613      	mov	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4a13      	ldr	r2, [pc, #76]	; (80068d0 <xTaskRemoveFromEventList+0xb4>)
 8006884:	441a      	add	r2, r3
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	3304      	adds	r3, #4
 800688a:	4619      	mov	r1, r3
 800688c:	4610      	mov	r0, r2
 800688e:	f7fe fd6e 	bl	800536e <vListInsertEnd>
 8006892:	e005      	b.n	80068a0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	3318      	adds	r3, #24
 8006898:	4619      	mov	r1, r3
 800689a:	480e      	ldr	r0, [pc, #56]	; (80068d4 <xTaskRemoveFromEventList+0xb8>)
 800689c:	f7fe fd67 	bl	800536e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a4:	4b0c      	ldr	r3, [pc, #48]	; (80068d8 <xTaskRemoveFromEventList+0xbc>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d905      	bls.n	80068ba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80068ae:	2301      	movs	r3, #1
 80068b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80068b2:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <xTaskRemoveFromEventList+0xc0>)
 80068b4:	2201      	movs	r2, #1
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	e001      	b.n	80068be <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80068ba:	2300      	movs	r3, #0
 80068bc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80068be:	697b      	ldr	r3, [r7, #20]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3718      	adds	r7, #24
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	200003a8 	.word	0x200003a8
 80068cc:	20000388 	.word	0x20000388
 80068d0:	20000284 	.word	0x20000284
 80068d4:	20000340 	.word	0x20000340
 80068d8:	20000280 	.word	0x20000280
 80068dc:	20000394 	.word	0x20000394

080068e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068e8:	4b06      	ldr	r3, [pc, #24]	; (8006904 <vTaskInternalSetTimeOutState+0x24>)
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068f0:	4b05      	ldr	r3, [pc, #20]	; (8006908 <vTaskInternalSetTimeOutState+0x28>)
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	605a      	str	r2, [r3, #4]
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	20000398 	.word	0x20000398
 8006908:	20000384 	.word	0x20000384

0800690c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b088      	sub	sp, #32
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10a      	bne.n	8006932 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	613b      	str	r3, [r7, #16]
}
 800692e:	bf00      	nop
 8006930:	e7fe      	b.n	8006930 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10a      	bne.n	800694e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	60fb      	str	r3, [r7, #12]
}
 800694a:	bf00      	nop
 800694c:	e7fe      	b.n	800694c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800694e:	f000 fc99 	bl	8007284 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006952:	4b1d      	ldr	r3, [pc, #116]	; (80069c8 <xTaskCheckForTimeOut+0xbc>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696a:	d102      	bne.n	8006972 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800696c:	2300      	movs	r3, #0
 800696e:	61fb      	str	r3, [r7, #28]
 8006970:	e023      	b.n	80069ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	4b15      	ldr	r3, [pc, #84]	; (80069cc <xTaskCheckForTimeOut+0xc0>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	429a      	cmp	r2, r3
 800697c:	d007      	beq.n	800698e <xTaskCheckForTimeOut+0x82>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	429a      	cmp	r2, r3
 8006986:	d302      	bcc.n	800698e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006988:	2301      	movs	r3, #1
 800698a:	61fb      	str	r3, [r7, #28]
 800698c:	e015      	b.n	80069ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	429a      	cmp	r2, r3
 8006996:	d20b      	bcs.n	80069b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	1ad2      	subs	r2, r2, r3
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7ff ff9b 	bl	80068e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80069aa:	2300      	movs	r3, #0
 80069ac:	61fb      	str	r3, [r7, #28]
 80069ae:	e004      	b.n	80069ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80069b6:	2301      	movs	r3, #1
 80069b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80069ba:	f000 fc93 	bl	80072e4 <vPortExitCritical>

	return xReturn;
 80069be:	69fb      	ldr	r3, [r7, #28]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3720      	adds	r7, #32
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	20000384 	.word	0x20000384
 80069cc:	20000398 	.word	0x20000398

080069d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069d0:	b480      	push	{r7}
 80069d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80069d4:	4b03      	ldr	r3, [pc, #12]	; (80069e4 <vTaskMissedYield+0x14>)
 80069d6:	2201      	movs	r2, #1
 80069d8:	601a      	str	r2, [r3, #0]
}
 80069da:	bf00      	nop
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	20000394 	.word	0x20000394

080069e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069f0:	f000 f852 	bl	8006a98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069f4:	4b06      	ldr	r3, [pc, #24]	; (8006a10 <prvIdleTask+0x28>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d9f9      	bls.n	80069f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80069fc:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <prvIdleTask+0x2c>)
 80069fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a0c:	e7f0      	b.n	80069f0 <prvIdleTask+0x8>
 8006a0e:	bf00      	nop
 8006a10:	20000284 	.word	0x20000284
 8006a14:	e000ed04 	.word	0xe000ed04

08006a18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a1e:	2300      	movs	r3, #0
 8006a20:	607b      	str	r3, [r7, #4]
 8006a22:	e00c      	b.n	8006a3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	4613      	mov	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4a12      	ldr	r2, [pc, #72]	; (8006a78 <prvInitialiseTaskLists+0x60>)
 8006a30:	4413      	add	r3, r2
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7fe fc6e 	bl	8005314 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	607b      	str	r3, [r7, #4]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b06      	cmp	r3, #6
 8006a42:	d9ef      	bls.n	8006a24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a44:	480d      	ldr	r0, [pc, #52]	; (8006a7c <prvInitialiseTaskLists+0x64>)
 8006a46:	f7fe fc65 	bl	8005314 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a4a:	480d      	ldr	r0, [pc, #52]	; (8006a80 <prvInitialiseTaskLists+0x68>)
 8006a4c:	f7fe fc62 	bl	8005314 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a50:	480c      	ldr	r0, [pc, #48]	; (8006a84 <prvInitialiseTaskLists+0x6c>)
 8006a52:	f7fe fc5f 	bl	8005314 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a56:	480c      	ldr	r0, [pc, #48]	; (8006a88 <prvInitialiseTaskLists+0x70>)
 8006a58:	f7fe fc5c 	bl	8005314 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a5c:	480b      	ldr	r0, [pc, #44]	; (8006a8c <prvInitialiseTaskLists+0x74>)
 8006a5e:	f7fe fc59 	bl	8005314 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a62:	4b0b      	ldr	r3, [pc, #44]	; (8006a90 <prvInitialiseTaskLists+0x78>)
 8006a64:	4a05      	ldr	r2, [pc, #20]	; (8006a7c <prvInitialiseTaskLists+0x64>)
 8006a66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a68:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <prvInitialiseTaskLists+0x7c>)
 8006a6a:	4a05      	ldr	r2, [pc, #20]	; (8006a80 <prvInitialiseTaskLists+0x68>)
 8006a6c:	601a      	str	r2, [r3, #0]
}
 8006a6e:	bf00      	nop
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	20000284 	.word	0x20000284
 8006a7c:	20000310 	.word	0x20000310
 8006a80:	20000324 	.word	0x20000324
 8006a84:	20000340 	.word	0x20000340
 8006a88:	20000354 	.word	0x20000354
 8006a8c:	2000036c 	.word	0x2000036c
 8006a90:	20000338 	.word	0x20000338
 8006a94:	2000033c 	.word	0x2000033c

08006a98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a9e:	e019      	b.n	8006ad4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006aa0:	f000 fbf0 	bl	8007284 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006aa4:	4b10      	ldr	r3, [pc, #64]	; (8006ae8 <prvCheckTasksWaitingTermination+0x50>)
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3304      	adds	r3, #4
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7fe fcb9 	bl	8005428 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ab6:	4b0d      	ldr	r3, [pc, #52]	; (8006aec <prvCheckTasksWaitingTermination+0x54>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3b01      	subs	r3, #1
 8006abc:	4a0b      	ldr	r2, [pc, #44]	; (8006aec <prvCheckTasksWaitingTermination+0x54>)
 8006abe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ac0:	4b0b      	ldr	r3, [pc, #44]	; (8006af0 <prvCheckTasksWaitingTermination+0x58>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	4a0a      	ldr	r2, [pc, #40]	; (8006af0 <prvCheckTasksWaitingTermination+0x58>)
 8006ac8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006aca:	f000 fc0b 	bl	80072e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f810 	bl	8006af4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ad4:	4b06      	ldr	r3, [pc, #24]	; (8006af0 <prvCheckTasksWaitingTermination+0x58>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1e1      	bne.n	8006aa0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006adc:	bf00      	nop
 8006ade:	bf00      	nop
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	20000354 	.word	0x20000354
 8006aec:	20000380 	.word	0x20000380
 8006af0:	20000368 	.word	0x20000368

08006af4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d108      	bne.n	8006b18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 fda0 	bl	8007650 <vPortFree>
				vPortFree( pxTCB );
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fd9d 	bl	8007650 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b16:	e018      	b.n	8006b4a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d103      	bne.n	8006b2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fd94 	bl	8007650 <vPortFree>
	}
 8006b28:	e00f      	b.n	8006b4a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d00a      	beq.n	8006b4a <prvDeleteTCB+0x56>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	60fb      	str	r3, [r7, #12]
}
 8006b46:	bf00      	nop
 8006b48:	e7fe      	b.n	8006b48 <prvDeleteTCB+0x54>
	}
 8006b4a:	bf00      	nop
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
	...

08006b54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b5a:	4b0f      	ldr	r3, [pc, #60]	; (8006b98 <prvResetNextTaskUnblockTime+0x44>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <prvResetNextTaskUnblockTime+0x14>
 8006b64:	2301      	movs	r3, #1
 8006b66:	e000      	b.n	8006b6a <prvResetNextTaskUnblockTime+0x16>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d004      	beq.n	8006b78 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b6e:	4b0b      	ldr	r3, [pc, #44]	; (8006b9c <prvResetNextTaskUnblockTime+0x48>)
 8006b70:	f04f 32ff 	mov.w	r2, #4294967295
 8006b74:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b76:	e008      	b.n	8006b8a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b78:	4b07      	ldr	r3, [pc, #28]	; (8006b98 <prvResetNextTaskUnblockTime+0x44>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	4a05      	ldr	r2, [pc, #20]	; (8006b9c <prvResetNextTaskUnblockTime+0x48>)
 8006b88:	6013      	str	r3, [r2, #0]
}
 8006b8a:	bf00      	nop
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	20000338 	.word	0x20000338
 8006b9c:	200003a0 	.word	0x200003a0

08006ba0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ba6:	4b0b      	ldr	r3, [pc, #44]	; (8006bd4 <xTaskGetSchedulerState+0x34>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d102      	bne.n	8006bb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	607b      	str	r3, [r7, #4]
 8006bb2:	e008      	b.n	8006bc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bb4:	4b08      	ldr	r3, [pc, #32]	; (8006bd8 <xTaskGetSchedulerState+0x38>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d102      	bne.n	8006bc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	607b      	str	r3, [r7, #4]
 8006bc0:	e001      	b.n	8006bc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006bc6:	687b      	ldr	r3, [r7, #4]
	}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	2000038c 	.word	0x2000038c
 8006bd8:	200003a8 	.word	0x200003a8

08006bdc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006be8:	2300      	movs	r3, #0
 8006bea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d06e      	beq.n	8006cd0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf6:	4b39      	ldr	r3, [pc, #228]	; (8006cdc <xTaskPriorityInherit+0x100>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d25e      	bcs.n	8006cbe <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	db06      	blt.n	8006c16 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c08:	4b34      	ldr	r3, [pc, #208]	; (8006cdc <xTaskPriorityInherit+0x100>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0e:	f1c3 0207 	rsb	r2, r3, #7
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	6959      	ldr	r1, [r3, #20]
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1e:	4613      	mov	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	4413      	add	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4a2e      	ldr	r2, [pc, #184]	; (8006ce0 <xTaskPriorityInherit+0x104>)
 8006c28:	4413      	add	r3, r2
 8006c2a:	4299      	cmp	r1, r3
 8006c2c:	d101      	bne.n	8006c32 <xTaskPriorityInherit+0x56>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e000      	b.n	8006c34 <xTaskPriorityInherit+0x58>
 8006c32:	2300      	movs	r3, #0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d03a      	beq.n	8006cae <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7fe fbf3 	bl	8005428 <uxListRemove>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d115      	bne.n	8006c74 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c4c:	4924      	ldr	r1, [pc, #144]	; (8006ce0 <xTaskPriorityInherit+0x104>)
 8006c4e:	4613      	mov	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	440b      	add	r3, r1
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10a      	bne.n	8006c74 <xTaskPriorityInherit+0x98>
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c62:	2201      	movs	r2, #1
 8006c64:	fa02 f303 	lsl.w	r3, r2, r3
 8006c68:	43da      	mvns	r2, r3
 8006c6a:	4b1e      	ldr	r3, [pc, #120]	; (8006ce4 <xTaskPriorityInherit+0x108>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4013      	ands	r3, r2
 8006c70:	4a1c      	ldr	r2, [pc, #112]	; (8006ce4 <xTaskPriorityInherit+0x108>)
 8006c72:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c74:	4b19      	ldr	r3, [pc, #100]	; (8006cdc <xTaskPriorityInherit+0x100>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c82:	2201      	movs	r2, #1
 8006c84:	409a      	lsls	r2, r3
 8006c86:	4b17      	ldr	r3, [pc, #92]	; (8006ce4 <xTaskPriorityInherit+0x108>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	4a15      	ldr	r2, [pc, #84]	; (8006ce4 <xTaskPriorityInherit+0x108>)
 8006c8e:	6013      	str	r3, [r2, #0]
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c94:	4613      	mov	r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4a10      	ldr	r2, [pc, #64]	; (8006ce0 <xTaskPriorityInherit+0x104>)
 8006c9e:	441a      	add	r2, r3
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4610      	mov	r0, r2
 8006ca8:	f7fe fb61 	bl	800536e <vListInsertEnd>
 8006cac:	e004      	b.n	8006cb8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006cae:	4b0b      	ldr	r3, [pc, #44]	; (8006cdc <xTaskPriorityInherit+0x100>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	e008      	b.n	8006cd0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cc2:	4b06      	ldr	r3, [pc, #24]	; (8006cdc <xTaskPriorityInherit+0x100>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d201      	bcs.n	8006cd0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
	}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	20000280 	.word	0x20000280
 8006ce0:	20000284 	.word	0x20000284
 8006ce4:	20000388 	.word	0x20000388

08006ce8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d06e      	beq.n	8006ddc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006cfe:	4b3a      	ldr	r3, [pc, #232]	; (8006de8 <xTaskPriorityDisinherit+0x100>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d00a      	beq.n	8006d1e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0c:	f383 8811 	msr	BASEPRI, r3
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	60fb      	str	r3, [r7, #12]
}
 8006d1a:	bf00      	nop
 8006d1c:	e7fe      	b.n	8006d1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10a      	bne.n	8006d3c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2a:	f383 8811 	msr	BASEPRI, r3
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	60bb      	str	r3, [r7, #8]
}
 8006d38:	bf00      	nop
 8006d3a:	e7fe      	b.n	8006d3a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d40:	1e5a      	subs	r2, r3, #1
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d044      	beq.n	8006ddc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d140      	bne.n	8006ddc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fe fb62 	bl	8005428 <uxListRemove>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d115      	bne.n	8006d96 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d6e:	491f      	ldr	r1, [pc, #124]	; (8006dec <xTaskPriorityDisinherit+0x104>)
 8006d70:	4613      	mov	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	440b      	add	r3, r1
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10a      	bne.n	8006d96 <xTaskPriorityDisinherit+0xae>
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d84:	2201      	movs	r2, #1
 8006d86:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8a:	43da      	mvns	r2, r3
 8006d8c:	4b18      	ldr	r3, [pc, #96]	; (8006df0 <xTaskPriorityDisinherit+0x108>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4013      	ands	r3, r2
 8006d92:	4a17      	ldr	r2, [pc, #92]	; (8006df0 <xTaskPriorityDisinherit+0x108>)
 8006d94:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da2:	f1c3 0207 	rsb	r2, r3, #7
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dae:	2201      	movs	r2, #1
 8006db0:	409a      	lsls	r2, r3
 8006db2:	4b0f      	ldr	r3, [pc, #60]	; (8006df0 <xTaskPriorityDisinherit+0x108>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	4a0d      	ldr	r2, [pc, #52]	; (8006df0 <xTaskPriorityDisinherit+0x108>)
 8006dba:	6013      	str	r3, [r2, #0]
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4a08      	ldr	r2, [pc, #32]	; (8006dec <xTaskPriorityDisinherit+0x104>)
 8006dca:	441a      	add	r2, r3
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	3304      	adds	r3, #4
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	4610      	mov	r0, r2
 8006dd4:	f7fe facb 	bl	800536e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ddc:	697b      	ldr	r3, [r7, #20]
	}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3718      	adds	r7, #24
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	20000280 	.word	0x20000280
 8006dec:	20000284 	.word	0x20000284
 8006df0:	20000388 	.word	0x20000388

08006df4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b088      	sub	sp, #32
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006e02:	2301      	movs	r3, #1
 8006e04:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 8088 	beq.w	8006f1e <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10a      	bne.n	8006e2c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1a:	f383 8811 	msr	BASEPRI, r3
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f3bf 8f4f 	dsb	sy
 8006e26:	60fb      	str	r3, [r7, #12]
}
 8006e28:	bf00      	nop
 8006e2a:	e7fe      	b.n	8006e2a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e30:	683a      	ldr	r2, [r7, #0]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d902      	bls.n	8006e3c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	61fb      	str	r3, [r7, #28]
 8006e3a:	e002      	b.n	8006e42 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e40:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e46:	69fa      	ldr	r2, [r7, #28]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d068      	beq.n	8006f1e <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d163      	bne.n	8006f1e <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006e56:	4b34      	ldr	r3, [pc, #208]	; (8006f28 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69ba      	ldr	r2, [r7, #24]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d10a      	bne.n	8006e76 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8006e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	60bb      	str	r3, [r7, #8]
}
 8006e72:	bf00      	nop
 8006e74:	e7fe      	b.n	8006e74 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	69fa      	ldr	r2, [r7, #28]
 8006e80:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	db04      	blt.n	8006e94 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	f1c3 0207 	rsb	r2, r3, #7
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	6959      	ldr	r1, [r3, #20]
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4a22      	ldr	r2, [pc, #136]	; (8006f2c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006ea4:	4413      	add	r3, r2
 8006ea6:	4299      	cmp	r1, r3
 8006ea8:	d101      	bne.n	8006eae <vTaskPriorityDisinheritAfterTimeout+0xba>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e000      	b.n	8006eb0 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d034      	beq.n	8006f1e <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fe fab5 	bl	8005428 <uxListRemove>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d115      	bne.n	8006ef0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec8:	4918      	ldr	r1, [pc, #96]	; (8006f2c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006eca:	4613      	mov	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	440b      	add	r3, r1
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10a      	bne.n	8006ef0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ede:	2201      	movs	r2, #1
 8006ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee4:	43da      	mvns	r2, r3
 8006ee6:	4b12      	ldr	r3, [pc, #72]	; (8006f30 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4013      	ands	r3, r2
 8006eec:	4a10      	ldr	r2, [pc, #64]	; (8006f30 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006eee:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	409a      	lsls	r2, r3
 8006ef8:	4b0d      	ldr	r3, [pc, #52]	; (8006f30 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	4a0c      	ldr	r2, [pc, #48]	; (8006f30 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006f00:	6013      	str	r3, [r2, #0]
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f06:	4613      	mov	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4a07      	ldr	r2, [pc, #28]	; (8006f2c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006f10:	441a      	add	r2, r3
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	3304      	adds	r3, #4
 8006f16:	4619      	mov	r1, r3
 8006f18:	4610      	mov	r0, r2
 8006f1a:	f7fe fa28 	bl	800536e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f1e:	bf00      	nop
 8006f20:	3720      	adds	r7, #32
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20000280 	.word	0x20000280
 8006f2c:	20000284 	.word	0x20000284
 8006f30:	20000388 	.word	0x20000388

08006f34 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006f34:	b480      	push	{r7}
 8006f36:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006f38:	4b07      	ldr	r3, [pc, #28]	; (8006f58 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d004      	beq.n	8006f4a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006f40:	4b05      	ldr	r3, [pc, #20]	; (8006f58 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f46:	3201      	adds	r2, #1
 8006f48:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006f4a:	4b03      	ldr	r3, [pc, #12]	; (8006f58 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
	}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	20000280 	.word	0x20000280

08006f5c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f66:	4b29      	ldr	r3, [pc, #164]	; (800700c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f6c:	4b28      	ldr	r3, [pc, #160]	; (8007010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3304      	adds	r3, #4
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fe fa58 	bl	8005428 <uxListRemove>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10b      	bne.n	8006f96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006f7e:	4b24      	ldr	r3, [pc, #144]	; (8007010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f84:	2201      	movs	r2, #1
 8006f86:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8a:	43da      	mvns	r2, r3
 8006f8c:	4b21      	ldr	r3, [pc, #132]	; (8007014 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4013      	ands	r3, r2
 8006f92:	4a20      	ldr	r2, [pc, #128]	; (8007014 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9c:	d10a      	bne.n	8006fb4 <prvAddCurrentTaskToDelayedList+0x58>
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d007      	beq.n	8006fb4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fa4:	4b1a      	ldr	r3, [pc, #104]	; (8007010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	4619      	mov	r1, r3
 8006fac:	481a      	ldr	r0, [pc, #104]	; (8007018 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006fae:	f7fe f9de 	bl	800536e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fb2:	e026      	b.n	8007002 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4413      	add	r3, r2
 8006fba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fbc:	4b14      	ldr	r3, [pc, #80]	; (8007010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d209      	bcs.n	8006fe0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fcc:	4b13      	ldr	r3, [pc, #76]	; (800701c <prvAddCurrentTaskToDelayedList+0xc0>)
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	4b0f      	ldr	r3, [pc, #60]	; (8007010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4610      	mov	r0, r2
 8006fda:	f7fe f9ec 	bl	80053b6 <vListInsert>
}
 8006fde:	e010      	b.n	8007002 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fe0:	4b0f      	ldr	r3, [pc, #60]	; (8007020 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	4b0a      	ldr	r3, [pc, #40]	; (8007010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3304      	adds	r3, #4
 8006fea:	4619      	mov	r1, r3
 8006fec:	4610      	mov	r0, r2
 8006fee:	f7fe f9e2 	bl	80053b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ff2:	4b0c      	ldr	r3, [pc, #48]	; (8007024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d202      	bcs.n	8007002 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006ffc:	4a09      	ldr	r2, [pc, #36]	; (8007024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	6013      	str	r3, [r2, #0]
}
 8007002:	bf00      	nop
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	20000384 	.word	0x20000384
 8007010:	20000280 	.word	0x20000280
 8007014:	20000388 	.word	0x20000388
 8007018:	2000036c 	.word	0x2000036c
 800701c:	2000033c 	.word	0x2000033c
 8007020:	20000338 	.word	0x20000338
 8007024:	200003a0 	.word	0x200003a0

08007028 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	3b04      	subs	r3, #4
 8007038:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3b04      	subs	r3, #4
 8007046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	f023 0201 	bic.w	r2, r3, #1
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	3b04      	subs	r3, #4
 8007056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007058:	4a0c      	ldr	r2, [pc, #48]	; (800708c <pxPortInitialiseStack+0x64>)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3b14      	subs	r3, #20
 8007062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	3b04      	subs	r3, #4
 800706e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f06f 0202 	mvn.w	r2, #2
 8007076:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	3b20      	subs	r3, #32
 800707c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800707e:	68fb      	ldr	r3, [r7, #12]
}
 8007080:	4618      	mov	r0, r3
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	08007091 	.word	0x08007091

08007090 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800709a:	4b12      	ldr	r3, [pc, #72]	; (80070e4 <prvTaskExitError+0x54>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a2:	d00a      	beq.n	80070ba <prvTaskExitError+0x2a>
	__asm volatile
 80070a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	60fb      	str	r3, [r7, #12]
}
 80070b6:	bf00      	nop
 80070b8:	e7fe      	b.n	80070b8 <prvTaskExitError+0x28>
	__asm volatile
 80070ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070be:	f383 8811 	msr	BASEPRI, r3
 80070c2:	f3bf 8f6f 	isb	sy
 80070c6:	f3bf 8f4f 	dsb	sy
 80070ca:	60bb      	str	r3, [r7, #8]
}
 80070cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80070ce:	bf00      	nop
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d0fc      	beq.n	80070d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80070d6:	bf00      	nop
 80070d8:	bf00      	nop
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	2000000c 	.word	0x2000000c
	...

080070f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80070f0:	4b07      	ldr	r3, [pc, #28]	; (8007110 <pxCurrentTCBConst2>)
 80070f2:	6819      	ldr	r1, [r3, #0]
 80070f4:	6808      	ldr	r0, [r1, #0]
 80070f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fa:	f380 8809 	msr	PSP, r0
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f04f 0000 	mov.w	r0, #0
 8007106:	f380 8811 	msr	BASEPRI, r0
 800710a:	4770      	bx	lr
 800710c:	f3af 8000 	nop.w

08007110 <pxCurrentTCBConst2>:
 8007110:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007114:	bf00      	nop
 8007116:	bf00      	nop

08007118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007118:	4808      	ldr	r0, [pc, #32]	; (800713c <prvPortStartFirstTask+0x24>)
 800711a:	6800      	ldr	r0, [r0, #0]
 800711c:	6800      	ldr	r0, [r0, #0]
 800711e:	f380 8808 	msr	MSP, r0
 8007122:	f04f 0000 	mov.w	r0, #0
 8007126:	f380 8814 	msr	CONTROL, r0
 800712a:	b662      	cpsie	i
 800712c:	b661      	cpsie	f
 800712e:	f3bf 8f4f 	dsb	sy
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	df00      	svc	0
 8007138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800713a:	bf00      	nop
 800713c:	e000ed08 	.word	0xe000ed08

08007140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007146:	4b46      	ldr	r3, [pc, #280]	; (8007260 <xPortStartScheduler+0x120>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a46      	ldr	r2, [pc, #280]	; (8007264 <xPortStartScheduler+0x124>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d10a      	bne.n	8007166 <xPortStartScheduler+0x26>
	__asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	613b      	str	r3, [r7, #16]
}
 8007162:	bf00      	nop
 8007164:	e7fe      	b.n	8007164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007166:	4b3e      	ldr	r3, [pc, #248]	; (8007260 <xPortStartScheduler+0x120>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a3f      	ldr	r2, [pc, #252]	; (8007268 <xPortStartScheduler+0x128>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d10a      	bne.n	8007186 <xPortStartScheduler+0x46>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	60fb      	str	r3, [r7, #12]
}
 8007182:	bf00      	nop
 8007184:	e7fe      	b.n	8007184 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007186:	4b39      	ldr	r3, [pc, #228]	; (800726c <xPortStartScheduler+0x12c>)
 8007188:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	b2db      	uxtb	r3, r3
 8007190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	22ff      	movs	r2, #255	; 0xff
 8007196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	b2db      	uxtb	r3, r3
 800719e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80071a0:	78fb      	ldrb	r3, [r7, #3]
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	4b31      	ldr	r3, [pc, #196]	; (8007270 <xPortStartScheduler+0x130>)
 80071ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80071ae:	4b31      	ldr	r3, [pc, #196]	; (8007274 <xPortStartScheduler+0x134>)
 80071b0:	2207      	movs	r2, #7
 80071b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071b4:	e009      	b.n	80071ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80071b6:	4b2f      	ldr	r3, [pc, #188]	; (8007274 <xPortStartScheduler+0x134>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3b01      	subs	r3, #1
 80071bc:	4a2d      	ldr	r2, [pc, #180]	; (8007274 <xPortStartScheduler+0x134>)
 80071be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80071c0:	78fb      	ldrb	r3, [r7, #3]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	005b      	lsls	r3, r3, #1
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071ca:	78fb      	ldrb	r3, [r7, #3]
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d2:	2b80      	cmp	r3, #128	; 0x80
 80071d4:	d0ef      	beq.n	80071b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80071d6:	4b27      	ldr	r3, [pc, #156]	; (8007274 <xPortStartScheduler+0x134>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f1c3 0307 	rsb	r3, r3, #7
 80071de:	2b04      	cmp	r3, #4
 80071e0:	d00a      	beq.n	80071f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80071e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	60bb      	str	r3, [r7, #8]
}
 80071f4:	bf00      	nop
 80071f6:	e7fe      	b.n	80071f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071f8:	4b1e      	ldr	r3, [pc, #120]	; (8007274 <xPortStartScheduler+0x134>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	021b      	lsls	r3, r3, #8
 80071fe:	4a1d      	ldr	r2, [pc, #116]	; (8007274 <xPortStartScheduler+0x134>)
 8007200:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007202:	4b1c      	ldr	r3, [pc, #112]	; (8007274 <xPortStartScheduler+0x134>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800720a:	4a1a      	ldr	r2, [pc, #104]	; (8007274 <xPortStartScheduler+0x134>)
 800720c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	b2da      	uxtb	r2, r3
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007216:	4b18      	ldr	r3, [pc, #96]	; (8007278 <xPortStartScheduler+0x138>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a17      	ldr	r2, [pc, #92]	; (8007278 <xPortStartScheduler+0x138>)
 800721c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007220:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007222:	4b15      	ldr	r3, [pc, #84]	; (8007278 <xPortStartScheduler+0x138>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a14      	ldr	r2, [pc, #80]	; (8007278 <xPortStartScheduler+0x138>)
 8007228:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800722c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800722e:	f000 f8dd 	bl	80073ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007232:	4b12      	ldr	r3, [pc, #72]	; (800727c <xPortStartScheduler+0x13c>)
 8007234:	2200      	movs	r2, #0
 8007236:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007238:	f000 f8fc 	bl	8007434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800723c:	4b10      	ldr	r3, [pc, #64]	; (8007280 <xPortStartScheduler+0x140>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a0f      	ldr	r2, [pc, #60]	; (8007280 <xPortStartScheduler+0x140>)
 8007242:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007246:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007248:	f7ff ff66 	bl	8007118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800724c:	f7ff fa66 	bl	800671c <vTaskSwitchContext>
	prvTaskExitError();
 8007250:	f7ff ff1e 	bl	8007090 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	e000ed00 	.word	0xe000ed00
 8007264:	410fc271 	.word	0x410fc271
 8007268:	410fc270 	.word	0x410fc270
 800726c:	e000e400 	.word	0xe000e400
 8007270:	200003ac 	.word	0x200003ac
 8007274:	200003b0 	.word	0x200003b0
 8007278:	e000ed20 	.word	0xe000ed20
 800727c:	2000000c 	.word	0x2000000c
 8007280:	e000ef34 	.word	0xe000ef34

08007284 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	607b      	str	r3, [r7, #4]
}
 800729c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800729e:	4b0f      	ldr	r3, [pc, #60]	; (80072dc <vPortEnterCritical+0x58>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	3301      	adds	r3, #1
 80072a4:	4a0d      	ldr	r2, [pc, #52]	; (80072dc <vPortEnterCritical+0x58>)
 80072a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80072a8:	4b0c      	ldr	r3, [pc, #48]	; (80072dc <vPortEnterCritical+0x58>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d10f      	bne.n	80072d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80072b0:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <vPortEnterCritical+0x5c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00a      	beq.n	80072d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80072ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072be:	f383 8811 	msr	BASEPRI, r3
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	603b      	str	r3, [r7, #0]
}
 80072cc:	bf00      	nop
 80072ce:	e7fe      	b.n	80072ce <vPortEnterCritical+0x4a>
	}
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	2000000c 	.word	0x2000000c
 80072e0:	e000ed04 	.word	0xe000ed04

080072e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80072ea:	4b12      	ldr	r3, [pc, #72]	; (8007334 <vPortExitCritical+0x50>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10a      	bne.n	8007308 <vPortExitCritical+0x24>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	607b      	str	r3, [r7, #4]
}
 8007304:	bf00      	nop
 8007306:	e7fe      	b.n	8007306 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007308:	4b0a      	ldr	r3, [pc, #40]	; (8007334 <vPortExitCritical+0x50>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3b01      	subs	r3, #1
 800730e:	4a09      	ldr	r2, [pc, #36]	; (8007334 <vPortExitCritical+0x50>)
 8007310:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007312:	4b08      	ldr	r3, [pc, #32]	; (8007334 <vPortExitCritical+0x50>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d105      	bne.n	8007326 <vPortExitCritical+0x42>
 800731a:	2300      	movs	r3, #0
 800731c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	f383 8811 	msr	BASEPRI, r3
}
 8007324:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007326:	bf00      	nop
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	2000000c 	.word	0x2000000c
	...

08007340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007340:	f3ef 8009 	mrs	r0, PSP
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	4b15      	ldr	r3, [pc, #84]	; (80073a0 <pxCurrentTCBConst>)
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	f01e 0f10 	tst.w	lr, #16
 8007350:	bf08      	it	eq
 8007352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800735a:	6010      	str	r0, [r2, #0]
 800735c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007364:	f380 8811 	msr	BASEPRI, r0
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f7ff f9d4 	bl	800671c <vTaskSwitchContext>
 8007374:	f04f 0000 	mov.w	r0, #0
 8007378:	f380 8811 	msr	BASEPRI, r0
 800737c:	bc09      	pop	{r0, r3}
 800737e:	6819      	ldr	r1, [r3, #0]
 8007380:	6808      	ldr	r0, [r1, #0]
 8007382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007386:	f01e 0f10 	tst.w	lr, #16
 800738a:	bf08      	it	eq
 800738c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007390:	f380 8809 	msr	PSP, r0
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	f3af 8000 	nop.w

080073a0 <pxCurrentTCBConst>:
 80073a0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80073a4:	bf00      	nop
 80073a6:	bf00      	nop

080073a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	607b      	str	r3, [r7, #4]
}
 80073c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80073c2:	f7ff f8ed 	bl	80065a0 <xTaskIncrementTick>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80073cc:	4b06      	ldr	r3, [pc, #24]	; (80073e8 <SysTick_Handler+0x40>)
 80073ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	2300      	movs	r3, #0
 80073d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	f383 8811 	msr	BASEPRI, r3
}
 80073de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80073e0:	bf00      	nop
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	e000ed04 	.word	0xe000ed04

080073ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80073ec:	b480      	push	{r7}
 80073ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80073f0:	4b0b      	ldr	r3, [pc, #44]	; (8007420 <vPortSetupTimerInterrupt+0x34>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80073f6:	4b0b      	ldr	r3, [pc, #44]	; (8007424 <vPortSetupTimerInterrupt+0x38>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073fc:	4b0a      	ldr	r3, [pc, #40]	; (8007428 <vPortSetupTimerInterrupt+0x3c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a0a      	ldr	r2, [pc, #40]	; (800742c <vPortSetupTimerInterrupt+0x40>)
 8007402:	fba2 2303 	umull	r2, r3, r2, r3
 8007406:	099b      	lsrs	r3, r3, #6
 8007408:	4a09      	ldr	r2, [pc, #36]	; (8007430 <vPortSetupTimerInterrupt+0x44>)
 800740a:	3b01      	subs	r3, #1
 800740c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800740e:	4b04      	ldr	r3, [pc, #16]	; (8007420 <vPortSetupTimerInterrupt+0x34>)
 8007410:	2207      	movs	r2, #7
 8007412:	601a      	str	r2, [r3, #0]
}
 8007414:	bf00      	nop
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	e000e010 	.word	0xe000e010
 8007424:	e000e018 	.word	0xe000e018
 8007428:	20000000 	.word	0x20000000
 800742c:	10624dd3 	.word	0x10624dd3
 8007430:	e000e014 	.word	0xe000e014

08007434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007444 <vPortEnableVFP+0x10>
 8007438:	6801      	ldr	r1, [r0, #0]
 800743a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800743e:	6001      	str	r1, [r0, #0]
 8007440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007442:	bf00      	nop
 8007444:	e000ed88 	.word	0xe000ed88

08007448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800744e:	f3ef 8305 	mrs	r3, IPSR
 8007452:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2b0f      	cmp	r3, #15
 8007458:	d914      	bls.n	8007484 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800745a:	4a17      	ldr	r2, [pc, #92]	; (80074b8 <vPortValidateInterruptPriority+0x70>)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4413      	add	r3, r2
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007464:	4b15      	ldr	r3, [pc, #84]	; (80074bc <vPortValidateInterruptPriority+0x74>)
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	7afa      	ldrb	r2, [r7, #11]
 800746a:	429a      	cmp	r2, r3
 800746c:	d20a      	bcs.n	8007484 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	607b      	str	r3, [r7, #4]
}
 8007480:	bf00      	nop
 8007482:	e7fe      	b.n	8007482 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007484:	4b0e      	ldr	r3, [pc, #56]	; (80074c0 <vPortValidateInterruptPriority+0x78>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800748c:	4b0d      	ldr	r3, [pc, #52]	; (80074c4 <vPortValidateInterruptPriority+0x7c>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	429a      	cmp	r2, r3
 8007492:	d90a      	bls.n	80074aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	603b      	str	r3, [r7, #0]
}
 80074a6:	bf00      	nop
 80074a8:	e7fe      	b.n	80074a8 <vPortValidateInterruptPriority+0x60>
	}
 80074aa:	bf00      	nop
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	e000e3f0 	.word	0xe000e3f0
 80074bc:	200003ac 	.word	0x200003ac
 80074c0:	e000ed0c 	.word	0xe000ed0c
 80074c4:	200003b0 	.word	0x200003b0

080074c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08a      	sub	sp, #40	; 0x28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80074d0:	2300      	movs	r3, #0
 80074d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80074d4:	f7fe ffba 	bl	800644c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80074d8:	4b58      	ldr	r3, [pc, #352]	; (800763c <pvPortMalloc+0x174>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80074e0:	f000 f910 	bl	8007704 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074e4:	4b56      	ldr	r3, [pc, #344]	; (8007640 <pvPortMalloc+0x178>)
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4013      	ands	r3, r2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f040 808e 	bne.w	800760e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d01d      	beq.n	8007534 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80074f8:	2208      	movs	r2, #8
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4413      	add	r3, r2
 80074fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f003 0307 	and.w	r3, r3, #7
 8007506:	2b00      	cmp	r3, #0
 8007508:	d014      	beq.n	8007534 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f023 0307 	bic.w	r3, r3, #7
 8007510:	3308      	adds	r3, #8
 8007512:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f003 0307 	and.w	r3, r3, #7
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00a      	beq.n	8007534 <pvPortMalloc+0x6c>
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007522:	f383 8811 	msr	BASEPRI, r3
 8007526:	f3bf 8f6f 	isb	sy
 800752a:	f3bf 8f4f 	dsb	sy
 800752e:	617b      	str	r3, [r7, #20]
}
 8007530:	bf00      	nop
 8007532:	e7fe      	b.n	8007532 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d069      	beq.n	800760e <pvPortMalloc+0x146>
 800753a:	4b42      	ldr	r3, [pc, #264]	; (8007644 <pvPortMalloc+0x17c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	429a      	cmp	r2, r3
 8007542:	d864      	bhi.n	800760e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007544:	4b40      	ldr	r3, [pc, #256]	; (8007648 <pvPortMalloc+0x180>)
 8007546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007548:	4b3f      	ldr	r3, [pc, #252]	; (8007648 <pvPortMalloc+0x180>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800754e:	e004      	b.n	800755a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	429a      	cmp	r2, r3
 8007562:	d903      	bls.n	800756c <pvPortMalloc+0xa4>
 8007564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1f1      	bne.n	8007550 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800756c:	4b33      	ldr	r3, [pc, #204]	; (800763c <pvPortMalloc+0x174>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007572:	429a      	cmp	r2, r3
 8007574:	d04b      	beq.n	800760e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2208      	movs	r2, #8
 800757c:	4413      	add	r3, r2
 800757e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	1ad2      	subs	r2, r2, r3
 8007590:	2308      	movs	r3, #8
 8007592:	005b      	lsls	r3, r3, #1
 8007594:	429a      	cmp	r2, r3
 8007596:	d91f      	bls.n	80075d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4413      	add	r3, r2
 800759e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	f003 0307 	and.w	r3, r3, #7
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00a      	beq.n	80075c0 <pvPortMalloc+0xf8>
	__asm volatile
 80075aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	613b      	str	r3, [r7, #16]
}
 80075bc:	bf00      	nop
 80075be:	e7fe      	b.n	80075be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	1ad2      	subs	r2, r2, r3
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80075cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075d2:	69b8      	ldr	r0, [r7, #24]
 80075d4:	f000 f8f8 	bl	80077c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075d8:	4b1a      	ldr	r3, [pc, #104]	; (8007644 <pvPortMalloc+0x17c>)
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	4a18      	ldr	r2, [pc, #96]	; (8007644 <pvPortMalloc+0x17c>)
 80075e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075e6:	4b17      	ldr	r3, [pc, #92]	; (8007644 <pvPortMalloc+0x17c>)
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	4b18      	ldr	r3, [pc, #96]	; (800764c <pvPortMalloc+0x184>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d203      	bcs.n	80075fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075f2:	4b14      	ldr	r3, [pc, #80]	; (8007644 <pvPortMalloc+0x17c>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a15      	ldr	r2, [pc, #84]	; (800764c <pvPortMalloc+0x184>)
 80075f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	4b10      	ldr	r3, [pc, #64]	; (8007640 <pvPortMalloc+0x178>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	431a      	orrs	r2, r3
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	2200      	movs	r2, #0
 800760c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800760e:	f7fe ff2b 	bl	8006468 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	f003 0307 	and.w	r3, r3, #7
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00a      	beq.n	8007632 <pvPortMalloc+0x16a>
	__asm volatile
 800761c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007620:	f383 8811 	msr	BASEPRI, r3
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	60fb      	str	r3, [r7, #12]
}
 800762e:	bf00      	nop
 8007630:	e7fe      	b.n	8007630 <pvPortMalloc+0x168>
	return pvReturn;
 8007632:	69fb      	ldr	r3, [r7, #28]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3728      	adds	r7, #40	; 0x28
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	20000fbc 	.word	0x20000fbc
 8007640:	20000fc8 	.word	0x20000fc8
 8007644:	20000fc0 	.word	0x20000fc0
 8007648:	20000fb4 	.word	0x20000fb4
 800764c:	20000fc4 	.word	0x20000fc4

08007650 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d048      	beq.n	80076f4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007662:	2308      	movs	r3, #8
 8007664:	425b      	negs	r3, r3
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	4413      	add	r3, r2
 800766a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	685a      	ldr	r2, [r3, #4]
 8007674:	4b21      	ldr	r3, [pc, #132]	; (80076fc <vPortFree+0xac>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4013      	ands	r3, r2
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10a      	bne.n	8007694 <vPortFree+0x44>
	__asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	60fb      	str	r3, [r7, #12]
}
 8007690:	bf00      	nop
 8007692:	e7fe      	b.n	8007692 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00a      	beq.n	80076b2 <vPortFree+0x62>
	__asm volatile
 800769c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a0:	f383 8811 	msr	BASEPRI, r3
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	60bb      	str	r3, [r7, #8]
}
 80076ae:	bf00      	nop
 80076b0:	e7fe      	b.n	80076b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	4b11      	ldr	r3, [pc, #68]	; (80076fc <vPortFree+0xac>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4013      	ands	r3, r2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d019      	beq.n	80076f4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d115      	bne.n	80076f4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	4b0b      	ldr	r3, [pc, #44]	; (80076fc <vPortFree+0xac>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	43db      	mvns	r3, r3
 80076d2:	401a      	ands	r2, r3
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80076d8:	f7fe feb8 	bl	800644c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	4b07      	ldr	r3, [pc, #28]	; (8007700 <vPortFree+0xb0>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4413      	add	r3, r2
 80076e6:	4a06      	ldr	r2, [pc, #24]	; (8007700 <vPortFree+0xb0>)
 80076e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076ea:	6938      	ldr	r0, [r7, #16]
 80076ec:	f000 f86c 	bl	80077c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80076f0:	f7fe feba 	bl	8006468 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80076f4:	bf00      	nop
 80076f6:	3718      	adds	r7, #24
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	20000fc8 	.word	0x20000fc8
 8007700:	20000fc0 	.word	0x20000fc0

08007704 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800770a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800770e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007710:	4b27      	ldr	r3, [pc, #156]	; (80077b0 <prvHeapInit+0xac>)
 8007712:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f003 0307 	and.w	r3, r3, #7
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00c      	beq.n	8007738 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	3307      	adds	r3, #7
 8007722:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f023 0307 	bic.w	r3, r3, #7
 800772a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	4a1f      	ldr	r2, [pc, #124]	; (80077b0 <prvHeapInit+0xac>)
 8007734:	4413      	add	r3, r2
 8007736:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800773c:	4a1d      	ldr	r2, [pc, #116]	; (80077b4 <prvHeapInit+0xb0>)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007742:	4b1c      	ldr	r3, [pc, #112]	; (80077b4 <prvHeapInit+0xb0>)
 8007744:	2200      	movs	r2, #0
 8007746:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	4413      	add	r3, r2
 800774e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007750:	2208      	movs	r2, #8
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	1a9b      	subs	r3, r3, r2
 8007756:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f023 0307 	bic.w	r3, r3, #7
 800775e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	4a15      	ldr	r2, [pc, #84]	; (80077b8 <prvHeapInit+0xb4>)
 8007764:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007766:	4b14      	ldr	r3, [pc, #80]	; (80077b8 <prvHeapInit+0xb4>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2200      	movs	r2, #0
 800776c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800776e:	4b12      	ldr	r3, [pc, #72]	; (80077b8 <prvHeapInit+0xb4>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2200      	movs	r2, #0
 8007774:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	1ad2      	subs	r2, r2, r3
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007784:	4b0c      	ldr	r3, [pc, #48]	; (80077b8 <prvHeapInit+0xb4>)
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	4a0a      	ldr	r2, [pc, #40]	; (80077bc <prvHeapInit+0xb8>)
 8007792:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	4a09      	ldr	r2, [pc, #36]	; (80077c0 <prvHeapInit+0xbc>)
 800779a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800779c:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <prvHeapInit+0xc0>)
 800779e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80077a2:	601a      	str	r2, [r3, #0]
}
 80077a4:	bf00      	nop
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	200003b4 	.word	0x200003b4
 80077b4:	20000fb4 	.word	0x20000fb4
 80077b8:	20000fbc 	.word	0x20000fbc
 80077bc:	20000fc4 	.word	0x20000fc4
 80077c0:	20000fc0 	.word	0x20000fc0
 80077c4:	20000fc8 	.word	0x20000fc8

080077c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077d0:	4b28      	ldr	r3, [pc, #160]	; (8007874 <prvInsertBlockIntoFreeList+0xac>)
 80077d2:	60fb      	str	r3, [r7, #12]
 80077d4:	e002      	b.n	80077dc <prvInsertBlockIntoFreeList+0x14>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d8f7      	bhi.n	80077d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	4413      	add	r3, r2
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d108      	bne.n	800780a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	685a      	ldr	r2, [r3, #4]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	441a      	add	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	441a      	add	r2, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	429a      	cmp	r2, r3
 800781c:	d118      	bne.n	8007850 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	4b15      	ldr	r3, [pc, #84]	; (8007878 <prvInsertBlockIntoFreeList+0xb0>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	429a      	cmp	r2, r3
 8007828:	d00d      	beq.n	8007846 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	441a      	add	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	e008      	b.n	8007858 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007846:	4b0c      	ldr	r3, [pc, #48]	; (8007878 <prvInsertBlockIntoFreeList+0xb0>)
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	e003      	b.n	8007858 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	429a      	cmp	r2, r3
 800785e:	d002      	beq.n	8007866 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007866:	bf00      	nop
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	20000fb4 	.word	0x20000fb4
 8007878:	20000fbc 	.word	0x20000fbc

0800787c <__libc_init_array>:
 800787c:	b570      	push	{r4, r5, r6, lr}
 800787e:	4d0d      	ldr	r5, [pc, #52]	; (80078b4 <__libc_init_array+0x38>)
 8007880:	4c0d      	ldr	r4, [pc, #52]	; (80078b8 <__libc_init_array+0x3c>)
 8007882:	1b64      	subs	r4, r4, r5
 8007884:	10a4      	asrs	r4, r4, #2
 8007886:	2600      	movs	r6, #0
 8007888:	42a6      	cmp	r6, r4
 800788a:	d109      	bne.n	80078a0 <__libc_init_array+0x24>
 800788c:	4d0b      	ldr	r5, [pc, #44]	; (80078bc <__libc_init_array+0x40>)
 800788e:	4c0c      	ldr	r4, [pc, #48]	; (80078c0 <__libc_init_array+0x44>)
 8007890:	f000 f82e 	bl	80078f0 <_init>
 8007894:	1b64      	subs	r4, r4, r5
 8007896:	10a4      	asrs	r4, r4, #2
 8007898:	2600      	movs	r6, #0
 800789a:	42a6      	cmp	r6, r4
 800789c:	d105      	bne.n	80078aa <__libc_init_array+0x2e>
 800789e:	bd70      	pop	{r4, r5, r6, pc}
 80078a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80078a4:	4798      	blx	r3
 80078a6:	3601      	adds	r6, #1
 80078a8:	e7ee      	b.n	8007888 <__libc_init_array+0xc>
 80078aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ae:	4798      	blx	r3
 80078b0:	3601      	adds	r6, #1
 80078b2:	e7f2      	b.n	800789a <__libc_init_array+0x1e>
 80078b4:	08007ab0 	.word	0x08007ab0
 80078b8:	08007ab0 	.word	0x08007ab0
 80078bc:	08007ab0 	.word	0x08007ab0
 80078c0:	08007ab4 	.word	0x08007ab4

080078c4 <memcpy>:
 80078c4:	440a      	add	r2, r1
 80078c6:	4291      	cmp	r1, r2
 80078c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80078cc:	d100      	bne.n	80078d0 <memcpy+0xc>
 80078ce:	4770      	bx	lr
 80078d0:	b510      	push	{r4, lr}
 80078d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078da:	4291      	cmp	r1, r2
 80078dc:	d1f9      	bne.n	80078d2 <memcpy+0xe>
 80078de:	bd10      	pop	{r4, pc}

080078e0 <memset>:
 80078e0:	4402      	add	r2, r0
 80078e2:	4603      	mov	r3, r0
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d100      	bne.n	80078ea <memset+0xa>
 80078e8:	4770      	bx	lr
 80078ea:	f803 1b01 	strb.w	r1, [r3], #1
 80078ee:	e7f9      	b.n	80078e4 <memset+0x4>

080078f0 <_init>:
 80078f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f2:	bf00      	nop
 80078f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078f6:	bc08      	pop	{r3}
 80078f8:	469e      	mov	lr, r3
 80078fa:	4770      	bx	lr

080078fc <_fini>:
 80078fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fe:	bf00      	nop
 8007900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007902:	bc08      	pop	{r3}
 8007904:	469e      	mov	lr, r3
 8007906:	4770      	bx	lr
